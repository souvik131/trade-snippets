{"version":3,"file":"747.js","mappings":"uMAmBO,MAAMA,EAAgBC,IAC3B,MAAM,WAAEC,EAAU,WAAEC,EAAU,UAAEC,EAAS,UAAEC,EAAS,QAAEC,EAAO,OAAEC,EAAM,WAAEC,GAAeP,EAChFQ,GAASC,EAAAA,EAAAA,YAAWC,EAAWR,EAAYD,GACjD,OACE,kBAACU,MAAAA,CAAIC,UAAWJ,EAAOK,WACrB,kBAACC,EAAAA,OAAMA,CACLC,QAASb,EAAa,UAAY,YAClCc,KAAMT,EACNU,KAAK,KACLC,gBAAehB,EACfU,UAAWJ,EAAOW,cAClBC,QAASlB,EAAaG,EAAUF,EAChCkB,cAAaC,EAAAA,EAAQC,sBAAsBC,oBAC3CC,MAAOnB,aAAAA,EAAAA,EAAQoB,SAChB,WAGD,kBAACZ,EAAAA,OAAMA,CACLC,QAASd,EAAa,UAAY,YAClCe,KAAMT,EACNU,KAAK,KACLC,gBAAejB,EACfW,UAAWJ,EAAOmB,cAClBP,QAASnB,EAAaI,EAAUD,EAChCqB,MAAOnB,aAAAA,EAAAA,EAAQsB,QACfP,cAAaC,EAAAA,EAAQC,sBAAsBM,qBAC5C,aAODnB,EAAY,CAACoB,EAAsB5B,EAAqBD,KACrD,CACLY,WAAWkB,EAAAA,EAAAA,KAAI,CACbC,QAAS,OACTC,eAAgB,WAElBd,eAAeY,EAAAA,EAAAA,KAAI,CACjBG,aAAc,EACdC,YAAajC,OAAakC,EAAY,SAExCT,eAAeI,EAAAA,EAAAA,KAAI,CACjBG,aAAc,KAAKJ,EAAMO,MAAMC,OAAOC,WAAWT,EAAMO,MAAMC,OAAOC,YACpEC,WAAYvC,OAAamC,EAAY,U,uFCxD3C,MAAM1B,EAAaoB,IACV,CACLW,kBAAkBV,EAAAA,EAAAA,KAAI,CACpBC,QAAS,OACTC,eAAgB,SAChBS,OAAQ,WAEVC,SAASZ,EAAAA,EAAAA,KAAI,CAAEa,MAAO,QAASC,OAAQ,QAASC,QAAShB,EAAMiB,QAAQ,KACvEC,MAAMjB,EAAAA,EAAAA,KAAI,CACRC,QAAS,OACTC,eAAgB,SAChBgB,WAAY,WAEdC,MAAMnB,EAAAA,EAAAA,KAAI,CACRW,OAAQ,aASDS,EAAY,EAAGC,eAC1B,MAAM5C,GAASC,EAAAA,EAAAA,YAAWC,GACpBoB,GAAQuB,EAAAA,EAAAA,aACd,OACE,kBAAC1C,MAAAA,CAAIC,UAAWJ,EAAO0C,MACrB,kBAACvC,MAAAA,CAAIC,UAAWJ,EAAOiC,kBACrB,kBAACa,EAAAA,EAAGA,CACF1C,UAAWJ,EAAOmC,QAClBY,IACEzB,EAAM0B,OACF,2DACA,oEAIV,kBAAC7C,MAAAA,CAAIC,UAAWJ,EAAOwC,MACrB,kBAACS,EAAAA,KAAIA,CAACC,cAAc,SAASC,MAAM,UAAUC,QAAQ,QAClDR,GAAsB,uB,8JClC1B,MAAMS,EAAa,EAAGC,WAAUC,UAAS9C,OAAO,SACrD,MAAMT,GAASC,EAAAA,EAAAA,YAAWC,IACnBsD,EAAUC,IAAeC,EAAAA,EAAAA,WAAS,GACzC,OACE,kBAACvD,MAAAA,CAAIC,UAAWJ,EAAOuD,QAAS3C,QAAS,IAAM6C,GAAaD,GAAWG,aAAc,IAAMF,GAAY,IACrG,kBAACG,EAAAA,IAAGA,CACF3C,MAAOsC,EACPM,IAAKN,EACLO,KAAMN,EAAWD,EAAUQ,EAAkBR,EAAS9C,GACtDL,UAAWJ,EAAOgE,MAEpB,kBAAC1D,EAAAA,OAAMA,CACL2D,aAAW,iBACXpD,cAAaC,EAAAA,EAAQC,sBAAsBmD,oBAC3C3D,QAAQ,YACRE,KAAK,KACLL,UAAWJ,EAAOmE,aAClBvD,QAAS0C,GAET,kBAACc,EAAAA,KAAIA,CAACN,KAAK,W,EAMbO,EAA6C,CACjDC,GAAI,GACJC,GAAIC,KAAKC,MAAMC,OAAOC,WAAa,IAGrC,SAASZ,EAAkBR,EAAiB9C,GAC1C,MAAMmE,EAASrB,EAAQqB,OACvB,GAAIA,EAASP,EAAc5D,GACzB,OAAO8C,EAGT,MAAMsB,EAAkBL,KAAKC,MAA4B,GAAtBJ,EAAc5D,IAEjD,MAAO,GAAG8C,EAAQuB,UAAU,EAAGD,QAAsBtB,EAAQuB,UAAUF,EAASC,IAClF,CAEA,MAAM3E,EAAaoB,IACV,CACLiC,SAAShC,EAAAA,EAAAA,KAAI,CACXC,QAAS,OACTuD,WAAY,YACZC,IAAK1D,EAAMiB,QAAQ,KACnB0C,OAAQ,UACRC,SAAU,WAEZlB,KAAKzC,EAAAA,EAAAA,KAAI,CACP4D,qBAAsB,EACtBC,wBAAyB,EACzBC,gBAAiB/D,EAAMgE,OAAOC,UAAUC,KACxCC,OAAQ,aAAanE,EAAMgE,OAAOC,UAAUE,SAC5CtC,MAAO7B,EAAMgE,OAAOC,UAAU/C,KAC9BkD,UAAW,aACXpD,QAAShB,EAAMiB,QAAQ,IAAM,KAC7B2C,SAAU,SACVS,aAAc,aAEhBxB,cAAc5C,EAAAA,EAAAA,KAAI,CAChBqE,YAAa,IACbC,aAAc,Q,cChEb,MAAMC,EAAkB,EAAGC,WAAUzC,eAC1C,MAAMtD,GAASC,EAAAA,EAAAA,YAAWC,GAE1B,IAAK6F,GAAgC,IAApBA,EAASnB,OACxB,OAAO,KAGT,MAAMoB,EAAkBD,EAASE,QAAQ1C,GAA6B,YAAjBA,EAAQ2C,OACvDC,EAAkBJ,EAASE,QAAQ1C,GAA6B,YAAjBA,EAAQ2C,OAEvDE,EAAmB7C,IACvBD,EAASyC,EAASE,QAAQI,GAAQA,IAAQ9C,MAC1C+C,EAAAA,EAAAA,IAAqBC,EAAAA,GAAkBC,gBAAiBC,EAAAA,GAAoBD,gBAAgBE,gBAAiB,CAC3GC,sBAAuBX,EAAgBpB,QAA4B,aAAlBrB,aAAAA,EAAAA,EAAS2C,MAAqB,EAAI,GACnFU,sBAAuBT,EAAgBvB,QAA4B,aAAlBrB,aAAAA,EAAAA,EAAS2C,MAAqB,EAAI,GACnFA,KAAM3C,EAAQ2C,MACd,EAGJ,OACE,kBAAC/F,MAAAA,KACE6F,EAAgBpB,OAAS,GACxB,kBAACzE,MAAAA,CAAIC,UAAWJ,EAAO6G,mBACrB,kBAAC5D,EAAAA,KAAIA,CAAC1C,QAAQ,YAAYuG,OAAO,OAAOjG,cAAaC,EAAAA,EAAQiF,SAASgB,uBAAuB,mBAC1EhB,EAASnB,OAAS,EAAI,IAAM,IAE/C,kBAACzE,MAAAA,CAAIC,UAAWJ,EAAO+F,UACpBC,EAAgBgB,KAAKC,GACpB,kBAAC5D,EAAUA,CAACQ,IAAKoD,EAAE1D,QAASA,QAAS0D,EAAE1D,QAAS9C,KAAK,KAAK6C,SAAU,IAAM8C,EAAgBa,SAKjGd,EAAgBvB,OAAS,GACxB,kBAACzE,MAAAA,CAAIC,UAAWJ,EAAO6G,mBACrB,kBAAC5D,EAAAA,KAAIA,CAAC1C,QAAQ,YAAYuG,OAAO,OAAOjG,cAAaC,EAAAA,EAAQiF,SAASmB,uBAAuB,mBAC1Ef,EAAgBvB,OAAS,EAAI,IAAM,GAAG,KAEzD,kBAACzE,MAAAA,CAAIC,UAAWJ,EAAO+F,UACpBI,EAAgBa,KAAKC,GACpB,kBAAC5D,EAAUA,CACTQ,IAAKoD,EAAE1D,QACPA,QAAS0D,EAAE1D,QACX9C,KAAM0F,EAAgBvB,OAAS,EAAI,KAAO,KAC1CtB,SAAU,IAAM8C,EAAgBa,S,EAUhD,SAAS/G,EAAUoB,GACjB,MAAO,CACLuF,mBAAmBtF,EAAAA,EAAAA,KAAI,CACrB2D,SAAU,WAEZa,UAAUxE,EAAAA,EAAAA,KAAI,CACZC,QAAS,OACTwD,IAAK1D,EAAMiB,QAAQ,GACnBE,WAAY,SACZ0E,SAAU,SAGhB,CC1EO,MAAMC,EAAqB,KAChC,MAAMpH,GAASC,EAAAA,EAAAA,YAAWC,GAC1B,OACE,kBAACC,MAAAA,CAAIC,UAAWJ,EAAOqH,SACrB,kBAACC,IAAAA,CACCC,KAAK,sCACLnH,UAAWJ,EAAOwH,SAClBvG,MAAM,6CACNwG,OAAO,SACPC,IAAI,uBAEJ,kBAACtD,EAAAA,KAAIA,CAACN,KAAK,wBAAwB,oBAMrC5D,EAAaoB,IACV,CACL+F,SAAS9F,EAAAA,EAAAA,KAAI,CACXC,QAAS,OACTmG,WAAY,OACZ3C,IAAK1D,EAAMiB,QAAQ,GACnBqF,SAAU,WACVC,IAAKvG,EAAMiB,SAAS,KAEtBiF,UAAUjG,EAAAA,EAAAA,KAAI,CACZuG,UAAW,SACX3E,MAAO7B,EAAMgE,OAAO9C,KAAK+C,UACzBwC,SAAUzG,EAAM0G,WAAWC,UAAUF,SACrC,UAAW,CACT5E,MAAO7B,EAAMgE,OAAO9C,KAAK0F,UC/B1B,SAASC,EAAgB3I,GAC9B,MAAMQ,GAASC,EAAAA,EAAAA,YAAWC,GAC1B,OACE,oCACE,kBAACkI,EAAAA,MAAKA,CAAChI,UAAWJ,EAAOqI,MAAOC,SAAU,OAAQrH,MAAO,2BAA4BqC,SAAU9D,EAAM8D,UACnG,kBAACnD,MAAAA,KAAI,gBACW,IACd,kBAACmH,IAAAA,CACClH,UAAU,gBACVqH,OAAO,SACPF,KAAK,qFACLG,IAAI,cACL,mBAEG,WACK,IACT,kBAACJ,IAAAA,CACClH,UAAU,gBACVqH,OAAO,SACPF,KAAK,mDACLG,IAAI,cACL,kBAEG,IACH,kBAACa,KAAAA,MAAK,uCAC8B,IACrC,kBAACjB,IAAAA,CAAElH,UAAU,gBAAgBqH,OAAO,SAASF,KAAK,sCAAsCG,IAAI,cAAa,oBAEpG,IAAI,uBACY,IACrB,kBAACJ,IAAAA,CACClH,UAAU,gBACVqH,OAAO,SACPF,KAAK,2EACLG,IAAI,cACL,UAEG,MAMd,CAEA,SAASxH,EAAUoB,GACjB,MAAO,CACL+G,OAAO9G,EAAAA,EAAAA,KAAI,CACTiH,KAAM,SAGZ,C,oBCxCO,MAAMC,UAAqCC,EAAAA,I,EAIlD,UAA8C,MAAEC,I,IAI1CA,EAKAA,EARJ,MAAMC,EAAoBC,EAAAA,GAAWC,aAAaH,GAAOjF,WACzD,IAAIqF,EAAYH,EAAkBG,UAalC,OAXuB,QAAnBJ,EAAAA,EAAMK,MAAM9H,eAAZyH,IAAAA,OAAAA,EAAAA,EAAqB/D,UACvBmE,EAAYH,EAAkBG,UAAU9C,QAAQgD,I,IAC9CN,EAA8BM,E,OAAX,QAAnBN,EAAAA,EAAMK,MAAM9H,eAAZyH,IAAAA,OAAAA,EAAAA,EAAqBO,SAA4B,QAAnBD,EAAAA,EAASD,MAAMlF,YAAfmF,IAAAA,EAAAA,EAAuB,GAAG,MAGrC,QAAnBN,EAAAA,EAAMK,MAAM5H,eAAZuH,IAAAA,OAAAA,EAAAA,EAAqB/D,UACvBmE,EAAYH,EAAkBG,UAAU9C,QACrCgD,I,IAAcN,EAA8BM,E,QAAX,QAAnBN,EAAAA,EAAMK,MAAM5H,eAAZuH,IAAAA,OAAAA,EAAAA,EAAqBO,SAA4B,QAAnBD,EAAAA,EAASD,MAAMlF,YAAfmF,IAAAA,EAAAA,EAAuB,SAKtE,oCACGF,EAAU/B,KAAKiC,GACd,kBAACE,EAAAA,GAA0BA,CAACtF,IAAKoF,EAASD,MAAMnF,IAAKoF,SAAUA,EAAUG,OAAQT,EAAMK,MAAMI,WAIrG,G,EAzBgBC,e,EADHZ,G,sOCIb,MAAMa,EAA4B,GAAGC,EAAAA,+BAGxBC,EAAiC,gBACjCC,EAAgC,gBAKtC,MAAMC,UAAoBhB,EAAAA,GA8GxBiB,UAAAA,GACLC,KAAKC,SAAS,CACZC,mBAAoB,IAAIC,EAAAA,EAAyB,CAAC,IAEtD,CAEOC,OAAAA,GACLJ,KAAKC,SAAS,CACZI,oBAAoB,IAEtBC,aAAaC,QAAQb,EAA2B,OAClD,CAxHAc,WAAAA,CAAYpB,G,QACVqB,O,wUAAM,IACDrB,G,WAAAA,CACHiB,qBAAsBC,aAAaI,QAAQhB,K,gVAG7CM,KAAKW,qBAAqBX,KAAKD,WAAWa,KAAKZ,MACjD,EAoHF,SAAS1J,EAAUoB,GACjB,MAAO,CACLmJ,iBAAiBlJ,EAAAA,EAAAA,KAAI,CACnB,gBAAiB,CACfyD,IAAK,OACL0F,MAAO,oBAEP,CAACpJ,EAAMqJ,YAAYC,KAAK,OAAQ,CAC9BC,cAAe,UAIjB,sBAAuB,CACrBrC,KAAM,WACNhH,QAAS,mBAIfsJ,eAAevJ,EAAAA,EAAAA,KAAI,CACjBwJ,SAAU,EACVvJ,QAAS,OACTwJ,UAAW,OACXH,cAAe,WAEjBxK,WAAWkB,EAAAA,EAAAA,KAAI,CACbwJ,SAAU,EACVvJ,QAAS,OACTwJ,UAAW,OACXH,cAAe,SACfvI,QAAShB,EAAMiB,QAAQ,GACvB0I,SAAU,UAEZC,MAAM3J,EAAAA,EAAAA,KAAI,CACRwJ,SAAU,EACVvJ,QAAS,OACTqJ,cAAe,SACf7F,IAAK1D,EAAMiB,QAAQ,KAErB4I,2BAA2B5J,EAAAA,EAAAA,KAAI,CAC7BmJ,MAAO,qBACPlJ,QAAS,OACTwD,IAAK1D,EAAMiB,QAAQ,GACnBd,eAAgB,gBAChBgB,WAAY,eAEd2I,sBAAsB7J,EAAAA,EAAAA,KAAI,CACxB,UAAW,CACTC,QAAS,QAEXkJ,MAAO,eACPlJ,QAAS,OAETwD,IAAK1D,EAAMiB,QAAQ,GACnBd,eAAgB,gBAChBgB,WAAY,aACZmD,YAAatE,EAAMiB,QAAQ,KAE7B8I,mBAAmB9J,EAAAA,EAAAA,KAAI,CACrBmJ,MAAO,oBACPlJ,QAAS,OACTqJ,cAAe,SACf7F,IAAK1D,EAAMiB,QAAQ,KAErB+I,SAAS/J,EAAAA,EAAAA,KAAI,CACXmJ,MAAO,UACPlJ,QAAS,SAEX+J,aAAahK,EAAAA,EAAAA,KAAI,CACfmJ,MAAO,cACPlJ,QAAS,OACTwD,IAAK1D,EAAMiB,QAAQ,GACnBH,MAAO,mBACP+E,SAAU,OACV1E,WAAY,WACZ,8FAA+F,CAC7F+I,WAAY,UAKd,wBAAyB,CAEvB,UAAW,CAET,UAAW,CACTrE,SAAU,OAEV,UAAW,CACT8D,SAAU,QAGV,UAAW,CAETzC,KAAM,WAGN,iBAAkB,CAChBA,KAAM,iBAQlB,2CAA4C,CAC1C,0CAA2C,CACzChH,QAAS,QAEX,2CAA4C,CAC1CmG,WAAY,IAIhB,4BAA+B,CAC7BlC,OAAQ,EACRjE,QAAS,OACTY,MAAO,EACPE,QAAS,EACTJ,OAAQ,KAGZuJ,iBAAiBlK,EAAAA,EAAAA,KAAI,CACnBmJ,MAAO,kBACPlJ,QAAS,OACTqJ,cAAe,SACfa,UAAWpK,EAAMiB,QAAQ,QAE3BoJ,UAAUpK,EAAAA,EAAAA,KAAI,CACZC,QAAS,OACTwD,IAAK1D,EAAMiB,QAAQ,KAErBiF,UAAUjG,EAAAA,EAAAA,KAAI,CACZqK,UAAW,QAEbC,YAAYtK,EAAAA,EAAAA,KAAI,CACduK,IAAK,CAAEC,UAAW,oBAGxB,CA7PE,EAVWrC,EAUJL,aAAY,EAAGV,YACpB,MAAMqD,EAAanD,EAAAA,GAAWoD,YAAYtD,EAAOuD,KAC3C,SAAEP,EAAQ,aAAEQ,EAAY,SAAEpG,GAAaiG,EAAWtI,YAClD,mBAAEuG,EAAkB,mBAAEH,GAAuBnB,EAAMjF,WAEzD,IAAKyI,EAEH,OADAC,EAAAA,EAAOC,KAAK,6BACL,KAGT,MAAMrM,GAASC,EAAAA,EAAAA,YAAWC,GAC1B,OACE,kBAACC,MAAAA,CAAIC,UAAWJ,EAAO8K,eACrB,kBAAC3K,MAAAA,CAAIC,UAAWJ,EAAOK,YACnB4J,GACA,kBAAC9B,EAAeA,CACd7E,SAAU,KACRqF,EAAMqB,SAAS,IAIrB,kBAAC7J,MAAAA,CAAIC,UAAWJ,EAAOqL,mBACrB,oCAEGM,GACC,kBAACxL,MAAAA,CAAIC,UAAWJ,EAAOmL,2BACrB,kBAAChL,MAAAA,CAAIC,UAAWJ,EAAOuL,aACrB,kBAACpL,MAAAA,CAAIC,WAAWkM,EAAAA,EAAAA,IAAGtM,EAAOsL,QAAStL,EAAOyK,kBACvCkB,EAAS3E,KAAKuF,GACNA,aAAmBC,EAAAA,GACxB,kBAACD,EAAQlD,UAAS,CAACxF,IAAK0I,EAAQvD,MAAMnF,IAAK8E,MAAO4D,IAChD,SAIV,kBAACpM,MAAAA,CAAIC,UAAWJ,EAAOyL,iBACrB,kBAACrE,EAAkBA,MACnB,kBAACjH,MAAAA,CAAIC,UAAWJ,EAAO2L,UACpBA,EAAS3E,KAAKuF,GACJA,aAAmB9D,GACxB8D,aAAmBC,EAAAA,GAEnB,KADF,kBAACD,EAAQlD,UAAS,CAACxF,IAAK0I,EAAQvD,MAAMnF,IAAK8E,MAAO4D,SAS9D,kBAACpM,MAAAA,CAAIC,UAAWJ,EAAOoL,sBACpBO,GACCA,EAAS3E,KAAKuF,GACLA,EAAQvD,MAAMnF,MAAQ2F,EAC3B,kBAACrJ,MAAAA,CAAIC,UAAWJ,EAAOuL,aACrB,kBAACpL,MAAAA,CAAIC,UAAWJ,EAAOsL,SACrB,kBAACiB,EAAQlD,UAAS,CAACxF,IAAK0I,EAAQvD,MAAMnF,IAAK8E,MAAO4D,MAGpD,QAKV,kBAACpM,MAAAA,CAAIC,UAAWJ,EAAOoL,sBACrB,kBAACtF,EAAeA,CACdC,SAAUA,EACVzC,SAAWyC,I,IAA+B4C,E,OAAY,QAAZA,EAAAA,EAAM8D,cAAN9D,IAAAA,OAAAA,EAAAA,EAAckB,SAAS,CAAE9D,YAAS,KAKhF,kBAAC5F,MAAAA,CAAIC,UAAWJ,EAAOoL,sBACpBtB,GAAsB,kBAACA,EAAmBT,UAAS,CAACV,MAAOmB,KAI9D,kBAAC3J,MAAAA,CAAIC,UAAWJ,EAAOoL,sBACpBO,GACC,kBAACxL,MAAAA,CAAIC,UAAWJ,EAAOuL,aACrB,kBAACpL,MAAAA,CAAIC,UAAWJ,EAAOsL,SACpBK,EAAS3E,KAAKuF,GACNA,EAAQvD,MAAMnF,MAAQ4F,EAC3B,kBAAC8C,EAAQlD,UAAS,CAACxF,IAAK0I,EAAQvD,MAAMnF,IAAK8E,MAAO4D,IAChD,YAUlB,kBAACpM,MAAAA,CAAIC,UAAWJ,EAAOkL,MAAOiB,GAAgB,kBAACA,EAAa9C,UAAS,CAACV,MAAOwD,M,qcCxGhF,MAAMO,EAAAA,W,MAA0C,aACrDzG,EACA0G,EACAC,EACAC,EACA5D,GAKA,MAAM6D,QAA8BC,EAAAA,EAAAA,oBAAmBC,KAAIC,EAAAA,EAAAA,IAAcL,IAEzE,KAAME,aAAiCI,EAAAA,uBAErC,MADAd,EAAAA,EAAOe,MAAM,IAAIC,MAAM,8CACjB,IAAIA,MAAM,uBAIlB,MAEMC,EAFiBP,EAEiBO,iBAExC,IAAIC,EAA4B,GAEhC,GAAID,GAAoBA,EAAiBE,yBAA0B,CACjE,MAAMC,EAA2C,CAC/Cb,OACAc,MAAO,IACPZ,YACAa,YAAY,GAGRC,EAA6C,CACjDC,gBAAgB,GAGlB,IACE,IAAIC,QAAgBR,EAAiBE,yBAAyBtH,EAAOpC,IAAK2J,EAASG,GAGnF,GAAIE,IAAWC,EAAAA,EAAAA,SAAQD,GAAU,CAC/B,GAAI5E,IAAa8E,EAAAA,GAAY,CAC3B,MAAMC,GAAeC,EAAAA,EAAAA,IAAyBhI,EAAQgD,GACtD,MAAO,CACLiF,SAAS,EACTZ,OAAQO,EAAQ7G,KAAKmH,IAAO,CAC1B3L,KAAM2L,EACNC,MAAOC,KAAKC,UAAU,CACpBF,MAAOD,EACPI,OAAQP,EAAaO,aAI7B,CACEjB,EAASO,EAAQ7G,KAAKwH,IAAO,CAAEhM,KAAMgM,KAEzC,MACElB,EAAS,EAEb,CAAE,MAAOmB,GACPrC,EAAAA,EAAOe,MAAMsB,EAAG,CACdC,IAAK,+HAEPpB,EAAS,EACX,CACF,MACElB,EAAAA,EAAOC,KACL,2IAEFiB,EAAS,GAGX,MAAO,CAAEY,SAAS,EAAMZ,SAC1B,I,gBAxEErH,EACA0G,EACAC,EACAC,EACA5D,G,gCALWyD,GA2EN,SAAeiC,EACpB1F,EACAhD,G,OAFoB0I,GAAAA,MAAAA,KAAAA,U,UAAAA,K,OAAAA,GAAf,aACL1F,EACAhD,GAKA,MAAM2I,QAAoB7B,EAAAA,EAAAA,oBAAmBC,KAAIC,EAAAA,EAAAA,IAAchE,IAC/D,KAAM2F,aAAuB1B,EAAAA,uBAE3B,MADAd,EAAAA,EAAOe,MAAM,IAAIC,MAAM,8CACjB,IAAIA,MAAM,uBAElB,MAAMyB,EAAaD,EAEnB,GAAIC,GAAcA,EAAWC,aAAc,CAEzC,MAAMxD,GAAUyD,EAAAA,EAAAA,IAAe9F,GAAUhD,QAAQ+I,KAA4B,MAApB/I,EAAOgJ,UAAoBD,EAAEnL,MAAQoC,EAAOpC,OAE/F2J,EAAoD,CACxD3J,IAAKoC,EAAOpC,IACZyH,WAEF,IAAIuC,QAAgBgB,EAAWC,aAAatB,GAE5C,IAAIM,EAAAA,EAAAA,SAAQD,GAAU,C,IAWlBqB,EAVFrB,EAAUA,EAAQ5H,QAAQkJ,IAEhBlG,EAASD,MAAMsC,QACpBrF,QAAQ+I,GAAMA,EAAEnL,MAAQoC,EAAOpC,MAC/BuL,MAAMJ,GAEEA,EAAEC,WAAaI,EAAAA,EAASC,OAASN,EAAEZ,QAAUe,EAAO3M,SAGjE,MAAM+M,GAAsBC,EAAAA,EAAAA,IACc,QAAxCN,GAAAA,EAAAA,EAAAA,IAAsBjG,GAAUwG,kBAAhCP,IAAAA,OAAAA,EAAAA,EAA4CQ,WAC5CzJ,EAAOpC,KAEH8L,EAAoB,IAAIC,IAAIL,GAC9BA,EAAoB3K,QACtBiJ,EAAQgC,MAAK,CAACvI,EAAGwI,KACPH,EAAkBI,IAAID,EAAEtN,MAAQ,GAAK,IAAMmN,EAAkBI,IAAIzI,EAAE9E,MAAQ,GAAK,IAG9F,CAEA,MAAO,CAAE0L,SAAS,EAAMZ,OAAQO,EAClC,CAEE,OADAzB,EAAAA,EAAOe,MAAM,IAAIC,MAAM,yDAChB,CAAEc,SAAS,EAAMZ,OAAQ,GAEpC,KAnDsBqB,MAAAA,KAAAA,U,qJC/Ff,SAAeqB,GAAyB/G,G,OAAzB+G,GAAAA,MAAAA,KAAAA,U,UAAAA,K,eAAf,UAAwC/G,GAI7C,MAAM2F,QAAoB7B,EAAAA,EAAAA,oBAAmBC,KAAIC,EAAAA,EAAAA,IAAchE,IAC/D,KAAM2F,aAAuB1B,EAAAA,uBAE3B,MADAd,EAAAA,EAAOe,MAAM,IAAIC,MAAM,4CACjB,IAAIA,MAAM,uBAElB,MAAMyB,EAAaD,EAEnB,GAAIC,GAAcA,EAAWoB,WAAY,CACvC,MAEMzC,EAAkD,CACtDlC,SAHcyD,EAAAA,EAAAA,IAAe9F,IAMzBiH,QAAgBrB,EAAWoB,WAAWzC,GAEtC2C,GAD4BC,MAAMtC,QAAQoC,GAAWA,EAAU,IACvCjK,QAAQpC,IAASwM,GAAAA,GAAiBnH,SAASrF,EAAIrB,QAE7E,MAAO,CAAE0L,SAAS,EAAMZ,OAAQ6C,EAClC,CAEE,OADA/D,EAAAA,EAAOe,MAAM,IAAIC,MAAM,uDAChB,CAAEc,SAAS,EAAMZ,OAAQ,GAEpC,EA3BsB0C,G,gLAAAA,GAAAA,MAAAA,KAAAA,U,gBCarB,mB,sGA6CD,IAAIM,GAA8B,CAChC,EAAG,YACH,EAAG,MACH,GAAI,QACJ,GAAI,QACJ,GAAI,OACJ,GAAI,MACJ,GAAI,WACJ,GAAI,MACJ,GAAI,QACJ,GAAI,SACJ,GAAI,WACJ,GAAI,MACJ,GAAI,OACJ,GAAI,OACJ,GAAI,KACJ,GAAI,QACJ,GAAI,OACJ,GAAI,MACJ,GAAI,MACJ,GAAI,OACJ,GAAI,OACJ,IAAK,QASHC,GAAsC,CACxC,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,KACL,IAAK,IACL,IAAK,KAWHC,GAAoC,CACtC,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACLC,EAAG,IACH,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACLC,EAAG,IACH,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,MAOHC,GAA0C,CAC5CC,OAAQ,MACRC,QAAS,OACTC,OAAQ,QACRC,OAAQ,MACRC,KAAM,IACNC,IAAK,uBAAuBC,KAAKC,UAAUC,UAAY,OAAS,QAQ9DC,GAA6C,KAMjD,IAAK,IAAIC,EAAI,EAAGA,EAAI,KAAMA,EACxBhB,GAAI,IAAMgB,GAAK,IAAMA,EAMvB,IAAK,IAAIA,EAAI,EAAGA,GAAK,IAAKA,EAMxBhB,GAAIgB,EAAI,IAAMA,EAAE5B,WAMlB,SAAS6B,GAAmBC,GAE1B,GAAmB,aAAfA,EAAMtL,KAAqB,CAC7B,IAAIuL,EAAYC,OAAOC,aAAaH,EAAMI,OAe1C,OAJKJ,EAAMK,WACTJ,EAAYA,EAAUK,eAGjBL,CACT,CAGA,OAAInB,GAAIkB,EAAMI,OACLtB,GAAIkB,EAAMI,OAGfrB,GAAYiB,EAAMI,OACbrB,GAAYiB,EAAMI,OAQpBF,OAAOC,aAAaH,EAAMI,OAAOE,aAC1C,CA6DA,SAASC,GAAWlO,GAClB,MAAe,UAARA,GAA2B,SAARA,GAA0B,QAARA,GAAyB,SAARA,CAC/D,CA4BA,SAASmO,GAAenO,EAAaoO,EAAqBC,GAaxD,OAVKA,IACHA,EA1BJ,WACE,IAAKb,GAAa,CAChBA,GAAc,CAAC,EACf,IAAK,IAAIxN,KAAOyM,GAAK,CACnB,MAAM6B,EAAYC,SAASvO,EAAK,IAG5BsO,EAAY,IAAMA,EAAY,KAI9B7B,GAAI+B,eAAexO,KACrBwN,GAAYf,GAAIzM,IAAQA,EAE5B,CACF,CACA,OAAOwN,EACT,CASaiB,GAAgBzO,GAAO,UAAY,YAK/B,aAAXqO,GAAyBD,EAAUrN,SACrCsN,EAAS,WAGJA,CACT,CAiBA,SAASK,GAAWC,EAAqBN,GACvC,IAAIO,EACA5O,EACAyN,EACAW,EAAY,GAMhB,IAFAQ,EApBF,SAAwBD,GACtB,MAAoB,MAAhBA,EACK,CAAC,MAGVA,EAAcA,EAAYtE,QAAQ,SAAU,UACzBwE,MAAM,IAC3B,CAaSC,CAAeH,GAEjBlB,EAAI,EAAGA,EAAImB,EAAK7N,SAAU0M,EAC7BzN,EAAM4O,EAAKnB,GAGPX,GAAgB9M,KAClBA,EAAM8M,GAAgB9M,IAMpBqO,GAAqB,aAAXA,GAAyB1B,GAAU3M,KAC/CA,EAAM2M,GAAU3M,GAChBoO,EAAUW,KAAK,UAIbb,GAAWlO,IACboO,EAAUW,KAAK/O,GAInB,IAAKA,EACH,MAAM,IAAIuJ,MAAM,qBAOlB,MAAO,CACLvJ,IAAKA,EACLoO,UAAWA,EACXC,OALFA,EAASF,GAAenO,EAAKoO,EAAWC,GAO1C,CAEA,SAASW,GAAUzP,EAAiD0P,GAClE,OAAgB,OAAZ1P,GAAoBA,IAAY2P,WAIhC3P,IAAY0P,GAITD,GAAUzP,EAAQ4P,WAAYF,GACvC,CCnZO,MAAMG,GAAY,IDqZlB,MA0CL7I,WAAAA,CAAY8I,GAzCZzL,GAAAA,KAAAA,cAAAA,GAKA0L,GAAAA,KAAAA,aAA6C,CAAC,GAK9CC,GAAAA,KAAAA,aAAuC,CAAC,GAMxCC,GAAAA,KAAAA,kBAA0C,CAAC,GAK3CC,GAAAA,KAAAA,mBAAkC1R,GAKlC2R,GAAAA,KAAAA,oBAAqC,GAKrCC,GAAAA,KAAAA,uBAAsB,GAMtBC,GAAAA,KAAAA,uBAAwC,GAExCC,GAAAA,KAAAA,mBAA4C,CAAC,GAyB7C,QAAQC,mBAAmBC,IACzBA,EAAaA,GAAc,CAAC,EAE5B,IACE/P,EADEgQ,GAAkB,EAGtB,IAAKhQ,KAAO+F,KAAKyJ,gBACXO,EAAW/P,GACbgQ,GAAkB,EAGpBjK,KAAKyJ,gBAAgBxP,GAAO,EAGzBgQ,IACHjK,KAAK6J,qBAAsB,EAC7B,IAOF,QAAQK,eAAc,CACpBrC,EACAQ,EACAT,EACAuC,EACAvB,EACAwB,KAEA,IAAI1C,EACA2C,EACAC,EAAU,GACVhC,EAASV,EAAMtL,KAGnB,IAAK0D,KAAKuJ,WAAW1B,GACnB,MAAO,GAUT,IANe,UAAXS,GAAsBH,GAAWN,KACnCQ,EAAY,CAACR,IAKVH,EAAI,EAAGA,EAAI1H,KAAKuJ,WAAW1B,GAAW7M,SAAU0M,EAKnD,GAJA2C,EAAWrK,KAAKuJ,WAAW1B,GAAWH,IAIjCyC,IAAgBE,EAASE,KAAOvK,KAAKyJ,gBAAgBY,EAASE,OAASF,EAASD,QAMjF9B,IAAW+B,EAAS/B,SAYV,aAAZ,IAA2BV,EAAM4C,UAAY5C,EAAM6C,UAxTnCC,EAyTDrC,EAzTuBsC,EAyTZN,EAAShC,UAxTlCqC,EAAWzE,OAAO2E,KAAK,OAASD,EAAW1E,OAAO2E,KAAK,OAyTxD,CAMA,IAAIC,GAAeV,GAAgBE,EAASS,QAAUlC,EAClDmC,EAAiBZ,GAAgBE,EAASE,MAAQJ,GAAgBE,EAASD,QAAUA,GACrFS,GAAeE,IACjB/K,KAAKuJ,WAAW1B,GAAWmD,OAAOtD,EAAG,GAGvC4C,EAAQtB,KAAKqB,EACf,CAvUN,IAAwBK,EAAsBC,EA0U1C,OAAOL,CAAO,IAYhB,QAAQW,iBAAgB,CAACZ,EAAoBxF,EAAkBiG,EAAeI,KAE5E,MAAMrN,EAASgH,EAAEhH,QAAUgH,EAAEsG,WAxTjC,IAAwBvD,EAyThB/J,GAAUA,aAAkBuN,aAAepL,KAAKqL,aAAaxG,EAAGhH,EAAQiN,EAAOI,KAIxD,IAAvBb,EAASxF,EAAGiG,MA7TIlD,EA8TH/C,GA7TTyG,eACR1D,EAAM0D,iBAIR1D,EAAM2D,aAAc,EAMtB,SAAyB3D,GACnBA,EAAM4D,gBACR5D,EAAM4D,kBAIR5D,EAAM6D,cAAe,CACvB,CA4SMD,CAAgB3G,GAClB,IAMF,QAAQ6G,cAAa,CAAC7D,EAAmBQ,EAAqBxD,KAC5D,IACI6C,EADAiE,EAAY3L,KAAKkK,YAAYrC,EAAWQ,EAAWxD,GAEnDmF,EAAqC,CAAC,EACtC4B,EAAW,EACXC,GAA4B,EAGhC,IAAKnE,EAAI,EAAGA,EAAIiE,EAAU3Q,SAAU0M,EAAG,C,IAELiE,EAD5BA,EAAUjE,GAAG6C,MACfqB,EAAWhR,KAAKkR,IAAIF,EAA4B,QAAlBD,EAAAA,EAAUjE,GAAG0C,aAAbuB,IAAAA,EAAAA,EAAsB,GAExD,CAGA,IAAKjE,EAAI,EAAGA,EAAIiE,EAAU3Q,SAAU0M,EAAG,CAMrC,MAAM6C,EAAMoB,EAAUjE,GAAG6C,IACzB,GAAIA,EAAJ,CASE,GAAIoB,EAAUjE,GAAG0C,QAAUwB,EACzB,SAGFC,GAA4B,EAG5B7B,EAAWO,GAAO,EAClBvK,KAAKiL,cAAcU,EAAUjE,GAAG2C,SAAUxF,EAAG8G,EAAUjE,GAAGoD,MAAOP,GAKjE,MAAMwB,EAAoBxB,EAAIyB,YAAYnE,GACpCoE,EAAiB1B,EAAI2B,MAAM,EAAGH,GACpC,IAAK,MAAOxB,EAAKH,KAAU+B,OAAOC,QAAQpM,KAAKyJ,iBACzCW,EAAQ,GAAKG,EAAI8B,WAAWJ,KAC9BjC,EAAWO,GAAO,EAKxB,MAIKsB,GACH7L,KAAKiL,cAAcU,EAAUjE,GAAG2C,SAAUxF,EAAG8G,EAAUjE,GAAGoD,MAE9D,C,IAIuB,EAAvB,IAAK,MAAMT,KAAsC,QAA1B,EAAArK,KAAKuJ,WAAW1B,UAAhB,QAA8B,GAC/CwC,EAAS/B,SAAWzD,EAAEvI,MAAQ+N,EAASE,KAA0B,IAAnBF,EAASD,QACzDJ,EAAWK,EAASE,KAAO,GAyB/B,IAAI+B,EAAgC,aAAXzH,EAAEvI,MAAuB0D,KAAK4J,oBACnD/E,EAAEvI,OAAS0D,KAAK6J,qBAAwB1B,GAAWN,IAAeyE,GACpEtM,KAAK+J,gBAAgBC,GAGvBhK,KAAK4J,oBAAsBiC,GAAwC,YAAXhH,EAAEvI,IAAkB,IAM9E,QAAQiQ,mBAAmBC,IACzB,KAAMA,aAAoBC,eACxB,MAAM,IAAIjJ,MAAM,8BAElB,MAAMoE,EAAuB4E,EAG7B,GAAI5E,EAAM8E,OACR,OAKyB,iBAAhB9E,EAAMI,QAEfJ,EAAMI,MAAQJ,EAAM+E,SAGtB,IAAI9E,EAAYF,GAAmBC,GAG9BC,IAKc,UAAfD,EAAMtL,MAAoB0D,KAAK2J,mBAAqB9B,EAKxD7H,KAAK4M,UAAU/E,EApenB,SAAwBD,GACtB,IAAIS,EAAY,GAkBhB,OAhBIT,EAAMK,UACRI,EAAUW,KAAK,SAGbpB,EAAMiF,QACRxE,EAAUW,KAAK,OAGbpB,EAAM6C,SACRpC,EAAUW,KAAK,QAGbpB,EAAM4C,SACRnC,EAAUW,KAAK,QAGVX,CACT,CAgd8ByE,CAAelF,GAAQA,GAJ/C5H,KAAK2J,kBAAmB,EAI6B,IASzD,QAAQoD,uBAAsB,KAC5BC,aAAahN,KAAK0J,aAClB1J,KAAK0J,YAAcuD,WAAWjN,KAAK+J,gBAAiB,IAAK,IAM3D,QAAQmD,iBAAgB,CAACpC,EAAejC,EAAgBwB,EAA6B/B,KAGnFtI,KAAKyJ,gBAAgBqB,GAAS,EAM9B,MAAMqC,EAAqBC,GAClB,KACLpN,KAAK6J,oBAAsBuD,IACzBpN,KAAKyJ,gBAAgBqB,GACvB9K,KAAK+M,qBAAqB,EAQxBM,EAAqBxI,IACzB7E,KAAKiL,cAAcZ,EAAUxF,EAAGiG,GAKjB,UAAXxC,IACFtI,KAAK2J,iBAAmBhC,GAAmB9C,IAK7C7E,KAAK+M,qBAAqB,EAY5B,IAAK,IAAIrF,EAAI,EAAGA,EAAImB,EAAK7N,SAAU0M,EAAG,CACpC,IACI4F,EADU5F,EAAI,IAAMmB,EAAK7N,OACGqS,EAAoBF,EAAkB7E,GAAUK,GAAWE,EAAKnB,EAAI,IAAIY,QACxGtI,KAAKuN,YAAY1E,EAAKnB,GAAI4F,EAAiBhF,EAAQwC,EAAOpD,EAC5D,KAMF,QAAQ6F,eAAc,CACpB3E,EACAyB,EACA/B,EACA6B,EACAC,KAGApK,KAAKwJ,WAAWZ,EAAc,IAAMN,GAAU+B,EAK9C,IACImD,EADAtC,GAFJtC,EAAcA,EAAYtE,QAAQ,OAAQ,MAEfwE,MAAM,KAKjC,GAAIoC,EAASlQ,OAAS,EAEpB,YADAgF,KAAKkN,cAActE,EAAasC,EAAUb,EAAU/B,GAItDkF,EAAO7E,GAAWC,EAAaN,GAI/BtI,KAAKuJ,WAAWiE,EAAKvT,KAAO+F,KAAKuJ,WAAWiE,EAAKvT,MAAQ,GAGzD,MAAMwT,EAAY,CAAEnR,KAAMkR,EAAKlF,OAAQkC,SAAS,EAAOC,SAAS,GAChEzK,KAAKkK,YAAYsD,EAAKvT,IAAKuT,EAAKnF,UAAWoF,EAAWtD,EAAcvB,EAAawB,GAEjF,MAAMsD,EAA6B,CACjCrD,SAAUA,EACVhC,UAAWmF,EAAKnF,UAChBC,OAAQkF,EAAKlF,OACbiC,IAAKJ,EACLC,MAAOA,EACPU,MAAOlC,GAST5I,KAAKuJ,WAAWiE,EAAKvT,KAAKkQ,EAAe,UAAY,QAAQuD,EAAa,IAM5E,QAAQC,iBAAgB,CAACC,EAAwBvD,EAA6B/B,KAC5E,IAAK,IAAIZ,EAAI,EAAGA,EAAIkG,EAAa5S,SAAU0M,EACzC1H,KAAKuN,YAAYK,EAAalG,GAAI2C,EAAU/B,EAC9C,IAYF1H,GAAAA,KAAAA,QAAO,CAACiI,EAAyBwB,EAA6B/B,KAC5DO,EAAOA,aAAgBrC,MAAQqC,EAAO,CAACA,GACvC7I,KAAK2N,cAAc9E,EAAMwB,EAAU/B,GAC5BuF,QAgBTC,GAAAA,KAAAA,UAAS,CAACjF,EAAyBP,IAC1BtI,KAAKY,KAAKiI,GAAM,WAAa,GAAGP,KAKzCyF,GAAAA,KAAAA,cAAa,CAAClF,EAAyBwB,EAA6B/B,KAGlE,GAFAtI,KAAKY,KAAKiI,EAAMwB,EAAU/B,GAEtBO,aAAgBrC,MAClB,IAAK,IAAIkB,EAAI,EAAGA,EAAImB,EAAK7N,OAAQ0M,IAC/B1H,KAAK8J,iBAAiBjB,EAAKnB,KAAM,OAKrC1H,KAAK8J,iBAAiBjB,IAAQ,CAAI,IAKpCmF,GAAAA,KAAAA,gBAAe,CAACnF,EAAyBP,KAGvC,GAFAtI,KAAK8N,OAAOjF,EAAMP,GAEdO,aAAgBrC,MAClB,IAAK,IAAIkB,EAAI,EAAGA,EAAImB,EAAK7N,OAAQ0M,IAC/B1H,KAAK8J,iBAAiBjB,EAAKnB,KAAM,OAKrC1H,KAAK8J,iBAAiBjB,IAAQ,CAAK,IAMrCoF,GAAAA,KAAAA,WAAU,CAACpF,EAAcP,KACvB,IAAIuF,EAAO7N,KAIX,OAHI6N,EAAKrE,WAAWX,EAAO,IAAMP,IAC/BuF,EAAKrE,WAAWX,EAAO,IAAMP,GAAQ,CAAC,EAAGO,GAEpCgF,CAAAA,IAQTK,GAAAA,KAAAA,SAAQ,KACNlO,KAAKuJ,WAAa,CAAC,EACnBvJ,KAAKwJ,WAAa,CAAC,EACZxJ,QAMTqL,GAAAA,KAAAA,gBAAe,CAACxG,EAAUrL,EAAsBsR,EAAeI,KAE7D,GAAIlL,KAAK8J,iBAAiBgB,IAAWI,GAAYlL,KAAK8J,iBAAiBoB,GACrE,OAAO,EAIT,IAAK,IAAM1R,EAAQhD,UAAY,KAAK2X,QAAQ,gBAAkB,EAC5D,OAAO,EAGT,GAAIlF,GAAUzP,EAASwG,KAAKnC,QAC1B,OAAO,EAST,GAAI,iBAAkBgH,GAA+B,mBAAnBA,EAAEuJ,aAA6B,CAE/D,IAAIC,EAAqBxJ,EAAEuJ,eAAe,GACtCC,IAAuBxJ,EAAEhH,QAAUwQ,aAA8BjD,cACnE5R,EAAU6U,EAEd,CAGA,OAAOC,QACe,UAApB9U,EAAQ+U,SACc,WAApB/U,EAAQ+U,SACY,aAApB/U,EAAQ+U,SACP,sBAAuB/U,GAAWA,EAAQgV,kBAAkB,IAOnE5B,GAAAA,KAAAA,aAAoC,IAAI6B,IAC/BzO,KAAK0L,cAAc+C,KAM5BC,GAAAA,KAAAA,eAAeC,IACb,IAAK,IAAI1U,KAAO0U,EACVA,EAAOlG,eAAexO,KACxByM,GAAIzM,GAAO0U,EAAO1U,IAGtBwN,GAAc,IAAI,IAjiBlBzH,KAAKnC,OAASyL,EAEdtJ,KAAKnC,OAAO+Q,iBAAiB,YAAahH,IACpCA,aAAiB6E,eACnBzM,KAAKuM,gBAAgB3E,EACvB,IAEF5H,KAAKnC,OAAO+Q,iBAAiB,WAAYhH,IACnCA,aAAiB6E,eACnBzM,KAAKuM,gBAAgB3E,EACvB,IAEF5H,KAAKnC,OAAO+Q,iBAAiB,SAAUhH,IACjCA,aAAiB6E,eACnBzM,KAAKuM,gBAAgB3E,EACvB,GAEJ,GCjdqCuB,UAchC,MAAM0F,GAGXC,UAAAA,CAAWC,GACT1F,GAAUzI,KACRmO,EAAK9U,KACJ+U,IACCA,EAAI1D,iBACJ0D,EAAIxD,kBACJwD,EAAIzD,aAAc,EAClBwD,EAAKE,WAAW,GAElB,WAEFjP,KAAKkP,OAAOlG,KAAK+F,EACnB,CAEAI,SAAAA,GACEnP,KAAKkP,OAAOE,SAASL,IACnB1F,GAAUyE,OAAOiB,EAAK9U,IAAK8U,EAAKzS,KAAK,IAEvC0D,KAAKkP,OAAS,EAChB,C,4HArBA,MAAQA,SAA2B,G,qdCPrC,MAAMG,IAAYC,EAAAA,EAAAA,gBA6HlB,SAASC,GAAcC,GACrB,MAAMC,GAAaC,EAAAA,EAAAA,IAAcF,GACjCC,SAAAA,EAAYE,QACd,CAEA,SAASC,GAAqBJ,EAAmBK,GAC/C,MAAMJ,GAAaC,EAAAA,EAAAA,IAAcF,GAE5BC,IAIa,SAAdI,GACFJ,EAAWK,iBAEK,UAAdD,GACFJ,EAAWM,gBAEf,CAEO,SAASC,GAAqBC,GACnC,MAAMrM,EAAUqM,EAAS7Q,MAAMwE,QAUjC,IAA0BsM,EACI,OADJA,EATHtM,IAU4C,iBAAtBsM,GAAkC,WAAYA,GAVnB,kBAA9BtM,EAAQuM,OAAOC,YACrDH,EAASI,gBAAgB,CACvBF,OAAQ,CACNC,YAAYxM,EAAQuM,OAAOC,aAInC,CAQO,MAAME,WAAsBC,EAAAA,cACjC,GADWD,GACJhU,OAAO,aAYT,MAAMkU,WAAuBC,EAAAA,qB,SA2BdC,K,OAAAA,GAAf,gBACL,MAAMC,QAAYpJ,UAAUqJ,UAAUC,WACtC,IAAIC,EAEJ,IACEA,EAAerM,KAAKsM,MAAMJ,GAC1B,MAAMK,GAAQC,EAAAA,GAAAA,IAAgBH,GAC9B,GAAIE,EACF,MAAO,CAAEE,SAAS,EAAOF,QAE7B,CAAE,MAAOnM,GAAI,CACb,MAAO,CAAEmM,MAAOL,EAAKO,SAAS,EAChC,KAZsBR,MAAAA,KAAAA,U,0bA1BpB,GADWF,GACJlU,OAAO,cChGT,MAAM6U,GAAyB,sBAiB/B,MAAM7O,WAAmBxD,EAAAA,GA6EvBiB,UAAAA,GACL,MAAMqR,EAAwC,CAAC,E,IAQF,EA4OxBC,EAnPrBrR,KAAKsR,gCAGkBrS,EAAAA,GAAWsS,iBAAiBvR,KAAMmR,GAAwBK,GAAAA,GAClEvR,SAAS,CAAEwR,QAAQ,IAE7BzR,KAAKZ,MAAMmD,eACd6O,EAAY7O,cA4OO8O,EA5O6C,QAArB,EAAArR,KAAKZ,MAAMsS,kBAAX,eAAuBC,OAAOC,gBA6OhEC,EAAAA,EAAAA,QACAC,EAAAA,GAAUC,QACd,IAAIC,EAAAA,GAAsB,CAAC,GAG7B,IAAIC,EAAAA,GAAa,CACtBZ,qBAjPArR,KAAKkS,kBACLlS,KAAKmS,uBAELnS,KAAKC,SAASmR,GAEdpR,KAAKoS,eAAepS,KAAKZ,OAAOiT,EAAAA,EAAAA,IAAoBrS,OACpDA,KAAKsS,0BAAyBC,EAAAA,EAAAA,IAAkBvS,OAAOwS,EAAAA,EAAAA,IAA2BrO,EAAAA,KAClFnE,KAAKsS,0BAAyBG,EAAAA,EAAAA,IAAkBzS,OAAOwS,EAAAA,EAAAA,IAA2BE,EAAAA,KAElF1S,KAAK2S,MAAMC,IACT5S,KAAK6S,kBAAkBC,IACrB9S,KAAKoS,eAAeU,GAAUT,EAAAA,EAAAA,IAAoBrS,MAAM,KAI5D,MAAMiD,EAAYhE,EAAAA,GAAW8T,aAAa/S,MAE1CA,KAAK2S,MAAMC,IAAI3P,EAAU4P,iBAAiB7S,KAAKgT,iBAAiB/P,KAChEjD,KAAK2S,MAAMC,IAAI5S,KAAKiT,iBAAiBzC,GAAgBxQ,KAAKkT,4BAE1D,MAAMC,ED3MH,SAAgC3D,GACrC,MAAM4D,EAAc,IAAIvE,GACxB,IAAIwE,EAA6B,KAEjC,MAAMC,EAA6BjE,GAAUkE,UAAUC,EAAAA,wBAAyB5L,IACzC,iBAA1BA,EAAM6L,QAAQC,UACvBL,EAAczL,EAAM6L,QAAQC,QAC9B,IAGF,SAASC,EAAiBnE,EAAmBoE,GAC3C,MAAO,KACL,MAAM3D,EAAWhR,EAAAA,GAAW4U,WAAWrE,GAAQsE,GAAMA,EAAE1U,MAAMnF,MAAQoZ,GAAeS,EAAEC,WAClF9D,GAAYA,aAAoB+D,EAAAA,IAClCJ,EAAG3D,EAEL,CAEJ,CAmGA,OArFAmD,EAAYtE,WAAW,CACrB7U,IAAK,MACLgV,UAAW0E,EAAiBnE,EAAOQ,MAIrCoD,EAAYtE,WAAW,CACrB7U,IAAK,MACLgV,UApBF,SAAuBO,EAAmBoE,GACxC,MAAO,KACa3U,EAAAA,GAAWgV,eAAezE,GAAQsE,GAAMA,aAAaE,EAAAA,IAAYF,EAAEC,WAC3E3E,SAASa,IACbA,GAAYA,aAAoB+D,EAAAA,IAClCJ,EAAG3D,EACL,GACA,CAEN,CAWaiE,CAAc1E,EAAOQ,MAIlCoD,EAAYtE,WAAW,CACrB7U,IAAK,MACLgV,UAAW0E,EAAiBnE,EAAAA,W,MAAO,cAAOS,GACxC,MAAMkE,GAAMC,EAAAA,GAAAA,IAAenE,GACvBkE,GACFE,EAAAA,gBAAgBrL,KAAKmL,EAEzB,I,gBAL0ClE,G,gCAAdT,MAS9B4D,EAAYtE,WAAW,CACrB7U,IAAK,MACLgV,UAAW,KAgIR,IAAsCqF,IA/HrBrV,EAAAA,GAAW8T,aAAavD,GAgI5B,OAAgB+E,sBAEjCzZ,OAAeyZ,sBAAwBD,EAhIpCjF,GAAUmF,QAAQ,IAAIlE,GAAgB,IAK1C8C,EAAYtE,WAAW,CACrB7U,IAAK,MACLgV,UAAW,KACT,MAAMrH,EAAQ,IAAI4I,GAAe,CAAEiE,WAAW,IAC9CjF,EAAMkF,aAAa9M,GACnByH,GAAUmF,QAAQ5M,EAAM,IAK5BwL,EAAYtE,WAAW,CACrB7U,IAAK,MACLgV,UAAW,IAAMhQ,EAAAA,GAAW8T,aAAavD,GAAOmF,cAIlDvB,EAAYtE,WAAW,CACrB7U,IAAK,MACLgV,UAAW,KACTM,GAAcC,EAAM,IAKxB4D,EAAYtE,WAAW,CACrB7U,IAAK,SACLgV,UAAW,KACTM,GAAcC,EAAM,IAKxB4D,EAAYtE,WAAW,CACrB7U,IAAK,MACLgV,UAAW,KACT,MAAMQ,GAAaC,EAAAA,EAAAA,IAAcF,GACjCC,SAAAA,EAAYmF,YAAY,IAI5BxB,EAAYtE,WAAW,CACrB7U,IAAK,SACLgV,UAAW,KACTW,GAAqBJ,EAAO,OAAO,IAGvC4D,EAAYtE,WAAW,CACrB7U,IAAK,UACLgV,UAAW,KACTW,GAAqBJ,EAAO,QAAQ,IAGjC,KACL4D,EAAYjE,YACZmE,EAA2BuB,aAAa,CAE5C,CCkF6BC,CAAuB9U,MAEhD,MAAO,KACLmT,GAAkB,CAEtB,CAEQhB,oBAAAA,GACN,MAAM4C,GAAYxC,EAAAA,EAAAA,IAAkBvS,MAGpC+U,EAAUC,cAAgB,WACxB,OAAID,EAAU3V,MAAMsC,QAAQ8D,MAAMnJ,GAAW4Y,GAAqB3V,SAASjD,EAAOgJ,YACzE,IAAI6P,MAAcC,IAEpBD,EACT,CACF,CAEQhD,eAAAA,GACN,MAAMkD,GAAYC,EAAAA,EAAAA,IAAkBrV,MAEpCoV,EAAUJ,cAAgB,WACxB,MAAMM,EAAMF,EAAUhW,MAAMmW,KAC5B,OACED,GACAF,EAAUhW,MAAMsC,QAAQ8D,MAAMnJ,GAAWA,EAAOpC,MAAQqb,EAAIrb,KAAOoC,EAAOgJ,WAAaI,EAAAA,EAASC,QAEzF8P,GAGFN,EACT,EAEAE,EAAUnV,SAAS,CACjBwV,mBAAoBrP,GACpBsP,qBAAsB3Q,GAE1B,CAmCA,iBAAyB9B,GACvB,MAAO,CAAC6P,EAA+B6C,KACrC,MAAM,SAAEC,GAAaC,EAAAA,OAAOC,KAC5B,GAAIF,aAAAA,EAAAA,EAAUG,SACZ,I,IACkDH,EAAhD,MAAMI,EAAcC,EAAAA,UAAUC,kBAAoC,QAAlBN,EAAAA,aAAAA,EAAAA,EAAUG,gBAAVH,IAAAA,EAAAA,EAAsB,IACtE,IAAKI,EACH,OAEF,MAAMG,EAAoBrD,EAAStO,MAAM4R,GAAGC,KAAKvD,EAAStO,MAAM8R,KAAM,WACtE,GAAIH,EAAoBH,EAAa,CAEnC,GAAIG,GADiBR,EAAUnR,MAAM4R,GAAGC,KAAKV,EAAUnR,MAAM8R,KAAM,WAEjErT,EAAUhD,SAAS,CACjBuE,MAAOmR,EAAUnR,MACjB8R,KAAMX,EAAUW,KAChBF,GAAIT,EAAUS,SAEX,CACL,MAAMG,EAAe,IAAIC,EAAAA,GAAeC,EAAAA,IACxCxT,EAAUhD,SAAS,CACjBuE,MAAO+R,EAAanX,MAAMoF,MAC1B8R,KAAMC,EAAanX,MAAMkX,KACzBF,GAAIG,EAAanX,MAAMgX,IAE3B,EAEkB9G,EAAAA,EAAAA,gBACRkF,QAAQ,CAChBlY,KAAMoa,EAAAA,UAAUC,aAAazc,KAC7BuZ,QAAS,CAAC,oFAGZ/W,EAAAA,EAAAA,IAAqB,MAAO,oBAAqB,CAC/Cka,2BAA4BT,EAC5BU,wBAAyBb,GAE7B,CACF,CAAE,MAAOnR,GACPiS,QAAQvT,MAAMsB,EAChB,CACF,CAEJ,CAEQyM,6BAAAA,GACN,MAAMyF,GAAiBxE,EAAAA,EAAAA,IAAkBvS,MACnCgX,GAAiBvE,EAAAA,EAAAA,IAAkBzS,MACnCiX,GAAmBC,EAAAA,EAAAA,IAAoBlX,MAE7C+W,EAAe9W,SAAS,CACtByV,qBAAsB1V,KAAKmX,2BAA2BhT,EAAAA,MAGxD6S,EAAe/W,SAAS,CACtByV,qBAAsB1V,KAAKmX,2BAA2BzE,EAAAA,MAGxDuE,EAAiBhX,SAAS,CACxByV,qBAAsB1V,KAAKmX,2BAA2BC,EAAAA,KAE1D,CAEQD,0BAAAA,CAA2BE,GACjC,MAAO,CAAChY,EAAgChD,KACtC,MACMqH,EADUrE,EAASD,MAAMsC,QAAQrF,QAAQ+I,GAAMA,EAAEnL,MAAQoC,EAAOpC,MAC/CmD,KAAKgI,IAC1B,MAAMkS,EAASD,IAAiBlT,EAAAA,IAAaE,EAAAA,EAAAA,IAAyBe,EAAGiS,GAAgB,CAAE7S,MAAOY,EAAEZ,OACpG,MAAO,GAAGY,EAAEnL,MAAMmL,EAAEC,cAAakS,EAAAA,GAAAA,IAAkBD,EAAO9S,UAAU,IAEhEgT,EAAqB9T,EAAO1I,OAAS,KAAO0I,EAAOkH,KAAK,MAAQ,GAEhE7H,EAD2B/C,KAAKyX,6BAA6BJ,GAC7B/S,QAAQoT,EAAAA,GAAqBF,GAC7DG,EAAe1Y,EAAAA,GAAW2Y,YAAY5X,KAAM+C,GAClD,OAAOD,EACLzG,EACAsb,EACA3X,KACAf,EAAAA,GAAW8T,aAAa/S,MAAMZ,MAAMoF,MACpC6S,EAAAA,CAGN,CAEQI,4BAAAA,CAA6BJ,GACnC,OAAQA,GACN,KAAKlT,EAAAA,GACH,OAAO0T,EAAAA,GACT,KAAKT,EAAAA,GACH,OAAOU,EAAAA,GACT,KAAKpF,EAAAA,GACH,OAAOqF,EAAAA,GACT,QACE,MAAMxU,EAAQ,IAAIC,MAAM,0BAA0B6T,KAKlD,MAJA7U,EAAAA,EAAOe,MAAMA,EAAO,CAClB8T,eACAvS,IAAK,wDAAwDuS,MAEzD9T,EAEZ,CAQA,yBAAiClE,EAAgC2Y,GAC/D,MAAMC,EAAW5D,EAAAA,gBAAgB6D,cAKV,OAJR,IAAIC,gBAAgBF,EAASG,QACdhV,IAAI4U,IAIhC3Y,EAASY,SAAS,CAAEyB,QAAS,IAEjC,CAEQ0Q,cAAAA,CAAeU,EAA2BuF,G,IACNvF,EAA1C,MAAMwF,GAAeC,EAAAA,EAAAA,IAAsC,QAAjBzF,EAAAA,EAAS3W,gBAAT2W,IAAAA,EAAAA,EAAqB,IAC/DuF,EAAiBG,cAAcF,EACjC,CAEAG,WAAAA,GACE,MAAO,CACLtc,SAAUsI,KAAKC,UAAU1E,KAAKZ,MAAMjD,UAExC,CAEAuc,aAAAA,CAAchV,GACZ,MAAM0N,EAAwC,CAAC,EAE3C1N,EAAOvH,UAAuC,iBAApBuH,EAAOvH,WACnCiV,EAAYjV,SAAWsI,KAAKsM,MAAMrN,EAAOvH,WAG3C6D,KAAKC,SAASmR,EAChB,CA5TA,YAAmBhS,G,MAEfuZ,EADF,MAAM,eAAEC,EAAc,MAAEC,GAgW5B,SAAwBC,EAA8BC,GACpD,MAAMC,EAAgB,IAAIC,EAAAA,GAAqB,CAC7C/e,KAAMgf,EAAAA,GACNjU,WAAYkU,EAAAA,GACZ3Z,OAAQ,WACRsB,MAAO,SACPY,QAASqX,QAAAA,EAAkB,GAC3BK,kBAAmBC,EAAAA,GACnBC,KAAMC,EAAAA,GAAaC,SACnBvf,IAAK,yBAGP+e,EAAchE,cAAgB,WAC5B,OAAOE,EACT,EAEA,MAAM6B,EAAiB,IAAIkC,EAAAA,GAAqB,CAC9C/e,KAAMiK,EAAAA,GACNrD,MAAO,SACP2Y,UAAW,SACXja,OAAQ,WACRiW,mBAAoB,IAAMiE,QAAQC,QAAQ,CAAErV,SAAS,EAAMZ,OAAQ,KACnEgS,qBAAsB,IAAMgE,QAAQC,QAAQ,CAAErV,SAAS,EAAMZ,OAAQ,KACrE0V,kBAAmBQ,EAAAA,GACnBN,KAAMC,EAAAA,GAAaM,YAGrB9C,EAAe/B,cAAgB,IACtBE,GAGT,MAAM+B,EAAmB,IAAIgC,EAAAA,GAAqB,CAChD/e,KAAMkd,EAAAA,GACNtW,MAAO,WACP2Y,UAAW,SACXja,OAAQ,WACRiW,mBAAoB,IAAMiE,QAAQC,QAAQ,CAAErV,SAAS,EAAMZ,OAAQ,KACnEgS,qBAAsB,IAAMgE,QAAQC,QAAQ,CAAErV,SAAS,EAAMZ,OAAQ,KACrE0V,kBAAmBU,EAAAA,GACnBR,KAAMC,EAAAA,GAAaM,YAGrB5C,EAAiBjC,cAAgB,IACxBE,GAGT,MAAM8B,EAAiB,IAAIiC,EAAAA,GAAqB,CAC9C/e,KAAMwY,EAAAA,GACN5R,MAAO,UACP2Y,UAAW,SACXja,OAAQ,WACRiW,mBAAoB,IAAMiE,QAAQC,QAAQ,CAAErV,SAAS,EAAMZ,OAAQ,KACnEgS,qBAAsB,IAAMgE,QAAQC,QAAQ,CAAErV,SAAS,EAAMZ,OAAQ,KACrE0V,kBAAmBU,EAAAA,GACnBR,KAAMC,EAAAA,GAAaM,YAGrB7C,EAAehC,cAAgB,IACtBE,GAGT,MAAM6E,EAAsB,IAAId,EAAAA,GAAqB,CACnD/e,KAAM8f,EAAAA,GACNV,KAAMC,EAAAA,GAAaU,aACnBxE,mBAAoB,IAAMiE,QAAQC,QAAQ,CAAErV,SAAS,EAAMZ,OAAQ,KACnEgS,qBAAsB,IAAMgE,QAAQC,QAAQ,CAAErV,SAAS,EAAMZ,OAAQ,KACrE0V,kBAAmBc,EAAAA,GACnB1a,OAAQ,eAGVua,EAAoB/E,cAAgB,IAC3BmF,GAGT,MAAMC,EAAa,IAAIC,EAAAA,GAAmB,CACxCngB,KAAMogB,EAAAA,GACNxZ,MAAO,cACP0D,MAAOsU,EACPyB,SAAU,SAGN1B,EAAQuB,EAAWvH,kBAAkBC,IACzC,MAAM0H,EAAU,GAAG1H,EAAStO,QAC5BsO,EAAStO,QAASiW,EAAAA,EAAAA,IAA+BD,EAAQ,IAG3D,MAAO,CACL5B,eAAgB,IAAI8B,EAAAA,GAAiB,CACnCvb,UAAW,CACTib,EACApB,EACAjC,EACAC,EACAC,EACA,IAAI0D,EAAAA,GAAe,CACjBzgB,KAAM0gB,EAAAA,GACNpW,MAAO,GACP8U,KAAMC,EAAAA,GAAaU,eAErB,IAAIhB,EAAAA,GAAqB,CACvB/e,KAAM2gB,EAAAA,GACNvB,KAAMC,EAAAA,GAAaU,aACnBb,kBAAmBc,EAAAA,KAErBH,EAGA,IAAIe,EAAAA,EAAuB,CACzB5gB,KAAM6gB,EAAAA,GACNvW,MAAOwW,EAAAA,GACPC,aAAa,EACb3B,KAAMC,EAAAA,GAAaU,aACnBrW,QAAS,CAAC,CAAEY,MAAOwW,EAAAA,GAAmBla,MAAOka,EAAAA,UAInDnC,QAEJ,CAtdsCqC,CACAvC,QAAhCA,GAAAA,EAAAA,EAAAA,aAAAA,IAAAA,EAAAA,EAAsC,oBACtCvZ,EAAM2Z,gBAGFhX,EAA0B,CAC9B,IAAIa,EAAAA,GAAgB,CAClB3I,INhGmC,gDMiGnC4V,UAAW,MACX7W,SAAU,CACR,IAAImiB,EAAAA,GAAc,CAChB7Z,KAAM,IAAIzC,EAA6B,CACrC5E,IAAK,iBACLuF,OAAQ,WACRlI,QAAS,CAAC4hB,EAAAA,GAAYoB,EAAAA,QAG1B,IAAI9I,GAAAA,EAAoB,CACtBvX,IAAKkX,GACLiK,UAAU,OAIhB,IAAIvc,EAA6B,CAC/B5E,IAAK2F,EACLJ,OAAQ,WACRlI,QAAS,CAAC8f,EAAAA,GAAc1E,EAAAA,MAE1B,IAAI7T,EAA6B,CAC/B5E,IAAK4F,EACLL,OAAQ,WACRhI,QAAS,CAAC0hB,EAAAA,GAAYoB,EAAAA,GAAgBlD,EAAAA,GAAc1E,EAAAA,MAEtD,IAAI2I,EAAAA,GAAgB,CAAEphB,INvHY,oBMwHlC,IAAIqhB,EAAAA,GAAmB,CAAErhB,INvHM,kB,IMoInBmF,EACAA,EACFA,E,IAZe,aAAvByS,EAAAA,EAAAA,OAAoC0J,EAAAA,OAAOC,eAAeC,8BAC5D1Z,EAASiH,KACP,IAAI0S,EAAAA,EAAa,CACfzhB,IN5H2B,eM6H3B0hB,QAAQ,KAKdlb,O,yUAAM,EACJmb,WAA4B,QAAhBxc,EAAAA,EAAMwc,kBAANxc,IAAAA,EAAAA,EAAoB,IAAIoX,EAAAA,GAAe,CAAC,GACpDqF,WAA4B,QAAhBzc,EAAAA,EAAMyc,kBAANzc,IAAAA,EAAAA,EAAoBwZ,EAChC7W,SAAwB,QAAd3C,EAAAA,EAAM2C,gBAAN3C,IAAAA,EAAAA,EAAkB2C,EAE5B5F,SAAU,IACPiD,G,WAAAA,CACHkC,KAAM,IAAIxB,EAAY,CAAC,K,uVAxD3B,QAAUgc,WAAW,IAAIC,EAAAA,GAAyB/b,KAAM,CAAE6I,KAAM,CAAC,eAmJjE,QAAQqK,4BAAAA,IAA4B,YAClC,MAAM8I,QD5CH,W,OAAetL,GAAAA,MAAAA,KAAAA,U,CC4CQA,GAE1B,GAAIsL,EAAY9K,QACd,OAGF,MAAMjO,EAAYhE,EAAAA,GAAW8T,aAAa,GACpCqD,EAAqC,iBAAzB4F,EAAYhL,MAAMoF,GAAkB4F,EAAYhL,MAAMoF,QAAKpe,EACvEse,EAAyC,iBAA3B0F,EAAYhL,MAAMsF,KAAoB0F,EAAYhL,MAAMsF,UAAOte,EAC7EikB,EAAWhG,EAAAA,UAAUiG,kBAAkBF,EAAYhL,OAErD/N,GAAagZ,EACfhZ,EAAUhD,SAAS,CACjBuE,MAAOyX,EACP7F,KACAE,SAGF9T,EAAAA,EAAOe,MAAM,IAAIC,MAAM,qCAAsC,CAC3DsB,IAAK,oCACLqX,sBAAuBlZ,EACvBmT,GAAIA,QAAAA,EAAM,GACVE,KAAMA,QAAAA,EAAQ,IAGpB,KAlHEtW,KAAK2S,MAAMC,IAAIiG,GACf7Y,KAAKW,qBAAqBX,KAAKD,WAAWa,KAAKZ,QAE/Coc,EAAAA,EAAAA,IAAkBpc,MAAMqc,MAAMC,IAC5Btc,KAAKC,SAAS,CAAEqc,MAAK,GAEzB,EAEA,GApEWha,GAoEJ7C,aAAY,EAAGV,YACpB,MAAM,KAAEuC,GAASvC,EAAMjF,WACvB,OAAIwH,EACK,kBAACA,EAAK7B,UAAS,CAACV,MAAOuC,IAGzB,kBAACib,EAAAA,mBAAkBA,CAAC3jB,KAAM,c,IAkQrC,MAAMsc,GAAY,CAACzP,EAAAA,EAASC,MAAOD,EAAAA,EAAS+W,UAAUpf,KAA8BoH,IAAW,CAC7F1D,MAAO0D,EACPA,YAGIgR,GAAmB,CAAC/P,EAAAA,EAASC,OAAOtI,KAA8BoH,IAAW,CACjF1D,MAAO0D,EACPA,YAGWyQ,GAAuB,CAACxP,EAAAA,EAASgX,GAAIhX,EAAAA,EAASiX,IAAKjX,EAAAA,EAASkX,GAAIlX,EAAAA,EAASmX,KAEhFzH,GAAmBF,GAAqB7X,KAA8BoH,IAAW,CACrF1D,MAAO0D,EACPA,YAGI2V,GAAyC,CAC7C,CAAErZ,MAAO,QAAS0D,MAAOqY,EAAAA,EAAaC,OACtC,CAAEhc,MAAO,gBAAiB0D,MAAOqY,EAAAA,EAAaE,eAC9C,CAAEjc,MAAO,QAAS0D,MAAOqY,EAAAA,EAAaG,OACtC,CAAElc,MAAO,gBAAiB0D,MAAOqY,EAAAA,EAAaI,e,08BCzbzC,MAAM9c,UAAiCrB,EAAAA,GA6D5Coe,iBAAAA,EAAkB,SAAE7X,IAClB,OAAOA,IAAawX,EAAAA,EAAaE,eAAiB1X,IAAawX,EAAAA,EAAaI,aAC9E,CA6EAE,YAAAA,CAAaC,EAAuCC,EAAqCC,GAAY,GAC/FA,GAEFtd,KAAKud,yBAAyBH,EAAgBC,GAAc,GAE5Drd,KAAKwd,wBAAwBJ,EAAgBC,GAAc,GAAO,IAElErd,KAAKud,yBAAyBH,EAAgBC,EAElD,C,kBArJK,YAuDLI,EAAAA,KAAAA,eAAc,CAAC5Y,EAAoC6Y,EAAoBrhB,KACvD,UAAVwI,EAAE5K,KACJ+F,KAAKud,yBAAyBlhB,EAAQ,OAAKA,GAAAA,CAAQmI,MAAOkZ,IAC5D,IAUFC,EAAAA,KAAAA,iBAAiBthB,IACf,IAAIuhB,EAEJ,OAAQvhB,EAAOgJ,UACb,KAAKwX,EAAAA,EAAaC,MAChBc,EAAcf,EAAAA,EAAaG,MAC3B,MAEF,KAAKH,EAAAA,EAAaE,cAChBa,EAAcf,EAAAA,EAAaI,cAC3B,MAEF,KAAKJ,EAAAA,EAAaG,MAChBY,EAAcf,EAAAA,EAAaC,MAC3B,MAEF,KAAKD,EAAAA,EAAaI,cAChBW,EAAcf,EAAAA,EAAaE,cAC3B,MAEF,QACE,MAAM,IAAIvZ,MAAM,qBAIpBxD,KAAKmd,aAAa9gB,EAAQ,OAAKA,GAAAA,CAAQgJ,SAAUuY,KAAe,EAAM,IAMxEC,EAAAA,KAAAA,qBAAqBxhB,IACnB,IAAIuhB,EACJ,OAAQvhB,EAAOgJ,UACb,KAAKwX,EAAAA,EAAaC,MAChBc,EAAcf,EAAAA,EAAaE,cAC3B,MAEF,KAAKF,EAAAA,EAAaE,cAChBa,EAAcf,EAAAA,EAAaC,MAC3B,MAEF,KAAKD,EAAAA,EAAaG,MAChBY,EAAcf,EAAAA,EAAaI,cAC3B,MAEF,KAAKJ,EAAAA,EAAaI,cAChBW,EAAcf,EAAAA,EAAaG,MAC3B,MAEF,QACE,MAAM,IAAIxZ,MAAM,qBAIpBxD,KAAKmd,aAAa9gB,EAAQ,OAAKA,GAAAA,CAAQgJ,SAAUuY,KAAe,EAAM,IAMxEE,EAAAA,KAAAA,yBAAyBzhB,IACvB,MAAM0hB,EACJ1hB,EAAOpC,MAAQ+jB,EAAAA,EAAwBD,cACnCC,EAAAA,EAAwBC,gBACxBD,EAAAA,EAAwBD,cAC9B/d,KAAKmd,aAAa9gB,EAAQ,OAAKA,GAAAA,CAAQpC,IAAK8jB,KAAiB,EAAM,IAoBrEG,EAAAA,KAAAA,iBAAgB,CAACrZ,EAAkCxI,KACjD2D,KAAKmd,aAAa9gB,EAAQ,OAAKA,GAAAA,CAAQmI,MAAOK,EAAEhH,OAAO2G,SAAS,EAAK,IAMvE2Z,EAAAA,KAAAA,gBAAgB9hB,IACd,MAAMgD,GAAW+e,EAAAA,EAAAA,IAAuBpe,MAClCqe,EAAehf,EAASD,MAAMsC,QAAQrF,QACzC+I,QAAqBpN,IAAfoN,EAAEkZ,UAA0BlZ,EAAEkZ,WAAajiB,EAAOiiB,WAG3Djf,EAASY,SAAS,CAChByB,QAAS2c,GACT,IAMJ,OAAQd,4BAA2B,CACjCH,EACAC,EACAkB,GAAc,EACdC,GAAe,KAEf,MAAMnf,GAAW+e,EAAAA,EAAAA,IAAuBpe,MAClCqe,EAAehf,EAASD,MAAMsC,QAAQrF,QACzC+I,QAAqBpN,IAAfoN,EAAEkZ,UAA0BlZ,EAAEkZ,WAAalB,EAAekB,WAGnEjf,EAASof,cACP,CACE,CACEH,SAAUlB,EAAekB,SACzBrkB,IAAKojB,EAAapjB,IAClBoL,SAAUgY,EAAahY,SACvBb,MAAO6Y,EAAa7Y,UAEnB6Z,GAEL,CAAEE,cAAaC,kBAGjB9hB,EAAAA,EAAAA,IACEC,EAAAA,GAAkBC,gBAClBC,EAAAA,GAAoBD,gBAAgB8hB,mCACpC,CACEC,kBAAmBvB,EAAe5Y,MAAMxJ,OACxC4jB,cAAexB,EAAe5Y,MAAM0D,cAAc5I,SAAS,SAC3D+F,SAAUgY,EAAahY,SACvB0Y,cAAeV,EAAapjB,KAC9B,IAOJ,OAAQujB,2BAA0BqB,EAAAA,EAAAA,WAChC,CACEzB,EACAC,EACAkB,GAAc,EACdC,GAAe,KAEfxe,KAAKud,yBAAyBH,EAAgBC,EAAckB,EAAaC,EAAa,GAExF,K,EAOG,SAASM,EAAgBpd,GAC9BA,EAAQuE,MAAK,CAACvI,EAAGwI,K,IAAexI,EAAkCwI,E,OAA3CsC,SAAmB,QAAV9K,EAAAA,EAAE4gB,gBAAF5gB,IAAAA,EAAAA,EAAc,IAAK,IAAM8K,SAAmB,QAAVtC,EAAAA,EAAEoY,gBAAFpY,IAAAA,EAAAA,EAAc,IAAK,GAAG,GAC1F,CAEA,SAAS5P,EAAUoB,GACjB,MAAO,CACLqnB,iBAAiBpnB,EAAAA,EAAAA,KAAI,CACnBmJ,MAAO,kBACPlJ,QAAS,OACT2F,SAAU,OACVnC,IAAK,GAAG1D,EAAMiB,QAAQ,QAASjB,EAAMiB,QAAQ,OAE/C8E,SAAS9F,EAAAA,EAAAA,KAAI,CACX0J,SAAU,UAEZ2d,WAAWrnB,EAAAA,EAAAA,KAAI,CACbC,QAAS,OACTuG,SAAUzG,EAAM0G,WAAWC,UAAUF,SACrC8gB,aAAcvnB,EAAMiB,QAAQ,IAC5ByC,IAAK1D,EAAMiB,QAAQ,KAGzB,CA3PE,EADWwH,EACJV,aAAY,EAAGV,YACpB,MAAMmgB,GAAgBd,EAAAA,EAAAA,IAAuBrf,IACvC,QAAE2C,GAAYwd,EAAcplB,WAC5B1D,GAASC,EAAAA,EAAAA,YAAWC,GAG1B,OAFAwoB,EAAgBpd,GAEXA,EAAQ1G,OAKX,kBAACzE,MAAAA,CAAIC,UAAWJ,EAAO2oB,iBACpBrd,EAAQtE,KAAKf,IACZ,MAAMzG,EAA+B,CACnC8nB,WAAYrhB,EAAOmI,MACnBwY,MAAO3gB,EAAOgJ,WAAawX,EAAAA,EAAaG,OAAS3gB,EAAOgJ,WAAawX,EAAAA,EAAaI,cAClFc,cAAe1hB,EAAOpC,MAAQ+jB,EAAAA,EAAwBD,cACtDoB,UAAWpgB,EAAMme,kBAAkB7gB,GACnCohB,YAAa,CAAC5Y,EAAG6Y,IAAe3e,EAAM0e,YAAY5Y,EAAGxI,EAAOmI,MAAOnI,GACnE+iB,aAAc,IAAMrgB,EAAM8e,kBAAkBxhB,GAC5C8gB,aAAc,CAACO,EAAYJ,IACzBve,EAAMoe,aACJ9gB,EACA,OACKA,GAAAA,CACHmI,MAAOkZ,IAETJ,GAEJK,cAAe,IAAM5e,EAAM4e,cAActhB,GACzC6hB,cAAgBrZ,GAAM9F,EAAMmf,cAAcrZ,EAAGxI,GAC7CyhB,sBAAuB,IAAM/e,EAAM+e,sBAAsBzhB,IAE3D,OACE,kBAACgjB,OAAAA,CAAKplB,IAAKoC,EAAOiiB,SAAU9nB,UAAWJ,EAAOqH,SAC5C,kBAAClH,MAAAA,CAAIC,UAAWJ,EAAO4oB,WACrB,kBAACK,OAAAA,KAAK,eACN,kBAACC,EAAAA,WAAUA,CACTtoB,QAAS,IAAM+H,EAAMof,aAAa9hB,GAClCnC,KAAM,QACNrD,KAAM,KACNwD,aAAY,yBACX,KAEL,kBAACklB,EAAAA,EAAqB3pB,GAAAA,KArCvB,IAwCL,G,uPCrDD,MAAM4b,UAA4B1S,EAAAA,GASvCiB,UAAAA,GACE,MAAMqV,GAAYC,EAAAA,EAAAA,IAAkBrV,MAC9Bwf,EAAoBpK,EAAUhW,MAAMsC,QAAQ8D,MAAMJ,GAAMA,EAAEC,WAAaI,EAAAA,EAASC,QACtF1F,KAAKC,SAAS,CACZmb,UAAWoE,IAGbpK,EAAUvC,kBAAkBC,IAC1B,MAAM0M,EAAoB1M,EAASpR,QAAQ8D,MAAMJ,GAAMA,EAAEC,WAAaI,EAAAA,EAASC,QAC/E1F,KAAKC,SAAS,CACZmb,UAAWoE,GACX,GAEN,CArBAhf,WAAAA,CAAYpB,GACVqB,M,sUAAM,IACDrB,IAqBPpI,EAAAA,KAAAA,WAAU,KACR,MACMyoB,GADYpK,EAAAA,EAAAA,IAAkBrV,MACHZ,MAAMsC,QAAQge,MAAMta,GAAMA,EAAEC,WAAaI,EAAAA,EAASC,QAE/E+Z,IACFE,EAAAA,EAAAA,IAA2CF,EAAexlB,IAAKwlB,EAAejb,MAChF,IAxBAxE,KAAKW,qBAAqBX,KAAKD,WAAWa,KAAKZ,MACjD,EAgDF,SAAS1J,EAAUoB,GACjB,MAAO,CACLkoB,QAAQjoB,EAAAA,EAAAA,KAAI,CACV,CAACD,EAAMqJ,YAAYC,KAAK,OAAQ,CAC9B9C,UAAW,YAEb,CAACxG,EAAMqJ,YAAYC,KAAK,OAAQ,CAC9Bc,UAAWpK,EAAMiB,QAAQ,GACzBuF,UAAW,cAGbA,UAAW,aACX4D,UAAW,SAGjB,CArCE,EAjCW0P,EAiCJ/R,aAAY,EAAGV,YACpB,MAAM,SAAEqc,EAAQ,OAAE3J,GAAW1S,EAAMjF,WAC7B1D,GAASC,EAAAA,EAAAA,YAAWC,GAE1B,OAAe,IAAXmb,EACK,KAIP,kBAAC/a,EAAAA,OAAMA,CACLO,cAAaC,EAAAA,EAAQ2oB,MAAMC,OAAOC,eAClC3E,SAAUA,EACVxkB,KAAM,UACNJ,UAAWJ,EAAOwpB,OAClB5oB,QAAS+H,EAAM/H,SAChB,e,iQCpDP,MAAMgpB,EAAoD,GAAGC,EAAAA,wCAYtD,MAAMvE,UAAqB5c,EAAAA,GAChC0B,WAAAA,CAAYpB,GACV,MAAM8gB,EAAe5f,aAAaI,QAAQsf,GACpCG,EAAS5E,EAAAA,OAAOC,eAAeC,8BAAiD,UAAjByE,E,IAOjDA,EALpBzf,M,sUAAM,EACJkb,QAAQ,EACR/X,QAAS,CACPwc,kBAAmB,CACjBD,OAAQA,SAAAA,EACRD,aAA+B,QAAjBA,EAAiB,SAAjBA,SAAAA,IAAAA,GAAAA,EACd9E,UAAU,KAGXhc,IAIP,OAAOihB,mCAAkC,KACvC,MAAMF,GAAUngB,KAAKZ,MAAMwE,QAAQwc,kBAAkBD,QAErDzjB,EAAAA,EAAAA,IACEC,EAAAA,GAAkB2jB,kBAClBzjB,EAAAA,GAAoByjB,kBAAkBC,2BACtC,CACEC,QAASL,IAIb7f,aAAaC,QAAQyf,EAAmDG,EAAOra,YAE/E9F,KAAKC,SAAS,CACZ2D,QAAS,CACPwc,kBAAmB,CACjBD,SACA/E,SAAUpb,KAAKZ,MAAMwE,QAAQwc,kBAAkBhF,SAC/C8E,aAAcC,KAGlB,IAGJ,OAAOM,gBAAgB9E,IACrB3b,KAAKC,SAAS,CAAE0b,UAAS,GA3B3B,EAmFF,SAASrlB,EAAUoB,GACjB,MAAO,CACLgpB,SAAS/oB,EAAAA,EAAAA,KAAI,CACXC,QAAS,OACTc,QAAShB,EAAMiB,QAAQ,GACvBsI,cAAe,SACf0f,WAAYjpB,EAAMgE,OAAOilB,WAAWC,QACpCC,UAAWnpB,EAAMopB,QAAQC,GACzBjpB,aAAcJ,EAAMO,MAAMC,OAAOC,QACjC0D,OAAQ,aAAanE,EAAMgE,OAAOG,OAAOmlB,OACzCC,OAAQ,EACRC,YAAaxpB,EAAMiB,QAAQ,KAE7BwoB,SAASxpB,EAAAA,EAAAA,KAAI,CACXypB,WAAY1pB,EAAM0G,WAAWijB,iBAC7BC,cAAe5pB,EAAMiB,QAAQ,KAE/BiL,SAASjM,EAAAA,EAAAA,KAAI,CACXC,QAAS,OACT2pB,oBAAqB,WACrBC,OAAQ9pB,EAAMiB,QAAQ,GACtB8oB,UAAW/pB,EAAMiB,QAAQ,GACzBE,WAAY,WAGlB,CA9EE,EA9CW6iB,EA8CJjc,aAAY,EAAGV,YACpB,MAAM,OAAE4c,EAAM,QAAE/X,GAAY7E,EAAMjF,WAC5B1D,GAASC,EAAAA,EAAAA,YAAWC,GAkC1B,OAAIsN,EAAQwc,kBAER,kBAACsB,EAAAA,SAAQA,CAACC,QAlCQ,IAElB,kBAACprB,MAAAA,CAAIC,UAAWJ,EAAOsqB,QAAS1pB,QAAUgY,GAAQA,EAAIxD,mBACpD,kBAACjV,MAAAA,CAAIC,UAAWJ,EAAO+qB,SAAS,iBAChC,kBAAC5qB,MAAAA,CAAIC,UAAWJ,EAAOwN,SACrB,kBAACrN,MAAAA,CACCc,MACE,uGAEH,sBAGD,kBAACgoB,OAAAA,CACChoB,MACEuM,EAAQwc,kBAAkBhF,SACtB,qEAAqEwG,EAAAA,GAA6BC,mBAClG,IAGN,kBAACC,EAAAA,OAAMA,CACLhhB,MAAO,4BACP7J,cAAaC,EAAAA,EAAQ2oB,MAAMkC,wBAC3Bvd,MAAOZ,EAAQwc,kBAAkBD,OACjC/E,SAAUxX,EAAQwc,kBAAkBhF,SACpC4G,SAAUjjB,EAAMshB,qCAUU4B,UAAU,SAASC,gBAAiBnjB,EAAM0hB,cAC1E,kBAAC0B,EAAAA,cAAaA,CACZC,KAAK,MACLzrB,QAAQ,SACRglB,OAAQA,EACR1kB,cAAaC,EAAAA,EAAQ2oB,MAAMwC,yBAM5B,uC,uICnFJ,MAAM5L,EAAqB,CAAEH,KAAM,UAAWF,GAAI,OACzD,SAASkM,EAAiB5Q,GACxB,OAAO,IAAI6Q,EAAAA,GAAc,CACvBjhB,KAAM,IAAIgB,EAAAA,GAAW,CACnBsZ,WAAY,IAAIpF,EAAAA,GAAeC,GAC/B/E,gBAGN,CAGO,SAAS8Q,IACd,OAAO,IAAIC,EAAAA,GAAa,CAEtBprB,MAAO,OACP8c,KAAKuO,EAAAA,EAAAA,IAAY5Q,EAAAA,GAAUC,SAC3BvS,OAAQmjB,EAAAA,eAAeC,OACvBC,gBAAiBC,EAAAA,GACjBC,WAAWL,EAAAA,EAAAA,IAAY5Q,EAAAA,GAAUC,SACjCiR,SAAWtR,GAAe4Q,EAAiB5Q,GAC3CuR,WAAY,CACV,CACEF,UAAWG,EAAAA,GAAkBC,KAC7BC,QAAS,CAAC1R,EAAY7O,IAAWwgB,EAAkB3R,EAAY7O,EAAQiP,EAAAA,GAAUqR,MACjFG,cAAc,GAEhB,CACEP,UAAWG,EAAAA,GAAkBK,OAC7BH,QAAS,CAAC1R,EAAY7O,IAAWwgB,EAAkB3R,EAAY7O,EAAQiP,EAAAA,GAAUyR,SAEnF,CACER,UAAWG,EAAAA,GAAkB/mB,SAC7BinB,QAAS,CAAC1R,EAAY7O,IAAWwgB,EAAkB3R,EAAY7O,EAAQiP,EAAAA,GAAU3V,WAEnF,CACE4mB,UAAWG,EAAAA,GAAkBM,OAC7BJ,QAAS,CAAC1R,EAAY7O,IAAWwgB,EAAkB3R,EAAY7O,EAAQiP,EAAAA,GAAU0R,SAEnF,CACET,UAAWU,EAAAA,GAAwB3iB,MACnCsiB,QAAS,CAAC1R,EAAY7O,IAAW6gB,EAAuBhS,EAAY7O,EAAQ8gB,EAAAA,GAAW7iB,QAEzF,CACEiiB,UAAWU,EAAAA,GAAwBG,MACnCR,QAAS,CAAC1R,EAAwB7O,IAAW6gB,EAAuBhS,EAAY7O,EAAQ8gB,EAAAA,GAAWC,QAErG,CACEb,UAAW,IACXK,QAAS,IAAMS,OAIvB,CAGO,SAASA,IACd,OAAO,IAAIpB,EAAAA,GAAa,CACtBprB,MAAO,GACP8c,IAAK2P,EAAAA,GACLd,SAYK,IACL,IAAIT,EAAAA,GAAc,CAChBjhB,KAAM,IAAIsB,EAAAA,GAAgB,CACxBiN,UAAW,SACX7W,SAAU,OAfd+qB,qBAAqB,EACrBhB,UAAW,IACXiB,WAAY,CACV,MACEC,EAAAA,EAAAA,KAAiB,IAIzB,CAYO,SAASZ,EACd3R,EACA7O,EACAqhB,GAEA,MAAM,UAAEC,EAAS,WAAEC,IAAeC,EAAAA,EAAAA,IAAuB3S,GACzD,OAAO,IAAI+Q,EAAAA,GAAa,CACtBprB,OAAOitB,EAAAA,EAAAA,IAAsBJ,GAC7B1kB,OAAQmjB,EAAAA,eAAeC,OACvBzO,IAAKoQ,EAAAA,GAAOL,GAAME,EAAYD,GAC9BtB,gBAAiB2B,EAAAA,GACjBC,cAAe,IAAM5hB,EACrBmgB,SAAWtR,GAAe4Q,EAAiB5Q,IAE/C,CAEO,SAASgS,EACdhS,EACA7O,EACAqhB,GAEA,MAAM,UAAEC,EAAS,WAAEC,EAAU,eAAExS,IAAmByS,EAAAA,EAAAA,IAAuB3S,GAEzE,IAAKE,EAAgB,CACnB,MAAM/M,EAAI,IAAIrB,MAAM,4BAOpB,MANAhB,EAAAA,EAAOe,MAAMsB,EAAG,CACdC,IAAK,mDACLqf,YACAC,aACAxS,eAAgBA,QAAAA,EAAkB,KAE9B/M,CACR,CAEA,OAAO,IAAI4d,EAAAA,GAAa,CACtBprB,OAAOitB,EAAAA,EAAAA,IAAsB1S,GAC7BpS,OAAQmjB,EAAAA,eAAeC,OACvBzO,IAAKuQ,EAAAA,GAAWR,GAAME,EAAYD,EAAWvS,GAC7CiR,gBAAiB2B,EAAAA,GACjBC,cAAe,IAAM5hB,EACrBmgB,SAAWtR,GAAe4Q,EAAiB5Q,IAE/C,C,wgCCzHO,MAAMiT,UAA+B7lB,EAAAA,GAC1C0B,WAAAA,CAAYpB,GACVqB,MAAM,OAAKrB,GAAAA,CAAOwlB,QAAS,MAI7B,OAAQ7kB,cAAa,MACnBqc,EAAAA,EAAAA,IAAkBpc,MAAMqc,MAAMC,IAC5Btc,KAAKC,SAAS,CAAEqc,MAAK,IAGvBtc,KAAK2S,MAAMC,IACT5S,KAAK6S,kBAAiB,CAACC,EAAU6C,KAC1B3V,KAAKZ,MAAMwlB,QAAQ5pB,QACtBgF,KAAK6kB,cAEF7kB,KAAKZ,MAAM0lB,SAAW9kB,KAAKZ,MAAMwlB,QAAQ5pB,QAC5CgF,KAAK+kB,YACP,IACF,IAIJ,OAAQF,cAAa,KACnB,MAAMG,EAAO/lB,EAAAA,GAAWgmB,QAAQjlB,MAC1BklB,GAAcC,EAAAA,EAAAA,IAAiBH,GAAOlR,GAAMA,aAAasR,EAAAA,IAAkBA,EAAAA,IACjF,GAAIF,EAAa,CACf,MAAM7oB,EAAS2D,KAAKZ,MAAMimB,MAAQC,EAAUtlB,KAAKZ,MAAMimB,OAAS,KAC1DT,EAAUM,EAAY9lB,MAAMwlB,QAAQxnB,KAAKmoB,I,IAIjCA,E,OAJwC,OACjDA,GAAAA,CACHxiB,KAAM9D,EAAAA,GAAW2Y,YAAYsN,EAAaK,EAAExiB,MAC5CyiB,cAAcnpB,aAAAA,EAAAA,EAAQnC,MAAO,MAAMmC,EAAOnC,UAAY+E,EAAAA,GAAW2Y,YAAYsN,EAAaK,EAAEC,cAC5FvgB,WAAwB,QAAZsgB,EAAAA,EAAEtgB,kBAAFsgB,IAAAA,EAAAA,OAAgBvtB,G,IAE1ByM,KAAKC,UAAUkgB,KAAangB,KAAKC,UAAU1E,KAAKZ,MAAMwlB,UACxD5kB,KAAKC,SAAS,CAAE2kB,WAEpB,KAGF,OAAQG,cAAa,KACnB,MAAM,QAAEH,EAAO,GAAEtI,EAAE,UAAE6H,EAAS,UAAEsB,GAAczlB,KAAKZ,MAC7C6D,EAAYhE,EAAAA,GAAW8T,aAAa/S,MAE1C,IAAKiD,IAAc2hB,KAAYtI,aAAAA,EAAAA,EAAIoJ,KACjC,OAEF,MAAMC,EAAM,CACVC,OAAQ,eACRtpB,KAAM,aACNsoB,UACA3hB,UAAW,KAAKA,EAAU7D,MAAMoF,OAChCS,WAAY,CAAEygB,IAAKpJ,EAAGoJ,KACtBvR,IAAKrZ,OAAOmd,SAASta,KACrBkoB,GAAI,GAAGphB,KAAKC,UAAUkgB,KAAWT,IAAYsB,IAC7CpuB,MAAO,GAAG8sB,IAAYsB,EAAY,MAAMA,IAAc,KACtDK,S,sEACAzU,eAAgBoU,GAEdhhB,KAAKC,UAAUihB,KAASlhB,KAAKC,UAAU1E,KAAKZ,MAAM0lB,UACpD9kB,KAAKC,SAAS,CAAE6kB,QAASa,GAC3B,IA1DA3lB,KAAKW,qBAAqBX,KAAKD,WACjC,EA4DA,EAhEW4kB,EAgEGllB,aAAY,EAAGV,YAC3B,MAAM,QAAE+lB,GAAY/lB,EAAMjF,YACpB,MAAEisB,IAAUC,EAAAA,EAAAA,gBAAe,CAAEC,iBAAkBC,EAAAA,GAAgBC,kBAAmBrB,YAExF,OACE,oCACGiB,EACE1pB,QAAQiC,GAA2B,6BAAlBA,EAAKic,UAA2Cjc,EAAKtH,UACtEoG,KAAKkB,I,IAKIA,E,OAJR,kBAACghB,EAAAA,WAAUA,CACT8G,QAAS9nB,EAAK+nB,YACdhsB,aAAW,qCACXJ,IAAKqE,EAAKunB,GACV3rB,KAAe,QAAToE,EAAAA,EAAK8jB,YAAL9jB,IAAAA,EAAAA,EAAa,YACnBtH,QAAU6N,IACJvG,EAAKtH,SACPsH,EAAKtH,QAAQ6N,EACf,G,QAShB,MAAMygB,EAAaD,I,IACaA,EAAAA,EAA9B,MAAMiB,EAA+C,QAAvBjB,EAAe,QAAfA,EAAAA,EAAM7B,OAAO,UAAb6B,IAAAA,OAAAA,EAAAA,EAAiB9B,cAAjB8B,IAAAA,EAAAA,EAA2B,CAAC,EAC1D,GAAkD,IAA9ClZ,OAAOtD,KAAKyd,GAAuBtrB,OACrC,OAEF,MAAMd,EAAOiS,OAAOtD,KAAKyd,GAAuB,GAChD,MAAO,CAAEpsB,OAAMsK,MAAO8hB,EAAsBpsB,GAAO,E,wLCpGrD,MAAMqsB,EAAiC,uBACjCC,EAAyC,yBACzCC,EAAuC,iBAEtC,eAAKC,G,yDAAAA,C,CAAL,C,IAKA,WAAKC,G,kDAAAA,C,CAAL,C,IAkBA,MAAMC,UAAkB9nB,EAAAA,GAyE7B+nB,OAAAA,CAAQ9X,GACF/O,KAAKZ,MAAMkC,MACbtB,KAAKZ,MAAMkC,KAAKulB,QAAQ9X,EAE5B,CACA+X,QAAAA,CAASC,GACH/mB,KAAKZ,MAAMkC,MACbtB,KAAKZ,MAAMkC,KAAKwlB,SAASC,EAE7B,CAjFAvmB,WAAAA,CAAYpB,G,IAC6BA,E,IAAvCqB,O,wUAAM,IAAKrB,G,WAAAA,CAAO4nB,oBAA8C,QAAzB5nB,EAAAA,EAAM4nB,2BAAN5nB,IAAAA,GAAAA,I,gVACvCY,KAAKW,sBAAqB,K,IA+DtB,EA7DF,MAAMomB,EAAyB,CAC7B,CACEnuB,KAAM,aACN0D,KAAM,SAER,CACE1D,KAAM,UACNquB,cAAe,UACftpB,KAAMyW,EAAepU,MACrBhJ,QAAS,IAAMkwB,IACfC,SAAU,QAId,IAAIC,EACJ,IACEA,EAAMnoB,EAAAA,GAAWoD,YAAYrC,KAAMgU,EAAAA,GACrC,CAAE,MAAOnP,GAOP,YALA7E,KAAKC,SAAS,CACZqB,KAAM,IAAI+lB,EAAAA,GAAa,CACrBN,WAIN,C,IAaE,EAXF/mB,KAAKC,SAAS,CACZqnB,mBAAoB,IAAI3C,EAAuB,CAC7CR,UAAWnkB,KAAKZ,MAAM+kB,UACtBsB,UAAWzlB,KAAKZ,MAAMqmB,UACtBJ,MAAOrlB,KAAKZ,MAAMimB,UAIlBrlB,KAAKZ,MAAM4nB,sBAGgB,QAA7B,EAAAhnB,KAAKZ,MAAMkoB,0BAAX,SAA+BC,aAI7BvnB,KAAKZ,MAAMooB,YAAaJ,aAAAA,EAAAA,EAAKhoB,MAAMqoB,eAgD7C,SAAgCV,GAC9BA,EAAM/d,KAAK,CACTpQ,KAAM,GACN0D,KAAM,YAERyqB,EAAM/d,KAAK,CACTpQ,KAAM,gBACN0D,KAAM,SAEV,CAxDQorB,CAAuBX,IAGrBK,aAAAA,EAAAA,EAAKhoB,MAAMqoB,cAuDrB,SAA4BV,EAAwBY,GAClD,MAAMP,EAAMnoB,EAAAA,GAAWoD,YAAYslB,EAAM3T,EAAAA,IACzC+S,EAAM/d,KAAK,CACTpQ,KAAMwuB,EAAIhoB,MAAMwoB,UAAY,SAAH,WACzBX,cAAeG,EAAIhoB,MAAMwoB,UAAY,qBAAuB,mBAC5D5wB,QAAS,KACP,MAAM6wB,EAAsBT,EAAIhoB,MAAMwoB,UAAY,SAAH,WAGzCE,EAAqB7oB,EAAAA,GAAWoD,YAAYslB,EAAM/kB,EAAAA,KACxDmlB,EAAAA,EAAAA,IAAsBD,EAAoBD,GAG1CT,EAAInnB,SAAS,CACX2nB,WAAYR,EAAIhoB,MAAMwoB,aAExBI,EAAAA,EAAAA,IAAe,YAAaH,EAAoB,GAGtD,CAzEQI,CAAmBlB,EAAO/mB,MAGxBA,KAAKZ,MAAMooB,WAwErB,SAA0BT,EAAwB/jB,GAChD+jB,EAAM/d,KAAK,CACTpQ,KAAmC,cAA7BoK,EAAS5D,MAAMooB,UAA4C,YAAc,cAC/EP,cAA4C,cAA7BjkB,EAAS5D,MAAMooB,UAA4C,YAAc,aAExFxwB,QAAS,KACP,MAAMkxB,EAAWjpB,EAAAA,GAAWoD,YAAYW,EAAUmlB,EAAAA,IAC5Cf,EAAMnoB,EAAAA,GAAWoD,YAAYW,EAAUgR,EAAAA,IAAUoU,QACjDC,EAAQppB,EAAAA,GAAWgmB,QAAQjiB,GAAUolB,QACrCT,EAAO3kB,EAASolB,QAChBE,EAAgB9hB,MAAMtC,QAAQkjB,EAAIhoB,MAAMkpB,eAC1ClB,EAAIhoB,MAAMkpB,cAAclrB,KAAK0W,GAAMA,EAAEsU,UACrChB,EAAIhoB,MAAMkpB,cACd,IAAIhnB,EAGFA,EAD+B,cAA7B0B,EAAS5D,MAAMooB,UACVe,EAAAA,GAAcC,aAAaC,aAAaC,EAAAA,IAExCH,EAAAA,GAAcI,YAGvBT,EAASjoB,SAAS,CAChBqB,KAAMA,EAAKsnB,QAAQjB,GAAMkB,SAASzB,EAAIhoB,MAAM/H,OAAOyxB,iBAAiBR,GAAeS,QAAQV,GAAOW,UAGpG,MAAMC,EACyB,eAA7BjmB,EAAS5D,MAAMooB,UAAS,0BAG1BQ,EAAAA,EAAAA,IAAe,YAAaiB,GAC5BtB,EAAK1nB,SAAS,CAAEunB,UAAWyB,IAE3B,MAAMC,GAAiC/D,EAAAA,EAAAA,IACrC+C,GACCpU,GAAMA,aAAaqV,EAAAA,GACpBA,EAAAA,GAEED,GACFA,EAA+BE,mBAGjCC,EAAwBJ,EAAa,GAG3C,CAnHQK,CAAiBvC,EAAO/mB,MAG1BA,KAAKC,SAAS,CACZqB,KAAM,IAAI+lB,EAAAA,GAAa,CACrBN,YAIJ/mB,KAAK2S,MAAMC,IACoB,QAA7B,EAAA5S,KAAKZ,MAAMkoB,0BAAX,eAA+BzU,kBAAiB,MAoKxD,SAAqC0W,GACnC,MAAMC,EAAyBD,EAAwBnqB,MAAMkoB,mBAC7D,GAAIkC,EAAwB,C,IAGAD,EAF1B,MAAMjrB,EAAOmrB,EAAqBD,G,IAERD,EAA1B,MAAMG,EAAmE,QAA/CH,EAAkC,QAAlCA,EAAAA,EAAwBnqB,MAAMkC,YAA9BioB,IAAAA,OAAAA,EAAAA,EAAoCnqB,MAAM2nB,aAA1CwC,IAAAA,EAAAA,EAAmD,GAEvEI,EAA+BD,EAAkBhK,MAAM3Q,GAASA,EAAKnW,OAAS2tB,I,IAmB9EgD,EAfFA,EAIAA,EAIAA,EAVAjrB,IACGqrB,EAeCA,IACgC,QAAlCJ,EAAAA,EAAwBnqB,MAAMkC,YAA9BioB,IAAAA,GAAAA,EAAoCzC,SAClC4C,EAAkBrtB,QACf0S,IAK2B,IAJ1B,CACEyX,EACAC,EACAF,GACAjnB,SAASyP,EAAKnW,WAtBU,QAAlC2wB,EAAAA,EAAwBnqB,MAAMkC,YAA9BioB,IAAAA,GAAAA,EAAoC1C,QAAQ,CAC1CjuB,KAAM4tB,EACNlqB,KAAM,YAE0B,QAAlCitB,EAAAA,EAAwBnqB,MAAMkC,YAA9BioB,IAAAA,GAAAA,EAAoC1C,QAAQ,CAC1CjuB,KAAM6tB,EACNnqB,KAAM,UAE0B,QAAlCitB,EAAAA,EAAwBnqB,MAAMkC,YAA9BioB,IAAAA,GAAAA,EAAoC1C,QAAQ,CAC1CjuB,KAAM2tB,EACNU,cAAe,cACfjwB,QAAU6N,GAAM+kB,EAA0B/kB,EAAG2kB,MAiBrD,CACF,CA3MUK,CAA4B7pB,KAAK,IACnC,GAGN,EAaA,EApFW4mB,EAoFGnnB,aAAY,EAAGV,YAC3B,MAAM,KAAEuC,GAASvC,EAAMjF,WAEvB,OAAIwH,EACK,kBAACA,EAAK7B,UAAS,CAACV,MAAOuC,IAGzB,wCAkFJ,MAAM8S,EAAkBpR,IAC7B,MAAMZ,EAAanD,EAAAA,GAAWoD,YAAYW,EAAUV,EAAAA,IAC9C+lB,EAAQppB,EAAAA,GAAWgmB,QAAQjiB,GACjC,IAAIkiB,EAAcmD,aAAiBjD,EAAAA,GAAmBiD,GAAQyB,EAAAA,EAAAA,IAA2BzB,GAAO,GAGhG,IAAKnD,EAAa,CAChB,MAAM6E,EAAiB9qB,EAAAA,GAAW4U,WAChC7Q,GACC8Q,GAAMA,aAAakW,EAAAA,GAA6BlW,aAAamW,EAAAA,IAEhE,GAAIF,EAAgB,CAClB,MAAMG,EAAgBjrB,EAAAA,GAAWgmB,QAAQ8E,GAGvC7E,EADEgF,aAAyB9E,EAAAA,GACb8E,GAEAJ,EAAAA,EAAAA,IAA2BI,GAAe,EAE5D,MACE1nB,EAAAA,EAAOe,MAAM,IAAIC,MAAM,kCAAmC,CACxDsB,IAAK,8DAGX,CACA,MAAMqlB,EAAyCjF,EAAY9lB,MAAMwlB,QAAQ,GAAG7hB,KAG5E,MC7NgC,EAACX,EAAwBW,EAAeqnB,GAAO,KAC1ErnB,IACHA,GAAOsnB,EAAAA,EAAAA,IAAajoB,IAGtBW,EAAOA,EAAKuB,QAAQ,OAAQ,KAAKgmB,UAEjC,MAAMrlB,GAAa5B,EAAAA,EAAAA,IAAcjB,GAC3Ba,EAAYhE,EAAAA,GAAW8T,aAAa3Q,GAAYhD,MAAMoF,MACtD+lB,GAAkBC,EAAAA,EAAAA,IAAmBpoB,GACrCqoB,GAAoBC,EAAAA,EAAAA,MACpBC,EAkBR,WACE,MACMC,EADS,IAAIzS,gBAAgBrd,OAAOmd,SAASG,QACzBhV,IAAI,cAC9B,GAAIwnB,EACF,IACE,MAAMD,GAAUE,EAAAA,EAAAA,IAAiBpmB,KAAKsM,MAAM6Z,IAC5C,IAAIE,EAAuC,CAAC,EAC5C,IAAK,MAAM7wB,KAAO0wB,EAChBG,EAAa7wB,GAAO0wB,EAAQ1wB,GAE9B,OAAO6wB,CACT,CAAE,MAAOjmB,GACPiS,QAAQvT,MAAMsB,EAChB,CAGJ,CAlCkBkmB,GACVC,EAAevmB,KAAKC,UAAU,CAClC,eAAkB,CAChBsM,OAAOia,EAAAA,EAAAA,YAAWhoB,EAAU0N,KAC5BiU,QAAS,CAAC,CAAEsG,MAAO,OAAQnoB,OAAMkC,eACjCkmB,YAAa,CAAEhI,KAAM,CAAEoH,kBAAiBE,oBAAmBE,YAC3D1lB,gB,IAGWsW,EAAf,MAAM6P,EAAyB,QAAhB7P,EAAAA,EAAAA,OAAO8P,iBAAP9P,IAAAA,EAAAA,EAAoB,GAC7Bjd,EAAOgtB,EAAAA,QAAQC,UAAU,GAAGH,YAAkB,CAAEI,MAAOR,EAAcS,cAAe,IAK1F,OAJIrB,GACFtvB,OAAOsvB,KAAK9rB,EAAM,UAGbA,CAAI,EDmMJotB,CAAmBtpB,EAFbnD,EAAAA,GAAW2Y,YAAY5U,EAAUmnB,GAEH,EAGvCjD,EAA6B,MACjCxqB,EAAAA,EAAAA,IAAqBC,EAAAA,GAAkBgvB,IAAK9uB,EAAAA,GAAoB8uB,IAAIC,6BAA6B,EAG7FvC,EAA2BwC,KAC/BnvB,EAAAA,EAAAA,IAAqBC,EAAAA,GAAkBC,gBAAiBC,EAAAA,GAAoBD,gBAAgBkvB,gBAAiB,CAC3GD,cACA,EAGEpC,EAAwBsC,IACdC,EAAAA,EAAAA,yBAAwB,CACpC/F,iBAAkBC,EAAAA,GAAgBC,kBAClCrB,QAASiH,EAAkB3sB,MAAM0lB,UAGtBmH,WAAW,GAGpBrC,EAA4B,CAAChiB,EAAyBmkB,KAC1D,MAAMztB,EAAOmrB,EAAqBsC,GAC9BztB,GAAQA,EAAKtH,SACfsH,EAAKtH,QAAQ4Q,EACf,EA6CWskB,EAAyBx0B,IAC7B,CACLy0B,cAAcx0B,EAAAA,EAAAA,KAAI,CAChBa,MAAO,OACPC,OAAQ,OACRqI,MAAO,gBACP9C,SAAU,WACVpG,QAAS,OAIT,uBAAwB,CACtBw0B,QAAS,EACTxqB,WAAY,UACZ+e,WAAY,OACZ,UAAW,CACTA,WAAYjpB,EAAMgE,OAAOC,UAAU0wB,W,uWEtUtC,MAAMC,UAAuB/b,EAAAA,aAClC/P,WAAAA,CAAY,EAAiD,EAAoB,GAC/EC,QAAK,2EADY4E,SAAAA,EAAAA,KAAiDpL,IAAAA,EAAAA,KAAoBuK,MAAAA,CAExF,EACA,EAJW8nB,EAIGhwB,OAAO,cAGhB,MAAMiwB,UAAyBhc,EAAAA,aACpC/P,WAAAA,CAAY,EAAoB,EAAuB,GACrDC,QAAK,2EADYxG,IAAAA,EAAAA,KAAoBuK,MAAAA,EAAAA,KAAuBa,SAAAA,CAE9D,EAcK,SAASmnB,EAAenwB,EAA6BmT,EAAoB6H,GAC9E,MAAM/a,EAAuC,MAApBD,EAAOgJ,SAAmB,UAAY,UAC/DonB,EAAapwB,EAAOpC,IAAKoC,EAAOmI,MAAOlI,EAAMkT,EAAO6H,EACtD,CAIO,SAASqV,EACdzyB,EACAuV,EACA6H,EACA7S,EACAa,GAEKgS,IACHA,EAAesV,EAA4B1yB,EAAKuV,IAElD,MAAMnQ,GAAWutB,EAAAA,EAAAA,IAAwBC,EAA6B5yB,EAAKod,GAAe7H,GAE1F,IAAI9N,EAAUrC,EAASD,MAAMsC,QAAQrF,QAAQA,IAC3C,MAAMywB,GAAaC,EAAAA,EAAAA,IAAgC1tB,EAAUhD,GAC7D,OAAImI,GAASa,IACFhJ,EAAOpC,MAAQA,GAAO6yB,EAAWtoB,QAAUA,GAASnI,EAAOgJ,WAAaA,GAE/Eb,IACOnI,EAAOpC,MAAQA,GAAO6yB,EAAWtoB,QAAUA,GAElDa,IACOhJ,EAAOpC,MAAQA,GAAOoC,EAAOgJ,WAAaA,KAG5ChJ,EAAOpC,MAAQA,EAAE,IAG5BuV,EAAMkF,aAAa,IAAI6X,EAAiBtyB,EAAKuK,EAAOa,IAAW,GAE/DhG,EAASY,SAAS,CAChByB,WAEJ,CApDE,EAJW6qB,EAIGjwB,OAAO,cAuDvB,MAAM0wB,EAA0BC,GAC1BA,IAAOxnB,EAAAA,EAASgX,IAAMwQ,IAAOxnB,EAAAA,EAASiX,IACjC,UAELuQ,IAAOxnB,EAAAA,EAASkX,IAAMsQ,IAAOxnB,EAAAA,EAASmX,IACjC,cADT,EAMK,SAASuB,EACdlkB,EACAuV,EACAnK,EACAgS,GAEKA,IACHA,EAAesV,EAA4B1yB,EAAKuV,IAElD,MAAMnQ,GAAWutB,EAAAA,EAAAA,IAAwBC,EAA6B5yB,EAAKod,GAAe7H,GACpF0d,EAAe7nB,EAAW2nB,EAAuB3nB,QAAYrN,EAEnE,IAAI0J,EAAUrC,EAASD,MAAMsC,QAAQrF,QAAQA,KAEzCA,EAAOpC,MAAQA,IACd+yB,EAAuB3wB,EAAOgJ,YAAc6nB,GAAgB7wB,EAAOgJ,WAAaI,EAAAA,EAAS+W,aAI9Fnd,EAASY,SAAS,CAChByB,WAEJ,CAEO,SAASyrB,EACdlzB,EACAuK,EACAa,EACAmK,EACA6H,GAEA,MAAM6V,EAAeF,EAAuB3nB,GAEvCgS,IACHA,EAAesV,EAA4B1yB,EAAKuV,IAElD,MAAMnQ,GAAWutB,EAAAA,EAAAA,IAAwBC,EAA6B5yB,EAAKod,GAAe7H,GAE1F,IAAI4d,EACA/V,IAAiBlT,EAAAA,KACnBipB,EAAc3oB,KAAKC,UAAU,CAC3BF,QACAG,QAAQ0oB,EAAAA,EAAAA,IAAkBpzB,EAAKuV,MAInC,IAAI9N,EAAUrC,EAASD,MAAMsC,QAAQrF,QAAQA,KAEzCA,EAAOpC,MAAQA,IACd+yB,EAAuB3wB,EAAOgJ,YAAc6nB,GAAgB7wB,EAAOgJ,WAAaI,EAAAA,EAAS+W,aAI9F9a,EAAU,IACLA,EACH,CACEzH,MACAoL,SAAUA,EACVb,MAAO4oB,GAA4B5oB,EACnC8oB,YAAa,CAAC9oB,KAIlBgL,EAAMkF,aAAa,IAAI4X,EAAejnB,EAAUpL,EAAKuK,IAAQ,GAE7DnF,EAASY,SAAS,CAChByB,WAEJ,CAEO,SAAS+qB,EACdxyB,EACAuK,EACAa,EACAmK,EACA6H,GAEKA,IACHA,EAAesV,EAA4B1yB,EAAKuV,IAG9C6H,IAAiB6B,EAAAA,KACnBqU,EAAAA,EAAAA,IAAetzB,EAAKuK,EAAOgL,GAG7B,MAAMnQ,GAAWutB,EAAAA,EAAAA,IAAwBC,EAA6B5yB,EAAKod,GAAe7H,GAE1F,IAAI4d,EACA/V,IAAiBlT,EAAAA,KACnBipB,EAAc3oB,KAAKC,UAAU,CAC3BF,QACAG,QAAQ0oB,EAAAA,EAAAA,IAAkBpzB,EAAKuV,MAKnC,IAAI9N,EAAUrC,EAASD,MAAMsC,QAAQrF,QAAQA,IAC3C,MAAMywB,GAAaC,EAAAA,EAAAA,IAAgC1tB,EAAUhD,GAG7D,MAAiB,YAAbgJ,IACOhJ,EAAOpC,MAAQA,GAAOoC,EAAOgJ,WAAaI,EAAAA,EAASC,SAGrDrJ,EAAOpC,MAAQA,GAAO6yB,EAAWtoB,QAAUA,EAAI,IAG1D,MAAMgpB,EAAe9rB,EAAQ1G,SAAWqE,EAASD,MAAMsC,QAAQ1G,QAE9C,YAAbqK,GAAuC,YAAbA,IAA4BmoB,GAA6B,WAAbnoB,KACxE3D,EAAU,IACLA,EACH,CACEzH,MACAoL,SAAuB,YAAbA,EAAyBI,EAAAA,EAAS+W,SAAW/W,EAAAA,EAASC,MAChElB,MAAO4oB,GAA4B5oB,EACnC8oB,YAAa,CAAC9oB,MAKpBgL,EAAMkF,aAAa,IAAI4X,EAAejnB,EAAUpL,EAAKuK,IAAQ,GAE7DnF,EAASY,SAAS,CAChByB,WAEJ,CAEO,SAAS+rB,EACdxzB,EACAuK,EACAa,EACAmK,IAEiBod,EAAAA,EAAAA,IACfC,EAA6B5yB,EAAK0yB,EAA4B1yB,EAAKuV,IACnEA,GAGOvP,SAAS,CAChByB,QAAS,CACP,CACEzH,MACAoL,SAAuB,YAAbA,EAAyBI,EAAAA,EAAS+W,SAAW/W,EAAAA,EAASC,MAChElB,UAGJ8U,KAAMC,EAAAA,GAAaM,WAEvB,CAEO,SAASgT,EAA6BjJ,EAAe8J,GAE1D,OAAI9J,IAAU+J,EAAAA,GACLjb,EAAAA,GAEFgb,CACT,CAEA,SAASf,EAA4B/I,EAAepU,G,IAC7Boe,EAAAA,EACrB,OAD4Cpe,QAAvBoe,GAAAA,EAAAA,EAAAA,IAAuBpe,UAAvBoe,IAAAA,GAAqC,QAArCA,EAAAA,EAA+BpK,cAA/BoK,IAAAA,OAAAA,EAAAA,EAAuClO,MAAM5e,GAAUA,EAAM5G,OAAS0pB,KACrE1K,EAAAA,GAAa/U,EAAAA,EACrC,CAEO,MAAM0pB,UAA2B/uB,EAAAA,G,kBAAjC,YACL,OAAO9H,WAAWsF,IAChB,MAAMD,EAASipB,EAAUtlB,KAAKZ,MAAMimB,OACpC,IAAKhpB,EACH,OAGFowB,EAAapwB,EAAOnC,KAAMmC,EAAOmI,MAAOlI,EAAM0D,KAAMA,KAAKZ,MAAMsuB,cAE/D,MAAMruB,GAAWutB,EAAAA,EAAAA,IAAwBC,EAA6BxwB,EAAOnC,KAAM8F,KAAKZ,MAAMsuB,cAAe1tB,OAC7GtD,EAAAA,EAAAA,IACEC,EAAAA,GAAkBC,gBAClBC,EAAAA,GAAoBD,gBAAgBkxB,oCACpC,CACEC,WAAY/tB,KAAKZ,MAAMsuB,aACvBzzB,IAAKoC,EAAOnC,KACZoO,OAAQhM,EACR0xB,eAAe3uB,aAAAA,EAAAA,EAAUD,MAAMsC,QAAQ1G,SAAU,GACnD,IAIJizB,EAAAA,KAAAA,cAAa,KACX,MAAM5xB,EAASipB,EAAUtlB,KAAKZ,MAAMimB,OACpC,IAAKhpB,EACH,MAAO,CAAEvG,YAAY,EAAOD,YAAY,GAG1C,MAAMwJ,GAAWutB,EAAAA,EAAAA,IAAwBC,EAA6BxwB,EAAOnC,KAAM8F,KAAKZ,MAAMsuB,cAAe1tB,MAGvGkuB,EAA0B7uB,EAASD,MAAMsC,QAAQge,MAAMta,IAC3D,MAAMZ,GAAQuoB,EAAAA,EAAAA,IAAgC1tB,EAAU+F,GACxD,OAAOA,EAAEnL,MAAQoC,EAAOnC,MAAQsK,EAAMA,QAAUnI,EAAOmI,KAAK,IAG9D,OAAK0pB,EAIE,CACLp4B,WAAYo4B,EAAwB7oB,WAAaI,EAAAA,EAASC,MAC1D7P,WAAYq4B,EAAwB7oB,WAAaI,EAAAA,EAAS+W,UALnD,CAAE1mB,YAAY,EAAOD,YAAY,EAMzC,G,EAGH,EA9CWg4B,EA8CGpuB,aAAY,EAAGV,YAC3B,MAAM,WAAEjJ,EAAU,WAAED,GAAekJ,EAAMkvB,aACzC,OACE,kBAACt4B,EAAAA,EAAYA,CACXQ,WAAY,UACZL,WAAYA,EACZD,WAAYA,EACZE,UAAW,IAAMgJ,EAAM/H,QAAQ,WAC/Bf,QAAS,IAAM8I,EAAM/H,QAAQ,SAC7BhB,UAAW,IAAM+I,EAAM/H,QAAQ,Y,IAMvC,MAAMsuB,EAAaD,I,IAEaA,EAAAA,EAA9B,MAAMiB,EAA+C,QAAvBjB,EAAe,QAAfA,EAAAA,EAAM7B,OAAO,UAAb6B,IAAAA,OAAAA,EAAAA,EAAiB9B,cAAjB8B,IAAAA,EAAAA,EAA2B,CAAC,EAE1D,GAAkD,IAA9ClZ,OAAOtD,KAAKyd,GAAuBtrB,OACrC,OAEF,MAAMd,EAAOiS,OAAOtD,KAAKyd,GAAuB,GAEhD,MAAO,CAAEpsB,OAAMsK,MADD8hB,EAAsBpsB,GACd,C,+PCjUjB,MAAMi0B,UAA6B5d,EAAAA,cACxC,EADW4d,EACG7xB,OAAO,0BAOvB,MAAM8xB,EAAwC,CAAC,EAExC,MAAMC,UAA6BvvB,EAAAA,GAoChCwvB,YAAAA,CAAajyB,GACnB,MAAM0tB,EAAiB9qB,EAAAA,GAAW4U,WAChC7T,MACC8T,GAAMA,aAAaya,EAAAA,GAAuBza,aAAa0a,EAAAA,KAE1D,GAAIzE,aAA0BwE,EAAAA,GAAuBxE,aAA0ByE,EAAAA,GAAsB,CACnGJ,EAAcpuB,KAAKyuB,UAAYpyB,EAC/B,MAAMqyB,EAAkBzvB,EAAAA,GAAW0vB,gBAAgB5E,EAAgB6E,EAAAA,GACnEF,SAAAA,EAAiBtf,SAASyf,IACpBA,EAAMzvB,MAAMkC,KAAKyS,UACnB8a,EAAMC,eAAezyB,EACvB,GAEJ,MACEmG,EAAAA,EAAOC,KAAK,iCAAkC,CAC5CssB,kBAAmBhF,EACnB1tB,UAGN,CArDAmE,WAAAA,CAAYiuB,G,IAEAL,EADV3tB,MAAM,CACJpE,OAA+B,QAAvB+xB,EAAAA,EAAcK,UAAdL,IAAAA,EAAAA,EAA2B,KAHvC,OAAQK,gBAAR,GAoBA,OAAOO,uBAAuBpnB,IAC5B5H,KAAKC,SAAS,CAAE5D,OAAQuL,EAAM/J,OAAO2G,QACrCxE,KAAKsuB,aAAa1mB,EAAM/J,OAAO2G,MAAM,IAGvC,OAAOyqB,oBAAmB,KACxBjvB,KAAKC,SAAS,CAAE5D,OAAQ,KACxB2D,KAAKsuB,aAAa,GAAG,IAGvB,OAAOpgB,SAAQ,KACblO,KAAKC,SAAS,CAAE5D,OAAQ,KACxB+xB,EAAcpuB,KAAKyuB,UAAY,EAAE,IA3BjCzuB,KAAKyuB,SAAWA,CAClB,EAEA,EATWJ,EASG5uB,aAAY,EAAGV,YAC3B,MAAM,OAAE1C,GAAW0C,EAAMjF,WACzB,OACE,kBAACo1B,EAAAA,EAAWA,CACV1qB,MAAOnI,EACP2lB,SAAUjjB,EAAMiwB,oBAChB/4B,QAAS8I,EAAMkwB,iBACfE,YAAY,oB,2SCAb,MAAMP,UAAwB9vB,EAAAA,GAgD3BswB,aAAAA,CAAcpK,GACpB,MAAMqK,EAA+B,GAC/BC,GAAeC,EAAAA,EAAAA,YAAWvK,EAAKwK,OAAQxvB,KAAKyvB,OAAQzvB,KAAK6P,WAE/D,IAAK,IAAI6f,EAAc,EAAGA,EAAcJ,EAAat0B,OAAQ00B,IAAe,CAC1E,MAAMC,EAAc3vB,KAAKZ,MAAMwwB,eAAeN,EAAaI,GAAcA,GACzEL,EAAYrmB,KAAK2mB,EACnB,CAEA3vB,KAAKsvB,aAAeA,EACpBtvB,KAAK6vB,mBAAqBR,EAEtBrvB,KAAKslB,aACPtlB,KAAKZ,MAAMkC,KAAKrB,SAAS,CAAEjH,SAAU,KACrCgH,KAAK8uB,eAAe9uB,KAAKslB,cAEzBtlB,KAAKZ,MAAMkC,KAAKrB,SAAS,CAAEjH,SAAUq2B,GAEzC,CAwCA,mBAA2BrK,GACzB,MAAM8K,EAAiB7wB,EAAAA,GAAWoD,YAAYrC,KAAM+vB,EAAAA,GAEpD,GAAID,EAAgB,CAClB,MAAME,EAAoB/wB,EAAAA,GAAWgV,eACnC6b,GACCG,GAAQA,EAAIlc,UAAYkc,EAAI7wB,MAAMnF,MAAQi2B,EAAAA,KAE7C,GAAIF,EAAkB,aAAcptB,EAAAA,GAAiB,CACnD,MAAMutB,EAAQlxB,EAAAA,GAAW0vB,gBAAgBqB,EAAkB,GAAIhc,EAAAA,IAAU,GACrEmc,aAAiBnc,EAAAA,GACnBmc,EAAMlwB,SAAS,CACbooB,MAAO,IAAI+H,EAAAA,GAAqB,CAC9BC,gBAAiB,CAAC,KAAMC,OA4EJhmB,EA5EsB0a,EAAK,GA6EnDuL,GACCA,EAAOC,MACZpzB,EAAAA,EAAAA,MAAKqzB,IACH,IAAKnmB,IAAYA,EAAQtP,OACvB,OAAOy1B,EAET,IAAIC,EAAyB,GAO7B,OANAD,EAAOrhB,SAAShK,IACd,MAAMtE,GAAQ6vB,EAAAA,EAAAA,IAAcvrB,GACxBkF,EAAQhL,SAASwB,IACnB4vB,EAAU1nB,KAAK5D,EACjB,IAEKsrB,CAAS,KAdjB,IAA2BpmB,C,OAxExB9H,EAAAA,EAAOC,KAAK,yCAA0C,CAAEmuB,mBAAoBT,GAEhF,MACE3tB,EAAAA,EAAOC,KAAK,8CAA+C,CAAEouB,yBAA0Bb,GAE3F,CACF,CA3HA,YAAmB,G,IAAA,OACjBP,EAAM,UACN5f,EAAS,UACTyV,GAHiB,EAMjB7kB,M,kXAFGrB,CAJc,GACjBqwB,SACA5f,YACAyV,eARF,OAAQuK,qBAAsC,IAC9C,OAAQJ,cAAR,GACA,OAAQ5f,iBAAR,GACA,OAAQyf,eAA4B,IACpC,OAAQhK,iBAAR,GAkCA,OAAOrf,QAAO,CAACwpB,EAAgB5f,KAC7B,MAAMmV,EAAO/lB,EAAAA,GAAWgmB,QAAQjlB,MAChCA,KAAKyvB,OAASA,EACdzvB,KAAK6P,UAAYA,EACbmV,EAAK5lB,MAAM4lB,MACbhlB,KAAKovB,cAAcpK,EAAK5lB,MAAM4lB,KAChC,IAuBF,OAAO8L,iBAAiBzmB,IAEtB,GADapL,EAAAA,GAAWgmB,QAAQjlB,MAAMZ,MAAM4lB,KAI5C,IAAK,IAAI0K,EAAc,EAAGA,EAAc1vB,KAAKsvB,aAAat0B,OAAQ00B,IAChErlB,EAASrK,KAAKsvB,aAAcI,EAC9B,IAGFZ,EAAAA,KAAAA,kBAAkBzyB,IAChB,IAAI00B,EAAqB,GAEzB/wB,KAAK8wB,eAAc,CAACL,EAAQf,KAC1B,MAAMtL,GAAauM,EAAAA,EAAAA,IAAcF,EAAOf,IACxCqB,EAAS/nB,KAAKob,EAAW,KAE3B4M,EAAAA,EAAAA,GAAYD,EAAU10B,GAAS2oB,IACzBA,GAAQA,EAAK,GAEfhlB,KAAKixB,cAAc5L,IACjB,MAAMvkB,GAAQ6vB,EAAAA,EAAAA,IAActL,GAC5B,OAAOL,EAAK,GAAG1lB,SAASwB,EAAM,IAIhCd,KAAKixB,cAAa,KAAM,IAG1BjxB,KAAKkxB,mBAAmBlM,EAAK,GAC7B,IAiCJ,OAAOiM,gBAAgBE,IACrB,MAAM9B,EAA+B,GAOrC,GANArvB,KAAK8wB,eAAc,CAACL,EAAQf,KACtByB,EAASV,EAAOf,KAClBL,EAAYrmB,KAAKhJ,KAAK6vB,mBAAmBH,GAC3C,IAGyB,IAAvBL,EAAYr0B,OAAc,CAC5B,MAAMqB,EAAS2D,KAAKslB,YACpBtlB,KAAKZ,MAAMkC,KAAKrB,SAAS,CAAEjH,SAAU,CAACo4B,EAAoB/0B,EAAQ2D,KAAKqxB,eACzE,MACErxB,KAAKZ,MAAMkC,KAAKrB,SAAS,CAAEjH,SAAUq2B,GACvC,IAGF,OAAOgC,eAAc,KACnBrxB,KAAK0U,aAAa,IAAIyZ,EAAAA,GAAwB,EAAK,IAtInDnuB,KAAKyvB,OAASA,EACdzvB,KAAK6P,UAAYA,EACjB7P,KAAKslB,UAAYA,EAEjBtlB,KAAKW,sBAAqB,KACxB,MAAMqkB,EAAO/lB,EAAAA,GAAWgmB,QAAQjlB,MAEhCA,KAAK2S,MAAMC,IACToS,EAAKnS,kBAAiB,CAACmS,EAAMsM,K,IAEzBtM,EACCA,EAC4BsM,EAAAA,IAFpB,QAATtM,EAAAA,EAAKA,YAALA,IAAAA,OAAAA,EAAAA,EAAW5lB,SAAUmyB,EAAAA,aAAaC,OACxB,QAATxM,EAAAA,EAAKA,YAALA,IAAAA,OAAAA,EAAAA,EAAW5lB,SAAUmyB,EAAAA,aAAaE,WACjCzM,EAAKA,KAAKwK,OAAOx0B,QAAsC,QAA5Bs2B,EAAa,QAAbA,EAAAA,EAAStM,YAATsM,IAAAA,OAAAA,EAAAA,EAAe9B,OAAOx0B,cAAtBs2B,IAAAA,EAAAA,EAAgC,KAE7DtxB,KAAKovB,cAAcpK,EAAKA,KAC1B,KAIAA,EAAK5lB,MAAM4lB,MACbhlB,KAAKovB,cAAcpK,EAAK5lB,MAAM4lB,KAChC,GAEJ,EAwHF,SAASoM,EAAoB/0B,EAAgBg1B,GAC3C,OAAO,IAAIzuB,EAAAA,GAAgB,CACzBiN,UAAW,MACX7W,SAAU,CACR,IAAImiB,EAAAA,GAAc,CAChB7Z,KAAM,IAAIowB,EAAAA,GAAiB,CACzBC,UACE,kBAACp7B,MAAAA,CAAIC,UAAWJ,EAAOw7B,gBACrB,kBAACpzB,EAAAA,MAAKA,CAACnH,MAAM,GAAGqH,SAAS,OAAOlI,UAAWJ,EAAOy7B,gBAAgB,6BAC/Bx1B,EAAO,IACxC,kBAAC3F,EAAAA,OAAMA,CAACF,UAAWJ,EAAO07B,YAAa96B,QAASq6B,GAAa,wBAU7E,CA1BE,EAvJWzC,EAuJGnvB,aAAY,EAAGV,YAC3B,MAAM,KAAEuC,GAASvC,EAAMjF,WACvB,OAAO,kBAACwH,EAAK7B,UAAS,CAACV,MAAOuC,G,IA0BlC,MAAMlL,EAAS,CACbw7B,gBAAgBj6B,EAAAA,EAAAA,KAAI,CAClBwJ,SAAU,EACVvJ,QAAS,OACTC,eAAgB,SAChBgB,WAAY,WAEdg5B,gBAAgBl6B,EAAAA,EAAAA,KAAI,CAClBo6B,SAAU,OACV5wB,SAAU,IAEZ2wB,aAAan6B,EAAAA,EAAAA,KAAI,CACfoG,WAAY,W,iGCxNT,MAAMi0B,UAAyBlzB,EAAAA,GACpC,gBAAcW,EAAU,MAAEV,IACxB,MAAM,KAAEzC,GAASyC,EAAMjF,WACvB,OACE,kBAACf,EAAAA,EAASA,KACR,kBAACyF,EAAAA,MAAKA,CAACnH,MAAM,GAAGqH,SAAS,WAAU,uBACZpC,EAAK,mCAAiC,IAC3D,kBAACoB,IAAAA,CACClH,UAAWy7B,EAAAA,GAAiB3zB,KAC5BX,KAAK,sCACLE,OAAO,SACPC,IAAI,uBACL,eAEI,IAAI,mCAKjB,E,iOCNK,SAASo0B,GAAiB,QAAEtuB,EAAO,MAAEY,EAAK,SAAEwd,EAAQ,MAAElhB,IAC3D,MAAM1K,GAASC,EAAAA,EAAAA,YAAWC,IACnB67B,EAAUC,IAAet4B,EAAAA,EAAAA,WAAS,GAEnCu4B,EAAuCzuB,EAAQxG,KAAK4J,IACjD,CACLlG,MAAOkG,EAAOlG,MACd0D,MAAOwC,EAAOxC,UAGlB,OACE,kBAAC8tB,EAAAA,YAAWA,CAAC97B,UAAWJ,EAAOm8B,cAAezxB,MAAOA,GACnD,kBAAC0xB,EAAAA,OAAMA,CACC5uB,QAASyuB,EAAmB7tB,QAClCiuB,WAAY,IAAML,GAAY,GAC9BM,YAAa,IAAMN,GAAY,GAC/BpQ,SAAWmQ,GAAiCnQ,EAASmQ,EAAS3tB,OAC9DhO,UAAWJ,EAAOu8B,OAClBC,OAAQT,OAAWn6B,EAAY,kBAACwC,EAAAA,KAAIA,CAACN,KAAM,aAInD,CAEO,SAAS24B,GAAqB,QACnCjvB,EAAO,MACPY,EAAK,SACLwd,EAAQ,MACRlhB,EAAK,aACLgyB,EAAY,UACZC,EAAS,cACTC,I,IAa2BC,EAX3B,MAAM78B,GAASC,EAAAA,EAAAA,YAAWC,IACnB67B,EAAUC,IAAet4B,EAAAA,EAAAA,WAAS,IAClCm5B,EAAcC,IAAmBp5B,EAAAA,EAAAA,UAAkCk5B,GAEpEX,EAAuCzuB,EAAQxG,KAAK4J,IACjD,CACLlG,MAAOkG,EAAOlG,MACd0D,MAAOwC,EAAOxC,UAGZ2uB,EACJF,GAAgBzuB,IAA2B,QAAlByuB,EAAAA,EAAazuB,aAAbyuB,IAAAA,OAAAA,EAAAA,EAAoB3zB,SAASkF,IAClD,CAACyuB,KAAiBZ,GAClBA,EAEAe,EAAiBD,aAAAA,EAAAA,EAAYzT,MAAM2T,GAAQA,EAAI7uB,QAAUA,IAE/D,OACE,kBAAC8tB,EAAAA,YAAWA,CAAC97B,UAAWJ,EAAOk9B,0BAA2BxyB,MAAOA,GAC/D,kBAAC0xB,EAAAA,OAAMA,CACLO,UAAWA,EACX97B,cAAaC,EAAAA,EAAQq8B,qBAAqBnb,OAC1C+W,YAAa,gBACbvrB,QAASuvB,EACTK,aAAa,EACbhvB,MAAOA,EACPiuB,WAAY,IAAML,GAAY,GAC9BM,YAAa,IAAMN,GAAY,GAC/BqB,kBAAkB,EAClBb,OAAQT,IAAYiB,aAAAA,EAAAA,EAAgBM,gBAAY17B,EAAY,kBAACwC,EAAAA,KAAIA,CAACN,KAAM,WACxE8nB,SAAU,CAACxd,EAAgCmvB,KAEzC,OAAInvB,aAAAA,EAAAA,EAAOkvB,aAAalvB,aAAAA,EAAAA,EAAO4d,OAC7B8Q,G,wUAAgB,IAAK1uB,G,WAAAA,CAAO4d,KAAM,W,gVAC3BJ,EAASxd,EAAMA,QAIE,UAAtBmvB,EAAWrrB,OACN0Z,EAAS,SAIQ,kBAAtB2R,EAAWrrB,QAA8B9D,EAAMA,QAAUA,EAAMkvB,WACjEZ,EAAatuB,EAAMA,Q,OACrB,EAEF0Z,cAAe,CAAC1Z,EAA2BmvB,KAEzC,MAAM7d,EAAO6d,EAGb,MAAoB,iBAAhB7d,EAAKxN,OACA0Z,EAASxd,GAIE,eAAhBsR,EAAKxN,QAA2BwN,EAAK8d,gBACvCV,EAAgB,CACd1uB,OAAOqvB,EAAAA,EAAAA,IAAmB/d,EAAK8d,gBAC/B9yB,MAAOgV,EAAK8d,eACZxR,KAAM,SACNsR,WAAW,IAEN1R,EAASlM,EAAK8d,sBAPvB,CAQA,IAKV,CAEA,SAASt9B,EAAUoB,GACjB,MAAO,CACLo8B,OAAOn8B,EAAAA,EAAAA,KAAI,CACTsnB,aAAc,IAEhB0T,QAAQh7B,EAAAA,EAAAA,KAAI,CACV0J,SAAU3J,EAAMiB,QAAQ,IACxBo5B,SAAUr6B,EAAMiB,QAAQ,MAE1B45B,eAAe56B,EAAAA,EAAAA,KAAI,CACjBmJ,MAAO,gCACPO,SAAU3J,EAAMiB,QAAQ,MACxBo5B,SAAUr6B,EAAMiB,QAAQ,IACxBuoB,YAAaxpB,EAAMiB,QAAQo7B,GAC3B9U,aAAc,IAEhBqU,2BAA2B37B,EAAAA,EAAAA,KAAI,CAC7BmJ,MAAO,yBACPO,SAAU3J,EAAMiB,QAAQ,MACxBo5B,SAAUr6B,EAAMiB,QAAQ,IACxBuoB,YAAaxpB,EAAMiB,QAAQo7B,GAC3B9U,aAAc,IAGpB,C,mQC7GO,MAAM+K,UAAkClrB,EAAAA,GAM7C,eAAck1B,EAAS,MAAEj1B,IACvB,MAAM,KAAEuC,GAASvC,EAAMjF,WACvB,OAAIwH,aAAgByuB,EAAAA,EACX,oCAAGzuB,GAAQ,kBAACyuB,EAAAA,EAAeiE,SAAQ,CAACj1B,MAAOuC,KAG7C,oCACT,CAYAvB,UAAAA,G,IA0BI,EAzBF,MAAMk0B,GAAkBC,EAAAA,EAAAA,IAAwBl0B,MAC1Cm0B,EAASrsB,OAAOmsB,EAAgB70B,MAAMoF,OAEtCuS,GAAiBxE,EAAAA,EAAAA,IAAkBvS,MACnCo0B,GAAsBC,EAAAA,EAAAA,IAAuBr0B,MAC7Cs0B,GAAcC,EAAAA,EAAAA,IAAuBJ,EAAQpd,EAAgBqd,GAC7DI,GAAQC,EAAAA,EAAAA,GAAeH,EAAa,CAAE9O,aAAc,KAAK2O,MAAYjJ,MAAOiJ,IAElFn0B,KAAKC,SAAS,CACZqB,KAAMtB,KAAKgpB,MAAMwL,GACjBnM,MAAO,IAAI+H,EAAAA,GAAqB,CAC9B/H,OAAOqM,EAAAA,EAAAA,IAAe,CAACF,IACvBnE,gBAAiB,OAIrBrwB,KAAK2S,MAAMC,IACT5S,KAAKiT,iBAAiBqZ,EAAAA,IAAiB1kB,IACrC5H,KAAKC,SAAS,CACZ00B,gBAAiB/sB,GACjB,KAIN5H,KAAK2S,MAAMC,IACO,QAAhB,EAAA5S,KAAKZ,MAAMipB,aAAX,eAAkBxV,kBAAkBC,IAClC9S,KAAK40B,wBAAwB9hB,EAAU0hB,EAAM,IAGnD,CAEQI,uBAAAA,CAAwB9hB,EAA0B0hB,G,IACpD1hB,EAsBAA,EAtBJ,IAAiB,QAAbA,EAAAA,EAASkS,YAATlS,IAAAA,OAAAA,EAAAA,EAAe1T,SAAUmyB,EAAAA,aAAaC,KAAM,C,IAK1C1e,EAHJ,MAAMlL,EAAQ5H,KAAKZ,MAAMu1B,iBAGR,QAAb7hB,EAAAA,EAASkS,YAATlS,IAAAA,OAAAA,EAAAA,EAAe1T,SAAUmyB,EAAAA,aAAaC,MAAQ5pB,IACzB,YAAnBA,EAAMvC,UAA0ByN,EAASkS,KAAKwK,OAAOx0B,OAAS,GAChEgF,KAAK60B,mBAIgB,YAAnBjtB,EAAMvC,UAA0ByN,EAASkS,KAAKwK,OAAOx0B,QAAU,GACjEgF,KAAK60B,oBAIL70B,KAAKZ,MAAMkC,gBAAgBowB,EAAAA,IAC7B1xB,KAAKC,SAAS,CACZqB,KAAMtB,KAAKgpB,MAAMwL,IAGvB,EACiB,QAAb1hB,EAAAA,EAASkS,YAATlS,IAAAA,OAAAA,EAAAA,EAAe1T,SAAUmyB,EAAAA,aAAa/tB,OACxCxD,KAAK80B,cAAchiB,EAASkS,KAAK+P,OAErC,CAEQD,aAAAA,CAAcC,GACpB/0B,KAAKC,SAAS,CACZqB,KAAM,IAAIowB,EAAAA,GAAiB,CACzBC,UACE,kBAACnzB,EAAAA,MAAKA,CAACnH,MAAO,yCAA0CqH,SAAU,SAC/Dq2B,aAAAA,EAAAA,EAAQ33B,KAAI,CAAC43B,EAAK/6B,IACjB,kBAAC1D,MAAAA,CAAI0D,IAAKA,GACP+6B,EAAIC,QACH,oCACE,kBAACC,SAAAA,KAAO,UAAe,KAAGF,EAAIC,OAAO,IAAC,kBAACt2B,KAAAA,OAG1Cq2B,EAAIG,SACH,oCACE,kBAACD,SAAAA,KAAO,WAAgB,KAAGF,EAAIG,QAAQ,IAAC,kBAACx2B,KAAAA,OAG5Cq2B,EAAII,SACH,oCACE,kBAACF,SAAAA,KAAO,WAAgB,KAAGF,EAAII,gBASjD,CAEQP,gBAAAA,GACN70B,KAAKC,SAAS,CACZ00B,qBAAiB38B,KAEnBq9B,EAAAA,EAAAA,IAAwBvjB,EAAAA,GAAU0R,OAAQvkB,EAAAA,GAAWoD,YAAYrC,KAAMiS,EAAAA,IACzE,CAEQ+W,KAAAA,CAAMwL,GACZ,MAAMP,GAAkBC,EAAAA,EAAAA,IAAwBl0B,MAC1Cs1B,EAAcxtB,OAAOmsB,EAAgB70B,MAAMoF,QAE3C,OAAEirB,EAAM,UAAE5f,IAAc0lB,EAAAA,EAAAA,IAAoB,SAAUC,EAAAA,gBAAiB,QAEvEC,EAAuBx2B,EAAAA,GAAWoD,YAAYrC,KAAMwuB,EAAAA,IACpDlJ,EAAY,K,IAAMmQ,E,OAA8C,QAA9CA,EAAAA,EAAqBr2B,MAAMgZ,OAAOhZ,MAAM/C,cAAxCo5B,IAAAA,EAAAA,EAAkD,EAAE,EAEtEC,GAAqBrI,EAAAA,EAAAA,IAAkBiI,EAAat1B,MAE1D,OAAO,IAAI+vB,EAAAA,EAAe,CACxBnsB,QAAS,CACP,CAAEY,MAAO,SAAU1D,MAAO,UAC1B,CAAE0D,MAAO,OAAQ1D,MAAO,QACxB,CAAE0D,MAAO,OAAQ1D,MAAO,SAE1Bqf,OAAQ,OACRwV,QAAS,CAEP,IAAI/yB,EAAAA,GAAgB,CAClBiN,UAAW,SACX7W,SAAU,CACR,IAAI04B,EAAAA,GAAiB,CACnBC,UAAW,kBAACnD,EAAAA,GAAqBoH,WAAU,CAAC72B,MAAO02B,MAErD,IAAIta,EAAAA,GAAc,CAChB/Z,UAAW,IACXE,KAAMinB,EAAAA,GAAcC,aACjBK,SAASyM,GAGT1M,QAAQ,IAAIhC,EAAAA,GAAU,CAAC,IACvBoC,aAMT,IAAIpmB,EAAAA,GAAgB,CAClBiN,UAAW,SACX7W,SAAU,CACR,IAAI04B,EAAAA,GAAiB,CACnBC,UAAW,kBAACnD,EAAAA,GAAqBoH,WAAU,CAAC72B,MAAO02B,MAErD,IAAII,EAAAA,GAAuB,CAAEx+B,MAAOi+B,IACpC,IAAI5D,EAAAA,GAAiB,CACnBC,UAAW,kBAACnD,EAAAA,GAAqBsH,WAAU,CAAC/2B,MAAO02B,MAErD,IAAI7G,EAAAA,EAAgB,CAClBttB,KAAM,IAAIy0B,EAAAA,GAAmB,CAC3BC,gBAAiBC,EAAAA,GACjBC,SAAU,QACVl9B,SAAU,CACR,IAAImiB,EAAAA,GAAc,CAChB7Z,KAAM,IAAIowB,EAAAA,GAAiB,CACzBC,UAAW,kBAACpV,EAAAA,mBAAkBA,CAAC3jB,KAAK,oBAI1Cu9B,QAAQ,IAEVvG,gBAAgBwG,EAAAA,EAAAA,IACdzF,EAAAA,IACA6D,aAAAA,EAAAA,EAAOzxB,KAAKzD,SAAS,oBAAqB+2B,EAAAA,UAAUC,KAAOD,EAAAA,UAAUE,KAC9C,uBAAvBb,EAA8Cte,EAAAA,GAAejT,EAAAA,GAC7DlF,EAAAA,GAAWoD,YAAYrC,KAAMwuB,EAAAA,IAAsBpvB,MAAM6G,KACzDqvB,GAEF7F,SACA5f,YACAyV,iBAMN,IAAI1iB,EAAAA,GAAgB,CAClBiN,UAAW,SACX7W,SAAU,CACR,IAAI04B,EAAAA,GAAiB,CACnBC,UAAW,kBAACnD,EAAAA,GAAqBoH,WAAU,CAAC72B,MAAO02B,MAErD,IAAII,EAAAA,GAAuB,CAAEx+B,MAAOi+B,IACpC,IAAI5D,EAAAA,GAAiB,CACnBC,UAAW,kBAACnD,EAAAA,GAAqBsH,WAAU,CAAC/2B,MAAO02B,MAErD,IAAI7G,EAAAA,EAAgB,CAClBttB,KAAM,IAAIy0B,EAAAA,GAAmB,CAC3BC,gBAAiB,MACjBE,SAAU,QACVl9B,SAAU,CACR,IAAImiB,EAAAA,GAAc,CAChB7Z,KAAM,IAAIowB,EAAAA,GAAiB,CACzBC,UAAW,kBAACpV,EAAAA,mBAAkBA,CAAC3jB,KAAK,oBAI1Cu9B,QAAQ,IAEVvG,gBAAgBwG,EAAAA,EAAAA,IACdzF,EAAAA,IACA6D,aAAAA,EAAAA,EAAOzxB,KAAKzD,SAAS,oBAAqB+2B,EAAAA,UAAUC,KAAOD,EAAAA,UAAUE,KAC9C,uBAAvBb,EAA8Cte,EAAAA,GAAejT,EAAAA,GAC7DlF,EAAAA,GAAWoD,YAAYrC,KAAMwuB,EAAAA,IAAsBpvB,MAAM6G,KACzDqvB,GAEF7F,SACA5f,YACAyV,mBAMZ,CA5OA9kB,WAAAA,CAAYpB,GACVqB,MAAMrB,GACNY,KAAKW,qBAAqBX,KAAKD,WAAWa,KAAKZ,MACjD,E,EAW0B,EAAGjB,YAC3B,MAAM,KAAEuC,GAASvC,EAAMjF,WACjB1D,GAASC,EAAAA,EAAAA,YAAW61B,EAAAA,IAC1B,OAAI5qB,EACK,kBAAC+d,OAAAA,CAAK7oB,UAAWJ,EAAO+1B,cAAe7qB,GAAQ,kBAACA,EAAK7B,UAAS,CAACV,MAAOuC,KAGxE,kBAACib,EAAAA,mBAAkBA,CAAC3jB,KAAM,c,KAPrB6G,e,EAfHuqB,G,6aCKN,MAAMb,UAAuCrqB,EAAAA,GAc1C03B,cAAAA,CAAe1jB,EAA4B2jB,OAAoCz+B,G,IAOrF,EANA,MAAMo8B,GAAsBsC,EAAAA,EAAAA,IAA2C5jB,GACjE6jB,GAAgBC,EAAAA,EAAAA,IAA2C9jB,GAC3D+jB,GAAkBC,EAAAA,EAAAA,IAA6ChkB,GAC/DikB,EAAiB/2B,KAAKg3B,wBAAwBlkB,GAGrC,QAAf,EAAA9S,KAAKZ,MAAMkC,YAAX,SAAiBlC,MAAMu2B,QAAQvmB,SAAS5P,IACtC,GAAIA,aAAkBu2B,EAAAA,GAAoB,CAExC,MAAMkB,EAAe,IAAIjxB,IAAY2wB,aAAAA,EAAAA,EAAejzB,QAC9CwzB,EAAkB13B,EAAOJ,MAAMpG,SAGrC,IAAK,IAAI0O,EAAI,EAAGA,EAAIwvB,EAAgBl8B,OAAQ0M,IAAK,CAC/C,MAAMwgB,EAAW1oB,EAAOJ,MAAMpG,SAAS0O,GACvC,GAAIwgB,aAAoBC,EAAAA,GAAkB,CACxC,MAAMgI,EAAQjI,EAAS9oB,MAAMkC,KAC7B,GAAI6uB,aAAiBnc,EAAAA,GAAU,CAC7B,GAAIyiB,EAAW,CACb,MAAM5W,EAAQ8W,aAAAA,EAAAA,EAAejzB,OAAOyK,QAAQgiB,EAAM/wB,MAAM/H,OAIxD,IAHuBwoB,IAAoB,IAAXA,EAAegX,aAAAA,EAAAA,EAAiBnzB,OAAOmc,QAAS7nB,KAGzDy+B,EAAW,CAChC,MAAMU,GAAYC,EAAAA,EAAAA,IAAqBjH,EAAM/wB,MAAM/H,MAAO+8B,GACpDiD,EAAkBr3B,KAAKs3B,uBAC3BnH,EAAM/wB,MAAM/H,MACZ+8B,EACA+C,GAEFhH,EAAMlwB,SAAS,CACbooB,MAAOgP,GAEX,CACF,CAEIJ,EAAa9wB,IAAIgqB,EAAM/wB,MAAM/H,OAE/B4/B,EAAaM,OAAOpH,EAAM/wB,MAAM/H,QAGhC6/B,EAAgBlsB,OAAOtD,EAAG,GAE1BA,IAEJ,MACElF,EAAAA,EAAOC,KAAK,yBAEhB,MACED,EAAAA,EAAOC,KAAK,mCAEhB,CAEA,MACMmB,EADc4C,MAAM8P,KAAK2gB,GACH75B,KAAKqoB,GAAcA,IAE/CyR,EAAgBluB,QAAQhJ,KAAKw3B,cAAc5zB,IAC3CszB,EAAgBjxB,KAAKjG,KAAKy3B,aAAaV,IAEvCG,EAAgB95B,KAAKyxB,IACnB7uB,KAAK03B,iBAAiB7I,EAAM,IAG9BrvB,EAAOS,SAAS,CACdjH,SAAUk+B,GAEd,MACE10B,EAAAA,EAAOC,KAAK,mCACd,GAEJ,CAEQg1B,YAAAA,CAAaV,GACnB,MAAO,CAACr5B,EAAqBwI,KAC3B,MAAMyxB,EAASj6B,EAAE0B,MAAMkC,KACjBs2B,EAAS1xB,EAAE9G,MAAMkC,K,IACFy1B,EAArB,MAAMc,EAAoD,QAArCd,EAAAA,EAAe3zB,IAAIu0B,EAAOv4B,MAAM/H,cAAhC0/B,IAAAA,EAAAA,EAA0C,E,IAC1CA,EACrB,OAD0D,QAArCA,EAAAA,EAAe3zB,IAAIw0B,EAAOx4B,MAAM/H,cAAhC0/B,IAAAA,EAAAA,EAA0C,GACzCc,CAAY,CAEtC,CAEQb,uBAAAA,CAAwBlkB,GAC9B,MAAMshB,GAAsBsC,EAAAA,EAAAA,IAA2C5jB,GACjEikB,EAAiB,IAAIe,IAC3B,GAAI1D,aAAAA,EAAAA,EAAqBp5B,OACvB,IAAK,IAAI0M,EAAI,EAAGA,GAAI0sB,aAAAA,EAAAA,EAAqBp5B,QAAQ0M,IAAK,CACpD,MAAMxN,EAAek6B,EAAoB5Q,OAAO,GAAG9f,OAAOgE,GACpDqwB,EAAsB3D,EAAoB5Q,OAAO,GAAG9f,OAAOgE,GACjEqvB,EAAeiB,IAAI99B,EAAM69B,EAC3B,CAEF,OAAOhB,CACT,CAEAh3B,UAAAA,G,IAUiBk4B,EATfj4B,KAAKC,SAAS,CACZqB,KAAMtB,KAAKgpB,UAGb,MAAMiP,EAAeh5B,EAAAA,GAAWoD,YAAYrC,KAAMiS,EAAAA,SACXja,IAAnCigC,EAAa74B,MAAM84B,aACrBl4B,KAAKm4B,mBAGPn4B,KAAK2S,MAAMC,IAA0C,QAAtCqlB,EAAAA,EAAa74B,MAAMg5B,2BAAnBH,IAAAA,OAAAA,EAAAA,EAAwCplB,iBAAiB7S,KAAKq4B,yBAC7Er4B,KAAK2S,MAAMC,IAAI5S,KAAKs4B,uBACtB,CAEQA,oBAAAA,GAGN,OAFkB/lB,EAAAA,EAAAA,IAAkBvS,MAEnB6S,kBAAiB,CAACC,EAAU6C,KAC3C,MAAMsiB,EAAeh5B,EAAAA,GAAWoD,YAAYrC,KAAMiS,EAAAA,IAC5CsmB,EAAazlB,EAASpR,QAAQtE,KAAKgI,IAAMf,EAAAA,EAAAA,IAAyBe,GAAGT,SACrE6zB,EAAa7iB,EAAUjU,QAAQtE,KAAKgI,IAAMf,EAAAA,EAAAA,IAAyBe,GAAGT,SAEtE8xB,GAAYgC,EAAAA,EAAAA,IAAuBF,GAGzC,GAAI9B,KAFcgC,EAAAA,EAAAA,IAAuBD,GAEZ,C,IACCP,EAA5B,MAAMS,EAA4D,QAAtCT,EAAAA,EAAa74B,MAAMg5B,2BAAnBH,IAAAA,OAAAA,EAAAA,EAAwC74B,MAChEs5B,GACF14B,KAAKw2B,eAAekC,EAAqBjC,EAE7C,IAEJ,CAEOzN,KAAAA,G,IAU+CiP,EATpD,MACMr0B,GADkBswB,EAAAA,EAAAA,IAAwBl0B,MAChBZ,MAAMwE,QAAQxG,KAAKi2B,GAAQvrB,OAAOurB,EAAI7uB,SAEzCvF,EAAAA,GAAWoD,YAAYrC,KAAMwuB,EAAAA,IACrCpvB,MAAMgZ,OAAOlK,QAElC,MAAMlV,EAAWgH,KAAKw3B,cAAc5zB,GAE9Bq0B,EAAeh5B,EAAAA,GAAWoD,YAAYrC,KAAMiS,EAAAA,IAC5C8kB,EAAiB/2B,KAAKg3B,wBAA8D,QAAtCiB,EAAAA,EAAa74B,MAAMg5B,2BAAnBH,IAAAA,OAAAA,EAAAA,EAAwC74B,OAC5FpG,EAASiN,KAAKjG,KAAKy3B,aAAaV,IAChC,MAAM4B,EAAiB3/B,EAASoE,KAAKyxB,GAAUA,EAAMzG,UAOrD,MAJA,IAAIpvB,KAAa2/B,GAAgBv7B,KAAKyxB,IACpC7uB,KAAK03B,iBAAiB7I,EAAM,IAGvB,IAAIkB,EAAAA,EAAe,CACxBnsB,QAAS,CACP,CAAEY,MAAO,OAAQ1D,MAAO,QACxB,CAAE0D,MAAO,OAAQ1D,MAAO,SAE1Bqf,OAAQ,OACRwV,QAAS,CACP,IAAII,EAAAA,GAAmB,CACrBC,gBAAiBC,EAAAA,GACjBC,SAAU,QACVl9B,SAAUA,EACVm9B,QAAQ,IAEV,IAAIJ,EAAAA,GAAmB,CACrBC,gBAAiB,MACjBE,SAAU,QACVl9B,SAAU2/B,EACVxC,QAAQ,MAIhB,CAEQuB,gBAAAA,CAAiB7I,GACvB,MAAMsB,EAAQtB,EAAMzvB,MAAMkC,K,IAGtB6uB,EAFAA,GACFnwB,KAAK2S,MAAMC,IACTud,SAAkB,QAAlBA,EAAAA,EAAO/wB,MAAMipB,aAAb8H,IAAAA,OAAAA,EAAAA,EAAoByI,mBAAmBrlB,WAAWhO,IAC5CA,EAAOyf,KAAK+P,QAAUxvB,EAAOyf,KAAK+P,OAAO/5B,OAAS,IACpD6zB,EAAM5uB,SAAS,CAAE44B,UAAU,IAC3B74B,KAAKm4B,mBACP,IAIR,CAEO/O,gBAAAA,GACL,MAAMgL,GAAsBC,EAAAA,EAAAA,IAAuBr0B,MAC7C84B,EAAe94B,KAAK+4B,uBACpB//B,EAA+B,G,IAEnCggC,EADF,MAAMxR,EACmF,QAAvFwR,GAAAA,EAAAA,EAAAA,IAAe,YAAa,CAACtS,EAAAA,GAAkBiC,UAAWjC,EAAAA,GAAkB8B,oBAA5EwQ,IAAAA,EAAAA,EACAtS,EAAAA,GAAkB8B,WAEpBsQ,SAAAA,EAAc15B,MAAMpG,SAASoW,SAASyf,IACpC,GAAIA,aAAiB1G,EAAAA,KAAqB0G,EAAMzvB,MAAMy5B,SAAU,CAC9D,MAAMI,EAASh6B,EAAAA,GAAW0vB,gBAAgBE,EAAO7a,EAAAA,IACjD,GAAIilB,EAAOj+B,OAAQ,CAEjB,MACMmpB,EADQ8U,EAAO,GACG75B,MAAM/H,MACxB8/B,GAAYC,EAAAA,EAAAA,IAAqBjT,EAAWiQ,GAClD,IAAI8E,EAAAA,EAAAA,IAAW/B,GAAY,CACzB,MAAMgC,EAAWn5B,KAAKo5B,WAAWjV,EAAWiQ,EAAqB5M,GAC7D2R,GACFngC,EAASgQ,KAAKmwB,EAElB,MACEngC,EAASgQ,KAAK6lB,EAElB,CACF,KAGE71B,EAASgC,SACX89B,SAAAA,EAAc74B,SAAS,CACrBjH,aAGN,CAEQw+B,aAAAA,CAAc5zB,GACpB,MAAM5K,EAA+B,GAC/Bo7B,GAAsBC,EAAAA,EAAAA,IAAuBr0B,M,IAEjDg5B,EADF,MAAMxR,EACmF,QAAvFwR,GAAAA,EAAAA,EAAAA,IAAe,YAAa,CAACtS,EAAAA,GAAkB8B,WAAY9B,EAAAA,GAAkBiC,mBAA7EqQ,IAAAA,EAAAA,EACAtS,EAAAA,GAAkB8B,WACpB,IAAK,MAAMxhB,KAAUpD,EAAS,CAC5B,GAAIoD,IAAWqyB,EAAAA,KAAuBryB,EACpC,SAGF,MAAM6nB,EAAQ7uB,KAAKo5B,WAAWpyB,EAAQotB,EAAqB5M,GACvDqH,GACF71B,EAASgQ,KAAK6lB,EAElB,CACA,OAAO71B,CACT,CAEQogC,UAAAA,CAAWjV,EAAmBiQ,EAA4C5M,GAChF,GAAIrD,IAAckV,EAAAA,KAAuBlV,EACvC,OAGF,MAAMgT,GAAYC,EAAAA,EAAAA,IAAqBjT,EAAWiQ,GAC5CiD,EAAkBr3B,KAAKs3B,uBAAuBnT,EAAWiQ,EAAqB+C,GACpF,IAAI71B,EAEJ,MAAMgnB,EAAgB,IACjB4Q,EAAAA,EAAAA,IAAW/B,IAcZ71B,EADgB,cAAdkmB,EACKe,EAAAA,GAAcI,YAEdJ,EAAAA,GAAcC,aAEvBlnB,EACGunB,SAAS1E,GACT4E,QAAQsO,GACRzO,QAAQ,IAAIhC,EAAAA,GAAU,CAAEzC,UAAWA,EAAWqD,eACjDc,EAActf,KACZ,IAAIswB,EAAAA,EAAuB,CACzBnV,UAAWrc,OAAOqc,GAClBoV,oBAAoB,EACpBpC,UAAWxT,EAAAA,GAAWC,WAzB1BtiB,EAAOinB,EAAAA,GAAcC,aAClBK,SAAS1E,GACT4E,QAAQsO,GACRzO,QAAQ,IAAIhC,EAAAA,GAAU,CAAEzC,UAAWA,KACnCqV,qBAAqB,WAAY,CAAEC,KAAMC,EAAAA,aAAaC,SACtDH,qBAAqB,cAAe,KACpCA,qBAAqB,YAAa,GAClCA,qBAAqB,YAAa,GAClCA,qBAAqB,YAAanD,EAAAA,UAAUC,MAC5C7N,aAAaC,EAAAA,IAChBJ,EAActf,KAAK,IAAIswB,EAAAA,EAAuB,CAAEnV,UAAWrc,OAAOqc,GAAYgT,UAAWxT,EAAAA,GAAWC,UAmBtGtiB,EAAKwnB,iBAAiBR,GACtBhnB,EAAKs4B,eAAeC,EAAAA,GAIpB,MAAMzS,EAAM9lB,EAAK0nB,QACjB,OAAO,IAAIb,EAAAA,GAAiB,CAC1B7mB,KAAM8lB,GAEV,CAEQkQ,sBAAAA,CACNhC,EACAlB,EACA+C,GAEA,MAAMpgB,GAAiBxE,EAAAA,EAAAA,IAAkBvS,MACnCs0B,GAAcC,EAAAA,EAAAA,IAAuBe,EAAave,EAAgBqd,GAClEI,GAAQC,EAAAA,EAAAA,GAAeH,EAAa,CACxC9O,cAAc0T,EAAAA,EAAAA,IAAW/B,GAAa7B,EAAc,KAAKA,MACzDpK,MAAOoK,IAGT,OAAOZ,EAAAA,EAAAA,IAAe,CAACF,GACzB,CAEQuE,oBAAAA,G,IACE,EAA0D,EAA1D,EAAR,OAA6D,QAArD,EAAe,QAAf,EAAA/4B,KAAKZ,MAAMkC,YAAX,eAAiBlC,MAAMu2B,QAAQjW,MAAMoa,GAAMA,EAAE/lB,kBAA7C,QAAyE,QAAf,EAAA/T,KAAKZ,MAAMkC,YAAX,eAAiBlC,MAAMu2B,QAAQ,EAGnG,CAEQwC,gBAAAA,G,IAMN1C,EAAAA,EALA,MAAMqD,EAAe94B,KAAK+4B,uBACpBgB,EAAuBjB,aAAAA,EAAAA,EAAc15B,MAAMpG,SAC3CghC,EAAeD,aAAAA,EAAAA,EAAsB19B,QAAQwyB,IAAWA,EAAMzvB,MAAMy5B,W,IAG5BmB,EAAH,QAA3CvE,GAAAA,EAD6Bx2B,EAAAA,GAAWoD,YAAYrC,KAAMwuB,EAAAA,IACrCpvB,OAAM66B,wBAA3BxE,IAAAA,GAAAA,EAAAA,KAAAA,EAAkE,QAApBuE,EAAAA,aAAAA,EAAAA,EAAch/B,cAAdg/B,IAAAA,EAAAA,EAAwB,EACxE,CAEA,eAAchG,EAAS,MAAEj1B,IACvB,MAAM,KAAEuC,GAASvC,EAAMjF,WACvB,OAAO,oCAAGwH,GAAQ,kBAACyuB,EAAAA,EAAeiE,SAAQ,CAACj1B,MAAOuC,IACpD,CAjVAd,WAAAA,CAAYpB,GACVqB,MAAMrB,GAKR,OAAQi5B,0BAA0BvlB,I,IAC5BA,GAAa,QAAbA,EAAAA,EAASkS,YAATlS,IAAAA,OAAAA,EAAAA,EAAe1T,SAAUmyB,EAAAA,aAAaC,MAExCxxB,KAAKw2B,eAAe1jB,EACtB,IAPA9S,KAAKW,qBAAqBX,KAAKD,WAAWa,KAAKZ,MACjD,EA+UA,EApVWmpB,EAoVG1pB,aAAY,EAAGV,YAC3B,MAAM,KAAEuC,GAASvC,EAAMjF,WACjB1D,GAASC,EAAAA,EAAAA,YAAW61B,EAAAA,IAC1B,OAAI5qB,EACK,kBAAC+d,OAAAA,CAAK7oB,UAAWJ,EAAO+1B,cAAe7qB,GAAQ,kBAACA,EAAK7B,UAAS,CAACV,MAAOuC,KAGxE,kBAACib,EAAAA,mBAAkBA,CAAC3jB,KAAM,c,idCnW9B,MACMq9B,EAAyC,uCAiB/C,MAAMzH,UAA6B1vB,EAAAA,GA8BhCiB,UAAAA,G,IAKKk4B,EAAAA,EA+BTA,EAnCF,MAAMhE,GAAkBC,EAAAA,EAAAA,IAAwBl0B,MAC1Ci4B,EAAeh5B,EAAAA,GAAWoD,YAAYrC,KAAMiS,EAAAA,IAElDjS,KAAKC,SAAS,CACZi6B,SAA+C,QAAtCjC,EAAAA,EAAa74B,MAAM+6B,2BAAnBlC,IAAAA,GAAkD,QAAlDA,EAAAA,EAAwC74B,MAAM4lB,YAA9CiT,IAAAA,OAAAA,EAAAA,EAAoD74B,SAAUmyB,EAAAA,aAAaC,OAItFxxB,KAAK2S,MAAMC,IACT5S,KAAKiT,iBAAiBkb,EAAAA,GAAsB,KAC1CnuB,KAAKZ,MAAMgZ,OAAO6W,kBAAkB,KAGxCjvB,KAAK2S,MAAMC,IAAI5S,KAAKiT,iBAAiBmnB,EAAAA,GAAqBp6B,KAAKq6B,qBAC/Dr6B,KAAK2S,MAAMC,IAAIqhB,EAAgBphB,iBAAiB7S,KAAKs6B,kBAErDt6B,KAAK2S,MAAMC,KACTyC,EAAAA,EAAAA,IAAkBrV,MAAM6S,kBAAiB,CAACC,EAAU6C,KAClD,MAAMtW,GAAW60B,EAAAA,EAAAA,IAAwBl0B,MACzC,IAAI,UAAEmkB,IAAcoW,EAAAA,EAAAA,MAEpB,MAAMC,EAAa1nB,EAASpR,QAAQge,MAAMrjB,GAAWA,EAAOpC,MAAQkqB,IAC9DsW,EAAc9kB,EAAUjU,QAAQge,MAAMrjB,GAAWA,EAAOpC,MAAQkqB,IAGlE9kB,EAASD,MAAMoF,QAAU60B,EAAAA,IAAsBmB,IAAeC,GAChEz6B,KAAKC,SAAS,CACZi6B,SAAS,EACT54B,UAAMtJ,GAEV,KAIJgI,KAAK2S,MAAMC,IAC6B,QAAtCqlB,EAAAA,EAAa74B,MAAMg5B,2BAAnBH,IAAAA,OAAAA,EAAAA,EAAwCplB,kBACtC,CAACC,EAA4B4nB,K,IACvB5nB,EACEA,EACiBA,GAFN,QAAbA,EAAAA,EAASkS,YAATlS,IAAAA,OAAAA,EAAAA,EAAe1T,SAAUmyB,EAAAA,aAAaC,OAChB,QAApB1e,EAAAA,EAASkS,KAAKwK,cAAd1c,IAAAA,OAAAA,EAAAA,EAAuB,KACzB9S,KAAK26B,cAAkC,QAApB7nB,EAAAA,EAASkS,KAAKwK,cAAd1c,IAAAA,OAAAA,EAAAA,EAAuB,GAE9C,KAKN,MAAMshB,GAAsBC,EAAAA,EAAAA,IAAuBr0B,MAE/Co0B,GACFp0B,KAAK26B,cAAcvG,IAGrBwG,EAAAA,EAAAA,IAAkB56B,KACpB,CAcQ26B,aAAAA,CAAcE,GACpB,IAAKA,IAAcA,EAAU7/B,OAAQ,CACnC,MAAMoH,EAAanD,EAAAA,GAAWoD,YAAYrC,KAAMsC,EAAAA,IAGhD,IAAIhB,E,IAEF,IASF,OAbyBw5B,EAAAA,EAAAA,GAA6B14B,GAGjCpH,OAAS,GACD,QAA3B,KAAAgF,KAAKZ,OAAM66B,wBAAX,gBAA8B,GAC9B34B,EAAO,IAAIy5B,EAAAA,EAAsB,CAAEC,cAAe,KAAMC,EAAAA,EAAAA,GAAej7B,SAEvEsB,EAAO,IAAI0wB,EAAAA,EAAiB,CAAE11B,KAAM,gBAEtC0D,KAAKC,SAAS,CACZi6B,SAAS,EACT54B,QAGJ,CAEA,MAAM22B,EAAeh5B,EAAAA,GAAWoD,YAAYrC,KAAMiS,EAAAA,I,IAKzCgmB,GAJQ/D,EAAAA,EAAAA,IAAwBl0B,MAChCC,SAAS,CAChB2D,SAASs3B,EAAAA,EAAAA,IAAgBL,EAAUrX,OAAO,GAAG9f,OAAOtG,KAAKmH,GAAMuD,OAAOvD,MACtE21B,SAAS,EACT11B,MAAwC,QAAjCyzB,EAAAA,EAAa74B,MAAMiS,sBAAnB4mB,IAAAA,EAAAA,EAAqCoB,EAAAA,KAE9Cr5B,KAAKC,SAAS,CACZi6B,SAAS,GAEb,CAyBQiB,UAAAA,CAAWroB,GACjB,MAAMiE,GAAiBmd,EAAAA,EAAAA,IAAwBl0B,MAG/C,IAAK+W,EAAe3X,MAAMwE,UAAYmT,EAAe3X,MAAMwE,QAAQ5I,OACjE,OAGF,MAAMoW,EAAkD,CAAC,EAEzD,GAAI2F,EAAe3X,MAAMwE,SAAWmT,EAAe3X,MAAMwE,QAAQ5I,QAAU,EAAG,CAE5E,MAAMoH,EAAanD,EAAAA,GAAWoD,YAAYrC,KAAMsC,EAAAA,I,IAI9C,KAHuBw4B,EAAAA,EAAAA,GAA6B14B,GAEjCpH,OAAS,GACD,QAA3B,KAAAgF,KAAKZ,OAAM66B,wBAAX,gBAA8B,GAC9B7oB,EAAY9P,KAAO,IAAIy5B,EAAAA,EAAsB,CAAEC,cAAe,KAAMC,EAAAA,EAAAA,GAAej7B,SAEnFoR,EAAY9P,KAAO,IAAI0wB,EAAAA,EAAiB,CAAE11B,KAAM,UAEpD,MAEMwW,EAAStO,QAAU60B,EAAAA,IAAsBr5B,KAAKZ,MAAMkC,gBAAgB0oB,EAAAA,EACtE5Y,EAAY9P,KAAO,IAAI6nB,EAAAA,EAA+B,CAAC,GAC9CrW,EAAStO,QAAU60B,EAAAA,IAAsBr5B,KAAKZ,MAAMkC,gBAAgB6nB,EAAAA,EAC7E/X,EAAY9P,KAAO,IAAI0oB,EAAAA,EAA0B,CAAC,SAG9BhyB,IAApBgI,KAAKZ,MAAMkC,MACXtB,KAAKZ,MAAMkC,gBAAgB0wB,EAAAA,GAC3BhyB,KAAKZ,MAAMkC,gBAAgBy5B,EAAAA,KAE3B3pB,EAAY9P,KACVwR,EAAStO,QAAU60B,EAAAA,GACf,IAAIlQ,EAAAA,EAA+B,CAAC,GACpC,IAAIa,EAAAA,EAA0B,CAAC,IAIzChqB,KAAKC,SAASmR,EAChB,CA5LA5Q,WAAAA,CAAYpB,G,IAUOA,EACEA,EARfA,EAeKA,EAjBTqB,M,sUAAM,EACJob,WACkB,QAAhBzc,EAAAA,EAAMyc,kBAANzc,IAAAA,EAAAA,EACA,IAAIsb,EAAAA,GAAiB,CACnBvb,UAAW,CACT,IAAI2b,EAAAA,EAAuB,CACzB5gB,KAAMkhC,EAAAA,GACNC,cAAc,EACdC,YAAY,EACZ92B,MAAkB,QAAXpF,EAAAA,EAAMoF,aAANpF,IAAAA,EAAAA,EAAei6B,EAAAA,GACtBz1B,QAAsB,QAAbxE,EAAAA,EAAMwE,eAANxE,IAAAA,EAAAA,EAAiB,QAIlC86B,SAAS,EACTj0B,KAAM,IAAIs1B,EAAAA,GAAY,CAAE19B,OAAQ,WAChCua,OAAQ,IAAIiW,EAAAA,EAAqB,UACjC7pB,MAAkB,QAAXpF,EAAAA,EAAMoF,aAANpF,IAAAA,EAAAA,EAAei6B,EAAAA,IACnBj6B,IAvBP,OAAUo8B,sBAAsB,IAAIC,EAAAA,GAAyBz7B,KAAM,CACjE07B,cAAe,CAACxiB,EAAAA,OAoFlB,OAAQohB,mBAAkB,CAACxnB,EAAuC4nB,MAE9D5nB,EAAStO,QAAUk2B,EAASl2B,SAC3Bm3B,EAAAA,EAAAA,GAAe7oB,EAASlP,QAAS82B,EAAS92B,eACvB5L,IAApBgI,KAAKZ,MAAMkC,MACXtB,KAAKZ,MAAMkC,gBAAgB0wB,EAAAA,GAC3BhyB,KAAKZ,MAAMkC,gBAAgBy5B,EAAAA,IAE3B/6B,KAAKm7B,WAAWroB,EAClB,IAkCF,OAAQunB,sBAAsBzyB,IAC5B,GAAqB,WAAjBA,EAAM/J,OACR,OAGF,MAAMyD,EAAOtB,KAAKZ,MAAMkC,K,IAEtBA,EADEA,aAAgB0oB,EAAAA,GAA6B1oB,EAAKlC,MAAMkC,gBAAgByuB,EAAAA,IAC3D,QAAfzuB,EAAAA,EAAKlC,MAAMkC,YAAXA,IAAAA,GAAAA,EAAiBlC,MAAMu2B,QAAQvmB,SAAS5P,IACdP,EAAAA,GAAW0vB,gBAAgBrtB,EAAMstB,EAAAA,GACzCxf,SAASxK,GAAMA,EAAEqB,KAAK2B,EAAM6nB,OAAQ7nB,EAAMiI,YAAW,MAGzEnT,EAAAA,EAAAA,IACEC,EAAAA,GAAkBC,gBAClBC,EAAAA,GAAoBD,gBAAgBg/B,4BACpC,CACE/9B,OAAQ,SACRg+B,SAAUj0B,EAAM6nB,OAChB5f,UAAWjI,EAAMiI,WACnB,IA8CJ,OAAOisB,yBAAyBt3B,IAC9B,IAAKA,EACH,OAGF,MAAMnF,GAAW60B,EAAAA,EAAAA,IAAwBl0B,OACnC,OAAEyvB,EAAM,UAAE5f,IAAc0lB,EAAAA,EAAAA,IAAoB,SAAUC,EAAAA,gBAAiB,SAE7E94B,EAAAA,EAAAA,IACEC,EAAAA,GAAkBC,gBAClBC,EAAAA,GAAoBD,gBAAgBm/B,kCACpC,CACEnY,MAAOpf,EACPw3B,cAAe38B,EAAS48B,eACxBC,KAAM,SACNzM,SACA0M,gBAAiBtsB,IAIrB,MAAMooB,EAAeh5B,EAAAA,GAAWoD,YAAYrC,KAAMiS,EAAAA,KAClDmqB,EAAAA,EAAAA,IAAyBzY,EAAAA,GAAWC,MAAOpf,EAAOyzB,EAAa,IA5L/Dj4B,KAAKW,qBAAqBX,KAAKD,WAAWa,KAAKZ,MACjD,EA8LA,EA1NWwuB,EA0NGoH,cAAa,EAAG72B,YAC5B,MAAM,KAAEuC,EAAI,QAAE44B,EAAO,OAAE9hB,GAAWrZ,EAAMjF,WAClC1D,GAASC,EAAAA,EAAAA,YAAWC,GACpB+I,GAAW60B,EAAAA,EAAAA,IAAwBn1B,IACnC,QAAE6E,EAAO,MAAEY,GAAUnF,EAASvF,WACpC,OACE,kBAACvD,MAAAA,CAAIC,UAAWJ,EAAOimC,mBACpB/6B,aAAgB6nB,EAAAA,GAAkC,kBAACA,EAAAA,EAA+B6K,SAAQ,CAACj1B,MAAOuC,IAClGA,aAAgB0oB,EAAAA,GAA6B,kBAACA,EAAAA,EAA0BgK,SAAQ,CAACj1B,MAAOuC,IACxFA,aAAgB0oB,EAAAA,GAA6B,kBAAC5R,EAAO3Y,UAAS,CAACV,MAAOqZ,KACrE8hB,GAAWt2B,EAAQ5I,OAAS,GAC5B,kBAACk3B,EAAAA,EAAaA,CAACpxB,MAAM,QAAQ8C,QAASA,EAASY,MAAOsD,OAAOtD,GAAQwd,SAAUjjB,EAAM+8B,wB,IAK7F,EA1OWtN,EA0OGsH,cAAa,EAAG/2B,YAC5B,MAAM,QAAEm7B,EAAO,KAAEj0B,GAASlH,EAAMjF,WAC1B1D,GAASC,EAAAA,EAAAA,YAAWC,GACpB+I,GAAW60B,EAAAA,EAAAA,IAAwBn1B,IACnC,MAAEyF,GAAUnF,EAASvF,WAC3B,OACE,kBAACvD,MAAAA,CAAIC,UAAWJ,EAAOkmC,oBACnBpC,GAAW11B,IAAU60B,EAAAA,IACrB,oCACE,kBAACpzB,EAAKxG,UAAS,CAACV,MAAOkH,K,IAOjC,EA1PWuoB,EA0PG/uB,aAAY,EAAGV,YAC3B,MAAM,KAAEuC,EAAI,QAAE44B,EAAO,gBAAEqC,GAAoBx9B,EAAMjF,WAC3C1D,GAASC,EAAAA,EAAAA,YAAWC,GAE1B,OACE,kBAACC,MAAAA,CAAIC,UAAWJ,EAAOK,WACrB,kBAAC+lC,EAAAA,EAAkB,CAAEzJ,UAAWmH,EAASqC,mBACtCj7B,aAAgB6nB,EAAAA,GAAkCpqB,GAAS,kBAACyvB,EAAqBoH,WAAU,CAAC72B,MAAOA,IACpG,kBAACxI,MAAAA,CAAIC,UAAWJ,EAAOqmC,SAAUn7B,GAAQ,kBAACA,EAAK7B,UAAS,CAACV,MAAOuC,M,IAOnE,MAAM2wB,EAAmB,CAC9B3zB,MAAM3G,EAAAA,EAAAA,KAAI,CACR+kC,eAAgB,cAElB9c,QAAQjoB,EAAAA,EAAAA,KAAI,CACVoG,WAAY,YAIhB,SAASzH,EAAUoB,GACjB,MAAO,CACLjB,WAAWkB,EAAAA,EAAAA,KAAI,CACbwJ,SAAU,EACVvJ,QAAS,OACTwJ,UAAW,OACXH,cAAe,SACf7F,IAAK1D,EAAMiB,QAAQ,KAErB8jC,SAAS9kC,EAAAA,EAAAA,KAAI,CACXwJ,SAAU,EACVvJ,QAAS,OACT+kC,WAAYjlC,EAAMiB,QAAQ,KAE5B0jC,mBAAmB1kC,EAAAA,EAAAA,KAAI,CACrBwJ,SAAU,EACVvJ,QAAS,OACTiB,WAAY,MACZhB,eAAgB,gBAChBoJ,cAAe,cACf7F,IAAK1D,EAAMiB,QAAQ,KAErB2jC,mBAAmB3kC,EAAAA,EAAAA,KAAI,CACrBwJ,SAAU,EACVvJ,QAAS,OACTiB,WAAY,MACZuC,IAAK1D,EAAMiB,QAAQ,GACnBsI,cAAe,QAGrB,C,ibC1UO,MAAM27B,UAAuC99B,EAAAA,GASlDiB,UAAAA,G,IAYW88B,EAXT,MAAMrZ,GAASjR,EAAAA,EAAAA,IAAkBvS,MAE3B68B,EADe59B,EAAAA,GAAWoD,YAAYrC,KAAMiS,EAAAA,IACb7S,MAAM+6B,oBAGtCn6B,KAAKZ,MAAMkC,MAMPu7B,SAA2B,QAA3BA,EAAAA,EAAiBz9B,MAAM4lB,YAAvB6X,IAAAA,OAAAA,EAAAA,EAA6Bz9B,SAAUmyB,EAAAA,aAAaC,MAC3DxxB,KAAK88B,OAAOD,aAAAA,EAAAA,EAAiBz9B,MAAM4lB,KAAKwK,OAAO,IAN/CxvB,KAAKC,SAAS,CACZqB,KAAMtB,KAAKgpB,UAQfhpB,KAAK2S,MAAMC,IACTiqB,aAAAA,EAAAA,EAAiBhqB,kBAAiB,CAACC,EAAU6C,K,IACvC7C,GAAa,QAAbA,EAAAA,EAASkS,YAATlS,IAAAA,OAAAA,EAAAA,EAAe1T,SAAUmyB,EAAAA,aAAaC,MACxCxxB,KAAK88B,OAAOhqB,EAASkS,KAAKwK,OAAO,GACnC,KAIJxvB,KAAK2S,MAAMC,IACT4Q,EAAO3Q,kBAAiB,KACtB7S,KAAK+8B,qCAAqC,IAGhD,CAyBQC,eAAAA,CAAgBx9B,EAA4BkI,GAClD,MACMyoB,EADW3wB,EAAOJ,MAAMpG,SAAS0O,GAChBtI,MAAMkC,KAG7B,MAAO,CAAE6uB,QAAO94B,MADF84B,EAAM/wB,MAAM/H,MAE5B,CAEQylC,MAAAA,CAAOG,G,IAIb,EAHA,MACMC,GADWC,EAAAA,EAAAA,IAAwBn9B,MACdZ,MAAMwE,QAAQvH,QAAQg3B,GAAQA,EAAI7uB,QAAU60B,EAAAA,KAAoBj8B,KAAKi2B,GAAQA,EAAIvyB,QAE7F,QAAf,EAAAd,KAAKZ,MAAMkC,YAAX,SAAiBlC,MAAMu2B,QAAQvmB,SAASguB,IACtC,IAAIC,EAAiB,GACrB,MAAM79B,EAAS49B,EACTE,EAAe,IAAIt3B,IAAYk3B,GAC/BhG,EAAkB13B,EAAOJ,MAAMpG,SAErC,IAAK,IAAI0O,EAAI,EAAGA,EAAIwvB,EAAgBl8B,OAAQ0M,IAAK,CAC/C,MAAM,MAAErQ,GAAU2I,KAAKg9B,gBAAgBx9B,EAAQkI,GAE3C41B,EAAan3B,IAAI9O,GAEnBimC,EAAa/F,OAAOlgC,IAGpB6/B,EAAgBlsB,OAAOtD,EAAG,GAE1BA,KAEF21B,EAAer0B,KAAK3R,EACtB,CAEA,MAEMuM,EAFc4C,MAAM8P,KAAKgnB,GAEHlgC,KAAKqoB,IACxB,CACL3kB,MAAO2kB,EACPjhB,MAAOihB,MAIXyR,EAAgBluB,QAAQhJ,KAAKw3B,cAAc5zB,IAE3C,MAAMmzB,EAAiB/2B,KAAKg3B,wBAAwBiG,GACpD/F,EAAgBjxB,KAAKjG,KAAKy3B,aAAaV,IAEvCv3B,EAAOS,SAAS,CACdjH,SAAUk+B,GACV,GAEN,CAEQF,uBAAAA,CAAwBuG,GAC9B,MAAMxG,EAAiB,IAAIe,IAC3B,GAAIyF,aAAAA,EAAAA,EAAgBviC,OAClB,IAAK,IAAI0M,EAAI,EAAGA,GAAI61B,aAAAA,EAAAA,EAAgB/Z,OAAOxoB,QAAQ0M,IAAK,CACtD,MAAMxN,EAAeqjC,EAAe/Z,OAAO9b,GAAGxN,KACxC69B,EAAsBwF,EAAe/Z,OAAO9b,GAAGhE,OAAO,GAC5DqzB,EAAeiB,IAAI99B,EAAM69B,EAC3B,CAEF,OAAOhB,CACT,CAEQ/N,KAAAA,G,IASF6T,EARJ,MAAMx9B,GAAW89B,EAAAA,EAAAA,IAAwBn9B,MACbf,EAAAA,GAAWoD,YAAYrC,KAAMuuB,GACrCnvB,MAAMgZ,OAAOlK,QAEjC,MAAMlV,EAAWgH,KAAKw3B,cAAcn4B,EAASD,MAAMwE,SAG7Ci5B,EADe59B,EAAAA,GAAWoD,YAAYrC,KAAMiS,EAAAA,IACb7S,MAAM+6B,oBAC3C,IAAI0C,SAA2B,QAA3BA,EAAAA,EAAiBz9B,MAAM4lB,YAAvB6X,IAAAA,OAAAA,EAAAA,EAA6Bz9B,SAAUmyB,EAAAA,aAAaC,KAAM,CAC5D,MAAMuF,EAAiB/2B,KAAKg3B,wBAAwB6F,aAAAA,EAAAA,EAAiBz9B,MAAM4lB,KAAKwK,OAAO,IACvFx2B,EAASiN,KAAKjG,KAAKy3B,aAAaV,GAClC,CAEA,MAAM4B,EAAiB3/B,EAASoE,KAAKyxB,GAAUA,EAAMzG,UAErD,OAAO,IAAI2H,EAAAA,EAAe,CACxBnsB,QAAS,CACP,CAAEY,MAAO,OAAQ1D,MAAO,QACxB,CAAE0D,MAAO,OAAQ1D,MAAO,SAE1Bqf,OAAQ,OACRwV,QAAS,CACP,IAAII,EAAAA,GAAmB,CACrBI,QAAQ,EACRH,gBAAiBwH,EAAAA,EACjBtH,SAAU,QACVl9B,SAAUA,IAEZ,IAAI+8B,EAAAA,GAAmB,CACrBI,QAAQ,EACRH,gBAAiB,MACjBE,SAAU,QACVl9B,SAAU2/B,MAIlB,CAEQnB,aAAAA,CAAc5zB,GACpB,MAAM5K,EAA+B,GACrC,IAAK,MAAMgO,KAAUpD,EAAS,CAC5B,MAAM,MAAEY,GAAUwC,EACZsuB,EAAcxtB,OAAOtD,GAC3B,GAAIA,IAAU60B,EAAAA,KAAuB70B,EACnC,SAEF,MAAMgwB,GAAQiJ,EAAAA,EAAAA,GAAiBz9B,KAAM8H,OAAOd,EAAOxC,OAAQsD,OAAOd,EAAOxC,QACnE0gB,GAAcwP,EAAAA,EAAAA,IAAe,CAACF,IAEpCx7B,EAASgQ,KACP,IAAImf,EAAAA,GAAiB,CACnB7mB,KAAMinB,EAAAA,GAAcC,aACjBK,SAASyM,GACTvM,QAAQ7D,GACR4D,iBAAiB,CAAC,IAAIwQ,EAAAA,EAAuB,CAAEnV,UAAWmR,EAAa6B,UAAWxT,EAAAA,GAAW7iB,UAC7F04B,qBAAqB,WAAY,CAAEC,KAAMC,EAAAA,aAAaC,SACtDH,qBAAqB,cAAe,KACpCA,qBAAqB,YAAa,GAClCA,qBAAqB,YAAa,GAClCA,qBAAqB,YAAanD,EAAAA,UAAUC,MAC5CoH,gBAAe,GAGfjV,aAAaC,EAAAA,IACbE,QAAQ,IAAIhC,EAAAA,GAAU,CAAEzC,UAAWmR,KACnCsE,eAAeC,EAAAA,GACf7Q,UAGT,CACA,OAAOhwB,CACT,CAEQy+B,YAAAA,CAAaV,GACnB,MAAO,CAACr5B,EAAqBwI,KAC3B,MAAMyxB,EAASj6B,EAAE0B,MAAMkC,KACjBs2B,EAAS1xB,EAAE9G,MAAMkC,KACvB,GAAIq2B,EAAOv4B,MAAM/H,QAAUs2B,EAAAA,GACzB,OAAQ,EAEV,GAAIiK,EAAOx4B,MAAM/H,QAAUs2B,EAAAA,GACzB,OAAO,E,IAEYoJ,EAArB,MAAMc,EAAoD,QAArCd,EAAAA,EAAe3zB,IAAIu0B,EAAOv4B,MAAM/H,cAAhC0/B,IAAAA,EAAAA,EAA0C,E,IAC1CA,EACrB,OAD0D,QAArCA,EAAAA,EAAe3zB,IAAIw0B,EAAOx4B,MAAM/H,cAAhC0/B,IAAAA,EAAAA,EAA0C,GACzCc,CAAY,CAEtC,CAEA,eAAc7D,EAAS,MAAEj1B,IACvB,MAAM,KAAEuC,GAASvC,EAAMjF,WACvB,OAAO,oCAAGwH,GAAQ,kBAACyuB,EAAAA,EAAeiE,SAAQ,CAACj1B,MAAOuC,IACpD,CA5NAd,WAAAA,CAAYpB,GACVqB,M,sUAAM,IACDrB,IAqCP,OAAQ29B,uCAAsC,K,IAC5C,EAAe,QAAf,EAAA/8B,KAAKZ,MAAMkC,YAAX,SAAiBlC,MAAMu2B,QAAQvmB,SAASguB,IACtC,MAAM59B,EAAS49B,EAEf,IAAK,IAAI11B,EAAI,EAAGA,EAAIlI,EAAOJ,MAAMpG,SAASgC,OAAQ0M,IAAK,CACrD,MAAM,MAAEyoB,EAAK,MAAE94B,GAAU2I,KAAKg9B,gBAAgBx9B,EAAQkI,GAChDwd,EAAgEiL,EAAM/wB,MAAMipB,MAC5EmM,GAAQiJ,EAAAA,EAAAA,GAAiBz9B,KAAM3I,EAAOA,G,IAIvB6tB,EAAAA,EADrB,GAAIA,aAAuBE,EAAAA,IACrBoP,EAAMzxB,QAASmiB,SAA0B,QAA1BA,EAAAA,EAAa9lB,MAAMwlB,eAAnBM,IAAAA,GAA+B,QAA/BA,EAAAA,EAA6B,UAA7BA,IAAAA,OAAAA,EAAAA,EAAiCniB,MAClD,MAIJotB,EAAMlwB,SAAS,CACbooB,OAAOqM,EAAAA,EAAAA,IAAe,CAACF,KAE3B,IACA,IAtDFx0B,KAAKW,qBAAqBX,KAAKD,WAAWa,KAAKZ,MACjD,EAwNA,EA/NW48B,EA+NGn9B,aAAY,EAAGV,YAC3B,MAAM,KAAEuC,GAASvC,EAAMjF,WACjB1D,GAASC,EAAAA,EAAAA,YAAW61B,EAAAA,IAE1B,OAAI5qB,EACK,kBAAC+d,OAAAA,CAAK7oB,UAAWJ,EAAO+1B,cAAe7qB,GAAQ,kBAACA,EAAK7B,UAAS,CAACV,MAAOuC,KAGxE,kBAACib,EAAAA,mBAAkBA,CAAC3jB,KAAM,c,4dCvN9B,MAAM21B,UAA4BzvB,EAAAA,GA+B/BiB,UAAAA,G,IAKKk4B,EAAAA,EACFA,EAAAA,EAUMA,EAff,MAAMA,EAAeh5B,EAAAA,GAAWoD,YAAYrC,KAAMiS,EAAAA,IAC5CgiB,GAAkBkJ,EAAAA,EAAAA,IAAwBn9B,MAEhDA,KAAKC,SAAS,CACZi6B,SAA+C,QAAtCjC,EAAAA,EAAa74B,MAAM+6B,2BAAnBlC,IAAAA,GAAkD,QAAlDA,EAAAA,EAAwC74B,MAAM4lB,YAA9CiT,IAAAA,OAAAA,EAAAA,EAAoD74B,SAAUmyB,EAAAA,aAAaC,KACpFjuB,OAA6C,QAAtC00B,EAAAA,EAAa74B,MAAM+6B,2BAAnBlC,IAAAA,GAAkD,QAAlDA,EAAAA,EAAwC74B,MAAM4lB,YAA9CiT,IAAAA,OAAAA,EAAAA,EAAoD74B,SAAUmyB,EAAAA,aAAa/tB,QAGpFxD,KAAK2S,MAAMC,IACT5S,KAAKiT,iBAAiBkb,EAAAA,GAAsB,KAC1CnuB,KAAKZ,MAAMgZ,OAAO6W,kBAAkB,KAGxCjvB,KAAK2S,MAAMC,IAAI5S,KAAKiT,iBAAiBmnB,EAAAA,GAAqBp6B,KAAKq6B,qBAE/Dr6B,KAAK2S,MAAMC,IAA0C,QAAtCqlB,EAAAA,EAAa74B,MAAM+6B,2BAAnBlC,IAAAA,OAAAA,EAAAA,EAAwCplB,iBAAiB7S,KAAK29B,6BAE7E39B,KAAK2S,MAAMC,KACTyC,EAAAA,EAAAA,IAAkBrV,MAAM6S,kBAAiB,CAACC,EAAU6C,KAClD3V,KAAK49B,uBAAuB9qB,EAAU6C,EAAU,KAIpD3V,KAAK2S,MAAMC,IACTqhB,EAAgBphB,kBAAiB,CAACC,EAAU6C,KAC1C3V,KAAK69B,wBAAwB/qB,EAAU6C,EAAU,KAIrD,MAAMsnB,GAAsBrP,EAAAA,EAAAA,IAAuB5tB,MAE/Ci9B,GACFj9B,KAAK26B,cAAcsC,IAGrBrC,EAAAA,EAAAA,IAAkB56B,KACpB,CAEQ69B,uBAAAA,CAAwB/qB,EAAuC6C,IAGnE7C,EAAStO,QAAUmR,EAAUnR,SAC5Bm3B,EAAAA,EAAAA,GAAe7oB,EAASlP,QAAS+R,EAAU/R,eACxB5L,IAApBgI,KAAKZ,MAAMkC,MACXtB,KAAKZ,MAAMkC,gBAAgB0wB,EAAAA,IAE3BhyB,KAAKm7B,YAET,CAEQyC,sBAAAA,CACN9qB,EACA6C,GAEA,IAAI,UAAEwO,IAAcoW,EAAAA,EAAAA,MAChBpW,IAAc2Z,EAAAA,KAChB3Z,EAAY4Z,EAAAA,IAEd,MAAM1+B,GAAW89B,EAAAA,EAAAA,IAAwBn9B,MACnCg+B,EAAkBlrB,EAASpR,QAAQge,MAAMrjB,GAAWA,EAAOpC,MAAQkqB,IACnE8Z,EAAmBtoB,EAAUjU,QAAQge,MAAMrjB,GAAWA,EAAOpC,MAAQkqB,IAGvE9kB,EAASD,MAAMoF,QAAU60B,EAAAA,IAAsB2E,IAAoBC,GACrEj+B,KAAKC,SAAS,CACZi6B,SAAS,EACT54B,UAAMtJ,EACNuL,WAAOvL,GAGb,CA6CQ2iC,aAAAA,CAAc4C,GACpB,IAAKA,IAAmBA,EAAeviC,OAKrC,YAJAgF,KAAKC,SAAS,CACZi6B,SAAS,EACT54B,KAAM,IAAI0wB,EAAAA,EAAiB,CAAE11B,KAAM,aAIvC,MAAM+C,GAAW89B,EAAAA,EAAAA,IAAwBn9B,MACnC4D,GAAUs6B,EAAAA,EAAAA,IAAgBX,EAAe/Z,OAAOpmB,KAAK0D,GAAUA,EAAM5G,Q,IAKlE,EAHTmF,EAASY,SAAS,CAChBi6B,SAAS,EACTt2B,UACAY,MAAuB,QAAhB,EAAAxE,KAAKZ,MAAMoF,aAAX,QAAoB60B,EAAAA,IAE/B,CAEQ8B,UAAAA,GACN,MAAM97B,GAAW89B,EAAAA,EAAAA,IAAwBn9B,MAEzC,IAAKX,EAASD,MAAMwE,UAAYvE,EAASD,MAAMwE,QAAQ5I,OACrD,OAGF,MAAMoW,EAAiD,CACrD8oB,SAAS,EACTqC,qBAAiBvkC,EACjBuL,OAAO,GAGLlE,EAAS8+B,eAAiBn+B,KAAKZ,MAAMkC,gBAAgB2oB,EAAAA,EACvD7Y,EAAY9P,KAAO,IAAIs7B,EAA+B,CAAC,IAC7Cv9B,EAAS8+B,eAAiBn+B,KAAKZ,MAAMkC,gBAAgBs7B,EAC/DxrB,EAAY9P,KAAO,IAAI2oB,EAAAA,EAA0B,CAAC,QACrBjyB,IAApBgI,KAAKZ,MAAMkC,KAChBjC,EAASD,MAAMwE,QAAQ5I,OAAS,EAClCoW,EAAY9P,KAAOjC,EAAS8+B,cACxB,IAAIvB,EAA+B,CAAC,GACpC,IAAI3S,EAAAA,EAA0B,CAAC,GAEnC7Y,EAAY9P,KAAO,IAAI0wB,EAAAA,EAAiB,CAAE11B,KAAM,WAEzC0D,KAAKZ,MAAMkC,gBAAgB0wB,EAAAA,GAChC3yB,EAASD,MAAMwE,QAAQ5I,OAAS,IAClCoW,EAAY9P,KAAOjC,EAAS8+B,cACxB,IAAIvB,EAA+B,CAAC,GACpC,IAAI3S,EAAAA,EAA0B,CAAC,IAIvCjqB,KAAKC,SAAS,KAAKmR,GACrB,CAjMA5Q,WAAAA,CAAYpB,G,IAWOA,EACEA,EARfA,E,IAHJqB,O,EAAM,KACDrB,G,WAAAA,CACHyc,WACkB,QAAhBzc,EAAAA,EAAMyc,kBAANzc,IAAAA,EAAAA,EACA,IAAIsb,EAAAA,GAAiB,CACnBvb,UAAW,CACT,IAAI2b,EAAAA,EAAuB,CACzB5gB,KAAMkkC,EAAAA,GACN/C,cAAc,EACdC,YAAY,EACZ92B,MAAkB,QAAXpF,EAAAA,EAAMoF,aAANpF,IAAAA,EAAAA,EAAei6B,EAAAA,GACtBz1B,QAAsB,QAAbxE,EAAAA,EAAMwE,eAANxE,IAAAA,EAAAA,EAAiB,QAIlC86B,SAAS,EACTj0B,KAAM,IAAIs1B,EAAAA,GAAY,CAAE19B,OAAQ,WAChCua,OAAQ,IAAIiW,EAAAA,EAAqB,UACjC7pB,MAAOpF,EAAMoF,Q,gVAxBjB,OAAUg3B,sBAAsB,IAAIC,EAAAA,GAAyBz7B,KAAM,CACjE07B,cAAe,CAACxiB,EAAAA,OA2GlB,OAAQykB,8BAA6B,CAAC7qB,EAA4B6C,K,IAE9D7C,EACAA,EACgBA,EAAAA,EAAmC6C,EAAAA,EAAAA,EAG1C7C,EADUA,GAJN,QAAbA,EAAAA,EAASkS,YAATlS,IAAAA,OAAAA,EAAAA,EAAe1T,SAAUmyB,EAAAA,aAAaC,OAClB,QAApB1e,EAAAA,EAASkS,KAAKwK,cAAd1c,IAAAA,OAAAA,EAAAA,EAAuB,OACtB6oB,EAAAA,EAAAA,GAAmC,QAApB7oB,EAAAA,EAASkS,KAAKwK,cAAd1c,IAAAA,GAAyB,QAAzBA,EAAAA,EAAuB,UAAvBA,IAAAA,OAAAA,EAAAA,EAA2B0Q,OAAsB,QAAd7N,EAAAA,EAAUqP,YAAVrP,IAAAA,GAAsB,QAAtBA,EAAAA,EAAgB6Z,cAAhB7Z,IAAAA,GAA2B,QAA3BA,EAAAA,EAAyB,UAAzBA,IAAAA,OAAAA,EAAAA,EAA6B6N,QAEhFxjB,KAAK26B,cAAkC,QAApB7nB,EAAAA,EAASkS,KAAKwK,cAAd1c,IAAAA,OAAAA,EAAAA,EAAuB,KACpB,QAAbA,EAAAA,EAASkS,YAATlS,IAAAA,OAAAA,EAAAA,EAAe1T,SAAUmyB,EAAAA,aAAaC,OAE9B2L,EAAAA,EAAAA,IAAwBn9B,MAChCC,SAAS,CAChBi6B,SAAS,GAEb,IAGF,OAAQG,sBAAsBzyB,IAC5B,GAAqB,WAAjBA,EAAM/J,OACR,OAEF,MAAMyD,EAAOtB,KAAKZ,MAAMkC,KACpBA,aAAgB2oB,EAAAA,GACOhrB,EAAAA,GAAW0vB,gBAAgBrtB,EAAMstB,EAAAA,GACzCxf,SAAS5P,IACxBA,EAAOyG,KAAK2B,EAAM6nB,OAAQ7nB,EAAMiI,UAAU,KAG9CnT,EAAAA,EAAAA,IACEC,EAAAA,GAAkBC,gBAClBC,EAAAA,GAAoBD,gBAAgBg/B,4BACpC,CACE/9B,OAAQ,SACRg+B,SAAUj0B,EAAM6nB,OAChB5f,UAAWjI,EAAMiI,WACnB,IA0DJ,OAAOmS,YAAYxd,IACjB,IAAKA,EACH,OAGF,MAAMnF,GAAW89B,EAAAA,EAAAA,IAAwBn9B,MACzCX,EAASmZ,cAAchU,GAEvB,MAAM,OAAEirB,EAAM,UAAE5f,IAAc0lB,EAAAA,EAAAA,IAAoB,SAAUC,EAAAA,gBAAiB,SAC7E94B,EAAAA,EAAAA,IACEC,EAAAA,GAAkBC,gBAClBC,EAAAA,GAAoBD,gBAAgBm/B,kCACpC,CACEj7B,MAAO0D,EACP65B,cAAeh/B,EAAS48B,eACxBC,KAAM,SACNzM,SACA0M,gBAAiBtsB,IAIrB,MAAMooB,EAAeh5B,EAAAA,GAAWoD,YAAYrC,KAAMiS,EAAAA,KAClDmqB,EAAAA,EAAAA,IAAyBzY,EAAAA,GAAW7iB,MAAO0D,EAAOyzB,EAAa,IAnM/Dj4B,KAAKW,qBAAqBX,KAAKD,WAAWa,KAAKZ,MACjD,EA8PF,SAAS1J,EAAUoB,GACjB,MAAO,CACLjB,WAAWkB,EAAAA,EAAAA,KAAI,CACbwJ,SAAU,EACVvJ,QAAS,OACTwJ,UAAW,OACXH,cAAe,SACf7F,IAAK1D,EAAMiB,QAAQ,KAErB8jC,SAAS9kC,EAAAA,EAAAA,KAAI,CACXwJ,SAAU,EACVvJ,QAAS,OACT+kC,WAAYjlC,EAAMiB,QAAQ,KAE5B0jC,mBAAmB1kC,EAAAA,EAAAA,KAAI,CACrBwJ,SAAU,EACVvJ,QAAS,OACTiB,WAAY,MACZhB,eAAgB,gBAChBoJ,cAAe,cACf7F,IAAK1D,EAAMiB,QAAQ,KAErB2jC,mBAAmB3kC,EAAAA,EAAAA,KAAI,CACrBwJ,SAAU,EACVvJ,QAAS,OACTiB,WAAY,MACZuC,IAAK1D,EAAMiB,QAAQ,GACnBsI,cAAe,QAGrB,CAvFE,EAlOWstB,EAkOGqH,cAAa,EAAG72B,YAC5B,MAAM,KAAEuC,EAAI,QAAE44B,EAAO,OAAE9hB,GAAWrZ,EAAMjF,WAClCuF,GAAW89B,EAAAA,EAAAA,IAAwBp+B,IACnC,QAAE6E,EAAO,MAAEY,GAAUnF,EAASvF,WAC9B1D,GAASC,EAAAA,EAAAA,YAAWC,GAE1B,OACE,kBAACC,MAAAA,CAAIC,UAAWJ,EAAOimC,mBACpB/6B,aAAgB2oB,EAAAA,GAA6B,kBAACA,EAAAA,EAA0B+J,SAAQ,CAACj1B,MAAOuC,IACxFA,aAAgBs7B,GAAkC,kBAACA,EAA+B5I,SAAQ,CAACj1B,MAAOuC,IAClGA,aAAgB2oB,EAAAA,GAA6B,kBAAC7R,EAAO3Y,UAAS,CAACV,MAAOqZ,KACrE8hB,GAAWt2B,EAAQ5I,OAAS,GAC5B,kBAACk3B,EAAAA,EAAaA,CAACpxB,MAAM,QAAQ8C,QAASA,EAASY,MAAOsD,OAAOtD,GAAQwd,SAAUjjB,EAAMijB,W,IAM7F,EApPWuM,EAoPGuH,cAAa,EAAG/2B,YAC5B,MAAM,QAAEm7B,EAAO,KAAEj0B,GAASlH,EAAMjF,WAC1BuF,GAAW89B,EAAAA,EAAAA,IAAwBp+B,IACnC,MAAEyF,GAAUnF,EAASvF,WACrB1D,GAASC,EAAAA,EAAAA,YAAWC,GAE1B,OACE,kBAACC,MAAAA,CAAIC,UAAWJ,EAAOkmC,oBACnBpC,GAAW11B,IAAU60B,EAAAA,IACrB,oCACE,kBAACpzB,EAAKxG,UAAS,CAACV,MAAOkH,K,IAOjC,EArQWsoB,EAqQG9uB,aAAY,EAAGV,YAC3B,MAAM,KAAEuC,EAAI,QAAE44B,EAAO,gBAAEqC,EAAe,MAAEh5B,GAAUxE,EAAMjF,WAClD1D,GAASC,EAAAA,EAAAA,YAAWC,GAE1B,OACE,kBAACC,MAAAA,CAAIC,UAAWJ,EAAOK,WACrB,kBAAC+lC,EAAAA,EAAkB,CAAEzJ,UAAWmH,EAASqC,mBACtCh5B,GACC,kBAAC/E,EAAAA,MAAKA,CAACnH,MAAM,GAAGqH,SAAS,WAAU,uGAKpC4C,aAAgBs7B,GAAkC79B,GAAS,kBAACwvB,EAAoBqH,WAAU,CAAC72B,MAAOA,IAEnG,kBAACxI,MAAAA,CAAIC,UAAWJ,EAAOqmC,SAAUn7B,GAAQ,kBAACA,EAAK7B,UAAS,CAACV,MAAOuC,M,imCClRnE,MAAM2oB,UAAkCnrB,EAAAA,GAU7CiB,UAAAA,G,IA0BI,EAzBFC,KAAKC,SAAS,CACZooB,OAAOqM,EAAAA,EAAAA,IAAe,EACpB+I,EAAAA,EAAAA,GAAiBz9B,KAAMs+B,EAAAA,GAAyBx2B,QAAOq1B,EAAAA,EAAAA,IAAwBn9B,MAAMZ,MAAMoF,UAE7FlD,KAAMtB,KAAKgpB,UAEb,MAAMiL,GAAkBkJ,EAAAA,EAAAA,IAAwBn9B,MAChDA,KAAK2S,MAAMC,IACTqhB,EAAgBphB,kBAAkBC,IAC5BA,EAAStO,QAAU60B,EAAAA,IACrBr5B,KAAKC,SAAS,CACZooB,WAAOrwB,EACPsJ,UAAMtJ,GAEV,KAIJgI,KAAKiT,iBAAiBqZ,EAAAA,IAAiB1kB,IACrC5H,KAAKC,SAAS,CACZ00B,gBAAiB/sB,GACjB,IAGJ5H,KAAK2S,MAAMC,IACO,QAAhB,EAAA5S,KAAKZ,MAAMipB,aAAX,eAAkBxV,kBAAiB,CAACC,EAAU6C,KAC5C3V,KAAK40B,wBAAwB9hB,EAAU6C,EAAU,IAGvD,CAEQif,uBAAAA,CAAwB9hB,EAA0B6C,GAExD3V,KAAKu+B,eAAezrB,GAGpB9S,KAAKw+B,eAAe1rB,GAGpB9S,KAAKy+B,qBAAqB3rB,EAC5B,CAEQ2rB,oBAAAA,CAAqB3rB,G,IACvBA,EAA8CA,EAAlD,IAAiB,QAAbA,EAAAA,EAASkS,YAATlS,IAAAA,OAAAA,EAAAA,EAAe1T,SAAUmyB,EAAAA,aAAaC,OAAqB,QAAb1e,EAAAA,EAASkS,YAATlS,IAAAA,OAAAA,EAAAA,EAAe1T,SAAUmyB,EAAAA,aAAaE,UAAW,CAEjG,MAAM7pB,EAAQ5H,KAAKZ,MAAMu1B,gBAGrB/sB,IACqB,YAAnBA,EAAMvC,UAA0ByN,EAASkS,KAAKwK,OAAOx0B,OAAS,GAChEgF,KAAK0+B,mBAIgB,YAAnB92B,EAAMvC,UAA0ByN,EAASkS,KAAKwK,OAAOx0B,QAAU,GACjEgF,KAAK0+B,mBAGX,CACF,CAEQF,cAAAA,CAAe1rB,G,IAEjBA,EAA0BA,EAA9B,IAAIA,SAAc,QAAdA,EAAAA,EAAUkS,YAAVlS,IAAAA,OAAAA,EAAAA,EAAgBiiB,UAAuB,QAAbjiB,EAAAA,EAASkS,YAATlS,IAAAA,OAAAA,EAAAA,EAAe1T,SAAUmyB,EAAAA,aAAaC,KAAM,C,IAExE1e,EADA,MAAMiiB,EAAwB/0B,KAAKZ,MAAM21B,OACzCjiB,SAAc,QAAdA,EAAAA,EAAUkS,YAAVlS,IAAAA,GAAAA,EAAgBiiB,OAAO3lB,SAAS4lB,IAC9B,MAAM2J,EAAa,GAAG3J,EAAIC,UAAUD,EAAII,WAAWJ,EAAIG,eAC5Bn9B,IAAvB+8B,EAAO4J,KACT5J,EAAO4J,GAAc,OAAK3J,GAAAA,CAAK4J,WAAW,IAC5C,IAEF5+B,KAAKC,SAAS,CACZ80B,WAGF/0B,KAAK6+B,eAAe7+B,KAAKZ,MAAM21B,OACjC,CACF,CAEQwJ,cAAAA,CAAezrB,G,IACjBA,EAAJ,IAAiB,QAAbA,EAAAA,EAASkS,YAATlS,IAAAA,OAAAA,EAAAA,EAAe1T,SAAUmyB,EAAAA,aAAaC,KACxC,GAAI1e,EAASkS,KAAKwK,OAAOx0B,OAAS,KAAOgF,KAAKZ,MAAMkC,gBAAgByuB,EAAAA,GAClE/vB,KAAKC,SAAS,CACZqB,KAAMtB,KAAKgpB,eAER,GAAoC,IAAhClW,EAASkS,KAAKwK,OAAOx0B,OAAc,CAC5C,MAAMoH,EAAanD,EAAAA,GAAWoD,YAAYrC,KAAMsC,EAAAA,KACvBw4B,EAAAA,EAAAA,GAA6B14B,GAEjCpH,OAAS,EAC5BgF,KAAKC,SAAS,CACZqB,KAAM,IAAIy5B,EAAAA,EAAsB,CAAEC,cAAe,KAAMC,EAAAA,EAAAA,GAAej7B,UAGxEA,KAAKC,SAAS,CACZqB,KAAM,IAAI0wB,EAAAA,EAAiB,CAAE11B,KAAM,YAGzC,CAEJ,CAEQwiC,eAAAA,GACN,MAAMhP,EAAiB9vB,KAAKZ,MAAMkC,KAClC,GAAIwuB,aAA0BC,EAAAA,EAAgB,CAC5C,MAAM+I,EAAehJ,aAAAA,EAAAA,EAAgB1wB,MAAMu2B,QAAQjW,MAAMlgB,GAAWA,EAAOuU,WAC3E,GAAI+kB,aAAwBl2B,EAAAA,GAC1B,OAAOk2B,CAEX,CAEF,CAEQiG,4BAAAA,GACN,MAAMjG,EAAe94B,KAAK8+B,kBAC1B,QAAIhG,GACuB75B,EAAAA,GAAW0vB,gBAAgBmK,EAAclK,EAAAA,GAC1CppB,MAAMw5B,IAC5B,MAAMnQ,EAAQmQ,EAAS5/B,MAAMkC,KAAKlC,MAAMpG,SAAS,GACjD,OAAO61B,aAAiB1T,EAAAA,IAAiB0T,aAAiB6C,EAAAA,EAAgBA,GAKhF,CAEQgN,gBAAAA,GACN1+B,KAAKC,SAAS,CACZ00B,qBAAiB38B,KAEnBq9B,EAAAA,EAAAA,IAAwBvjB,EAAAA,GAAUyR,OAAQtkB,EAAAA,GAAWoD,YAAYrC,KAAMiS,EAAAA,IACzE,CAEQ+W,KAAAA,GACN,MACMiW,GADW9B,EAAAA,EAAAA,IAAwBn9B,MACVZ,MACzB8/B,EAAsBjgC,EAAAA,GAAWoD,YAAYrC,KAAMuuB,EAAAA,GACnD4F,EAASrsB,OAAOm3B,aAAAA,EAAAA,EAAez6B,OAErC,IAAI26B,EAAW5W,EAAAA,GAAcC,aAC7B2W,EAAWA,EACR3F,qBAAqB,WAAY,CAAEC,KAAMC,EAAAA,aAAaC,SACtDH,qBAAqB,cAAe,KACpCA,qBAAqB,YAAa,GAClCA,qBAAqB,YAAa,GAClCA,qBAAqB,YAAanD,EAAAA,UAAUC,MAG5C7N,aAAaC,EAAAA,IACbE,QAAQ,IAAIhC,EAAAA,GAAU,CAAC,IACvBiC,SAASsL,GAEZ,MAAM7yB,EAAO69B,EAASnW,SAChB,OAAEyG,EAAM,UAAE5f,IAAc0lB,EAAAA,EAAAA,IAAoB,SAAUC,EAAAA,gBAAiB,QAEvElQ,EAAY,K,IAAM4Z,E,OAA6C,QAA7CA,EAAAA,EAAoB9/B,MAAMgZ,OAAOhZ,MAAM/C,cAAvC6iC,IAAAA,EAAAA,EAAiD,EAAE,EAE3E,OAAO,IAAInP,EAAAA,EAAe,CACxBnsB,QAAS,CACP,CAAEY,MAAO,SAAU1D,MAAO,UAC1B,CAAE0D,MAAO,OAAQ1D,MAAO,QACxB,CAAE0D,MAAO,OAAQ1D,MAAO,SAE1Bqf,OAAQ,OACRwV,QAAS,CACP,IAAI/yB,EAAAA,GAAgB,CAClBiN,UAAW,SACX7W,SAAU,CACR,IAAI04B,EAAAA,GAAiB,CAAEC,UAAW,kBAACpD,EAAAA,EAAoBqH,WAAU,CAAC72B,MAAOmgC,MACzE,IAAI/jB,EAAAA,GAAc,CAChB/Z,UAAW,IACXE,YAIN,IAAIsB,EAAAA,GAAgB,CAClBiN,UAAW,SACX7W,SAAU,CACR,IAAI04B,EAAAA,GAAiB,CAAEC,UAAW,kBAACpD,EAAAA,EAAoBqH,WAAU,CAAC72B,MAAOmgC,MACzE,IAAIrJ,EAAAA,GAAuB,CAAEx+B,MAAO88B,EAAQiL,YAAY,IACxD,IAAI1N,EAAAA,GAAiB,CAAEC,UAAW,kBAACpD,EAAAA,EAAoBuH,WAAU,CAAC/2B,MAAOmgC,MACzE,IAAItQ,EAAAA,EAAgB,CAClBttB,KAAM,IAAIy0B,EAAAA,GAAmB,CAC3BI,QAAQ,EACRH,gBAAiBwH,EAAAA,EACjBtH,SAAU,QACVl9B,SAAU,CACR,IAAImiB,EAAAA,GAAc,CAChB7Z,KAAM,IAAIowB,EAAAA,GAAiB,CACzBC,UAAW,kBAACpV,EAAAA,mBAAkBA,CAAC3jB,KAAK,sBAK5Cg3B,gBAAgBwG,EAAAA,EAAAA,IACdzF,EAAAA,GACA0F,EAAAA,UAAUC,KACVpd,EAAAA,GACAja,EAAAA,GAAWoD,YAAYrC,KAAMuuB,EAAAA,GAAqBnvB,MAAM6G,KACxDkuB,GAEF1E,SACA5f,YACAyV,iBAIN,IAAI1iB,EAAAA,GAAgB,CAClBiN,UAAW,SACX7W,SAAU,CACR,IAAI04B,EAAAA,GAAiB,CAAEC,UAAW,kBAACpD,EAAAA,EAAoBqH,WAAU,CAAC72B,MAAOmgC,MACzE,IAAIrJ,EAAAA,GAAuB,CAAEx+B,MAAO88B,EAAQiL,YAAY,IACxD,IAAI1N,EAAAA,GAAiB,CAAEC,UAAW,kBAACpD,EAAAA,EAAoBuH,WAAU,CAAC/2B,MAAOmgC,MACzE,IAAItQ,EAAAA,EAAgB,CAClBttB,KAAM,IAAIy0B,EAAAA,GAAmB,CAC3BC,gBAAiB,MACjBE,SAAU,QACVl9B,SAAU,CACR,IAAImiB,EAAAA,GAAc,CAChB7Z,KAAM,IAAIowB,EAAAA,GAAiB,CACzBC,UAAW,kBAACpV,EAAAA,mBAAkBA,CAAC3jB,KAAK,sBAK5Cg3B,gBAAgBwG,EAAAA,EAAAA,IACdzF,EAAAA,GACA0F,EAAAA,UAAUC,KACVpd,EAAAA,GACAja,EAAAA,GAAWoD,YAAYrC,KAAMuuB,EAAAA,GAAqBnvB,MAAM6G,KACxDkuB,GAEF1E,SACA5f,YACAyV,mBAMZ,CAEQuZ,cAAAA,CAAe9J,GACrB,MAAM1lB,GAAYC,EAAAA,EAAAA,gBAGlB,IAAI+vB,EAA6B,GACjC,IAAK,MAAMrK,KAAOD,EAAQ,CACxB,MAAMuK,EAAevK,EAAOC,GACvBsK,EAAaV,YAChBS,EAAWr2B,KAAKs2B,GAChBA,EAAaV,WAAY,EAE7B,CAEIS,EAAWrkC,SAERgF,KAAK++B,gCACR1vB,EAAUmF,QAAQ,CAChBlY,KAAMoa,EAAAA,UAAU6oB,WAAWrlC,KAC3BuZ,QAAS4rB,aAAAA,EAAAA,EAAYjiC,KAAI,CAAC43B,EAAK/6B,IAAQ+F,KAAKw/B,YAAYvlC,EAAK+6B,OAGjEh1B,KAAKC,SAAS,CACZ80B,WAGN,CAEQyK,WAAAA,CAAYvlC,EAAa+6B,GAC/B,OACE,kBAACz+B,MAAAA,CAAI0D,IAAKA,GACP+6B,EAAIC,QACH,oCACE,kBAACC,SAAAA,KAAO,UAAe,KAAGF,EAAIC,OAAO,IAAC,kBAACt2B,KAAAA,OAG1Cq2B,EAAIG,SACH,oCACE,kBAACD,SAAAA,KAAO,WAAgB,KAAGF,EAAIG,QAAQ,IAAC,kBAACx2B,KAAAA,OAG5Cq2B,EAAII,SACH,oCACE,kBAACF,SAAAA,KAAO,WAAgB,KAAGF,EAAII,SAKzC,CAEA,eAAcpB,EAAS,MAAEj1B,IACvB,MAAM,KAAEuC,GAASvC,EAAMjF,WACvB,OAAO,oCAAGwH,GAAQA,aAAgByuB,EAAAA,GAAkB,kBAACA,EAAAA,EAAeiE,SAAQ,CAACj1B,MAAOuC,IACtF,CAhTAd,WAAAA,CAAYpB,GACVqB,MAAM,OACDrB,GAAAA,CACH21B,OAAQ,CAAC,KAGX/0B,KAAKW,qBAAqBX,KAAKD,WAAWa,KAAKZ,MACjD,EA2SA,EAnTWiqB,EAmTGxqB,aAAY,EAAGV,YAC3B,MAAM,KAAEuC,GAASvC,EAAMjF,WACjB1D,GAASC,EAAAA,EAAAA,YAAW61B,EAAAA,IAC1B,OAAI5qB,EACK,kBAAC+d,OAAAA,CAAK7oB,UAAWJ,EAAO+1B,cAAe7qB,GAAQ,kBAACA,EAAK7B,UAAS,CAACV,MAAOuC,KAGxE,kBAACib,EAAAA,mBAAkBA,CAAC3jB,KAAM,c,oOC3V9B,MAAMm3B,UAAuBjxB,EAAAA,G,kBAA7B,YAGL,OAAO2gC,kBAAkBtf,KACvBzjB,EAAAA,EAAAA,IAAqBC,EAAAA,GAAkBC,gBAAiBC,EAAAA,GAAoBD,gBAAgB8iC,oBAAqB,CAC/GlgC,OAAQ2gB,EACR+b,MAAMrqB,EAAAA,EAAAA,QAER7R,KAAKC,SAAS,CAAEkgB,UAAS,G,EAP3B,EADW4P,EACGiE,YAwBhB,UAAiC,MAAEj1B,IACjC,MAAM,OAAEohB,EAAM,QAAEvc,GAAY7E,EAAMjF,WAC5B1D,GAASC,EAAAA,EAAAA,YAAWC,GAE1B,OACE,kBAACqpC,EAAAA,MAAKA,CAACnpC,UAAWJ,EAAOwtB,OACvB,kBAACgc,EAAAA,iBAAgBA,CAACh8B,QAASA,EAASY,MAAO2b,EAAQ6B,SAAUjjB,EAAM0gC,iBAGzE,IAvBE,EAXW1P,EAWGtwB,aAAY,EAAGV,YAC3B,MAAM,QAAE42B,EAAO,QAAE/xB,EAAO,OAAEuc,GAAWphB,EAAMjF,WAErC+lB,EAAQjc,EAAQi8B,WAAW/rB,GAAMA,EAAEtP,QAAU2b,IACnD,IAAe,IAAXN,EACF,OAAO,KAGT,MAAMrgB,EAASm2B,EAAQ9V,GAEvB,OAAO,kBAACrgB,EAAOC,UAAS,CAACV,MAAOS,G,IAepC,MAAMlJ,EAAaoB,IACV,CACLksB,OAAOjsB,EAAAA,EAAAA,KAAI,CACTsnB,aAAc,K,uGC/Cb,MAAM8b,UAA8Bj8B,EAAAA,I,EACf,EAAGC,YAC3B,MAAM,cAAEi8B,GAAkBj8B,EAAMjF,WAChC,OACE,kBAACf,EAAAA,EAASA,KACR,kBAACyF,EAAAA,MAAKA,CAACnH,MAAM,GAAGqH,SAAS,QAAO,iCACC,IAC/B,kBAAChI,EAAAA,OAAMA,CAACF,UAAWy7B,EAAAA,GAAiBrS,OAAQ5oB,QAAS,IAAMgkC,KAAiB,iBAElE,Q,EARJv7B,e,EADHs7B,G,wNCcN,MAAMlF,UAA+B/2B,EAAAA,GAmB1CiB,UAAAA,G,IAEIi5B,EADF,MAAMpR,EACuF,QAA3FoR,GAAAA,EAAAA,EAAAA,IAAe,YAAa,CAACrS,EAAAA,GAAqBiB,UAAWjB,EAAAA,GAAqB/sB,kBAAlFo/B,IAAAA,EAAAA,EACArS,EAAAA,GAAqB/sB,SACjBwtB,EAiDV,SAAgC/vB,EAAeuM,G,IAE3Co1B,EADF,MAAMpR,EACuF,QAA3FoR,GAAAA,EAAAA,EAAAA,IAAe,YAAa,CAACrS,EAAAA,GAAqBiB,UAAWjB,EAAAA,GAAqB/sB,kBAAlFo/B,IAAAA,EAAAA,EACArS,EAAAA,GAAqB/sB,SAEjB0H,EAAOinB,EAAAA,GAAcC,aACxBK,SAASxxB,GACTuxB,QAAQ,IAAIhC,EAAAA,GAAU,CAAC,IACvBkZ,gBAAe,GACfC,aAAanY,IAAcjB,EAAAA,GAAqBiB,WAChD4R,qBAAqB,WAAY,CAAEC,KAAMC,EAAAA,aAAaC,SACtDH,qBAAqB,cAAe,KACpCA,qBAAqB,YAAa,GAClCA,qBAAqB,YAAa,GAGlCI,eA/F8B,KAgG9BJ,qBAAqB,YAAanD,EAAAA,UAAUC,MAK/C,OAHI1yB,aAAAA,EAAAA,EAASw7B,aACX99B,EAAKmnB,aAAaC,EAAAA,IAEbpnB,EAAK0nB,OACd,CAxEgBgX,CAAuBhgC,KAAKZ,MAAM/H,MAAO,CAAE+nC,WAAYp/B,KAAKZ,MAAMggC,aACxE3mC,EAASwnC,EAAsBrY,GAErC5nB,KAAKC,SAAS,CACZqB,KAAM,IAAIsB,EAAAA,GAAgB,CACxB3I,IAAKi2B,EACL9uB,UAAW3I,EACXA,OAAQA,EACRynC,UAAWznC,EACXK,KAAM,SACNE,SAAU,CACR,IAAImiB,EAAAA,GAAc,CAChB7Z,KAAM8lB,SAMdpnB,KAAK2S,MAAMC,IACTwU,EAAIvU,kBAAiB,CAACC,EAAU6C,KAC1B7C,EAAS8U,YAAcjS,EAAUiS,YAEnCG,EAD2B9oB,EAAAA,GAAWoD,YAAY+kB,EAAKxkB,EAAAA,IAGrDkQ,EAAS8U,UAAYjB,EAAAA,GAAqBiB,UAAYjB,EAAAA,GAAqB/sB,WAE7EouB,EAAAA,EAAAA,IACE,YACAlV,EAAS8U,UAAYjB,EAAAA,GAAqBiB,UAAYjB,EAAAA,GAAqB/sB,UAE/E,IAGN,CAvDA4G,WAAAA,CAAYpB,GACVqB,MAAMrB,GACNY,KAAKW,qBAAqBX,KAAKD,WAAWa,KAAKZ,MACjD,EAuDK,SAAS+nB,EAAsBD,EAAqCqY,GACzE,MAAM1nC,EAASwnC,EAAsBE,GACrCrY,EAAmB7nB,SAAS,CAC1BmB,UAAW3I,EACXA,OAAQA,EACRynC,UAAWznC,GAEf,CAEA,SAASwnC,EAAsBE,GAC7B,OAAOA,IAAqBxZ,EAAAA,GAAqBiB,UAAY,GAAK,GACpE,C,EAhE4B,EAAG7oB,YAC3B,MAAM,KAAEuC,GAASvC,EAAMjF,WACvB,OAAIwH,EAEA,kBAAC/K,MAAAA,KACC,kBAAC+K,EAAK7B,UAAS,CAACV,MAAOuC,KAKtB,IAAI,G,EAVC7B,e,EANHo2B,G,sFAiGN,MAAM3F,EAA0B,qB,qMC7GhC,MAAMhB,EAAe,I,IAAA,MAAE1qB,EAAK,SAAEwd,EAAQ,YAAEmN,EAAW,QAAEl5B,EAAO,OAAEmqC,GAAwB,EAAbC,E,kXAAAA,CAAAA,EAAAA,CAAlD77B,QAAOwd,WAAUmN,cAAal5B,UAASmqC,WACnE,MAAMhqC,GAASC,EAAAA,EAAAA,YAAWC,GAC1B,OACE,kBAACgqC,EAAAA,M,sUAAKA,CAAAA,CACJ97B,MAAOA,EACPwd,SAAUA,EACVoe,OACE,kBAAC/gB,OAAAA,CAAK7oB,UAAWJ,EAAOmqC,eACrBtqC,GAAWuO,EACV,kBAAC8a,EAAAA,WAAUA,CACTjlB,aAAY,eACZ+rB,QAAS,eACTpvB,QAASf,EACTiE,KAAK,QACL1D,UAAWJ,EAAOoqC,iBAElBxoC,EACHooC,GAAUA,GAGfxN,OAAQ,kBAACp4B,EAAAA,KAAIA,CAACN,KAAK,WACnBi1B,YAAaA,GACTkR,GAAAA,EAKJ/pC,EAAaoB,IAA0B,CAC3C6oC,eAAe5oC,EAAAA,EAAAA,KAAI,CACjByD,IAAK1D,EAAMiB,QAAQ,IACnBf,QAAS,gBAEX4oC,WAAW7oC,EAAAA,EAAAA,KAAI,CACb0D,OAAQ,a,2TChBZ,eAAKolC,G,6DAAAA,C,CAAL,CAAKA,GAAAA,CAAAA,GASL,WAAKC,G,uDAAAA,C,CAAL,CAAKA,GAAAA,CAAAA,GA0CE,MAAMC,UAAkC7hC,EAAAA,GAoB7CiB,UAAAA,GAEE,MAIM2B,GAJWkrB,EAAAA,EAAAA,KACfC,EAAAA,EAAAA,IAA6B7sB,KAAKZ,MAAM+kB,UAAWnkB,KAAKZ,MAAMiY,cAC9DrX,MAEuBZ,MAAMsC,QAAQrF,QAAQ+I,GAAMA,EAAEnL,MAAQ+F,KAAKZ,MAAM+kB,YACpEyc,EAAWl/B,EAAQge,MAAMta,GAAMA,EAAEC,WAAaI,EAAAA,EAASiX,KAAOtX,EAAEC,WAAaI,EAAAA,EAASgX,KACtFokB,EAAWn/B,EAAQge,MAAMta,GAAMA,EAAEC,WAAaI,EAAAA,EAASmX,KAAOxX,EAAEC,WAAaI,EAAAA,EAASkX,KAC5F,IAAIvL,EAA4D,CAAC,EAEjE,GAA6B,aAAzBpR,KAAKZ,MAAM+3B,WAAqD,UAAzBn3B,KAAKZ,MAAM+3B,UAAuB,CAC3E,GAAIyJ,EAAU,CACZ,MAAME,EAAiBC,GAAuB18B,EAAAA,EAAAA,IAAyBu8B,GAAUp8B,MAAOxE,KAAKZ,MAAM+3B,WAE/F2J,IACF1vB,EAAYqL,GAAKqkB,EAAet8B,MAChC4M,EAAY4vB,IAAMF,EAAeG,KACjC7vB,EAAYsL,IAAMkkB,EAASv7B,WAAaI,EAAAA,EAASiX,IAErD,CAEA,GAAImkB,EAAU,CACZ,MAAMC,EAAiBC,GAAuB18B,EAAAA,EAAAA,IAAyBw8B,GAAUr8B,MAAOxE,KAAKZ,MAAM+3B,WAE/F2J,IACF1vB,EAAYuL,GAAKmkB,EAAet8B,MAChC4M,EAAY8vB,IAAMJ,EAAeG,KACjC7vB,EAAYwL,IAAMikB,EAASx7B,WAAaI,EAAAA,EAASmX,IAErD,CACF,KAAO,CAEL,GAAIgkB,EAAU,CACZ,MAAME,GAAiBz8B,EAAAA,EAAAA,IAAyBu8B,GAAUp8B,MAC1D4M,EAAYqL,GAAK0kB,OAAOL,GACxB1vB,EAAY4vB,IAAM,GAClB5vB,EAAYsL,IAAMkkB,EAASv7B,WAAaI,EAAAA,EAASiX,GACnD,CACA,GAAImkB,EAAU,CACZ,MAAMC,GAAiBz8B,EAAAA,EAAAA,IAAyBw8B,GAAUr8B,MAC1D4M,EAAYuL,GAAKwkB,OAAOL,GACxB1vB,EAAY8vB,IAAM,GAClB9vB,EAAYwL,IAAMikB,EAASx7B,WAAaI,EAAAA,EAASmX,GACnD,CACF,CAEwC,IAApCzQ,OAAOtD,KAAKuI,GAAapW,SAC3BoW,EAAYgwB,mBAAoB,GAGlCphC,KAAKC,SAASmR,EAChB,CAEAiwB,QAAAA,GAGMrhC,KAAKZ,MAAMqd,IACb0Q,EAAAA,EAAAA,IACEntB,KAAKZ,MAAM+kB,UACXnkB,KAAKZ,MAAMqd,GAAG3W,WAAa9F,KAAKZ,MAAM4hC,IACtChhC,KAAKZ,MAAMsd,IAAMjX,EAAAA,EAASiX,IAAMjX,EAAAA,EAASgX,GACzCzc,KACAA,KAAKZ,MAAMiY,eAGb8G,EAAAA,EAAAA,IAAane,KAAKZ,MAAM+kB,UAAWnkB,KAAMA,KAAKZ,MAAMsd,IAAMjX,EAAAA,EAASiX,IAAMjX,EAAAA,EAASgX,GAAIzc,KAAKZ,MAAMiY,cAG/FrX,KAAKZ,MAAMud,IACbwQ,EAAAA,EAAAA,IACEntB,KAAKZ,MAAM+kB,UACXnkB,KAAKZ,MAAMud,GAAG7W,WAAa9F,KAAKZ,MAAM8hC,IACtClhC,KAAKZ,MAAMwd,IAAMnX,EAAAA,EAASmX,IAAMnX,EAAAA,EAASkX,GACzC3c,KACAA,KAAKZ,MAAMiY,eAGb8G,EAAAA,EAAAA,IAAane,KAAKZ,MAAM+kB,UAAWnkB,KAAMA,KAAKZ,MAAMwd,IAAMnX,EAAAA,EAASmX,IAAMnX,EAAAA,EAASkX,GAAI3c,KAAKZ,MAAMiY,cAGpEpY,EAAAA,GAAWoD,YAAYrC,KAAMs5B,GACrCgI,eACzB,CAtGA9gC,WAAAA,CAAYpB,GACV,IAAImiC,EACJ,MAAMpK,EAA4C/3B,EAAM+3B,UACxD,GAAkB,UAAdA,EACFoK,EAAQ,CAAEL,IAAK,IAAkBF,IAAK,UACjC,GAAkB,aAAd7J,EACToK,EAAQ,CAAEL,IAAK,IAAsBF,IAAK,SACrC,IAAkB,UAAd7J,EAGT,MAAM,IAAI3zB,MAAM,mCAAmC2zB,KAFnDoK,EAAQ,CAAEL,IAAK,GAAIF,IAAK,GAG1B,CAGAvgC,M,sUAAM,IAAKrB,EAAUmiC,IAyFvBC,EAAAA,KAAAA,kBAAkB38B,IAChB,MAAM48B,OAAiCzpC,IAAlBgI,KAAKZ,MAAMqd,SAAsCzkB,IAAlBgI,KAAKZ,MAAMud,GACjD,UAAV9X,EAAE5K,KAAoBwnC,GACxBzhC,KAAKqhC,UACP,IA3FArhC,KAAKW,qBAAqBX,KAAKD,WAAWa,KAAKZ,MACjD,EAqRK,SAAS+gC,EACdW,EACAC,GAEA,GAAkB,aAAdA,EAA0B,CAC5B,MAGMC,EAHiBz1B,OAAOzI,OAAO+8B,GAGA/gB,MAAMkiB,IACzC,MAAMC,EAAsBD,EAAc5mC,OAC1C,OAAO0mC,EAAYx1B,OAA6B,EAAvB21B,KAA8BD,CAAa,IAGtE,GAAIA,EAAe,CACjB,MAAMp9B,EAAQ28B,OAAOO,EAAYp9B,QAAQs9B,EAAe,KACxD,IAAKE,MAAMt9B,GACT,MAAO,CACLy8B,KAAMW,EACNp9B,MAAOA,EAGb,CACF,CAEA,GAAkB,UAAdm9B,EAAuB,CACzB,MAKMI,EALc51B,OAAOzI,OAAOg9B,GAE/Bz6B,MAAK,CAACvI,EAAGwI,IAAMA,EAAElL,OAAS0C,EAAE1C,SAGA0kB,MAAMqiB,IACnC,MAAMC,EAAkBD,EAAW/mC,OACnC,OAAO0mC,EAAYx1B,OAAyB,EAAnB81B,KAA0BD,CAAU,IAG/D,GAAIA,EAAY,CACd,MAAMv9B,EAAQ28B,OAAOO,EAAYp9B,QAAQy9B,EAAY,KACrD,IAAKD,MAAMt9B,GACT,MAAO,CACLy8B,KAAMc,EACNv9B,MAAOA,EAGb,CACF,CAGF,CAEA,SAASy9B,EAAe9K,GACtB,GAAkB,aAAdA,EAEF,OADahrB,OAAOtD,KAAK43B,GACbrjC,KAAKnD,IACR,CACLrB,KAAMqB,EACNuK,MAAOi8B,EAAmBxmC,GAC1B6G,MAAO7G,MAKb,GAAkB,UAAdk9B,EAEF,OADahrB,OAAOtD,KAAK63B,GACbtjC,KAAKnD,IACR,CACLrB,KAAMqB,EACNuK,MAAOk8B,EAAezmC,GACtB6G,MAAO7G,MAKb,MAAMsJ,EAAQ,IAAIC,MAAM,uBAAuB2zB,KAE/C,MADA30B,EAAAA,EAAOe,MAAMA,EAAO,CAAEuB,IAAK,uCACrBvB,CACR,CAnQE,EA/GWo9B,EA+GGlhC,aAAY,EAAGV,YAC3B,MAAMmjC,GAAgB7rC,EAAAA,EAAAA,YAAW8rC,IAC3B,UAAEhe,EAAS,GAAE1H,EAAE,GAAEE,EAAE,IAAED,EAAG,IAAEE,EAAG,IAAEokB,EAAG,IAAEE,EAAG,UAAE/J,EAAS,kBAAEiK,GAAsBriC,EAAMjF,WAChFsoC,EAAyB,UAAdjL,GAAyBA,IAAchT,EAAY,IAAIgT,UAAen/B,EAEjFqqC,EAAyBpjC,EAAAA,GAAWoD,YAAYtD,EAAOu6B,GACvDmI,OAAsBzpC,IAAPykB,QAA2BzkB,IAAP2kB,EAEzC,OACE,kBAAC2lB,EAAAA,oBAAmBA,CAACC,YAAY,EAAMvrC,QAAS,IAAMqrC,EAAuBf,iBAC3E,kBAACkB,EAAAA,MAAKA,CAAC3yB,UAAU,SAASzU,IAAK,EAAGqnC,KAAK,WACrC,kBAAClsC,MAAAA,CAAIC,UAAW0rC,EAAcQ,KAAKphC,MACjC,kBAAC/K,MAAAA,CAAIC,UAAW0rC,EAAcQ,KAAKrrC,OAChC8sB,EAAU,IAAEie,GAGf,kBAAC7rC,MAAAA,CAAIC,UAAW0rC,EAAcQ,KAAKC,WAEjC,kBAACC,EAAAA,SAAQA,CAACpsC,UAAW0rC,EAAcQ,KAAKG,UACtC,kBAAClD,EAAAA,MAAKA,CACJ1oC,cAAaC,EAAAA,EAAQ4rC,WAAWC,OAAOC,qBAAqBC,0BAC5DC,YAAY,EACZ1sC,WAAWkM,EAAAA,EAAAA,IAAGw/B,EAAcQ,KAAK9e,MAAOse,EAAcQ,KAAKS,iBAE3D,kBAAC3Q,EAAAA,OAAMA,CACLh8B,UAAW0rC,EAAcQ,KAAKU,eAC9BC,kBAAkB,EAClB7+B,WAAexM,IAAR0kB,EAAoBA,EAAI5W,WAAa,QAC5ClC,QAAS,CACP,CAAE9C,MAAO,eAAgB0D,MAAO,SAChC,CAAE1D,MAAO,wBAAyB0D,MAAO,SAE3Cwd,SAAWxd,GAAUzF,EAAMkB,SAAS,CAAEyc,IAAqB,SAAhBlY,EAAMA,WAGrD,kBAACm7B,EAAAA,MAAKA,CACJ1oC,cAAaC,EAAAA,EAAQ4rC,WAAWC,OAAOC,qBAAqBM,iBAC5DJ,YAAY,EACZ1sC,UAAW0rC,EAAcQ,KAAK9e,OAE9B,kBAAC0c,EAAAA,MAAKA,CACJiD,iBAAkBxkC,EAAMyiC,eACxBgC,WAAW,EACXxhB,SAAWnd,IACT9F,EAAMkB,SAAS,CACbwc,GAA8B,KAA1B5X,EAAE4+B,cAAcj/B,MAAe28B,OAAOt8B,EAAE4+B,cAAcj/B,YAASxM,GACnE,EAEJxB,UAAW0rC,EAAcQ,KAAKgB,YAC9Bl/B,MAAOiY,EACPngB,KAAM,YAGK,UAAd66B,GACC,kBAACwM,EAAAA,MAAKA,KACJ,kBAAChE,EAAAA,MAAKA,CACJ1oC,cAAaC,EAAAA,EAAQ4rC,WAAWC,OAAOC,qBAAqBY,qBAC5DV,YAAY,EACZ1sC,UAAW0rC,EAAcQ,KAAK9e,MAC9B9iB,MAAO,kBAACue,OAAAA,CAAK7oB,UAAW0rC,EAAcQ,KAAKmB,gBAAgB,SAE3D,kBAACrR,EAAAA,OAAMA,CACLxQ,SAAWnd,IACT9F,EAAMkB,SAAS,CACb+gC,IAAKn8B,EAAEL,OACP,EAEJ6+B,kBAAkB,EAClBz/B,QAASq+B,EAAe9K,GACxB3gC,UAAW0rC,EAAcQ,KAAKoB,YAC9Bt/B,MAAOw8B,OAQjB,kBAAC4B,EAAAA,SAAQA,CAACpsC,UAAW0rC,EAAcQ,KAAKG,UACtC,kBAAClD,EAAAA,MAAKA,CACJ1oC,cAAaC,EAAAA,EAAQ4rC,WAAWC,OAAOC,qBAAqBe,uBAC5Db,YAAY,EACZ1sC,WAAWkM,EAAAA,EAAAA,IAAGw/B,EAAcQ,KAAK9e,MAAOse,EAAcQ,KAAKS,iBAE3D,kBAAC3Q,EAAAA,OAAMA,CACLh8B,UAAW0rC,EAAcQ,KAAKU,eAC9BC,kBAAkB,EAClB7+B,WAAexM,IAAR4kB,EAAoBA,EAAI9W,WAAa,QAC5ClC,QAAS,CACP,CAAE9C,MAAO,YAAa0D,MAAO,SAC7B,CAAE1D,MAAO,qBAAsB0D,MAAO,SAExCwd,SAAWxd,GAAUzF,EAAMkB,SAAS,CAAE2c,IAAqB,SAAhBpY,EAAMA,WAGrD,kBAACm7B,EAAAA,MAAKA,CACJ1oC,cAAaC,EAAAA,EAAQ4rC,WAAWC,OAAOC,qBAAqBgB,cAC5Dd,YAAY,EACZ1sC,UAAW0rC,EAAcQ,KAAK9e,OAE9B,kBAAC0c,EAAAA,MAAKA,CACJiD,iBAAkBxkC,EAAMyiC,eACxBxf,SAAWnd,GACT9F,EAAMkB,SAAS,CAAE0c,GAA8B,KAA1B9X,EAAE4+B,cAAcj/B,MAAe28B,OAAOt8B,EAAE4+B,cAAcj/B,YAASxM,IAEtFxB,UAAW0rC,EAAcQ,KAAKgB,YAC9Bl/B,MAAOmY,EACPrgB,KAAM,YAGK,UAAd66B,GACC,kBAACwM,EAAAA,MAAKA,KACJ,kBAAChE,EAAAA,MAAKA,CACJ1oC,cAAaC,EAAAA,EAAQ4rC,WAAWC,OAAOC,qBAAqBiB,kBAC5Df,YAAY,EACZ1sC,UAAW0rC,EAAcQ,KAAK9e,MAC9B9iB,MAAO,kBAACue,OAAAA,CAAK7oB,UAAW0rC,EAAcQ,KAAKmB,gBAAgB,SAE3D,kBAACrR,EAAAA,OAAMA,CACLxQ,SAAWnd,IACT9F,EAAMkB,SAAS,CACbihC,IAAKr8B,EAAEL,OACP,EAEJ6+B,kBAAkB,EAClBz/B,QAASq+B,EAAe9K,GACxB3gC,UAAW0rC,EAAcQ,KAAKoB,YAC9Bt/B,MAAO08B,QASnB,kBAAC3qC,MAAAA,CAAIC,UAAW0rC,EAAcQ,KAAKwB,SAChC9C,GACC,kBAAC1qC,EAAAA,OAAMA,CACLO,cAAaC,EAAAA,EAAQ4rC,WAAWC,OAAOC,qBAAqBzoC,aAC5D6gB,UAAWgmB,EACXpqC,QAAS,KACP+H,EAAMkB,SAAS,CACbwc,QAAIzkB,EACJ2kB,QAAI3kB,IAEN+G,EAAMsiC,UAAU,EAElBxqC,KAAM,KACNF,QAAS,cACTC,KAAM,WACP,UAIH,kBAACF,EAAAA,OAAMA,CACLO,cAAaC,EAAAA,EAAQ4rC,WAAWC,OAAOC,qBAAqBmB,aAC5D/oB,SAAUqmB,EACVzqC,QAAS,IAAM+H,EAAMsiC,WACrBxqC,KAAM,KACNF,QAAS,UACTC,KAAM,UACN0F,KAAM,UACP,OAID,kBAAC5F,EAAAA,OAAMA,CACLO,cAAaC,EAAAA,EAAQ4rC,WAAWC,OAAOC,qBAAqBoB,aAC5DptC,QAAS,IAAMqrC,EAAuBf,gBACtCzqC,KAAM,KACNF,QAAS,YACTC,KAAM,WACP,iBAwFf,MAAMurC,EAAoBzqC,IAA0B,CAClDgrC,KAAM,CACJwB,SAASvsC,EAAAA,EAAAA,KAAI,CACXC,QAAS,OACT2F,SAAU,OACV1F,eAAgB,WAChBuD,IAAK1D,EAAMiB,QAAQ,KACnBmJ,UAAWpK,EAAMiB,QAAQ,KAE3ByqC,gBAAgBzrC,EAAAA,EAAAA,KAAI,CAClBo6B,SAAU,UAEZ+R,aAAansC,EAAAA,EAAAA,KAAI,CACfo6B,SAAU,SAEZ2R,aAAa/rC,EAAAA,EAAAA,KAAI,CACfa,MAAO,SAETmqC,WAAWhrC,EAAAA,EAAAA,KAAI,CACbC,QAAS,OACTqJ,cAAe,SACf07B,WAAYjlC,EAAMiB,QAAQ,GAC1B2oB,cAAe,IAEjBsC,OAAOjsB,EAAAA,EAAAA,KAAI,CACTC,QAAS,OACTiB,WAAY,SACZomB,aAAcvnB,EAAMiB,QAAQ,KAE9BwqC,gBAAgBxrC,EAAAA,EAAAA,KAAI,CAClBupB,YAAaxpB,EAAMiB,QAAQ,KAE7BkrC,gBAAgBlsC,EAAAA,EAAAA,KAAI,CAClBoG,WAAYrG,EAAMiB,QAAQ,GAC1BuoB,YAAaxpB,EAAMiB,QAAQ,OAE7B0rC,kBAAkB1sC,EAAAA,EAAAA,KAAI,CACpBa,MAAO,UAET8rC,kBAAkB3sC,EAAAA,EAAAA,KAAI,CACpBoG,WAAYrG,EAAMiB,QAAQ,GAC1BuoB,YAAaxpB,EAAMiB,QAAQ,KAE7BkqC,UAAUlrC,EAAAA,EAAAA,KAAI,CACZC,QAAS,OACTiB,WAAY,SACZhB,eAAgB,gBAChBW,MAAO,OACPymB,aAAc,IAEhB5nB,OAAOM,EAAAA,EAAAA,KAAI,CAAC,GACZ2J,MAAM3J,EAAAA,EAAAA,KAAI,CACRe,QAAShB,EAAMiB,QAAQ,KAEzB0E,GAAG1F,EAAAA,EAAAA,KAAI,CACL0J,SAAU,S,u0BC7chB,MAAMkjC,EAAgB,UAChBC,EAAgB,UAChBC,EAAuB,gBAEtB,MAAMnL,UAA+Bx6B,EAAAA,GAM1CkjB,QAAAA,CAASxd,GACP,MAAMnF,EAAWW,KAAK0kC,cAChBhX,EAAeruB,EAASD,MAAMlF,KAC9BkjB,EAAiBpd,KAAK2kC,kBAAkBtlC,GACxCytB,GAAaC,EAAAA,EAAAA,IAAgC1tB,EAAU+d,IAC1CA,aAAAA,EAAAA,EAAgB/X,YAAaI,EAAAA,EAAS+W,UAAYsQ,EAAWtoB,QAAUogC,EAAAA,IAExEpgC,EAAMA,QAAU+/B,EAChCvkC,KAAKqxB,YAAY3D,GACRlpB,EAAMA,QAAU+/B,EACzBvkC,KAAK6kC,oBAAoBnX,GAChBlpB,EAAMA,QAAUggC,EACzBxkC,KAAK8kC,oBAAoBpX,GAChBlpB,EAAMA,QAAUigC,GACzBzkC,KAAK+kC,qBAAqBrX,GAG5B1tB,KAAKC,SAAS,CACZ+kC,cAAexgC,GAEnB,CAwJQmgC,iBAAAA,CAAkBtlC,GACxB,IAAI,UAAE8kB,IAAcoW,EAAAA,EAAAA,MACpB,GAAIv6B,KAAKZ,MAAM+kB,YAAcA,EAC3B,OAAO9kB,aAAAA,EAAAA,EAAUD,MAAMsC,QAAQge,MAAMrjB,GAC5BA,EAAOpC,MAAQ+F,KAAKZ,MAAM+kB,WAKvC,CAEOpkB,UAAAA,G,IAGDk4B,EAAAA,EAFJ,MAAMA,EAAeh5B,EAAAA,GAAWoD,YAAYrC,KAAMiS,EAAAA,KAEtB,QAAxBgmB,EAAAA,EAAa74B,MAAMipB,aAAnB4P,IAAAA,GAAoC,QAApCA,EAAAA,EAA0B74B,MAAM4lB,YAAhCiT,IAAAA,OAAAA,EAAAA,EAAsC74B,SAAUmyB,EAAAA,aAAaC,MAC/DxxB,KAAKilC,oBAGPjlC,KAAK2S,MAAMC,IACT3T,EAAAA,GAAWgmB,QAAQjlB,MAAM6S,kBAAkBC,I,IACrCA,EACEmlB,EAAAA,EAKFA,GANa,QAAbnlB,EAAAA,EAASkS,YAATlS,IAAAA,OAAAA,EAAAA,EAAe1T,SAAUmyB,EAAAA,aAAaC,QACZ,QAAxByG,EAAAA,EAAa74B,MAAMipB,aAAnB4P,IAAAA,GAAoC,QAApCA,EAAAA,EAA0B74B,MAAM4lB,YAAhCiT,IAAAA,OAAAA,EAAAA,EAAsC74B,SAAUmyB,EAAAA,aAAaC,MAC/DxxB,KAAKilC,oBAGPjlC,KAAK2S,MAAMC,IACe,QAAxBqlB,EAAAA,EAAa74B,MAAMipB,aAAnB4P,IAAAA,OAAAA,EAAAA,EAA0BplB,kBAAkBqyB,I,IACtCA,GAAsB,QAAtBA,EAAAA,EAAkBlgB,YAAlBkgB,IAAAA,OAAAA,EAAAA,EAAwB9lC,SAAUmyB,EAAAA,aAAaC,MACjDxxB,KAAKilC,mBACP,KAGN,IAGN,CAwCO3D,aAAAA,GACLthC,KAAKC,SAAS,CACZklC,aAAcnlC,KAAKZ,MAAM+lC,aAE7B,CAEQF,iBAAAA,G,IAEkChN,EADxC,MAAMA,EAAeh5B,EAAAA,GAAWoD,YAAYrC,KAAMiS,EAAAA,IAC5CmzB,GAAgBC,EAAAA,EAAAA,IAA0C,QAAxBpN,EAAAA,EAAa74B,MAAMipB,aAAnB4P,IAAAA,OAAAA,EAAAA,EAA0B74B,MAAM4lB,MAClEzB,EAAoC6hB,aAAAA,EAAAA,EAAe5hB,OAAO9D,MAAMkE,GAAyB,WAAfA,EAAM1pB,OAEhF8qB,EAAO/lB,EAAAA,GAAWgmB,QAAQjlB,MAC1BklB,GAAcC,EAAAA,EAAAA,IAAiBH,GAAOlR,GAAMA,aAAasR,EAAAA,IAAkBA,EAAAA,IACjF,GAAIF,EAAa,CACf,MACMsP,EADUtP,EAAY9lB,MAAMwlB,QACZ,IAClB4P,aAAAA,EAAAA,EAAOzxB,KAAKzD,SAAS,mBACvBU,KAAKC,SAAS,CACZqlC,mBAAmB,GAGzB,CAEA,IAAK/hB,IAAW6hB,EAId,YAHAplC,KAAKC,SAAS,CACZslC,kBAAkB,IAItB,MAAMlmC,EAAWW,KAAK0kC,cAEhBc,EAAyBjiB,EAAO7f,OAAO+hC,QAAO,CAACC,EAAKniB,MACpDA,aAAAA,EAAAA,EAASvjB,KAAKZ,MAAM+kB,aACtBuhB,IAEKA,IACN,GAEGvV,EAAQlxB,EAAAA,GAAWoD,YAAYrC,KAAMgU,EAAAA,IAC3C,QAA+Bhc,IAA3BwtC,GAAwCJ,EAAcpqC,OAAS,EAAG,CACpE,MAAM2qC,GAAc,EAA0BP,EAAcpqC,OAAU,KAAK6mB,iBACrEwE,EAAc,GAAGrmB,KAAKZ,MAAM+kB,uBAAuBwhB,SAAkBP,EAAcpqC,2BAGzFm1B,EAAMlwB,SAAS,CACbomB,eAEJ,MACE8J,EAAMlwB,SAAS,CACbomB,iBAAaruB,IAKjB,MAAMolB,EAAiBpd,KAAK2kC,kBAAkBtlC,GACxCumC,EACJxoB,GAAkB/d,EAASD,MAAMlF,OAASiK,EAAAA,IAAaE,EAAAA,EAAAA,IAAyB+Y,QAAkBplB,EAEhGwtC,EAAyBJ,EAAcpqC,SAAU4qC,aAAAA,EAAAA,EAAqBphC,SAAUogC,EAAAA,GAClF5kC,KAAKC,SAAS,CACZslC,kBAAkB,IAGpBvlC,KAAKC,SAAS,CACZslC,kBAAkB,GAGxB,CAEQb,WAAAA,GACN,OAAI1kC,KAAKZ,MAAM+3B,YAAcxT,EAAAA,GAAWC,OAC/BrR,EAAAA,EAAAA,IAAkBvS,MAChBA,KAAKZ,MAAM+kB,YAAcwJ,EAAAA,IAC3Blb,EAAAA,EAAAA,IAAkBzS,OAElBqV,EAAAA,EAAAA,IAAkBrV,KAE7B,CAzUAQ,WAAAA,CAAYpB,GACVqB,MAAM,OAAKrB,GAAAA,CAAO+lC,aAAa,KAqNjC,OAAOJ,wBAAwB1tB,IAC7B,MAAMwuB,GAAqBxR,EAAAA,EAAAA,IAAuBr0B,MAC5Cm3B,GAAYC,EAAAA,EAAAA,IAAqBp3B,KAAKZ,MAAM+kB,UAAW0hB,GAE7D,IAAK1O,GAA2B,WAAdA,GAAwC,YAAdA,GAAyC,QAAdA,EAAqB,CAC1F,MAAM5zB,EAAQ,IAAIC,MAAM,yBAAyB2zB,KAEjD,MADA30B,EAAAA,EAAOe,MAAMA,EAAO,CAAEuB,IAAK,2CAA2CqyB,MAChE5zB,CACR,CAEAvD,KAAKC,SAAS,CACZygB,QAAS,IAAIigB,EAA0B,CAAExc,UAAWnkB,KAAKZ,MAAM+kB,UAAW9M,eAAc8f,gBAE1Fn3B,KAAKshC,eAAe,IAGtB,OAAOwE,qBAAoB,KACzB,MAAM7N,EAAeh5B,EAAAA,GAAWoD,YAAYrC,KAAMiS,EAAAA,KAClDmqB,EAAAA,EAAAA,IAAyBp8B,KAAKZ,MAAM+3B,UAAWn3B,KAAKZ,MAAM+kB,UAAW8T,EAAa,IAGpF,OAAO4M,uBAAuBxtB,KAC5BoV,EAAAA,EAAAA,IAAazsB,KAAKZ,MAAM+kB,UAAWygB,EAAAA,GAAsB,UAAW5kC,KAAMqX,EAAa,IAGzF,OAAOytB,uBAAuBztB,KAE5BoV,EAAAA,EAAAA,IAAazsB,KAAKZ,MAAM+kB,UAAWygB,EAAAA,GAAsB,UAAW5kC,KAAMqX,EAAa,IAGzF,OAAOga,eAAeha,KACpBoV,EAAAA,EAAAA,IAAazsB,KAAKZ,MAAM+kB,UAAWygB,EAAAA,GAAsB,QAAS5kC,KAAMqX,EAAa,IAGvF,OAAOqV,gBAAgBrV,KACrBqV,EAAAA,EAAAA,IAAa1sB,KAAKZ,MAAM+kB,UAAWnkB,KAAMqX,EAAa,IAvPtDrX,KAAKW,qBAAqBX,KAAKD,WAAWa,KAAKZ,MACjD,EAyUF,SAAS+lC,EAAyBnwC,GAChC,MAAMQ,GAASC,EAAAA,EAAAA,YAAW2vC,GAC1B,OACE,kBAAC3mB,OAAAA,CAAK7oB,UAAWJ,EAAOiwB,aACrBzwB,EAAMu8B,UAAY,kBAAC9S,OAAAA,CAAK7oB,UAAWJ,EAAO+7B,WAC1Cv8B,EAAMgD,KAGb,CAzTE,EA5BW0gC,EA4BG75B,aAAY,EAAGV,YAC3B,MAAM,mBACJw6B,EAAkB,UAClBpV,EAAS,iBACTohB,EAAgB,kBAChBD,EAAiB,cACjBN,EAAa,QACbtkB,EAAO,YACPykB,EAAW,UACXhO,GACEp4B,EAAMjF,WACJuF,EAAWN,EAAM2lC,cACjBhX,EAAeruB,EAASvF,WAAWI,KACnCkjB,EAAiBre,EAAM4lC,kBAAkBtlC,GACzCytB,GAAaC,EAAAA,EAAAA,IAAgC1tB,EAAU+d,GACvDhnB,GAASC,EAAAA,EAAAA,YAAWC,GACpB2vC,GAAaC,EAAAA,EAAAA,QAA0B,MACvCC,EACJhP,IAAcxT,EAAAA,GAAW7iB,OAC6E,IAAtGzB,EAASD,MAAMsC,QAAQrF,QAAQ+I,GAAMA,EAAEnL,MAAQkqB,GAAa/e,EAAEC,WAAaI,EAAAA,EAASC,QAAO1K,OAEvFlF,GAAasnB,aAAAA,EAAAA,EAAgB/X,YAAaI,EAAAA,EAAS+W,UAAYsQ,EAAWtoB,QAAUogC,EAAAA,GACpFwB,IAAmBhpB,E,IAGvB4nB,EADF,MAAMqB,EACgB,QAApBrB,EAAAA,aAAAA,EAAAA,EAAexgC,aAAfwgC,IAAAA,EAAAA,EAAyBlvC,EAAayuC,EAAgBe,EAAoBb,EAAuBF,EAE7F+B,KAA2BlpB,aAAAA,EAAAA,EAAgB/X,WAC7C,CAACI,EAAAA,EAASiX,IAAKjX,EAAAA,EAASgX,GAAIhX,EAAAA,EAASmX,IAAKnX,EAAAA,EAASkX,IAAIrd,SAAS8d,EAAe/X,UAE7EkhC,EAAkBF,IAAwB5B,GAAwB6B,EAClEE,EAAkBH,IAAwB9B,IAAkBgC,EAE5DE,EAA+C,CACnDjiC,MAAO+/B,EACPmC,UAAW,IACT,kBAACX,EAAAA,CAAyB5T,SAAUqU,EAAiB5tC,KAAM,8BAA8BurB,OAGvFwiB,EAA+C,CACnDniC,MAAOggC,EACPkC,UAAW,IAAM,kBAACX,EAAAA,CAAyB5T,UAAU,EAAOv5B,KAAM,8BAA8BurB,OAE5FyiB,EAA+C,CACnDpiC,MAAOigC,EACPiC,UAAW,IACT,kBAACX,EAAAA,CAAyB5T,SAAUoU,EAAiB3tC,KAAM,2BAA2BurB,YAIpFvgB,EAA0C,GAC5C0hC,GACF1hC,EAAQoF,KAAK49B,GAGXrB,IACGe,GACH1iC,EAAQoF,KAAKy9B,GAGf7iC,EAAQoF,KAAK29B,IAGf,MAAME,EAAgB/wC,EAClB2wC,EACAnB,EACAsB,EACAH,E,IAuBSzB,EArBb,OACE,oCACGoB,GACC,kBAAC9mB,EAAAA,WAAUA,CACTlE,SAAU+qB,EACVjsC,KAAM,SACNksB,QAAS,SAASjC,YAClBntB,QAAS,IAAM+H,EAAM2tB,aAAagB,MAGpC4X,GAAqBC,IACrB,oCACE,kBAACuB,EAAAA,YAAWA,CAAC7vC,cAAaC,EAAAA,EAAQ4rC,WAAWC,OAAOgE,mBAClD,kBAACrwC,EAAAA,OAAMA,CACLO,cAAaC,EAAAA,EAAQ4rC,WAAWC,OAAOiE,aACvCC,IAAKhB,EACLjvC,QAAS,IAAM+H,EAAMijB,SAASgjB,QAAAA,EAAiB6B,GAC/ChwC,KAAM,KACND,KAAM,UACND,QAAS,aAEY,QAApBquC,EAAAA,aAAAA,EAAAA,EAAexgC,aAAfwgC,IAAAA,EAAAA,EAAwB6B,EAAcriC,OAEzC,kBAAC0iC,EAAAA,aAAYA,CACXjwC,cAAaC,EAAAA,EAAQ4rC,WAAWC,OAAOoE,aACvC3wC,UAAWJ,EAAOgxC,aAClBzwC,QAAS,UACTiN,QAASA,EACToe,SAAWxd,IACTzF,EAAMijB,SAASxd,EAAM,OAMP,IAAvB+0B,GACC,kBAAC7iC,EAAAA,OAAMA,CACLW,MAAO,gCAAgC8sB,IACvCxtB,QAAQ,UACRC,KAAK,UACLC,KAAK,KACLG,QAAS+H,EAAM+mC,kBACfzrC,aAAY,UAAU8pB,KACvB,UAKFzD,GACC,kBAAC2mB,EAAAA,kBAAiBA,CAAC5K,QAAS,kBAAC/b,EAAQjhB,UAAS,CAACV,MAAO2hB,MACnD,CAAC4mB,EAAYC,EAAYC,KACxB,MAAMC,EAAiB,CACrBC,OAAQH,EACRI,QAASL,GAGX,OACE,oCACGrB,EAAW2B,SACV,oCAEE,kBAACC,EAAAA,QAAOA,EAAAA,EAAAA,EAAAA,CAAAA,EACFL,EACAnH,EAAAA,MAAIA,CACRyH,KAAM3C,EACN4C,iBAAkB3xC,EAAOsqB,QACzBsnB,iBAAkB/B,EAAW2B,QAC7BK,aAAa,IACTR,KAAAA,IAMhB,IA4KZ,MAAMzB,EAAqCtuC,IAClC,CACLy6B,UAAUx6B,EAAAA,EAAAA,KAAI,CACZmJ,MAAO,4BACP,WAAY,CACV27B,QAAS,KACTz+B,SAAU,WACVkqC,KAAM,EACNjqC,IAAK,MACLxF,OAAQ,mBACRD,MAAO,MACPiD,gBAAiB/D,EAAMgE,OAAOysC,QAAQvsC,QAG1CyqB,aAAa1uB,EAAAA,EAAAA,KAAI,CACfqK,UAAW,OACX7D,SAAUzG,EAAM0G,WAAWgqC,QAAQ,QAKnC9xC,EAAaoB,IACV,CACLgpB,SAAS/oB,EAAAA,EAAAA,KAAI,CACXG,aAAcJ,EAAMO,MAAMC,OAAOC,QACjC0oB,UAAWnpB,EAAMopB,QAAQC,GACzBJ,WAAYjpB,EAAMgE,OAAOilB,WAAWC,QACpC/kB,OAAQ,aAAanE,EAAMgE,OAAOG,OAAOmlB,SAE3CqF,aAAa1uB,EAAAA,EAAAA,KAAI,CACfqK,UAAW,OACX7D,SAAUzG,EAAM0G,WAAWgqC,QAAQ,MAErChB,cAAczvC,EAAAA,EAAAA,KAAI,CAChBkE,OAAQ,aAAanE,EAAMgE,OAAOG,OAAOq5B,SACzC98B,WAAY,OACZiwC,oBAAqB,EACrBC,uBAAwB,EACxB5vC,QAAS,EACTD,OAAQ,U,yQC9ZP,MAAM2hC,UAA4B7pB,EAAAA,aACvC/P,WAAAA,CAAY,EAAoC,EAAuB,GACrEC,QAAK,gFADY5C,OAAAA,EAAAA,KAAoC4xB,OAAAA,EAAAA,KAAuB5f,UAAAA,CAE9E,EACA,EAJWuqB,EAIG99B,OAAO,yBAGhB,MAAMi/B,UAAoBz8B,EAAAA,GAgD/B0B,WAAAA,CAAYpB,GACV,MAAM,OAAEqwB,EAAM,UAAE5f,IAAc0lB,EAAAA,EAAAA,IAAoBn2B,EAAMvB,OAAQ23B,EAAAA,gBAAiB,QACjF/0B,MAAM,CACJ5C,OAAQuB,EAAMvB,OACd4xB,SACA5f,cApDJ,OAAO04B,iBAA6E,CAClF,CACEznC,MAAO,GACP8C,QAAS,CACP,CACEY,MAAO,cACP1D,MAAO,gBACPulB,YAAa,6EAEf,CACE7hB,MAAO,WACP1D,MAAO,kBACPulB,YAAa,sDAEf,CACE7hB,MAAOgkC,EAAAA,UAAUC,OACjB3nC,MAAO,gBACPulB,YAAa,mDAEf,CACE7hB,MAAO,eACP1D,MAAO,OACPulB,YAAa,sBAEf,CACE7hB,MAAOgkC,EAAAA,UAAUE,IACjB5nC,MAAO,QACPulB,YAAa,uCAEf,CACE7hB,MAAOgkC,EAAAA,UAAU18B,IACjBhL,MAAO,gBACPulB,YAAa,2CAEf,CACE7hB,MAAOgkC,EAAAA,UAAUG,IACjB7nC,MAAO,aACPulB,YAAa,8CAInB,CACEvlB,MAAO,cACP8C,QAAS,IAAIglC,EAAAA,cAAcC,cAAc,GAAIC,GAAsBllC,YAavE,OAAOmlC,oBAAoBlN,IACpBA,EAASr3B,QAGdxE,KAAKC,SAAS,CAAEwvB,OAAQoM,EAASr3B,SACjCwkC,EAAAA,EAAAA,IAAoBhpC,KAAKZ,MAAMvB,OAAQg+B,EAASr3B,MAAOxE,KAAKZ,MAAMyQ,WAClE7P,KAAK0U,aAAa,IAAI0lB,EAAoBp6B,KAAKZ,MAAMvB,OAAQg+B,EAASr3B,MAAOxE,KAAKZ,MAAMyQ,YAAY,GAAK,IAG3G,OAAOo5B,qBAAqBp5B,IACrBA,EAAUrL,QAGfxE,KAAKC,SAAS,CAAE4P,UAAWA,EAAUrL,SACrCwkC,EAAAA,EAAAA,IAAoBhpC,KAAKZ,MAAMvB,OAAQmC,KAAKZ,MAAMqwB,OAAQ5f,EAAUrL,OACpExE,KAAK0U,aAAa,IAAI0lB,EAAoBp6B,KAAKZ,MAAMvB,OAAQmC,KAAKZ,MAAMqwB,OAAQ5f,EAAUrL,QAAQ,GAAK,GAjBzG,EAoBA,EA3EW+2B,EA2EG97B,aAAY,EAAGV,YAC3B,MAAM,OAAE0wB,EAAM,UAAE5f,GAAc9Q,EAAMjF,WAC9BovC,EAAQnqC,EAAMwpC,eAAe7oB,MAAMwpB,GACvCA,EAAMtlC,QAAQ8b,MAAM1Y,GAAoCA,EAAOxC,QAAUirB,MAErE0Z,EAAmDD,aAAAA,EAAAA,EAAOtlC,QAAQ8b,MACrE1Y,GAAoCA,EAAOxC,QAAUirB,IAExD,OACE,oCACE,kBAAC6C,EAAAA,YAAWA,CACVxxB,MAAM,UACNsoC,QAAQ,mBACRhjB,QAAQ,+HAER,kBAACoM,EAAAA,OAAMA,CACLv7B,cAAaC,EAAAA,EAAQ4rC,WAAWC,OAAOsG,eACvC7kC,MAAO2kC,EACP3wC,MAAO,GACP8wC,cAAc,EACd1lC,QAAS7E,EAAMwpC,eACfpZ,YAAa,kBACbnN,SAAUjjB,EAAMgqC,iBAChBQ,QAAQ,sBAGZ,kBAACjX,EAAAA,YAAWA,KACV,kBAACE,EAAAA,OAAMA,CACLv7B,cAAaC,EAAAA,EAAQ4rC,WAAWC,OAAO5G,gBACvCna,SAAUjjB,EAAMkqC,kBAChB5uC,aAAW,iBACX80B,YAAY,GACZ3qB,MAAOqL,EACPjM,QAAS,CACP,CACE9C,MAAO,MACP0D,MAAO,OAET,CACE1D,MAAO,OACP0D,MAAO,Y,IAUvB,MAAMglC,EAAsB,CAAC,MAAO,MAAO,MAAO,MAAO,OACzD,SAASV,EAAqBW,GAC5B,OAAIA,EAAI5jB,IAAM,MAAQ4jB,EAAI5jB,IAAM,OACvB2jB,EAAoBlqC,SAASmqC,EAAI5jB,GAG5C,CAEO,SAAS8K,EAActL,G,IACrBqkB,EAAP,OAAkCrkB,QAA3BqkB,GAAAA,EAAAA,EAAAA,IAA2BrkB,UAA3BqkB,IAAAA,EAAAA,EAAqC,WAC9C,C,6ECnJO,SAASlN,GAAc,gBAAED,EAAe,UAAExJ,EAAS,SAAE/5B,IAC1D,MAAM5C,GAASC,EAAAA,EAAAA,YAAWC,GAM1B,OAJIy8B,IAAcwJ,IAChBA,EAAkB,cAGhBxJ,EACK,kBAACxW,EAAAA,mBAAkBA,CAAC/lB,UAAWJ,EAAOuzC,cAAe/wC,KAAM2jC,IAG/DA,EAIE,kBAAChmC,MAAAA,CAAIC,UAAWJ,EAAOuzC,eAAgBpN,GAHrC,oCAAGvjC,EAId,CAEA,SAAS1C,EAAUoB,GACjB,MAAO,CACLiyC,eAAehyC,EAAAA,EAAAA,KAAI,CACjBiyC,UAAW,SACX9nC,UAAWpK,EAAMiB,QAAQ,GACzBqJ,UAAW,WAGjB,C,kCCtCO,MAAM63B,EAA4B,E,uFCGlC,SAASgQ,EAAenyC,GAC7B,MAAO,CACLoyC,QAAS,yBACTC,cAAe,MACflpB,UAAW,aAAanpB,EAAMgE,OAAOilB,WAAWqpB,uBAAuBtyC,EAAMgE,OAAOklB,QAAQhlB,OAC5FquC,yBAA0B,iCAC1BC,mBAAoB,OACpBC,mBAAoB,sCAExB,CASO,SAASC,EAAoBC,EAAmB3yC,GACrD,MAAO,CACLupB,OAAQ,KACRjjB,SAAU,WACVouB,QAAS,IACT5zB,MAAO,GAAG6xC,MACV5xC,OAAQ,GAAG4xC,MACXvyC,aAAcJ,EAAMO,MAAMC,OAAOC,QACjCskC,QAAS,KACT,CAAC/kC,EAAM4yC,YAAYC,aAAa,gBAAiB,WAAY,CAC3DL,mBAAoB,OACpBD,yBAA0B,+BAC1BE,mBAAoB,WAG1B,C,gcCxBO,MAAMK,EAAmB50C,IAC9B,MAAM8B,GAAQuB,EAAAA,EAAAA,aACRrC,EAAOhB,EAAMonB,MAAQtlB,EAAMgE,OAAO9C,KAAK6xC,YAAc/yC,EAAMgE,OAAO9C,KAAKwiB,SACvEhlB,EAASE,EAAUoB,GACnB2uB,GAAiBzwB,EAAMonB,MAAQ,UAAY,UAA7B,SAEpB,OACE,kBAAC0tB,EAAAA,QAAOA,CAACjO,QAASpW,GAChB,kBAACzG,SAAAA,CACC5oB,QAAS,IAAMpB,EAAM+nB,cAAc/nB,EAAMonB,MAAQ,QAAU,SAC3DxmB,WAAWkM,EAAAA,EAAAA,IAAGtM,EAAOwpB,OAAQhqB,EAAMonB,MAAQ5mB,EAAO+pB,OAAS,MAC3D9lB,aAAYgsB,GAEZ,kBAACnkB,MAAAA,CAAItL,KAAMA,EAAM4B,MAAM,KAAKC,OAAO,KAAKkyC,QAAQ,YAAYC,MAAM,8BAChE,kBAAChyC,OAAAA,CAAKuF,SAAS,KAAK3F,MAAM,KAAKC,OAAO,KAAKoyC,EAAE,MAAMC,EAAE,MAAMC,iBAAiB,UAAUC,WAAW,UAAS,UAS9G10C,EAAY,CAACoB,EAAsBf,EAA6B,eACpE,MAAM0zC,EAAY,GAAK3yC,EAAMiB,QAAQsyC,SAErC,MAAO,CACLrrB,QAAQjoB,EAAAA,EAAAA,KAAI,CACVspB,OAAQ,EACRjjB,SAAU,WACV1F,OAAQ,KAAKZ,EAAMiB,QAAQuyC,UAAUxzC,EAAMiB,QAAQuyC,OACnDrqB,UAAW,OACXhlB,OAAQ,OACRjE,QAAS,cACT+oB,WAAY,cACZ9oB,eAAgB,SAChBgB,WAAY,SACZH,QAAS,EACTa,MAAO7B,EAAMgE,OAAO9C,KAAKgoB,QAEzB,Y,EAAY,KACPwpB,EAAoBC,EAAW3yC,I,EAAAA,CAClCsG,SAAU,Y,yVAGZ,UAAW,CACT,WAAY,CACVvC,gBACc,cAAZ9E,EACIe,EAAMgE,OAAO4M,OAAO6iC,MACpBC,EAAAA,iBAAiBC,MAAM3zC,EAAMgE,OAAO9C,KAAKgoB,QAAS,KACxDwL,QAAS,IAIb,2BAA4Byd,EAAenyC,GAC3C,8BDrDG,CACLoyC,QAAS,OACTjpB,UAAW,UCqDXV,QAAQxoB,EAAAA,EAAAA,KAAI,CACV,WAAY,CACV8D,gBACc,cAAZ9E,EAA0Be,EAAMgE,OAAO4M,OAAO6iC,MAAQC,EAAAA,iBAAiBC,MAAM3zC,EAAMgE,OAAO9C,KAAKgoB,QAAS,KAC1GwL,QAAS,GAEX,UAAW,CACT,WAAY,CACV3wB,gBAAiB,OACjB2wB,QAAS,O,OAIhB,E,keCvEI,MAAMkf,EAAmC11C,IAC9C,MAAM8B,GAAQuB,EAAAA,EAAAA,aACRrC,EAAOhB,EAAMmoB,cAAgBrmB,EAAMgE,OAAO9C,KAAK6xC,YAAc/yC,EAAMgE,OAAO9C,KAAKwiB,SAC/EhlB,EAASE,EAAUoB,GACnB2uB,GAAiBzwB,EAAMmoB,cAAgB,UAAY,UAArC,cAEpB,OACE,kBAAC2sB,EAAAA,QAAOA,CAACjO,QAASpW,GAChB,kBAACzG,SAAAA,CACC5oB,QAAS,IACPpB,EAAMkoB,sBACJloB,EAAMmoB,cAAgBC,EAAAA,EAAwBC,gBAAkBD,EAAAA,EAAwBD,eAG5FvnB,WAAWkM,EAAAA,EAAAA,IAAGtM,EAAOwpB,OAAQhqB,EAAMmoB,cAAgB3nB,EAAO+pB,OAAS,MACnE9lB,aAAYgsB,GAEZ,kBAACnkB,MAAAA,CAAItL,KAAMA,EAAM4B,MAAM,KAAKC,OAAO,KAAKkyC,QAAQ,YAAYC,MAAM,8BAChE,kBAAChyC,OAAAA,CAAKuF,SAAS,KAAK3F,MAAM,KAAKC,OAAO,KAAKoyC,EAAE,MAAMC,EAAE,MAAMC,iBAAiB,UAAUC,WAAW,UAAS,UAS9G10C,EAAY,CAACoB,EAAsBf,EAA6B,eACpE,MAAM0zC,EAAY,GAAK3yC,EAAMiB,QAAQsyC,SAErC,MAAO,CACLrrB,QAAQjoB,EAAAA,EAAAA,KAAI,CACVspB,OAAQ,EACRjjB,SAAU,WACV1F,OAAQ,KAAKZ,EAAMiB,QAAQuyC,UAAUxzC,EAAMiB,QAAQuyC,OACnDrqB,UAAW,OACXhlB,OAAQ,OACRjE,QAAS,cACT+oB,WAAY,cACZ9oB,eAAgB,SAChBgB,WAAY,SACZH,QAAS,EACTa,MAAO7B,EAAMgE,OAAO9C,KAAKgoB,QAEzB,Y,EAAY,KACPwpB,EAAoBC,EAAW3yC,I,EAAAA,CAClCsG,SAAU,Y,yVAGZ,UAAW,CACT,WAAY,CACVvC,gBACc,cAAZ9E,EACIe,EAAMgE,OAAO4M,OAAO6iC,MACpBC,EAAAA,iBAAiBC,MAAM3zC,EAAMgE,OAAO9C,KAAKgoB,QAAS,KACxDwL,QAAS,IAIb,2BAA4Byd,EAAenyC,GAC3C,8BFzDG,CACLoyC,QAAS,OACTjpB,UAAW,UEyDXV,QAAQxoB,EAAAA,EAAAA,KAAI,CACV,WAAY,CACV8D,gBACc,cAAZ9E,EAA0Be,EAAMgE,OAAO4M,OAAO6iC,MAAQC,EAAAA,iBAAiBC,MAAM3zC,EAAMgE,OAAO9C,KAAKgoB,QAAS,KAC1GwL,QAAS,GAEX,UAAW,CACT,WAAY,CACV3wB,gBAAiB,OACjB2wB,QAAS,O,OAIhB,EC9DI,SAAS7M,GAAiB,UAC/BJ,EAAS,WACTzB,EAAU,cACVK,EAAa,aACbqB,EAAY,MACZpC,EAAK,cACLkB,EAAa,sBACbJ,EAAqB,cACrBH,EAAa,YACbF,EAAW,mBACX8tB,EAAkB,kBAClBC,IAEA,MAAMp1C,GAASC,EAAAA,EAAAA,YAAWC,GAC1B,OACE,kBAACC,MAAAA,CAAIC,UAAWJ,EAAOqH,UACnB8tC,GACA,kBAAC/Y,EAAAA,OAAMA,CACLI,OAAQ,KACRp8B,UAAWJ,EAAOu8B,OAClBnuB,MAAO2a,EAAY,YAAc,YACjCvb,QAAS,CACP,CACEY,MAAO,YACP1D,MAAO,WAET,CACE0D,MAAO,YACP1D,MAAO,YAGXkhB,SAAU,IAAM5C,GAAcD,KAGlC,kBAACwgB,EAAAA,MAAKA,CAACnpC,UAAWJ,EAAOwtB,OACvB,kBAACsL,EAAAA,EAAWA,CACVj4B,cAAaC,EAAAA,EAAQC,sBAAsBs0C,WAC3CjnC,MAAOkZ,EACPlnB,WAAWkM,EAAAA,EAAAA,IAAG6oC,EAAqBn1C,EAAOs1C,wBAAqB1zC,EAAW5B,EAAO09B,OACjF9R,SAAU9D,EACVkiB,OACE,kBAAC/gB,OAAAA,CAAK7oB,UAAW,GAAGJ,EAAOgqC,uBACzB,kBAACkL,EAA+BA,CAC9BvtB,cAAeA,EACfD,sBAAuBA,IAEzB,kBAAC0sB,EAAeA,CAACxtB,MAAOA,EAAOW,cAAeA,KAGlDiV,OAAQ,KACRzD,YAAY,sBACZl5B,QAASu1C,EACTG,QAAU9mC,GAAM4Y,EAAY5Y,EAAG6Y,MAGlC6tB,GACC,kBAAClsB,OAAAA,CAAK7oB,UAAWJ,EAAOw1C,YACtB,kBAACl1C,EAAAA,OAAMA,CACLM,QAAS,KACPooB,GAAa,GACbmsB,GAAoB,EAEtB/0C,UAAWJ,EAAOW,cAClBJ,QAAS,YACTC,KAAM,UACNwkB,UAAWsC,GACZ,WAGD,kBAAChnB,EAAAA,OAAMA,CACLM,QAAS,KACPooB,GAAa,GACbmsB,GAAoB,EAEtB/0C,UAAWJ,EAAOmB,cAClBZ,QAAS,YACTC,KAAM,UACNwkB,UAAWsC,GACZ,YAOX,CAEA,MAAMpnB,EAAaoB,IAA0B,CAC3Cg0C,oBAAoB/zC,EAAAA,EAAAA,KAAI,CACtBm8B,MAAO,CACLv4B,qBAAsB,EACtBC,wBAAyB,KAG7B4kC,QAAQzoC,EAAAA,EAAAA,KAAI,CACVC,QAAS,cACTwD,IAAK1D,EAAMiB,QAAQ,MAErBkzC,WAAWl0C,EAAAA,EAAAA,KAAI,CACb0wC,oBAAqB,EACrBC,uBAAwB,IAE1BsD,YAAYj0C,EAAAA,EAAAA,KAAI,CACdC,QAAS,OACTC,eAAgB,WAElBd,eAAeY,EAAAA,EAAAA,KAAI,CACjBS,WAAY,OACZN,aAAc,EACdC,YAAa,OACb,cAAe,CACbA,YAAa,UAGjBR,eAAeI,EAAAA,EAAAA,KAAI,CACjBG,aAAc,KAAKJ,EAAMO,MAAMC,OAAOC,WAAWT,EAAMO,MAAMC,OAAOC,YACpEC,WAAY,OACZ,cAAe,CACbA,WAAY,UAGhB0zC,QAAQn0C,EAAAA,EAAAA,KAAI,CACV0wC,oBAAqB,EACrBC,uBAAwB,IAE1B3V,QAAQh7B,EAAAA,EAAAA,KAAI,CACVmJ,MAAO,wBACP/C,WAAY,EACZ/B,YAAa,EACbvD,OAAQ,OACR+C,wBAAyB,IACzBD,qBAAsB,IACtBxD,YAAa,OACbqJ,UAAW,OACX5I,MAAO,QACP6I,SAAU,OACVyoC,QAAS,SAEXrsC,SAAS9F,EAAAA,EAAAA,KAAI,CACXC,QAAS,OACTY,MAAO,OACP6I,SAAU,UAEZyyB,OAAOn8B,EAAAA,EAAAA,KAAI,CACTmJ,MAAO,4BACPtI,MAAO,OACPs7B,MAAO,CACLuU,oBAAqB,EACrBC,uBAAwB,KAG5ByD,cAAcp0C,EAAAA,EAAAA,KAAI,CAChBupB,YAAa,SAEf0C,OAAOjsB,EAAAA,EAAAA,KAAI,CACTmJ,MAAO,QACPlC,KAAM,WACNpG,MAAO,OACPymB,aAAc,K,oPC/JX,eAAKjB,G,2EAAAA,C,CAAL,C,IAQA,MAAMguB,UAAwBltC,EAAAA,GA2CnC,iBACmBmtC,EAAAA,EAAAA,IAAsBjsC,MAC9Bye,cAAc,GAAI,CACzBF,aAAa,IAEfve,KAAKC,SAAS,CACZyd,WAAY,IAEhB,CAIA,cACE,GAAI1d,KAAKZ,MAAM4d,OAAShd,KAAKZ,MAAM+f,UACjC,OAAOtC,EAAAA,EAAaI,cAEtB,GAAIjd,KAAKZ,MAAM4d,QAAUhd,KAAKZ,MAAM+f,UAClC,OAAOtC,EAAAA,EAAaG,MAEtB,IAAKhd,KAAKZ,MAAM4d,OAAShd,KAAKZ,MAAM+f,UAClC,OAAOtC,EAAAA,EAAaE,cAEtB,IAAK/c,KAAKZ,MAAM4d,QAAUhd,KAAKZ,MAAM+f,UACnC,OAAOtC,EAAAA,EAAaC,MAGtB,MAAM,IAAItZ,MAAM,6CAClB,CAQA,eACE,OAAOxD,KAAKZ,MAAM2e,cAAgB,gBAAH,iBACjC,CAKA,YAEE,OAD2BkuB,EAAAA,EAAAA,IAAsBjsC,MACvBZ,MAAMsC,QAAQ,EAC1C,CAeAyb,YAAAA,CAAaO,EAAoBJ,GAAY,GAC3Ctd,KAAKksC,iBAAiBxuB,GAClBJ,EACFtd,KAAKwd,wBAAwBE,GAE7B1d,KAAKmsC,eAAezuB,EAExB,CAEAwuB,gBAAAA,CAAiBxuB,GACf1d,KAAKC,SAAS,CACZyd,cAEJ,CA9GAld,WAAAA,CAAYpB,G,IAGOA,EACRA,EACIA,EAJbqB,M,sUAAM,EACJid,YAAYte,aAAAA,EAAAA,EAAOse,aAAc,GACjCK,cAAmC,QAApB3e,EAAAA,aAAAA,EAAAA,EAAO2e,qBAAP3e,IAAAA,EAAAA,GAAwBgtC,EAAAA,EAAAA,KAAkB,GACzDpvB,MAAmB,QAAZ5d,EAAAA,aAAAA,EAAAA,EAAO4d,aAAP5d,IAAAA,EAAAA,GAAgBitC,EAAAA,EAAAA,KAAmB,GAC1CltB,UAA2B,QAAhB/f,EAAAA,aAAAA,EAAAA,EAAO+f,iBAAP/f,IAAAA,EAAAA,GAAoBktC,EAAAA,EAAAA,KAAuB,IACnDltC,IAQP,OAAQW,cAAa,KACnB,MAAM1D,EAAS2D,KAAKslB,YAEpB,GAAKjpB,EAWL,OAPA2D,KAAKC,SAAS,CACZyd,WAAYrhB,EAAOmI,MACnBwY,MAAO3gB,EAAOgJ,WAAawX,EAAAA,EAAaG,OAAS3gB,EAAOgJ,WAAawX,EAAAA,EAAaI,cAClFc,cAA8B,kBAAf1hB,EAAOpC,IACtBklB,UAAW9iB,EAAOgJ,WAAawX,EAAAA,EAAaE,eAAiB1gB,EAAOgJ,WAAawX,EAAAA,EAAaI,gBAGzF,KAELjd,KAAKqxB,aAAa,CACnB,IAwDHA,EAAAA,KAAAA,eAAc,KACZrxB,KAAKwd,wBAAwB+uB,SAC7BvsC,KAAKmd,aAAa,IAAI,EAAM,IA0B9BU,EAAAA,KAAAA,qBAAqBsB,KACnBqtB,EAAAA,EAAAA,IAAuBrtB,GACvBnf,KAAKC,SAAS,CACZkf,cAGFnf,KAAKmd,aAAand,KAAKZ,MAAMse,YAAY,EAAM,IAOjD6tB,EAAAA,KAAAA,sBAAqB,KACnBvrC,KAAKmd,aAAand,KAAKZ,MAAMse,YAAY,GAEzC1d,KAAKwd,wBAAwBivB,QAE7B,MAAM1yB,GAAsBqE,EAAAA,EAAAA,IAAuBpe,MAC7C0sC,EAAkB3yB,EAAoB3a,MAAMsC,QAC5CirC,EAAa3sC,KAAKslB,YAExBvL,EAAoB0E,cAAc,IAAIiuB,EAAiBC,IACvD3sC,KAAK4sC,eAAe,IAMtBC,EAAAA,KAAAA,gBAAgBhoC,IACd7E,KAAKksC,iBAAiBrnC,EAAEhH,OAAO2G,MAAM,IAMvCiZ,EAAAA,KAAAA,eAAe5Y,IACC,UAAVA,EAAE5K,KAAmB+F,KAAKZ,MAAMse,YAClC1d,KAAKurC,oBACP,IAMFztB,EAAAA,KAAAA,yBAAyBhL,IACvB,MAAMiL,EAA6B,kBAAbjL,EAGtB9S,KAAKC,SAAS,CACZ8d,mBAIF+uB,EAAAA,EAAAA,IAAkB/uB,GAElB/d,KAAKmd,aAAand,KAAKZ,MAAMse,YAAY,EAAM,IAMjDC,EAAAA,KAAAA,iBAAiB7K,IACf,MAAMkK,EAAqB,UAAblK,EAGd9S,KAAKC,SAAS,CACZ+c,WAIF+vB,EAAAA,EAAAA,IAAmB/vB,GAEnBhd,KAAKmd,aAAand,KAAKZ,MAAMse,YAAY,EAAM,IAMjDF,EAAAA,KAAAA,0BAA0BqB,KAAUzG,IAClCpY,KAAKmsC,eAAe/zB,EAAO,GAC1B,MAMH+zB,EAAAA,KAAAA,kBAAkB/zB,IAChBpY,KAAKwd,wBAAwBivB,QAC7B,MAAMptC,GAAW4sC,EAAAA,EAAAA,IAAsBjsC,MACjCb,GAAYif,EAAAA,EAAAA,IAAuBpe,MACnC3D,EAAS,CACbpC,IAAK+F,KAAKgtC,eAEV1uB,SAAUnf,EAAUC,MAAMsC,QAAQ1G,OAAO8K,WACzCT,SAAUrF,KAAKitC,cACfzoC,MAAO4T,GAGT/Y,EAASof,cAAc,CAACpiB,KAExBK,EAAAA,EAAAA,IACEC,EAAAA,GAAkBC,gBAClBC,EAAAA,GAAoBD,gBAAgBswC,8BACpC,CACEvuB,kBAAmBvG,EAAOpd,OAC1B4jB,cAAexG,EAAOlQ,cAAc5I,SAAS,SAC7C+F,SAAUhJ,EAAOgJ,SACjB0Y,cAAe1hB,EAAOpC,KACxB,IAxNF+F,KAAKW,qBAAqBX,KAAKD,WACjC,EAdA,EADWisC,EACJvsC,aA0OT,UAA6B,MAAEV,IAC7B,MAAM,WAAE2e,EAAU,cAAEK,EAAa,MAAEf,EAAK,UAAEmC,GAAcpgB,EAAMjF,WAC9D,OAAOylB,EAAAA,EAAAA,GAAiB,CACtBJ,YACAzB,aACAK,gBACAf,QACAuuB,mBAAoBxsC,EAAMwsC,mBAC1B9tB,YAAa1e,EAAM0e,YACnBS,cAAenf,EAAM8tC,aACrB1vB,aAAcpe,EAAMoe,aACpBW,sBAAuB/e,EAAM+e,sBAC7BH,cAAe5e,EAAM4e,cACrByB,aAAcrgB,EAAM8e,kBACpB2tB,kBAAmBzsC,EAAMsyB,aAE7B,G,2TCrQO,MAAM8b,UAAwBruC,EAAAA,GAGnC0B,WAAAA,CAAYpB,GACVqB,M,sUAAM,IACDrB,IAIPguC,EAAAA,KAAAA,yBAAyB9wC,IACvB0D,KAAKqtC,oBAAoBptC,SAAS,CAAEqtC,eAAgBhxC,KACpDixC,EAAAA,EAAAA,IAAa,iBAAkBjxC,GAC/B0D,KAAKwtC,mBAAmBC,iBAAiB,CAAEH,eAAgBhxC,IAC3D0D,KAAKwtC,mBAAmBC,iBAAiB,CAAEC,mBAAoBpxC,GAAO,IAGxEqxC,EAAAA,KAAAA,yBAAyBC,IACvB5tC,KAAKqtC,oBAAoBptC,SAAS,CAAE2tC,UAAWA,KAC/CL,EAAAA,EAAAA,IAAa,YAAaK,GAC1B5tC,KAAKwtC,mBAAmBC,iBAAiB,CAAEG,UAAWA,GAAY,IAGpEJ,EAAAA,KAAAA,oBAAmB,IACVvuC,EAAAA,GAAWoD,YAAYrC,KAAM6tC,EAAAA,KAGtCR,EAAAA,KAAAA,qBAAoB,IACXpuC,EAAAA,GAAWoD,YAAYrC,KAAM8tC,EAAAA,KAGtCC,EAAAA,KAAAA,wBAAuB,KACD/tC,KAAKwtC,mBACbO,wBACZrxC,EAAAA,EAAAA,IACEC,EAAAA,GAAkBC,gBAClBC,EAAAA,GAAoBD,gBAAgBoxC,4BAA2B,GA5BnE,EA6FK,SAASC,IACd,OAAOC,EAAAA,EAAAA,IAA4B,YAAaC,EAAAA,cAAcC,WAChE,CAEO,SAASC,IAGd,MAAMp2B,EAAW5D,EAAAA,gBAAgB6D,cAE3B01B,EADS,IAAIz1B,gBAAgBF,EAASG,QACnBhV,IAAI,aAE7B,IACE,GAAyB,iBAAdwqC,EAAwB,CACjC,MAAMU,GAAmBC,EAAAA,EAAAA,IAAoB9pC,KAAKsM,MAAM68B,IACxD,GAAIU,EACF,OAAOA,CAEX,CACF,CAAE,MAAOzpC,GAEPrC,EAAAA,EAAOe,MAAMsB,EAAG,CAAEC,IAAK,4EACzB,CAEA,OAAO,CACT,CA3HE,EADWqoC,EACJ1tC,aAuCT,UAA4B,MAAEV,IAC5B,MAAM,0BAAEyvC,EAAyB,kBAAEC,GAAsB1vC,EAAMjF,YACzD,eAAEwzC,EAAc,UAAEM,GAAc7uC,EAAMsuC,oBAAoBvzC,YAC1D,gBAAEywB,GAAoBxrB,EAAMyuC,mBAAmB1zC,WAC/C1D,GAASC,EAAAA,EAAAA,YAAWC,GACpBo4C,EAAYpB,SAAAA,EAElB,OACE,kBAAC/2C,MAAAA,CAAIC,UAAWJ,EAAOK,WACpB8zB,EAAgBvvB,OAAS,GACxB,kBAAC0vC,EAAAA,QAAOA,CAACjO,QAAS,2BAA2BlS,EAAgB3f,KAAK,SAChE,kBAAClU,EAAAA,OAAMA,CAACG,KAAM,KAAMF,QAAQ,YAAYC,KAAK,UAAUI,QAAS+H,EAAMgvC,sBAAsB,2BAKhG,kBAACzb,EAAAA,YAAWA,CAAC97B,UAAWJ,EAAOu4C,mBAAoBC,aAAAA,GACjD,kBAAChP,EAAAA,iBAAgBA,CACf/oC,KAAK,KACL+M,QAAS,CACP,CACE9C,MAAO,eACP0D,MAAO2pC,EAAAA,cAAcC,WACrB/nB,YAAa,iCAEf,CACEvlB,MAAO,eACP0D,MAAO2pC,EAAAA,cAAcU,UACrBxoB,YAAa,kCAGjB7hB,MAAOopC,EACP5rB,SAAUjjB,EAAM4uC,yBAIpB,kBAACrb,EAAAA,YAAWA,CAAC97B,UAAWJ,EAAOu4C,mBAAoBC,aAAAA,GACjD,kBAAChP,EAAAA,iBAAgBA,CACf/oC,KAAK,KACL2N,MAAOkqC,EACP1sB,SAAUjjB,EAAMquC,sBAChBxpC,QAAS,CACP,CACE9C,MAAO,OACP0D,OAAO,EACP6hB,YAAa,qCAEf,CACEvlB,MAAO,UACP0D,OAAO,EACP6hB,YAAa,0CAKrB,kBAACyoB,EAAAA,EAAsBA,CAACC,QAASN,EAAmBzsB,SAAUwsB,IAGpE,IA4BA,MAAMl4C,EAAaoB,IAA0B,CAC3CjB,WAAWkB,EAAAA,EAAAA,KAAI,CACbC,QAAS,OACTiB,WAAY,SACZuC,IAAK1D,EAAMiB,QAAQ,GACnBmJ,UAAWpK,EAAMiB,QAAQ,MAE3Bg2C,oBAAoBh3C,EAAAA,EAAAA,KAAI,CACtBW,OAAQ,EACRO,WAAY,Y,gkBCrJhB,MAAMm2C,EAA0B,GAAGrvC,EAAAA,uBAqB5B,eAAKsvC,G,qDAAAA,C,CAAL,C,IAMP,MAAMC,GAAsBC,EAAAA,EAAAA,eAAuC,CACjEC,eAAgB,CAAC,EACjBC,kBAAmB,OACnB1kB,QAAS,CAAC,EACV2kB,gBAAiB,CAAC,EAClBC,WAAY,OACZC,mBAAoB,OACpBC,WAAY,KAAM,EAClBC,SAAS,EACTC,UAAW,OACXC,aAAc,OACdC,kBAAmB,SA+CRC,EAA6B,EACxC92C,WACA+2C,iBACAC,YACAC,gBACAJ,oBACAK,uBACAC,wBAUA,MAAOxlB,EAAS4kB,IAAcz1C,EAAAA,EAAAA,UAA6Bs2C,EAAmBL,KACvEJ,EAAWC,IAAgB91C,EAAAA,EAAAA,UAAuBq2C,QAAAA,EAAAA,SAClDb,EAAiBE,IAAsB11C,EAAAA,EAAAA,eAAyC9B,IAChF03C,EAASD,IAAc31C,EAAAA,EAAAA,WAAS,GACjCu2C,EAzCR,WACE,IAAIA,EAAsB,CAAC,EAC3B,MAAMC,EAAiBhwC,aAAaI,QAAQsuC,GAC5C,GAAIsB,EACF,IAQE,OAPAD,GAAsBE,EAAAA,EAAAA,IAAyB9rC,KAAKsM,MAAMu/B,KAC9B,IAAxBD,GACF7tC,EAAAA,EAAOe,MACL,IAAIitC,EAAAA,GAAe,+EACnB,CAAE1rC,IAAK,yEAGJurC,CACT,CAAE,MAAOxrC,GACPrC,EAAAA,EAAOe,MAAMsB,EAAG,CAAEC,IAAK,wDACzB,CAEF,OAAOurC,CACT,CAuB8BI,IACrBrB,EAAgBsB,IAA0B52C,EAAAA,EAAAA,UAAiCu2C,GAsB5EM,GAAmBC,EAAAA,EAAAA,cACtBC,IACC,GAAIA,EAAY,CACd,MAAMlmB,EAAUylB,EAAmBS,GAEnCtB,EAAW5kB,GAGXslB,EAxBmB,CAACtlB,IACxB,IAAImmB,EAA0B,GAY9B,OAXA3kC,OAAOtD,KAAK8hB,GAASvb,SAASqW,IACxBkF,EAAQlF,GAAWtF,aAAuCnoB,IAA7B2yB,EAAQlF,GAAW5F,OAClDixB,EAAc9nC,KAAKyc,EACrB,IAEFqrB,EAAc7qC,MAAK,CAACvI,EAAGwI,KAErB,MAAM6qC,EAAwBpmB,EAAQjtB,GAChCszC,EAAwBrmB,EAAQzkB,GACtC,OAAO6qC,EAAKlxB,MAAQmxB,EAAKnxB,KAAK,IAEzBixB,CAAa,EAWFG,CAAiBtmB,GACjC,IAEF,CAACslB,IAGGiB,GAAqBN,EAAAA,EAAAA,cACxBO,IACCvB,EAAauB,GAGbjB,EAAqBiB,EAAa,GAEpC,CAACjB,IAOGkB,GAAmBR,EAAAA,EAAAA,cAAaS,IACpC5B,EAAW4B,EAAU,GACpB,IAyBH,OAtBAC,EAAAA,EAAAA,YAAU,KACJvB,GACFY,EAAiBZ,EACnB,GACC,CAACA,EAAgBY,KAGpBW,EAAAA,EAAAA,YAAU,KACR,MAAMR,EAiDV,SAA2BS,EAAuCvB,GAChE,IAAKA,EAEH,YADAxtC,EAAAA,EAAOC,KAAK,2CAId,MAAM+uC,EAAkBrlC,OAAOtD,KAAK0oC,GAEjCl1C,QAAQpC,I,IAAQs3C,E,OAAsB,QAAtBA,EAAAA,EAAkBt3C,UAAlBs3C,IAAAA,OAAAA,EAAAA,EAAwBpxB,MAAM,IAC9Cla,MAAK,CAACvI,EAAGwI,KACR,MAAMurC,EAAKF,EAAkB7zC,GACvBg0C,EAAKH,EAAkBrrC,GAC7B,YAAiBlO,IAAby5C,EAAG5xB,YAAoC7nB,IAAb05C,EAAG7xB,MACxB4xB,EAAG5xB,MAAQ6xB,EAAG7xB,MAEhB,CAAC,IAGN8xB,EAAY3B,EAAU2B,UACtBC,EAAY5B,EAAU4B,UAE5B,GAAI,GAAcA,GAAcJ,EAAgBx2C,OAAQ,CACtD,MAAM62C,EAAiB,GASvB,OARIF,aAAAA,EAAAA,EAAWz3C,OACb23C,EAAe7oC,KAAK2oC,EAAUz3C,OAE5B03C,aAAAA,EAAAA,EAAW13C,OACb23C,EAAe7oC,KAAK4oC,EAAU13C,MAIzBs3C,EAAgBx2C,OAASw2C,EAAkBK,CACpD,CAEA,MAAO,EACT,CApF0BC,CAAkBnnB,EAASqlB,IAC7Cc,aAAAA,EAAAA,EAAe91C,UAIW,IAHPmR,OAAOtD,KAAK8hB,GAAStuB,QAAQ01C,GAAQpnB,EAAQonB,GAAK5xB,SAGtDnlB,QAtIvB,SACE2vB,EACAgmB,EACAX,GAEA,MAAMgC,EAAiB,KAAKrnB,GAE5BqnB,GAAeC,EAAAA,EAAAA,IAAYjC,IAAc,CACvCnwB,MAAO,EACPM,QAAQ,EACR7jB,KAAM,aACN41C,wBAAyB,IACzBna,YAAaoa,KAEfH,GAAeI,EAAAA,EAAAA,IAAYpC,IAAc,CACvCnwB,MAAO,EACPM,QAAQ,EACR7jB,KAAM,aACN41C,wBAAyB,IACzBna,YAAaoa,KAEfxB,EAAiBqB,EACnB,CAiHQK,CAAkB1nB,EAASgmB,EAAkBX,GAI/CR,OAAmBx3C,GACrB,GACC,CAAC2yB,EAASqlB,EAAWR,EAAoBmB,IAG1C,kBAACzB,EAAoBoD,SAAQ,CAC3B9tC,MAAO,CACL6qC,kBA/EqBjyC,IACzBkD,aAAaC,QAAQyuC,EAAyBvqC,KAAKC,UAAUtH,IAC7DszC,EAAuBtzC,EAAI,EA8EvBgyC,iBACAO,YACAC,aAAcsB,EACd1B,qBACAF,kBACA3kB,UACA4kB,WAAYoB,EACZjB,QAASA,EACTD,WAAY2B,EACZvB,kBA5C0B,KAC9BA,GAAmB,IA8ChB72C,EAAAA,EAQDo3C,EAAsBzlB,IAE1B,GAAI,eAAgBA,EAAS,CAC3B,MAA4D,OACvDA,IADC,WAAE4nB,GAAoD,EAG5D,O,kXAHuBC,CAAqC,GAApDD,cAIV,CACA,OAAO5nB,CAAO,EAwCH8nB,EAAwB,KAC5BC,EAAAA,EAAAA,YAAWxD,G,sDC1PpB,MAAMyD,GAAmBxD,EAAAA,EAAAA,eAAoC,CAC3DyD,UAAW,CAAE/yB,MAAO,KAAMgzB,kBAAmB,GAC7CC,mBAAqBF,IAAyB,IAGnCG,EAA2B,EAAG/5C,eACzC,MAAOg6C,EAAYC,IAAiBn5C,EAAAA,EAAAA,UAAoB,CAAE+lB,MAAO,OAE3DqzB,GAAmBtC,EAAAA,EAAAA,cAAagC,IACpCK,EAAcL,EAAU,GACvB,IAEH,OACE,kBAACD,EAAiBL,SAAQ,CAAC9tC,MAAO,CAAEouC,UAAWI,EAAYF,mBAAoBI,IAC5El6C,EAAAA,EAKMm6C,EAAsB,KAC1BT,EAAAA,EAAAA,YAAWC,GC5BdS,GAAqBjE,EAAAA,EAAAA,eAAsC,CAC/DkE,oBAAoB,EACpBC,oBAAsBD,IAAgC,IAG3CE,EAA6B,EAAGv6C,eAC3C,MAAOq6C,EAAoBC,IAAuBx5C,EAAAA,EAAAA,WAAkB,GAE9D05C,GAA2B5C,EAAAA,EAAAA,cAAayC,IAC5CC,EAAoBD,EAAmB,GACtC,IAEH,OACE,kBAACD,EAAmBd,SAAQ,CAAC9tC,MAAO,CAAE6uC,qBAAoBC,oBAAqBE,IAC5Ex6C,EAAAA,EAKMy6C,EAAwB,KAC5Bf,EAAAA,EAAAA,YAAWU,G,cCJb,SAASM,GAAiB,YAAEC,EAAW,eAAEC,IAC9C,MAAM,QAAEjpB,EAAO,mBAAE6kB,GAAuBiD,IAGlCoB,EAAc7uB,IAClB,MAAM1a,EAAU0a,EAAK,GACrB,IAAI8uB,EAAyC,CAAC,EAC1CC,EAAkB,EAqC1B,IAA2BC,EApCvB1pC,EAAQ8E,SAAS0N,IACXA,KAAS6N,IACXmpB,EAAmBh3B,GAAS6N,EAAQ7N,GACpCi3B,IACF,IAEFvE,EAAmBsE,GA8BIE,EA7BLD,GA8BpBE,EAAAA,EAAAA,mBAAkB,kDAAmD,CACnEC,YAAaF,GA/BqB,EAqB9B59C,GAhDWsB,GA+CHuB,EAAAA,EAAAA,aA9CP,CACLk7C,YAAYx8C,EAAAA,EAAAA,KAAI,CACde,QAAS,GAAGhB,EAAMiB,QAAQ,SAAUjB,EAAMiB,QAAQ,OAAQjB,EAAMiB,QAAQ,UAH9E,IAAmBjB,EAiDjB,OACE,kBAACioC,EAAAA,MAAKA,CAACnpC,UAAWJ,EAAO+9C,YACvB,kBAAC7T,EAAAA,MAAKA,CAAC97B,MAAOmvC,EAAar3C,KAAM,OAAQ6yB,YAAa,wBAAyBnN,SAftDnd,I,IACbA,EAAd,MAAML,EAAuB,QAAfK,EAAAA,EAAE4+B,qBAAF5+B,IAAAA,OAAAA,EAAAA,EAAiBL,MANlB,IAAC4vC,EAOdR,EAAepvC,GACXA,GARU4vC,EASL5vC,GART6vC,EAAAA,EAAAA,GAAqBloC,OAAOtD,KAAK8hB,GAAUypB,EAAQP,IAWjDrE,OAAmBx3C,EACrB,IAUJ,C,wBCjDO,SAASs8C,IACd,MACMl+C,GAZWsB,GAWHuB,EAAAA,EAAAA,aAVP,CACLs7C,OAAO58C,EAAAA,EAAAA,KAAI,CACTsnB,aAAcvnB,EAAMiB,QAAQ,GAC5BoF,WAAYrG,EAAMiB,QAAQ,MAC1BwF,SAAUzG,EAAM0G,WAAWD,aALjC,IAAmBzG,EAajB,OAAO,kBAACnB,MAAAA,CAAIC,UAAWJ,EAAOm+C,OAAO,YACvC,C,sfC8BO,SAASC,EAAkB5+C,GAShC,MACMQ,GApDWsB,GAmDHuB,EAAAA,EAAAA,aAlDP,CACLw7C,UAAU98C,EAAAA,EAAAA,KAAI,CACZ0D,OAAQ,OACR0C,WAAYrG,EAAMiB,QAAQ,GAC1ByzB,QAAS,KAEXsoB,YAAY/8C,EAAAA,EAAAA,KAAI,CACdoG,WAAYrG,EAAMiB,QAAQ,IAC1BuoB,YAAaxpB,EAAMiB,QAAQ,IAC3Bg8C,WAAY,OACZh0B,WAAY,OACZ9kB,OAAQ,OACRsC,SAAUzG,EAAM0G,WAAWgqC,QAAQ,IACnChc,QAAS,GACTx0B,QAAS,OACTqJ,cAAe,SACfpI,WAAY,aAEd+7C,aAAaj9C,EAAAA,EAAAA,KAAI,CACfC,QAAS,OACTiB,WAAY,SACZhB,eAAgB,gBAChBW,MAAO,SAETq8C,iBAAiBl9C,EAAAA,EAAAA,KAAI,CACnBwG,SAAUzG,EAAM0G,WAAWC,UAAUF,SACrC9C,OAAQ,YAGVy5C,eAAen9C,EAAAA,EAAAA,KAAI,CACjB,SAAU,CACR2D,SAAU,SACVS,aAAc,WACdg5C,WAAY,SACZn9C,QAAS,QACTyJ,SAAU,YApClB,IAAmB3J,EA8DE9B,EAIDA,EAEHA,EACAA,EAI6CA,EASxCA,EApBDA,EARnB,OAAIA,EAAM2tB,OAAO3tB,EAAMkL,OAEnB,oCACE,kBAACvK,MAAAA,CAAIC,UAAWJ,EAAOw+C,aACrB,kBAACI,EAAAA,SAAQA,CACPx+C,UAAWJ,EAAO0+C,cAClBh0C,MAAOlL,EAAMkL,MACbkhB,SAAUpsB,EAAMosB,SAChBizB,QAA0C,QAAjCr/C,EAAyB,QAAzBA,EAAAA,EAAM2tB,OAAO3tB,EAAMkL,cAAnBlL,IAAAA,OAAAA,EAAAA,EAA2BuqB,cAA3BvqB,IAAAA,GAAAA,IAEVA,EAAMs/C,WACL,kBAAC3+C,MAAAA,CAAIC,UAAWJ,EAAOs+C,YACrB,kBAACn+C,MAAAA,KAA8B,QAAzBX,EAAAA,EAAM2tB,OAAO3tB,EAAMkL,cAAnBlL,IAAAA,OAAAA,EAAAA,EAA2Bs8C,wBAAwB,KACzD,kBAAC37C,MAAAA,KAC2B,QAAzBX,EAAAA,EAAM2tB,OAAO3tB,EAAMkL,cAAnBlL,IAAAA,OAAAA,EAAAA,EAA2BmiC,YAAa,IACG,KAAlB,QAAzBniC,EAAAA,EAAM2tB,OAAO3tB,EAAMkL,cAAnBlL,IAAAA,OAAAA,EAAAA,EAA2BmiC,aAAoB,QAAU,WAI/DniC,EAAMw5C,gBAAkBx5C,EAAMy5C,wBAA6Dr3C,KAApB,QAApBpC,EAAAA,EAAMw5C,sBAANx5C,IAAAA,OAAAA,EAAAA,EAAuBA,EAAMkL,SAC/E,kBAACvK,MAAAA,CACCS,QAAS,K,IAEPpB,EADA,MAAwC,E,sUAAA,IAAKA,EAAMw5C,gBAA1Cx5C,EAAAA,EAAMkL,OAAP,CAAClL,GAAcu/C,GAAiB,EAAR/3C,E,kXAAAA,CAAQ,GAA/BxH,G,QACc,QAAvBA,EAAAA,EAAMy5C,yBAANz5C,IAAAA,GAAAA,EAAAA,KAAAA,EAA0BwH,EAAI,EAEhC/F,MAAO,8BACPb,UAAWJ,EAAOy+C,iBACnB,UAC6B,QAApBj/C,EAAAA,EAAMw5C,sBAANx5C,IAAAA,OAAAA,EAAAA,EAAuBA,EAAMkL,OACrC,kBAACtG,EAAAA,KAAIA,CAACN,KAAM,QAIjBtE,EAAMw/C,WACL,kBAAC56C,EAAAA,KAAIA,CACHH,aAAW,qBACXhD,MAAM,2BACN6C,KAAK,gBACLrD,KAAK,KACLL,UAAWJ,EAAOq+C,YAOrB,IACT,C,+yBC9DO,MAAMY,EAAyBz/C,IAOpC,MAAM,eAAEw5C,EAAc,kBAAEC,GAAsBoD,KACxC,cAAE6C,EAAa,OAAE/xB,EAAM,YAAEgyB,EAAW,aAAEC,GAAiB5/C,EACvD8B,GAAQuB,EAAAA,EAAAA,OACR,QAAE0xB,GAAY8nB,IACdr8C,EA7CD,SAA6BsB,GAClC,MAAO,CACLoB,MAAMnB,EAAAA,EAAAA,KAAI,CACRmK,UAAWpK,EAAMiB,QAAQ,GACzBsmB,aAAcvnB,EAAMiB,QAAQ,GAC5Bf,QAAS,OACT+oB,WAAYjpB,EAAMgE,OAAOilB,WAAWC,UAEtC60B,UAAU99C,EAAAA,EAAAA,KAAI,CACZgpB,WAAYjpB,EAAMgE,OAAOilB,WAAWhlB,YAEtC+5C,eAAe/9C,EAAAA,EAAAA,KAAI,CACjBsnB,aAAcvnB,EAAMiB,QAAQ,KAE5BqD,YAAatE,EAAMiB,QAAQ,MAGjC,CA4BiBg9C,CAAoBj+C,GAC7Bk+C,EAAYzpC,OAAOtD,KAAK0a,GAAQlnB,QAAQ8nB,GAAcoxB,EAAYpxB,KASlE0xB,EAAe1xB,IACnB,MAAMrjB,EAAQyiB,EAAOY,GACrB,GAAIrjB,EACF,MAAO,GAAGqjB,gBAAwBrjB,aAAAA,EAAAA,EAAOoxC,uCAG3B,EAGlB,OAAI0D,EAAU56C,OAEV,kBAAC86C,EAAAA,GAAeA,CAACC,UAlBFxwC,IACZA,EAAOywC,aAGZV,EAAc3qB,EAASplB,EAAOgrB,OAAO1Q,MAAOta,EAAOywC,YAAYn2B,MAAM,GAejE,kBAACo2B,EAAAA,GAASA,CAACC,YAAY,eAAermC,UAAU,aAC5CsmC,GACA,kBAAC5/C,MAAAA,EAAAA,EAAAA,CAAIC,UAAWJ,EAAOs/C,eAAmBS,EAASC,gBAAc,CAAEnP,IAAKkP,EAASE,WAC9ET,EAAU3vC,KAnDzB,SAAoBsd,GAClB,MAAO,CAAC7lB,EAAWwI,KACjB,MAAMowC,EAAK/yB,EAAO7lB,GACZ64C,EAAKhzB,EAAOrd,GAGlB,OAAgB,MAAZowC,EAAGz2B,OAA6B,MAAZ02B,EAAG12B,MAClBy2B,EAAGz2B,MAAQ02B,EAAG12B,MAIhB,CAAC,CAEZ,CAsC8B22B,CAAWjzB,IAASnmB,KAAI,CAAC+mB,EAAWtE,IAClD,kBAAC42B,EAAAA,GAASA,CAACC,YAAavyB,EAAWlqB,IAAKkqB,EAAWtE,MAAOA,IACvD,CAACs2B,EAA6BQ,IAC7B,kBAACpgD,MAAAA,EAAAA,EAAAA,CACCC,WAAWkM,EAAAA,EAAAA,IAAGtM,EAAO0C,KAAM69C,EAASC,WAAaxgD,EAAOq/C,cAAWz9C,GACnEivC,IAAKkP,EAASE,UACVF,EAASU,eACTV,EAASW,iBAAe,CAC5Bz/C,MAAOw+C,EAAY1xB,KAEnB,kBAACqwB,EAAiBA,CAChBnF,kBAAmBA,EACnBD,eAAgBA,EAChBtuC,MAAOqjB,EACPnC,SAAU,IAAMwzB,EAAarxB,GAC7BZ,OAAQA,EACR6xB,WAAW,SAMpBe,EAAShnB,gBAQf,kBAACmlB,EAAoBA,KAAAA,ECtGxByC,EAAW,IAAIC,KAAKC,cAASj/C,EAAW,CAAEk/C,YAAa,SAyChDC,EAA4BvhD,IAKvC,MAAM,OAAE2tB,EAAM,YAAEgyB,EAAW,aAAEC,GAAiB5/C,EAExCQ,GA9CqBsB,GA6CbuB,EAAAA,EAAAA,aA5CP,CACLH,MAAMnB,EAAAA,EAAAA,KAAI,CACRmK,UAAWpK,EAAMiB,QAAQ,KACzBsmB,aAAcvnB,EAAMiB,QAAQ,KAC5Bf,QAAS,OACT+oB,WAAYjpB,EAAMgE,OAAOilB,WAAWC,QACpCw2B,aAAc,aAAa1/C,EAAMgE,OAAOilB,WAAWqpB,WAErDyL,UAAU99C,EAAAA,EAAAA,KAAI,CACZgpB,WAAYjpB,EAAMgE,OAAOilB,WAAWhlB,YAEtC+5C,eAAe/9C,EAAAA,EAAAA,KAAI,CACjBsnB,aAAcvnB,EAAMiB,QAAQ,KAE5BqD,YAAatE,EAAMiB,QAAQ,QAgCzBi9C,EAAYzpC,OAAOtD,KAAK0a,GAAQlnB,QAAQ8nB,GAAcoxB,EAAYpxB,KA/C1E,IAA6BzsB,EAgD3B,OAAIk+C,EAAU56C,OAGV,kBAACzE,MAAAA,CAAIC,UAAWJ,EAAOs/C,eACpBE,EAAU3vC,KAhCnB,SAAoBsd,GAClB,MAAO,CAAC7lB,EAAWwI,KACjB,MAAMowC,EAAK/yB,EAAO7lB,GACZ64C,EAAKhzB,EAAOrd,GAGlB,OAAU,MAANowC,GAAoB,MAANC,EAEdpV,OAAmB,eAAZoV,EAAGj6C,MAAyB6kC,OAAmB,eAAZmV,EAAGh6C,OAC7C6kC,OAAmB,eAAZoV,EAAGj6C,MAAyB6kC,OAAmB,eAAZmV,EAAGh6C,OAC7Cy6C,EAASM,QAAQ35C,EAAGwI,GAKjB,CAAC,CAEZ,CAewBswC,CAAWjzB,IAASnmB,KAAK+mB,I,IAIHZ,E,OAHpC,kBAAChtB,MAAAA,CACC0D,IAAKkqB,EACL3tB,UAAWJ,EAAO0C,KAClBzB,MAAO,GAAG8sB,gBAAyC,QAAjBZ,EAAAA,EAAOY,UAAPZ,IAAAA,OAAAA,EAAAA,EAAmB2uB,yCAErD,kBAACsC,EAAiBA,CAChBU,WAAW,EACXp0C,MAAOqjB,EACPnC,SAAU,IAAMwzB,EAAarxB,GAC7BZ,OAAQA,I,KAQb,kBAAC+wB,EAAoBA,KAAAA,ECpCjBgD,EAAwB1hD,IAOnC,MACMQ,GA5CWsB,GA2CHuB,EAAAA,EAAAA,aA1CP,CACLs+C,aAAa5/C,EAAAA,EAAAA,KAAI,CACf6/C,UAAW,SACX/+C,OAAQ,oBAER,uBAAwB,CACtBb,QAAS,QAGX6/C,eAAgB,SAElBC,oBAAoB//C,EAAAA,EAAAA,KAAI,CACtBg9C,WAAY,OACZh0B,WAAY,OACZ9kB,OAAQ,OACRsC,SAAUzG,EAAM0G,WAAWgqC,QAAQ,MAErCuP,cAAchgD,EAAAA,EAAAA,KAAI,CAChBC,QAAS,OACTC,eAAgB,gBAChBsG,SAAUzG,EAAM0G,WAAWw5C,GAAGz5C,SAC9BwiB,WAAYjpB,EAAMgE,OAAOilB,WAAWhlB,UACpCqC,SAAU,SACVC,IAAK,EACLiqC,KAAM,EACNvL,WAAYjlC,EAAMiB,QAAQ,KAC1BsD,aAAcvE,EAAMiB,QAAQ,KAC5B2oB,cAAe5pB,EAAMiB,QAAQ,KAC7BqD,YAAatE,EAAMiB,QAAQ,KAC3BsoB,OAAQ,EACRhC,aAAcvnB,EAAMiB,QAAQ,OA/BlC,IAAmBjB,EA2DD9B,EAQAA,EArBhB,OACE,kBAACW,MAAAA,CAAIC,UAAWJ,EAAOmhD,aAErB,oCACE,kBAAChhD,MAAAA,CAAIC,UAAWJ,EAAOuhD,cAAc,kBAEnC,kBAAC/3B,SAAAA,CAAO5oB,QAASpB,EAAMiiD,MAAOrhD,UAAWJ,EAAOshD,oBAAoB,UAItE,kBAACrC,EAAqBA,CACpBC,cAAe1/C,EAAM0/C,cACrBE,aAAc5/C,EAAM4/C,aACpBjyB,OAAqC,QAA7B3tB,EAAAA,EAAMkiD,+BAANliD,IAAAA,EAAAA,EAAiCA,EAAMmiD,gBAC/CxC,YAAc/wC,I,IAAU5O,EAAAA,E,OAAoC,QAApCA,EAA4B,QAA5BA,EAAAA,EAAMmiD,gBAAgBvzC,UAAtB5O,IAAAA,OAAAA,EAAAA,EAA8BuqB,cAA9BvqB,IAAAA,GAAAA,CAA6C,EACrEiwB,GAAI,oBAGN,kBAACtvB,MAAAA,CAAIC,UAAWJ,EAAOuhD,cAAc,UACrC,kBAACR,EAAwBA,CACvB3B,aAAc5/C,EAAM4/C,aACpBjyB,OAAqC,QAA7B3tB,EAAAA,EAAMkiD,+BAANliD,IAAAA,EAAAA,EAAiCA,EAAMmiD,gBAC/CxC,YAAc/wC,I,IAAW5O,E,QAA4B,QAA5BA,EAAAA,EAAMmiD,gBAAgBvzC,UAAtB5O,IAAAA,OAAAA,EAAAA,EAA8BuqB,OAAM,K,izBCnEhE,SAAS63B,EAAiBzI,GAC/B,MAAO,CAAC5kB,EAA6BstB,EAAqBC,KACxD,GAAID,IAAgBC,EAClB,OAGF,MAAM3G,EAAoB,KAAK5mB,GACzB9hB,EAAOsD,OAAOtD,KAAK0oC,GACtBl1C,QAAQpC,GAAQs3C,EAAkBt3C,GAAKkmB,SACvC/iB,KAAKnD,I,IAEGs3C,E,MAFM,CACb9rB,UAAWxrB,EACX4lB,MAAmC,QAA5B0xB,EAAAA,EAAkBt3C,GAAK4lB,aAAvB0xB,IAAAA,EAAAA,EAAgC,EACxC,IACAtrC,MAAK,CAACvI,EAAGwI,IAAMxI,EAAEmiB,MAAQ3Z,EAAE2Z,SAEvB0Q,GAAU1nB,EAAKmC,OAAOitC,EAAa,GAC1CpvC,EAAKmC,OAAOktC,EAAkB,EAAG3nB,GAEjC1nB,EACGxM,QAAQpC,QAAgBjC,IAARiC,IAChBmV,SAAQ,CAACnV,EAAK4lB,KACb0xB,EAAkBt3C,EAAIwrB,WAAW5F,MAAQA,CAAK,IAIlD0vB,EAAWgC,EAAkB,CAEjC,CAkBO,SAAS4G,IACd,MAAM,QAAExtB,EAAO,WAAE4kB,EAAU,WAAEE,EAAU,gBAAEH,EAAe,mBAAEE,GAAuBiD,KAC1EkB,EAAaC,IAAkB95C,EAAAA,EAAAA,UAAiB,IAkEjDw7C,EAAgB0C,EAAiBzI,GAgCvC,OACE,kBAACjN,EAAAA,oBAAmBA,CAClBtrC,QAAS,KACPy4C,GAAW,GACXD,EAAmB7kB,GACnBipB,EAAe,GAAG,EAEpBrR,YAAY,GAEZ,kBAACmR,EAAgBA,CAACC,YAAaA,EAAaC,eAAgBA,IAC5D,kBAAC0D,EAAoBA,CACnB9B,aA5GgB4C,IACpB,IAAKztB,KAAaytB,KAAcztB,GAE9B,YAtBN,SAAkBytB,EAAoBztB,GACpC,IAAI0tB,EACJ,IACEA,EAAa,CACX1tB,QAASlmB,KAAKC,UAAUimB,GACxBytB,WAAYA,EAEhB,CAAE,MAAOvzC,GACPwzC,EAAa,CACXvzC,IAAK,4DACLszC,WAAYA,EAEhB,CACA51C,EAAAA,EAAOC,KAAK,uBAAwB41C,EACtC,CAOMC,CAASF,EAAYztB,GAIvB,MAAM3vB,EAASmR,OAAOtD,KAAK8hB,GAAStuB,QAAQk8C,GAAM5tB,EAAQ4tB,GAAGp4B,SAAQnlB,OAC/D+Y,GAAY4W,EAAQytB,GAAYj4B,aAAgBnoB,EAEtD,IAAIu5C,EA4BJ,GA1BEA,EAAoB,OACf5mB,GAFH5W,EAEG4W,CACH,CAACytB,GAAa,OACTztB,EAAQytB,IAAW,CACtBj4B,OAAQpM,EACR8L,MAAO7kB,KAKN2vB,CACH,CAACytB,GAAa,OACTztB,EAAQytB,IAAW,CACtBj4B,QAAQ,EACRN,WAAO7nB,MA4Df,SAA2BogD,GACzB,GAAIztB,EAAS,C,IACOA,EACOxe,EADzB,MAAM2G,IAA+B,QAAnB6X,EAAAA,EAAQytB,UAARztB,IAAAA,OAAAA,EAAAA,EAAqBxK,QACjCq4B,E,QAAmBrsC,EAAAA,OAAOtD,KAAK8hB,GAAStuB,QAAQo8C,I,IAAW9tB,E,OAAe,QAAfA,EAAAA,EAAQ8tB,UAAR9tB,IAAAA,OAAAA,EAAAA,EAAiBxK,MAAM,WAA/DhU,IAAAA,OAAAA,EAAAA,EAAkEnR,OACrF4M,EAAQ,CACZ8wC,aAAc5lC,EAAW,MAAQ,SACjC6lC,YAAa7lC,EAAW0lC,EAAmB,EAAIA,EAAmB,IAEpEvE,EAAAA,EAAAA,mBAAkB,+CAAgDrsC,EACpE,CACF,CAhEEgxC,CAAkBR,GAGlB7I,EAAWgC,GAGPjC,EAAiB,C,IACHA,EAAhB,MAAMnvB,IAAqC,QAA3BmvB,EAAAA,EAAgB8I,UAAhB9I,IAAAA,OAAAA,EAAAA,EAA6BnvB,QAC7C,IAAI04B,EAEFA,EAA4B,OACvBvJ,GAFHnvB,EAEGmvB,CACH,CAAC8I,GAAa,OACT9I,EAAgB8I,IAAW,CAC9Bj4B,OAAQA,EACRN,MAAO7kB,KAKNs0C,CACH,CAAC8I,GAAa,OACT9I,EAAgB8I,IAAW,CAC9Bj4B,QAAQ,EACRN,WAAO7nB,MAKbw3C,EAAmBqJ,GACnBjF,EAAe,GACjB,GA+CIkE,wBAAyBxI,EACzByI,gBAAiBptB,EACjBktB,MA5CiB,KACrB,MAAMtG,EAAoB,KAAK5mB,GAC/B,IAAI9K,EAAQ,EACZ1T,OAAOtD,KAAK0oC,GAAmBniC,SAASnV,IACtC,MAAM6+C,EAC4B,eAAhCvH,EAAkBt3C,GAAKqC,MAAyD,eAAhCi1C,EAAkBt3C,GAAKqC,KAEzEi1C,EAAkBt3C,GAAKkmB,OAAS24B,EAEhCvH,EAAkBt3C,GAAK4lB,MAAQi5B,EAAiBj5B,SAAU7nB,CAAS,IAGrEu3C,EAAWgC,GACX/B,EAAmB+B,GACnBqC,EAAe,GAAG,EA+Bd0B,cAAeA,IAIvB,CC9JA,MAoBayD,EAA4BnjD,GAErC,kBAACojD,EAAAA,CACCC,WAAYrjD,EAAMqjD,WAClBC,UAAWtjD,EAAMsjD,UACjBliD,QAASpB,EAAMoB,QACf4sB,MAAOhuB,EAAMguB,MACbu1B,SAAUvjD,EAAMujD,UAEfvjD,EAAMoD,UAKPggD,EAA0BpjD,I,IAGawjD,EAF3C,MAAM1hD,GAAQuB,EAAAA,EAAAA,aACRmgD,EAAYjG,IACZ/8C,EArCU,CAACsB,IAAwE,CACzFyoB,QAAQxoB,EAAAA,EAAAA,KAAI,CAEVc,OAAQ,oBACRwoB,OAAQvpB,EAAMupB,OAAOmF,QACrBzF,WAAY,gBAEd7nB,MAAMnB,EAAAA,EAAAA,KAAI,CACRqG,SAAU,WACVq7C,UAAW,SACXtE,WAAY,SACZv8C,MAAO,OACPC,OAAQ,OACRyvC,KAAM,EACNjqC,IAAK,EACL3F,OAAQ,OACRqoB,WAAuB,kBAqBVrqB,CAAUoB,EAAOM,EAA8B,QAAnBohD,EAAAA,EAAUxG,iBAAVwG,IAAAA,GAAAA,EAAqBvG,mBAEhE,OACE,kBAACt8C,MAAAA,CACCwD,aAAcnE,EAAMqjD,WACpBK,aAAc1jD,EAAMsjD,UACpBliD,QAASpB,EAAMoB,QACfR,UACE4iD,EAAUxG,UAAU/yB,QAAUjqB,EAAMujD,UAAYC,EAAUxG,UAAUntB,YAAc7vB,EAAMguB,MAAM1pB,MAC1FwI,EAAAA,EAAAA,IAAGtM,EAAO0C,KAAM1C,EAAO+pB,QACvB/pB,EAAO0C,MAGZlD,EAAMoD,SAAQ,ECtDRugD,GAAe,CAC1BvJ,UAAW,KACXwJ,UAAYn9C,IAAD,EACX4G,eAAWjL,EACXyhD,kBAAczhD,GAGH0hD,IAAevK,EAAAA,EAAAA,eAAgCoK,IAE/CI,GAAuB,EAClC3gD,WACAg3C,YACAwJ,YACAC,eACAx2C,eASE,kBAACy2C,GAAapH,SAAQ,CACpB9tC,MAAO,CACLwrC,YACAwJ,YACAC,eACAx2C,cAGDjK,GAKM4gD,GAAkB,KACtBlH,EAAAA,EAAAA,YAAWgH,I,eCjCpB,MA0BaG,GAAmBjkD,IAC9B,MACMQ,GA5BWsB,GA2BHuB,EAAAA,EAAAA,aA3ByB6gD,EA4BPlkD,EAAMkkD,SA5BqC,CAC3EnyB,MAAMhwB,EAAAA,EAAAA,KAAI,CACRqG,SAAU,WACV/B,aAAc,MACdrE,QAAS,OACTm6B,SAAU,OACVl6B,eAAgB,eAElBkiD,eAAepiD,EAAAA,EAAAA,KAAI,CACjBkpB,UAAWnpB,EAAMopB,QAAQC,GACzBnpB,QAAS,OACT+oB,WAAYjpB,EAAMgE,OAAOilB,WAAWhlB,UACpCjD,QAAS,QACTqF,WAAyB,WAAb+7C,EAAwB,WAAQ9hD,IAE9CgiD,UAAUriD,EAAAA,EAAAA,KAAI,CACZ2D,SAAU,OACVS,aAAc,WACdV,OAAQ,UACRW,YAAa,MACbC,aAAc,MACdrE,QAAS,OACTiB,WAAY,cAOR,UAAE2gD,GAAcI,KA7BN,IAACliD,EAAsBoiD,EA+BvC,OACE,kBAACz6B,OAAAA,CAAK7oB,UAAWJ,EAAOuxB,MACtB,kBAACtI,OAAAA,CAAK7oB,UAAWJ,EAAO2jD,eACD,YAApBnkD,EAAMuhC,WACL,oCACE,kBAAC5gC,MAAAA,CACCC,UAAWJ,EAAO4jD,SAClBhjD,QAAS,KACPwiD,EAAU,CACRv/C,IAAKrE,EAAMkL,MACX0D,MAAO5O,EAAM4O,MACba,SAAUI,GAAAA,EAASC,OACnB,GAGJ,kBAAClL,EAAAA,KAAIA,CAACnD,MAAO,gBAAiBR,KAAM,KAAMqD,KAAM,iBAElD,kBAAC3D,MAAAA,CACCC,UAAWJ,EAAO4jD,SAClBhjD,QAAS,KACPwiD,EAAU,CACRv/C,IAAKrE,EAAMkL,MACX0D,MAAO5O,EAAM4O,MACba,SAAUI,GAAAA,EAAS+W,UACnB,GAGJ,kBAAChiB,EAAAA,KAAIA,CAACnD,MAAO,sBAAuBR,KAAM,KAAMqD,KAAM,mBAK3DtE,EAAMqkD,YACL,kBAAC1jD,MAAAA,CAAIc,MAAO,aAAcL,QAASpB,EAAMqkD,WAAYzjD,UAAWJ,EAAO4jD,UACrE,kBAAC93C,MAAAA,CAAI1J,MAAM,KAAKC,OAAO,KAAKkyC,QAAQ,YAAY/zC,KAAK,OAAOg0C,MAAM,8BAChE,kBAACsP,OAAAA,CACCC,SAAS,UACTC,SAAS,UACTC,EAAE,srBACFzjD,KAAK,UACL0jD,YAAY,MAEd,kBAACJ,OAAAA,CACCG,EAAE,6xBACFzjD,KAAK,UACL0jD,YAAY,QAMnB1kD,EAAMmwB,OACLnwB,EAAMmwB,MAAM3oB,KAAKkB,I,IASEA,EARjB,OACE,kBAAC/H,MAAAA,CACCC,UAAWJ,EAAO4jD,SAClBhjD,QAAS,KACP8D,OAAOsvB,KAAK9rB,EAAKX,KAAM,SAAS,EAElC1D,IAAKqE,EAAKX,MAEV,kBAACnD,EAAAA,KAAIA,CAACnD,MAAiB,QAAViH,EAAAA,EAAKjH,aAALiH,IAAAA,EAAAA,EAAc,OAAQrE,IAAKqE,EAAKX,KAAM9G,KAAM,KAAMqD,KAAM,S,KAG3E,ECjHGqgD,GAAa,iBC8DbC,GAAe5kD,IAC1B,MAAM,MAAEkL,EAAK,MAAE0D,GAAU5O,EACnB8B,GAAQuB,EAAAA,EAAAA,cACR,UAAE25C,GAAcO,IACtB,IAAI/T,EAEJ,GAAIt+B,IAAUy5C,GAAY,CACxB,MAAME,EAAWC,KAAmB92C,QACf,iBAAVY,GAAsBA,KAASi2C,IACxCrb,EAAaqb,EAASj2C,GAAOjL,MAEjC,CAEA,MAAMohD,EAAe/H,EAAU/yB,QAAUjqB,EAAMujD,UAAYvjD,EAAMguB,MAAM1pB,OAAS04C,EAAUntB,UAEpFrvB,EA1DU,EAACsB,EAAsB0nC,KAAyB,CAChEwb,gBAAgBjjD,EAAAA,EAAAA,KAAI,CAAC,GACrBkjD,UAAUljD,EAAAA,EAAAA,KAAI,CACZa,MAAO,SAETsiD,MAAMnjD,EAAAA,EAAAA,KAAI,CACRkE,OAAQ,aAAanE,EAAMgE,OAAOG,OAAOmlB,OACzC,UAAW,CACTnlB,OAAQ,aAAanE,EAAMgE,OAAOG,OAAOq5B,UAE3ChU,YAAa,MACbpf,UAAW,MACX/D,WAAY,MACZrF,QAAS,UACTsF,SAAU,WACVpG,QAAS,cACTqJ,cAAe,cACfxF,gBAAiB,cAEjBO,YAAaojC,EAAa,GAAG1nC,EAAMiB,QAAQ,OAAU,MAErD,WAAY,CACV8jC,QAAS,KACTz+B,SAAU,WACVkqC,KAAM,EACNjqC,IAAK,EACLxF,OAAQ,OACRD,MAAO,GAAGd,EAAMiB,QAAQ,OACxB8C,gBAAiB2jC,KAGrBzX,MAAMhwB,EAAAA,EAAAA,KAAI,CACRa,MAAO,SAETwhD,UAAUriD,EAAAA,EAAAA,KAAI,CACZ2D,SAAU,OACVS,aAAc,aAEhBg/C,cAAcpjD,EAAAA,EAAAA,KAAI,CAChBa,MAAO,OACPZ,QAAS,mBAkBItB,CAAUoB,EAAO0nC,GAChC,OACE,kBAAC7oC,MAAAA,CAAIC,WAAWkM,EAAAA,EAAAA,IAAGtM,EAAOykD,SAAUF,EAAevkD,EAAOwkD,oBAAiB5iD,MACtEwM,GACD,oCACE,kBAAC6a,OAAAA,CAAK7oB,UAAWJ,EAAO0kD,MACtB,oCAAGt2C,IAEJm2C,GAAiC,iBAAVn2C,GAAsB5O,EAAMguB,MAAMtnB,OAAS0+C,EAAAA,UAAUC,MAC3E,kBAACpB,GAAeA,CAAC/4C,MAAOlL,EAAMkL,MAAO0D,MAAOA,EAAOs1C,SAAU,Y,4BC7ClE,SAASoB,GAAgBtlD,G,IAIhBo6C,EAHd,MACM55C,GAnCkBsB,GAkCVuB,EAAAA,EAAAA,aAlCsD,CACpEkiD,iBAAiBxjD,EAAAA,EAAAA,KAAI,CACnBe,QAAS,EACTD,OAAQ,OACR2iD,WAAY,IACZ5iD,MAAO,SAET6iD,eAAe1jD,EAAAA,EAAAA,KAAI,CACjBC,QAAS,cACT0jD,cAAe,SACfhjD,OAAQ,EACRgD,SAAU,SACVxD,aAAc,QAEhByjD,aAAa5jD,EAAAA,EAAAA,KAAI,CACfc,OAAQ,OACRuF,SAAU,SACVkqC,KAAM,EACNtwC,QAAS,OACT+oB,WAAYjpB,EAAMgE,OAAOilB,WAAWhlB,UACpCjD,QAAS,KAAKhB,EAAMiB,QAAQ,MAC5BsoB,OAAQ,EACRJ,UAAWnpB,EAAMopB,QAAQ06B,KAE3BC,SAAS9jD,EAAAA,EAAAA,KAAI,CACXe,QAAS,UAET,UAAW,CACTa,MAAO7B,EAAMgE,OAAO9C,KAAK0F,KACzBjD,OAAQ,gBAON,UAAE20C,EAAS,UAAE/sC,GAAc22C,KAC3B8B,EAAQ1L,SAAkB,QAAlBA,EAAAA,EAAW2L,eAAX3L,IAAAA,OAAAA,EAAAA,EAAoBtsC,OAAO9N,EAAMujD,UACzCyC,EAAY5L,aAAAA,EAAAA,EAAW4B,UAAUluC,OAAO9N,EAAMujD,WAC7C0C,EAAcC,IAAmBhiD,EAAAA,EAAAA,WAAS,GAC3CiiD,GAAUnL,EAAAA,EAAAA,cAAY,IACtB3tC,GACK+4C,EAAAA,GAAAA,IAAqB,eAAgB,CAAEn2B,GAAI61B,EAAOO,IAAKrmD,EAAMujD,UAAYl2C,GAE3E,IACN,CAACy4C,EAAO9lD,EAAMujD,SAAUl2C,IA7CJ,IAACvL,EA8CxB,OACE,oCACE,kBAACnB,MAAAA,CAAIC,UAAWJ,EAAOmlD,aACrB,kBAAChlD,MAAAA,CAAIC,UAAWJ,EAAOqlD,SACrB,kBAACn8B,EAAAA,WAAUA,CACTroB,cAAaC,GAAAA,EAAQglD,MAAMC,YAC3B3lD,UAAWJ,EAAOilD,cAClBj1B,QAAQ,gBACRzvB,QAAQ,YACR0D,aAAW,gBACX+hD,iBAAiB,MACjBvlD,KAAK,KACLqD,KAAK,MACLlD,QAAS,IAAM8kD,GAAgB,GAC/BO,SAAU,KAGd,kBAAC9lD,MAAAA,CAAIC,UAAWJ,EAAOqlD,SACrB,kBAACa,EAAAA,gBAAeA,CACd9lD,UAAWJ,EAAO+kD,gBAClB/4B,KAAK,YACLzrB,QAAQ,YACRC,KAAK,OACLC,KAAK,KACLuvB,QAAQ,wBACRg2B,iBAAiB,MACjBC,SAAU,EACVN,QAASA,MAIf,oCACGF,GACC,kBAACU,EAAAA,MAAKA,CAACC,UAAW,IAAMV,GAAgB,GAAQngC,QAAQ,EAAMtkB,MAAM,iBAClE,kBAAColD,MAAAA,KAAKb,GACN,kBAACW,EAAAA,MAAMG,UAAS,KACd,kBAACJ,EAAAA,gBAAeA,CAACl6B,KAAK,OAAO25B,QAAS,IAAMnmD,EAAM4O,OAAiB,wBASjF,CCtFA,MA0Bam4C,GAAwB/mD,I,IAWVgnD,EAVzB,IAAIp4C,EAAQ5O,EAAM4O,MAClB,MAAMof,EAAQhuB,EAAMguB,MACdi5B,EAAej5B,EAAMhsB,QAAS4M,GAE9BpO,GA/BWsB,GA8BHuB,EAAAA,EAAAA,aA9ByBk+B,EA+BPvhC,EAAMguB,MAAMtnB,KA/BsB,CAClEiB,UAAU5F,EAAAA,EAAAA,KAAI,CACZC,QAAS,OACTiB,WAAY,aACZoI,cAAek2B,IAAc6jB,EAAAA,UAAU8B,OAAS,cAAgB,MAChE96C,UAAWm1B,IAAc6jB,EAAAA,UAAU8B,OAAS,QAAU,SAExDrgB,SAAS9kC,EAAAA,EAAAA,KAAI,CACXqG,SAAU,WACV1C,SAAU,SACV1D,QAAS,OACTa,OAAQ,SAEVskD,aAAaplD,EAAAA,EAAAA,KAAI,CACf4B,MAAO7B,EAAMgE,OAAO9C,KAAK0F,KACzBwD,UAAW,MACX/D,WAAY,MACZ,UAAW,CACT2+B,eAAgB,kBAcd,WAAE+S,GAAegD,KACjB,UAAEG,EAAS,mBAAEE,GAAuBK,IAGpC8I,EAAM,CAAEp8B,MAAOjqB,EAAMujD,UACrB6D,EAAW1uC,QAAkC2tC,QAA1BW,GAAAA,EAAAA,EAAAA,cAAahnD,EAAMguB,MAAOq4B,UAA1BW,IAAAA,OAAAA,EAAAA,EAAgC5hD,QArCzC,IAACtD,EAAsBy/B,EAuCvC,OAAc,OAAV3yB,EACK,sCAIPA,EADEy4C,IAAAA,eAAqBrnD,EAAM4O,OACrB5O,EAAM4O,MACY,iBAAVA,EACRC,KAAKC,UAAU9O,EAAM4O,QAErB04C,EAAAA,EAAAA,wBAAuBL,GAgB/B,kBAAC9D,EAAwBA,CACvB/hD,QAAS,IACHpB,EAAMujD,WAAavG,EAAU/yB,OAASjqB,EAAMguB,MAAM1pB,OAAS04C,EAAUntB,UAChEqtB,EAAmB,CAAEjzB,MAAO,OAE9BizB,EAAmB,CAAEjzB,MAAOjqB,EAAMujD,SAAU1zB,UAAW7vB,EAAMguB,MAAM1pB,KAAM24C,kBAAmB,IAErGjvB,MAAOhuB,EAAMguB,MACbu1B,SAAUvjD,EAAMujD,UAEhB,kBAAC5iD,MAAAA,CAAIC,UAAWJ,EAAOqmC,SACC,IAArB7mC,EAAMunD,YAAoB,kBAACjC,GAAeA,CAAC12C,MAAOA,EAAO20C,SAAUvjD,EAAMujD,WAC1E,kBAAC5iD,MAAAA,CAAIC,UAAWJ,EAAOmH,YAErBy/C,GA3BY,EAACx4C,EAAwC1D,IAEzD,kBAAC05C,GAAWA,CACV52B,MAAOhuB,EAAMguB,MACbu1B,SAAUvjD,EAAMujD,SAChBiE,YAAa,IAAM3N,GAAW,GAC9B3uC,MAAOA,EACP0D,MAAOA,IAoBO64C,CAAY74C,EAAOof,EAAM1pB,MAEtC8iD,GAAYp5B,EAAM05B,UACjB,kBAACC,EAAAA,qBAAoBA,CAACx3B,MAAO,K,IAAM62B,E,OAAoBX,QAApBW,GAAAA,EAAAA,EAAAA,cAAah5B,EAAOq4B,UAApBW,IAAAA,EAAAA,EAA4B,EAAE,IAC7DY,GACIA,EAAIC,SAEJ,kBAAClnD,MAAAA,CAAIC,UAAWJ,EAAO2mD,YAAa/lD,QAASwmD,EAAIC,UAC/C,oCAAGj5C,IAKL,kBAACjO,MAAAA,CAAIC,UAAWJ,EAAO2mD,aACrB,oCAAGv4C,QAIX,E,yHC3CZ,SAASk5C,GAAiB9nD,GASxB,MAAM8B,GAAQuB,EAAAA,EAAAA,aAEd,IAAImmC,EACJ,GAAIxpC,EAAMkL,QAAUy5C,GAAY,CAC9B,MAAME,EAAWC,KAAmB92C,QAChChO,EAAM4O,SAASi2C,IACjBrb,EAAaqb,EAAS7kD,EAAM4O,OAAOjL,MAEvC,CAEA,MAAMnD,EAzDU,EAACsB,EAAsB0nC,KAAyB,CAChE0b,MAAMnjD,EAAAA,EAAAA,KAAI,CACRiH,KAAM,WACNb,WAAYrG,EAAMiB,QAAQ,IAC1BuoB,YAAaxpB,EAAMiB,QAAQ,IAC3BD,QAAS,GAAGhB,EAAMiB,QAAQ,QAASjB,EAAMiB,QAAQ,OACjDqF,SAAU,WACVpG,QAAS,cACTqJ,cAAe,SACfa,UAAWpK,EAAMiB,QAAQ,MAE3BglD,YAAYhmD,EAAAA,EAAAA,KAAI,CAAC,GACjBimD,WAAWjmD,EAAAA,EAAAA,KAAI,CACbkE,OAAQ,aAAanE,EAAMgE,OAAOilB,WAAWhlB,YAC7CklB,UAAW,oBAAoBnpB,EAAMgE,OAAOilB,WAAWhlB,YACvDF,gBAAiB,cACjBJ,OAAQ,UACR2C,SAAU,WAEV/B,aAAc,GAAGvE,EAAMiB,QAAQ,MAC/BqD,YAAaojC,EAAa,GAAG1nC,EAAMiB,QAAQ,OAAU,GAAGjB,EAAMiB,QAAQ,MAEtE,WAAY,CACV8jC,QAAS,KACTz+B,SAAU,WACVkqC,KAAM,EACNjqC,IAAK,EACLxF,OAAQ,OACRD,MAAO,GAAGd,EAAMiB,QAAQ,OACxB8C,gBAAiB2jC,GAGnB,UAAW,CACTvjC,OAAQ,aAAanE,EAAMgE,OAAOG,OAAOq5B,cAwB9B5+B,CAAUoB,EAAO0nC,GAEhC,OACE,kBAAC/f,OAAAA,CAAK7oB,WAAWkM,EAAAA,EAAAA,IAAGtM,EAAO0kD,KAAMllD,EAAMioD,WAAaznD,EAAOunD,gBAAa3lD,GAAYhB,QAASpB,EAAMoB,SACjG,kBAACqoB,OAAAA,CAAK7oB,UAAWJ,EAAOwnD,WACrBhoD,EAAMkL,MAAM,IAAElL,EAAM4O,OAEtB5O,EAAMioD,YACL,kBAAChE,GAAeA,CACdC,SAAU,UACV3iB,UAAWvhC,EAAMuhC,UACjBpR,MAAOnwB,EAAMmwB,MACbjlB,MAAOlL,EAAMkL,MACb0D,MAAO5O,EAAM4O,MACby1C,WAAYrkD,EAAMkoD,aAK5B,CAEO,MAAMC,GAAenoD,IAC1B,MAAM,MAAEkL,GAAUlL,GACZ,UAAEg9C,EAAS,mBAAEE,GAAuBK,KACpC,QAAExoB,EAAO,WAAE4kB,GAAekD,IAC1BjuC,EAAQ5O,EAAM4O,MACdw5C,GAAcC,EAAAA,EAAAA,kBACd35C,GAAU45C,EAAAA,EAAAA,UAAQ,IAAMF,EAAY15C,QAAQ1D,KAAKo9C,IAAc,CAACA,IAGhEp6B,EAAQhuB,EAAMguB,MAEpB,IAAKA,IAASA,aAAAA,EAAAA,EAAOtnB,QAAS0+C,EAAAA,UAAUmD,MACtC,OAAO,KAET,MAAMlC,EAAM,CAAEp8B,MAAOjqB,EAAMujD,UAEvBvjD,EAAMwoD,eAAiBxoD,EAAMyoD,gBAAkBzoD,EAAM0oD,gBACvD1oD,EAAMwoD,cAAcd,UAAWiB,EAAAA,EAAAA,kBAAiB3oD,EAAM0oD,cAAe1oD,EAAMwoD,cAAe,CAAC,EAAG95C,IAGhG,MAAMyhB,EAAQnwB,EAAMwoD,gBAAiBxB,EAAAA,EAAAA,cAAahnD,EAAMwoD,cAAenC,GAsBvE,OACE,kBAACyB,GAAAA,CACC1mD,QAAS,IAELpB,EAAMujD,WAAavG,EAAU/yB,OAC7B+D,EAAM1pB,OAAS04C,EAAUntB,WACzB3kB,IAAU8xC,EAAU4L,aAEb1L,EAAmB,CAAEjzB,MAAO,OAG9BizB,EAAmB,CACxBjzB,MAAOjqB,EAAMujD,SACb1zB,UAAW7B,EAAM1pB,KACjBskD,aAAc19C,EACd+xC,kBAAmBj9C,EAAMyoD,eAAiB,EAAI,IAGlDR,WACEjL,EAAU/yB,QAAUjqB,EAAMujD,UAAYvG,EAAUntB,YAAc7B,EAAM1pB,MAAQ04C,EAAU4L,eAAiB19C,EAEzGq2B,UAAWvhC,EAAMyoD,eAAiB,eAAYrmD,EAC9C8I,MAAOA,EACP0D,MAAOA,EACPs5C,WAAY,IAvCU,CAACr4B,IACzB,MAAMusB,E,uUAAiB,IAAKrnB,GAEtB3vB,EAASmR,OAAOtD,KAAK8hB,GAAStuB,QAAQk8C,GAAM5tB,EAAQ4tB,GAAGp4B,SAAQnlB,OACjEg3C,EAAevsB,GAAWtF,QAC5B6xB,EAAevsB,GAAWtF,QAAS,EACnC6xB,EAAevsB,GAAW5F,WAAQ7nB,IAElCg6C,EAAevsB,GAAWtF,QAAS,EACnC6xB,EAAevsB,GAAW5F,MAAQ7kB,GAGpCu0C,EAAWyC,EAAe,EA2BNyM,CAAkB39C,GACpCilB,MAAOA,G,ECxIP24B,GAAc74B,I,IAEVA,EADRA,EAAAA,SAAW,QAAXA,EAAAA,EAAI+hB,eAAJ/hB,IAAAA,GAAAA,EAAa84B,SAAS,CACpBzW,KAAgB,QAAVriB,EAAAA,EAAG+hB,eAAH/hB,IAAAA,OAAAA,EAAAA,EAAY+4B,YAClB,EAmBG,SAASC,IAAWC,YAAa7X,IACtC,MACM7wC,GAxDWsB,GAuDHuB,EAAAA,EAAAA,aAvD6B,CAC3C8lD,SAAUpnD,EAAAA,GAAG;;;;;;;;;;;;IAabinD,WAAYjnD,EAAAA,GAAG;;kBAECD,EAAMgE,OAAOilB,WAAWC;;;oBAGtBlpB,EAAMgE,OAAOilB,WAAWhlB;;IAG1CqjD,YAAarnD,EAAAA,GAAG;;kBAEAD,EAAMgE,OAAOilB,WAAWC;;;oBAGtBlpB,EAAMgE,OAAOilB,WAAWhlB;;MA3B1B,IAACjE,EAyDjB,OACE,kBAACnB,MAAAA,CAAIC,UAAWJ,EAAO2oD,UACrB,kBAAC1/B,OAAAA,CAAK4/B,cAAe,KArBZ,IAACp5B,EACdA,EAAAA,OADcA,EAqBwBohB,IApB3B,QAAXphB,EAAAA,EAAI+hB,eAAJ/hB,IAAAA,GAAAA,EAAa84B,SAAS,CACpB1gD,IAAK,EACLiqC,KAAM,EACNgX,SAAU,UAiB8B,EAAEC,YAAa,IAAMT,GAAWzX,GAAMzwC,UAAWJ,EAAOwoD,YAC5F,kBAACpkD,EAAAA,KAAIA,CAACN,KAAM,gBAEd,kBAACmlB,OAAAA,CAAK4/B,cAAe,KAhBX,IAACp5B,EACfA,EAAAA,OADeA,EAgBwBohB,IAf5B,QAAXphB,EAAAA,EAAI+hB,eAAJ/hB,IAAAA,GAAAA,EAAa84B,SAAS,CACpB1gD,IAAK,EACLiqC,KAAMriB,EAAG+hB,QAAQwX,YACjBF,SAAU,UAY+B,EAAEC,YAAa,IAAMT,GAAWzX,GAAMzwC,UAAWJ,EAAO4oD,aAC7F,kBAACxkD,EAAAA,KAAIA,CAACN,KAAM,iBAIpB,CClEO,SAASmlD,GAAezpD,GAC7B,MAAM8B,GAAQuB,EAAAA,EAAAA,aACR7C,EAASE,GAAUoB,GACzB,OACE,kBAACnB,MAAAA,CAAIU,cAAaC,GAAAA,EAAQglD,MAAMoD,WAAY9oD,UAAWJ,EAAOkpD,YAC5D,oCAAG1pD,EAAM4O,OAGf,CAEO,MAAMlO,GAAY,CAACoB,EAAsB6nD,KAAsB,CACpED,YAAY3nD,EAAAA,EAAAA,KAAI,CACdwD,WAAYzD,EAAM0G,WAAWohD,oBAC7B/mD,OAAQ,OACR2iD,WAAY,OACZn/C,aAAcvE,EAAMiB,QAAQ,KAC5BqD,YAAatE,EAAMiB,QAAQ,GAC3BwF,SAAUzG,EAAM0G,WAAWC,UAAUF,aCG5BshD,GAAwB7pD,IACnC,IAAI4O,EAAQ5O,EAAM4O,MAClB,MAAMof,EAAQhuB,EAAMguB,MACdi5B,EAAej5B,EAAMhsB,QAAS4M,GAC9B9M,GAAQuB,EAAAA,EAAAA,aACR7C,EAASE,GAAUoB,IACnB,QAAEizB,EAAO,WAAE8kB,EAAU,UAAEE,GAAc8C,KACrC,UAAEzC,GAAc4J,MACf8F,EAASC,IAAc7lD,EAAAA,EAAAA,WAAS,GACjCmtC,GAAMf,EAAAA,EAAAA,QAA8B,MAGxC1hC,EADEy4C,IAAAA,eAAqBrnD,EAAM4O,OACrB5O,EAAM4O,MACY,iBAAVA,EACRC,KAAKC,UAAU9O,EAAM4O,QAErB04C,EAAAA,EAAAA,wBAAuBL,GAOjC,MAoFMt5B,EApFe,CAACA,GACKpX,OAAOtD,KAAK8hB,GAElCtuB,QAAQnC,GAASA,KAASk4C,EAAAA,EAAAA,IAAYpC,KACtC/pC,MAAK,CAACvI,EAAGwI,IAEJxI,IAAM68C,IACA,EAENr0C,IAAMq0C,GACD,EAGe,eAApB5vB,EAAQjtB,GAAGpB,MACL,EAEc,eAApBquB,EAAQzkB,GAAG5J,KACN,EAIFquB,EAAQjtB,GAAGq6B,YAAcpN,EAAQzkB,GAAG6xB,aAAe,EAAI,IAGhC17B,QAC/ByE,IAEE6pB,EAAQ7pB,GAAOqf,QAEhBwK,EAAQ7pB,GAAOi3B,YAAc,IAI9B36B,KAAK0D,I,IAEuBkvC,EAD3B,MAAM5rB,EAAab,EAAOziB,GACpB8+C,EAAqB5P,SAAc,QAAdA,EAAAA,EAAWr/B,WAAXq/B,IAAAA,OAAAA,EAAAA,EAAgBxsB,OAAO9D,MAAMkE,GAAUA,EAAM1pB,OAAS4G,IAC3E++C,EAAWj8B,aAAAA,EAAAA,EAAOlgB,OAAO9N,EAAMujD,UAC/B2G,GAAa17B,KAAgBy7B,EAGnC,GAAIz7B,EACF,OACE,kBAAC25B,GAAWA,CACVO,mBAAetmD,EACf4rB,MAAOA,EACP+G,QAASA,EACTwuB,SAAUvjD,EAAMujD,SAChB9zB,MAAOzvB,EAAMyvB,MACb+3B,YAAa,IAAM3N,GAAW,GAC9Bx1C,IAAK6G,EACLA,MAAOA,EACPu9C,gBAAgB,EAChB75C,MAAO4f,IAMb,GAAI07B,IAAaF,aAAAA,EAAAA,EAAoB1lD,MAAM,CACzC,MAAM6lD,EAAqBH,aAAAA,EAAAA,EAAoBl8C,OAAO9N,EAAMujD,UAC5D,IAAIyG,aAAAA,EAAAA,EAAoBtjD,QAAS0+C,EAAAA,UAAUgF,QAAUD,EACnD,OACE,kBAAChC,GAAWA,CACVO,cAAetO,aAAAA,EAAAA,EAAWr/B,IAC1BytC,cAAewB,EACfh8B,MAAOA,EACPpf,MAAOu7C,EACPp1B,QAASA,EACTwuB,SAAUvjD,EAAMujD,SAChB9zB,MAAOzvB,EAAMyvB,MACb+3B,YAAa,IAAM3N,GAAW,GAC9Bx1C,IAAK2lD,EAAmB1lD,KACxB4G,MAAO8+C,EAAmB1lD,KAC1BmkD,gBAAgB,GAIxB,CAEA,OAAO,IAAI,IAEZhiD,QAAQkI,GAAMA,IAGJ07C,CAAarqD,EAAM2tB,QAC5B28B,EAASvQ,IAAcV,EAAakR,KACpCC,EAAY78B,EAAOvoB,OAAS,EAElC,OACE,kBAAC+9C,EAAwBA,CACvBG,UAAW,KACTyG,GAAW,EAAK,EAElB1G,WAAY,KACV0G,GAAW,EAAM,EAEnBxG,SAAUvjD,EAAMujD,SAChBv1B,MAAOhuB,EAAMguB,OAEb,kBAACy8B,EAAAA,eAAcA,CAAChK,SAAUpP,EAAKiC,MAAM,cACnC,kBAAC3yC,MAAAA,CAAIC,UAAWJ,EAAOqmC,SAEC,IAArB7mC,EAAMunD,YAAoB,kBAACjC,GAAeA,CAAC/B,SAAUvjD,EAAMujD,SAAU30C,MAAOA,IAE5E07C,GAAUE,GAAa,oCAAG78B,GAC1BosB,IAAcV,EAAa1rB,QAAU68B,GAAa,oCAAG78B,GACrDosB,IAAcV,EAAa1rB,SAAW68B,GAAa,kBAACf,GAAcA,CAAC76C,MAAOA,IAG1E07C,IAAWE,GAAa,kBAACf,GAAcA,CAAC76C,MAAOA,IAC/CmrC,IAAcV,EAAar2C,MAAQ,kBAACymD,GAAcA,CAAC76C,MAAOA,IAE1Dk7C,GAAW,kBAACb,GAAQA,CAACC,YAAa7X,M,EAOhC3wC,GAAaoB,IAA0B,CAClD+kC,QAAS9kC,EAAAA,GAAG;;;;;;;;;;;;;;;;;;;;;;6EAsB+DD,EAAMgE,OAAOilB,WAAWC;;MCrIxF0/B,GAAmB1qD,IAC9B,MAAM,oBAAE09C,EAAmB,mBAAED,GAAuBI,KAC9C,UAAEzD,GAAc4J,KAChB5R,GAAmB9B,EAAAA,EAAAA,QAAiC,MAEpD9vC,GA5CWsB,GA2CHuB,EAAAA,EAAAA,aA3CyBsnD,EA4Cc,IAArB3qD,EAAMunD,WA5CyBqD,EA4CP5qD,EAAMguB,MAAM1pB,QAASk4C,EAAAA,EAAAA,IAAYpC,GA5CL,CACpFyQ,iBAAiB9oD,EAAAA,EAAAA,KAAI,CACnBmJ,MAAO,kBACPtI,MAAO,OACPu5B,SAAU,QACVt5B,OAAQ,OACRynC,UAAW,QACXzkC,gBAAiB/D,EAAMgE,OAAOilB,WAAWC,QACzC/kB,OAAQ,aAAanE,EAAMgE,OAAOG,OAAOmlB,OACzCtoB,QAAShB,EAAMiB,QAAQ,GACvBL,OAAQZ,EAAMiB,QAAQ,EAAG,GACzBkoB,UAAWnpB,EAAMopB,QAAQC,GACzBjpB,aAAcJ,EAAMO,MAAMC,OAAOC,UAEnCynB,QAAQjoB,EAAAA,EAAAA,KAAI,CACVg9C,WAAY,OACZ+L,MAAO,MACP//B,WAAY,OACZ9kB,OAAQ,OACRnD,QAAS,IAEX+E,SAAS9F,EAAAA,EAAAA,KAAI,CACXC,QAAS,OACTmG,WAAYwiD,EAAgB,OAAS,MAErC/nD,MAAOgoD,EAAS,mBAAqB,OAGrCzoD,YAAa,aAAaL,EAAMgE,OAAOG,OAAOmlB,OAC9CE,YAAa,SAEfy/B,uBAAuBhpD,EAAAA,EAAAA,KAAI,CACzBS,WAAYmoD,EAAgB,aAAa7oD,EAAMgE,OAAOG,OAAOmlB,OAAS,OACtEjjB,WAAYwiD,EAAgB,OAAS,EACrCvkD,YAAaukD,EAAgB,OAAS,EACtC3oD,QAAS,WAnCK,IAACF,EAAsB6oD,EAAwBC,EA8C/D,OACE,kBAACnhC,OAAAA,CAAK7oB,UAAWJ,EAAOqH,SACtB,kBAAC4hB,OAAAA,CAAK7oB,UAAWJ,EAAOuqD,uBAAwB/qD,EAAMgrD,gBACtD,kBAAChhC,SAAAA,CACCppB,UAAWJ,EAAOwpB,OAClBqnB,IAAKe,EACLhxC,QAAU6N,IACRyuC,GAAqBD,EAAmB,GAG1C,kBAAC74C,EAAAA,KAAIA,CAACnD,MAAO,YAAa6C,KAAM,gBAEjC8tC,EAAiBJ,SAEhB,kBAACC,EAAAA,QAAOA,CACNC,KAAMuL,EACN5W,QACE,kBAAC6F,EAAAA,oBAAmBA,CAACtrC,QAAS,IAAMs8C,GAAoB,GAAQ/Q,YAAY,GAC1E,kBAAChsC,MAAAA,CAAIC,UAAWJ,EAAOqqD,iBAAkB7qD,EAAMoD,WAGnDgvC,iBAAkBA,EAAiBJ,U,2HC3EtC,SAASiZ,GAAoBjrD,GAUlC,MAAM,oBAAE09C,GAAwBG,KAC1B,QAAE9oB,EAAO,WAAE4kB,EAAU,UAAEI,EAAS,aAAEC,GAAiB6C,KACnD,UAAEzC,GAAc4J,KAChBxjD,EAASE,KAETwqD,GAAalQ,EAAAA,EAAAA,cAChBhtB,IACC,MAAMm9B,E,uUAAqB,IAAKp2B,GAEGxe,OAAOtD,KAAKk4C,GAC5C1kD,QAAQ01C,IACP,MAAMiP,EAAcD,EAAmBhP,GAAKlyB,MACtCs9B,EAAa4D,EAAmBn9B,EAAM1pB,MAAM2lB,MAClD,OAAOkhC,EAAmBhP,GAAK5xB,QAAUg9B,GAAc6D,GAAeA,EAAc7D,CAAU,IAE/F//C,KAAK6jD,GAASF,EAAmBE,KAET7xC,SAAS2iC,SAChB/5C,IAAd+5C,EAAIlyB,OACNkyB,EAAIlyB,OACN,IAGFkhC,EAAmBn9B,EAAM1pB,MAAMimB,QAAS,EACxC4gC,EAAmBn9B,EAAM1pB,MAAM2lB,WAAQ7nB,EACvCu3C,EAAWwR,EAAmB,GAEhC,CAACp2B,EAAS4kB,IAGN2R,EAActrD,EAAMurD,YAAYv9B,MAAM1pB,QAASk4C,EAAAA,EAAAA,IAAYpC,GAEjE,OACE,kBAACsQ,GAAoB1qD,EAAMurD,YACzB,kBAAC5qD,MAAAA,CAAIC,UAAWJ,EAAOgrD,UACrB,kBAAC1jD,IAAAA,CACClH,UAAWJ,EAAOkI,KAClBtH,QAAS,KACPpB,EAAMyrD,6BACN/N,GAAoB,EAAM,GAG5B,kBAAC94C,EAAAA,KAAIA,CAAChE,UAAWJ,EAAOgsB,KAAMloB,KAAM,UAAWrD,KAAM,OAAQ,mBAIjE,kBAACN,MAAAA,CAAIC,UAAWJ,EAAOgrD,UACrB,kBAAC1jD,IAAAA,CAAElH,UAAWJ,EAAOkI,KAAMtH,QAAS,IAAM8pD,EAAWlrD,EAAMurD,YAAYv9B,QACrE,kBAAC1hB,MAAAA,CACC0oC,MAAM,6BACND,QAAQ,YACRnyC,MAAM,KACNC,OAAO,KACPjC,UAAU,mBAEV,kBAAC0jD,OAAAA,CACCC,SAAS,UACTC,SAAS,UACTC,EAAE,+sBACFzjD,KAAK,UACL0jD,YAAY,MAEd,kBAACJ,OAAAA,CACCG,EAAE,iwCACFzjD,KAAK,UACL0jD,YAAY,OAEV,kBAIT1kD,EAAM0rD,WACL,kBAAC/qD,MAAAA,CAAIC,UAAWJ,EAAOgrD,UACrB,kBAAC1jD,IAAAA,CAAElH,UAAWJ,EAAOkI,KAAMtH,QAAS,K,IAAMpB,E,OAAe,QAAfA,EAAAA,EAAM0rD,iBAAN1rD,IAAAA,OAAAA,EAAAA,EAAAA,KAAAA,EAAkB+0B,EAAQ,GAClE,kBAACnwB,EAAAA,KAAIA,CAAChE,WAAWkM,EAAAA,EAAAA,IAAGtM,EAAOgsB,KAAMhsB,EAAOmrD,SAAUrnD,KAAM,mBAAoBrD,KAAM,OAAQ,cAK/FjB,EAAM4rD,YACL,kBAACjrD,MAAAA,CAAIC,UAAWJ,EAAOgrD,UACrB,kBAAC1jD,IAAAA,CAAElH,UAAWJ,EAAOkI,KAAMtH,QAAS,K,IAAMpB,E,OAAgB,QAAhBA,EAAAA,EAAM4rD,kBAAN5rD,IAAAA,OAAAA,EAAAA,EAAAA,KAAAA,EAAmB+0B,EAAQ,GACnE,kBAACnwB,EAAAA,KAAIA,CAAChE,UAAWJ,EAAOgsB,KAAMloB,KAAM,mBAAoBrD,KAAM,OAAQ,eAK3EqqD,GACC,kBAAC3qD,MAAAA,CAAIC,UAAWJ,EAAOgrD,UACrB,kBAAC1jD,IAAAA,CACClH,UAAWJ,EAAOkI,KAClBtH,QAAS,KACH24C,IAAcV,EAAar2C,KAC7Bg3C,EAAaX,EAAa1rB,QAE1BqsB,EAAaX,EAAar2C,KAC5B,GAGD+2C,IAAcV,EAAar2C,KAC1B,kBAAC4B,EAAAA,KAAIA,CAAChE,UAAWJ,EAAOgsB,KAAMloB,KAAM,iBAAkBrD,KAAM,OAE5D,kBAAC2D,EAAAA,KAAIA,CAAChE,UAAWJ,EAAOgsB,KAAMloB,KAAM,cAAerD,KAAM,OAG1D84C,IAAcV,EAAar2C,KAAO,cAAgB,kBAKxDhD,EAAM6rD,kBACL,kBAAClrD,MAAAA,CAAIC,UAAWJ,EAAOgrD,UACrB,kBAAC1jD,IAAAA,CAAElH,UAAWJ,EAAOkI,KAAMtH,QAAS,K,IAAMpB,E,OAAsB,QAAtBA,EAAAA,EAAM6rD,wBAAN7rD,IAAAA,OAAAA,EAAAA,EAAAA,KAAAA,EAAAA,GACxC,kBAAC4E,EAAAA,KAAIA,CAAChE,UAAWJ,EAAOgsB,KAAMloB,KAAM,WAAYrD,KAAM,OAAQ,wBAO1E,CAEA,MAAMP,GAAY,KACT,CACLirD,SAAS5pD,EAAAA,EAAAA,KAAI,CACXwK,UAAW,eAEb7D,MAAM3G,EAAAA,EAAAA,KAAI,CACRglC,WAAY,MACZrb,cAAe,QAEjBc,MAAMzqB,EAAAA,EAAAA,KAAI,CACRupB,YAAa,SAEfkgC,UAAUzpD,EAAAA,EAAAA,KAAI,CAAC,K,47BC9FnB,SAAS+pD,GAAgB9rD,GAQvB,OACE,kBAAC+rD,EAAAA,MAAYA,CACXC,eAAgBhsD,EAAMisD,SACtBC,cAAe,CAAC,CAAEC,aAAa9P,EAAAA,EAAAA,IAAYr8C,EAAMo6C,WAAYgS,MAAM,IACnEC,gBAAiBrsD,EAAM6jD,aACvByI,WAAYC,EAAAA,GAAgBC,GAC5Bp9B,KAAMpvB,EAAMovB,KACZvsB,OAAQ7C,EAAM6C,OACdD,MAAO5C,EAAM4C,MACb6pD,cAAe,CAAEva,MAAM,EAAMwa,QAAS,CAAC,SAAUC,WAAW,IAGlE,CAEO,MAAMC,GAAS5sD,IACpB,MAAM,OAAE6C,EAAM,SAAEgqD,EAAQ,UAAEzS,EAAS,MAAEx3C,EAAK,OAAE+qB,GAAW3tB,EACjD8B,GAAQuB,EAAAA,EAAAA,aACR7C,EArCiB,CACvBssD,SAAS/qD,EAAAA,EAAAA,KAAI,CACXqG,SAAU,aAEZ2kD,WAAWhrD,EAAAA,EAAAA,KAAI,CACb,eAAgB,CAEdC,QAAS,uBAgCNgrD,EAAYC,IAAiB/oD,EAAAA,EAAAA,eAAgC9B,IAC9D,QACJ2yB,EAAO,QACP+kB,EAAO,WACPD,EAAU,mBACVD,EAAkB,WAClBD,EAAU,kBACVM,EAAiB,eACjBT,EAAc,kBACdC,GACEoD,KAEE,aAAEgH,GAAiBG,MAGlBkJ,IAAqBhpD,EAAAA,EAAAA,UAAS2/C,GAE/BnE,EAAgB0C,EAAiBzI,GAEjCyO,GAAcC,EAAAA,EAAAA,kBACd35C,GAAU45C,EAAAA,EAAAA,UAAQ,IAAMF,EAAY15C,QAAQ1D,KAAKo9C,IAAc,CAACA,IAEhE+E,GAAoBnS,EAAAA,EAAAA,cACvBvrB,IACC,IAAKA,EAAMrqB,OACT,OAAOqqB,EAGT,MAAO29B,IAAsBC,EAAAA,EAAAA,qBAAoB,CAC/Cj+B,KAAM,CAACK,GACPo9B,SAAUA,EACV/qD,MAAOA,EACPwrD,iBAAkB5+C,EAClB6+C,YAAa,CACXC,SAAU,CACRC,OAAQ,CAAC,GAEXC,UAAW,MAKf,IAAK,MAAOzjC,EAAO+D,KAAUo/B,EAAmBx/B,OAAOpX,UAAW,C,IAG5Bm3C,EAgC9BnU,EAjCNxrB,EAAMtnB,KACJsnB,EAAMtnB,OAAS0+C,EAAAA,UAAUgF,OAAoCp8B,QAA3B2/B,EAAAA,GAA2B3/B,UAA3B2/B,IAAAA,EAAAA,EAAqCvI,EAAAA,UAAUgF,OAASp8B,EAAMtnB,KAElGsnB,EAAMrI,OAAS,SACVqI,EAAMrI,QAAM,CAEf8nC,OAAQ,IACN5H,SAAS,EACT+H,YAAY,EACZC,gBAAkB7tD,GAChB,kBAAC29C,EAA0BA,KACzB,kBAACsN,GAAmBA,CAClBM,YAAa,SAAKvrD,GAAAA,CAAOunD,WAAYt9B,IACrCwhC,2BAA4B,IAAM5R,GAAW,GAC7C6R,UACY,IAAVzhC,EAAeohC,GAA6B3L,EAAc2L,EAAMphC,EAAOA,EAAQ,QAAK7nB,EAEtFwpD,WACE3hC,IAAUwF,EAAM7B,OAAOxoB,OAAS,EAC3BimD,GAA6B3L,EAAc2L,EAAMphC,EAAOA,EAAQ,QACjE7nB,EAENypD,iBACEt1C,OAAOtD,KAAKumC,GAAgBp0C,OAAS,EACjC,KACEq0C,EAAkB,CAAC,EAAE,OAEvBr3C,KAKZQ,MAC4B,QAA1B42C,EAAAA,EAAexrB,EAAM1pB,aAArBk1C,IAAAA,EAAAA,EACAsU,GAAqB9/B,EAAO/D,EAAO8K,EAASnyB,EAAOwqD,EAAmBx/B,OAAOxoB,OAAQg1C,GACvF2T,YAAaC,GAAoBhgC,EAAO/D,EAAO0D,EAAQysB,IACpDpsB,EAAMrI,OAAO8nC,QAIlBG,YAAY,GAEhB,CAEA,OAAOR,CAAkB,GAK3B,CAACP,EAAU/qD,EAAO6rB,EAAQ/qB,EAAO8L,EAASmrC,EAAYL,KAIxDkC,EAAAA,EAAAA,YAAU,KACR,MAAMuS,EAAAA,W,WAAU,YACd,MAAMxzB,GA6N8BwK,EA5NlCmV,EAAUr/B,KA6NC6S,OACdnnB,QAAQunB,I,IAELA,EAEAiX,EAE6DA,EAL/D,MAAMipB,EACsB,qBAAZ,QAAdlgC,EAAAA,EAAMmgC,gBAANngC,IAAAA,OAAAA,EAAAA,EAAgByB,QACD,WAAfzB,EAAM1pB,OACN2gC,SAAe,QAAfA,EAAAA,EAAW/kB,YAAX+kB,IAAAA,OAAAA,EAAAA,EAAiBv+B,QAAS0nD,EAAAA,cAAcC,SACpCC,EACW,WAAftgC,EAAM1pB,MAAqB0pB,EAAMtnB,OAAS0+C,EAAAA,UAAUmD,QAAStjB,SAAe,QAAfA,EAAAA,EAAW/kB,YAAX+kB,IAAAA,OAAAA,EAAAA,EAAiBv+B,QAAS0nD,EAAAA,cAAcC,SACvG,OAAOH,GAAqBI,CAAsB,IAEnDC,SAASvgC,GACD,CACL,CACEiC,GAAI,gBACJjiB,QAAS,CACPwgD,OAAQ,OACRC,UAAU,EACV//C,SAAS,EACTisB,OAAQ3M,EAAM1pB,UAnBnB,IAAmC2gC,EAvNpC,MAAMypB,EAoMZ,SAAoCC,GAClC,IAAIC,EAAkD,CAAC,EAEvD,IAAK,MAAMvqD,KAAOsqD,EAChBC,EAAoBvqD,IAAO,EAG7B,OAAIkS,OAAOtD,KAAK07C,GAAcvpD,OAAS,EAC9B,CACL6qB,GAAI,WACJjiB,QAAS,CACP6gD,YAAaF,EACbG,cAAeF,IAId,IACT,CArNoCG,CAoLpC,SAA8B5M,GAE5B,IAAIwM,EAA0C,CAAC,EAW/C,OAVAp4C,OAAOtD,KAAKkvC,GACT17C,QAAQpC,GAAQ89C,EAAgB99C,GAAKkmB,SACrC/Q,SAASnV,IACR,MAAM4lB,EAAQk4B,EAAgB99C,GAAK4lB,WAErB7nB,IAAV6nB,IACF0kC,EAAatqD,GAAO4lB,EACtB,IAGG0kC,CACT,CApMyBK,CAAqBj6B,IAGxC,GAAI25B,EACFj0B,EAAgBrnB,KAAKs7C,OAChB,CACL,MAAMO,EAAgB,CACpB5J,KAAMjL,EAAU2B,UAChBrwC,KAAM0uC,EAAU4B,UAChBkT,YAAa9U,EAAU8U,aAErBD,QAAwC7sD,IAAvB6sD,EAAcvjD,WAA6CtJ,IAAvB6sD,EAAc5J,MACrE5qB,EAAgBrnB,KAqF1B,SAAgD67C,GAC9C,MAAO,CACLh/B,GAAI,WACJjiB,QAAS,CACP6gD,YAAa,CACX,CAACI,EAAc5J,KAAK/gD,MAAO,EAC3B,CAAC2qD,EAAcvjD,KAAKpH,MAAO,GAE7BwqD,cAAe,CACb,CAACG,EAAcvjD,KAAKpH,OAAO,EAC3B,CAAC2qD,EAAc5J,KAAK/gD,OAAO,IAInC,CAlGY6qD,CACEF,GAOR,CAEA,GAAIx0B,EAAgBr1B,OAAS,EAAG,CAC9B,MAAMgqD,QAA0CC,EAAAA,EAAAA,gBAE9CC,EAAAA,EAAAA,oBAAmB70B,EAAiB,CAAC2f,EAAUr/B,OAE3CiyC,EAAaG,EAAkBiC,EAAqB,IAC1DnC,EAAcD,EAChB,MACEC,EAAcE,EAAkB/S,EAAUr/B,KAE9C,E,mOAtCMkzC,GAuCNA,GAAS,GACR,CAAC7T,EAAUr/B,IAAKq/B,EAAU4B,UAAW5B,EAAU2B,UAAW3B,EAAU8U,YAAa/B,EAAmBp4B,KAGvG2mB,EAAAA,EAAAA,YAAU,KACJwR,GAAqBrJ,GACvB5J,GAEF,GACC,CAACiT,EAAmBjT,EAAmB4J,IAE1C,MAAMkC,EAAU3L,EAAUr/B,IAAI6S,OAAO9D,MAAMkE,GAAUA,EAAM1pB,QAASirD,EAAAA,EAAAA,IAAUnV,KACxEoV,EAAYzJ,aAAAA,EAAAA,EAASj4C,OAAOm8B,WAAWt7B,GAAMA,KAAMu+C,aAAAA,EAAAA,EAAmBj9B,MACtEw/B,EAAiBD,IAA4B,IAAfA,EAAmBA,OAAYptD,EAEnE,OAAK4qD,EAiBH,kBAACrsD,MAAAA,CAAIU,cAAaC,GAAAA,EAAQglD,MAAMz+C,QAASjH,UAAWJ,EAAOssD,SACxDhT,GACC,kBAAC4V,EAAAA,OAAMA,CACLzuD,KAAM,KACN0uD,QAAS,KACP9V,GAAW,GACXD,EAAmB7kB,EAAQ,GAG7B,kBAACwtB,EAAyBA,OAI9B,kBAAC5hD,MAAAA,CAAIC,UAAWJ,EAAOusD,WACrB,kBAAC5P,EAAwBA,KACvB,kBAACyS,EAAAA,WAAUA,CAACtiB,YAAY,EAAMuiB,UAAU,EAAOC,cAAc,GAC3D,kBAAChE,GAAAA,CACC1R,UAAWA,EACXyJ,aAAc4L,EACdrgC,KAAM49B,EACNnqD,OAAQA,EACRD,MAAOA,EACPqpD,UAAUhjC,EAAAA,GAAAA,WAnCL,CAAC8mC,EAA0BntD,KAC1C,MAAMyB,EAAMkS,OAAOtD,KAAK8hB,GACrBtuB,QAAQpC,GAAQ0wB,EAAQ1wB,GAAKkmB,SAC7BT,MAAMzlB,GAAQA,IAAQ0rD,IAEzB,GAAI1rD,GAAOzB,EAAQ,EAAG,CACpB,MAAM4E,EAAM,MAAKgyC,GACjBhyC,EAAInD,GAAOzB,EACX62C,EAAkBjyC,EACpB,IA0BuC,WAtChC,oC,EA+DX,SAASmmD,GAA2B3/B,GAElC,GAAIA,EAAM1pB,KAAM,CACd,MAAMA,EAAO0pB,EAAM1pB,KAAKgO,cACxB,GAAa,SAAThO,GAA4B,SAATA,EACrB,OAAO8gD,EAAAA,UAAUC,IAErB,CAGA,IAAK,IAAIvzC,EAAI,EAAGA,EAAIkc,EAAMlgB,OAAO1I,OAAQ0M,IAAK,CAC5C,MAAMnD,EAAIqf,EAAMlgB,OAAOgE,GACvB,GAAS,MAALnD,EACF,OAAOqhD,GAA2BrhD,EAEtC,CAIF,CAEO,MAAMm2C,GAAmB,KACvB,CACL92C,QAAS,CACPiiD,SAAU,CACRtsD,MAAO,UACPsmB,MAAO,GAETimC,KAAM,CACJvsD,MAAO,UACPsmB,MAAO,GAETtc,MAAO,CACLhK,MAAO,UACPsmB,MAAO,GAETmV,IAAK,CACHz7B,MAAO,UACPsmB,MAAO,GAETkmC,KAAM,CACJxsD,MAAO,UACPsmB,MAAO,GAETsoB,QAAS,CACP5uC,MAAO,UACPsmB,MAAO,GAETpd,KAAM,CACJlJ,MAAO,UACPsmB,MAAO,GAETrS,KAAM,CACJjU,MAAO,UACPsmB,MAAO,GAETmmC,MAAO,CACLzsD,MAAO,UACPsmB,MAAO,GAETomC,MAAO,CACL1sD,MAAO,UACPsmB,MAAO,IAGXvjB,KAAM4pD,EAAAA,YAAYC,cAiEtB,SAASvC,GACPhgC,EACAu5B,EACA55B,EACAysB,GAEA,OAAIpsB,EAAM1pB,QAASk4C,EAAAA,EAAAA,IAAYpC,GACtB,CACLoW,cAAgBxwD,GACd,kBAAC6pD,GAAoBA,GAAAA,GAAAA,CAAAA,EAAK7pD,GAAAA,CAAOunD,WAAYA,EAAY55B,OAAQA,EAAO3tB,EAAMujD,aAEhF78C,KAAM+pD,EAAAA,qBAAqBzjC,QAIxB,CACLwjC,cAAgBxwD,GAAU,kBAAC+mD,GAAoBA,GAAAA,GAAAA,CAAAA,EAAK/mD,GAAAA,CAAOunD,WAAYA,KACvE7gD,KAAM+pD,EAAAA,qBAAqBzjC,OAE/B,CAEA,SAAS8gC,GACP9/B,EACAu5B,EACAxyB,EACA27B,EACAC,EACAvW,G,IAmCYpsB,EAAAA,EAjCZ,MAGMviB,EAAWklD,GAAkB,EAAID,EAAa1rD,KAAK+tC,IAAI2d,EAAa,GAGpEE,EAA8B,IAAfrJ,EAAmB,GAAK,EAG7C,GAAIv5B,EAAMtnB,OAAS0+C,EAAAA,UAAUC,KAC3B,OAAO,IAAMuL,EAGf,MAAMC,EAAa97B,EAAQ/G,EAAM1pB,MAEjC,QAAmBlC,IAAfyuD,EACF,O,IAGyBA,EAA3B,MAAMC,EAAY9rD,KAAKkR,IAAwB,QAApB26C,EAAAA,EAAWC,iBAAXD,IAAAA,EAAAA,EAAwB,EAAG7iC,EAAM1pB,KAAKc,QAEjE,OAAIyrD,EAAWC,UAGN9rD,KAAK+tC,IAAI/tC,KAAKkR,IAAgB,IAAZ46C,EAAkB,GAAKF,EAxBjC,GAwB0DA,GAAenlD,GAGtFuiB,EAAM1pB,QAASk4C,EAAAA,EAAAA,IAAYpC,GAKxBp1C,KAAK+tC,IACV/tC,KAAKkR,IAAwC,KAAV,QAAzB8X,EAAY,QAAZA,EAAAA,EAAMlgB,cAANkgB,IAAAA,GAAiB,QAAjBA,EAAAA,EAAe,UAAfA,IAAAA,OAAAA,EAAAA,EAAmB5oB,cAAnB4oB,IAAAA,EAAAA,EAA6B,IAAY,GAAK4iC,EAjCzC,GAiCkEA,GACjFnlD,QAPF,E,IAMYuiB,CAGd,C,eCjeA,MAAM+iC,GAAe,2EAiBRC,GAAahxD,IACxB,MAAM,UAAEo6C,GAAc4J,MAEfiN,EAAeC,IAAoBhtD,EAAAA,EAAAA,UAAS,CAAEtB,MAAO,EAAGC,OAAQ,KAGvEsuD,EAAAA,GAAAA,GAAkB,CAChB9f,IAAKrxC,EAAMoxD,UACXnF,SAAU,KACR,MAAMroD,EAAU5D,EAAMoxD,UAAUpf,QAC5BpuC,IACEqtD,EAAcruD,QAAUgB,EAAQytD,aAAeJ,EAAcpuD,SAAWe,EAAQ0tD,cAClFJ,EAAiB,CACftuD,MAAOgB,EAAQytD,YACfxuD,OAAQe,EAAQ0tD,eAGtB,IAIJ,MAAM9wD,EA3BiB,CACvBssD,SAAS/qD,EAAAA,EAAAA,KAAI,CACXqG,SAAU,cA0BNykD,GAAW0E,EAAAA,EAAAA,eAIXC,GAAsBxW,EAAAA,EAAAA,cACzByW,IACC,MAAMC,EAAqB1xD,EAAMg1B,WAUjC,OATI08B,aAAAA,EAAAA,EAAoBtsD,SACtBmR,OAAOzI,OAAO4jD,GAAoBl4C,SAAQ,CAACnV,EAAK4lB,KAC1CwnC,EAAWptD,KACbotD,EAAWptD,GAAKkmB,QAAS,EACzBknC,EAAWptD,GAAK4lB,MAAQA,EAC1B,IAIGwnC,CAAU,GAEnB,CAACzxD,EAAMg1B,aAIT,IAAKolB,IAAcA,EAAUr/B,IAAI3V,OAC/B,OAAO,K,IAGMg1C,EAAf,MAAMzsB,EAA4C,QAAnCysB,EAAAA,EAAUuX,mCAAVvX,IAAAA,EAAAA,EAAyC,GAClDwX,EAAmBxX,EAAYA,EAAUr/B,IAAI3V,OAAS,EAG5D,IAAIu2C,EA8FN,SAAiC1W,EAAsBtX,GACrD,IAAIguB,EAAwC,CAAC,EAG7C,MAAMkW,EAAW,IAAI3vB,IACfC,EA9CD,SAAqCxU,GAC1C,MAAMwT,EAAiB,IAAIe,IAwB3B,OAvBAvU,EAAOnU,SAASs4C,IACKv7C,OAAOtD,KAAK6+C,GACpBt4C,SAAS+U,IAClB,GAAI4S,EAAe5wB,IAAIge,GAAY,CACjC,MAAMwjC,EAAS5wB,EAAe3zB,IAAI+gB,GAC5BzgB,EAASikD,aAAAA,EAAAA,EAAQC,SACjBlB,EAAYiB,aAAAA,EAAAA,EAAQjB,UAEtBhjD,KAAWA,aAAAA,EAAAA,EAAQyC,IAAIuhD,EAAYvjC,OACrCzgB,SAAAA,EAAQkP,IAAI80C,EAAYvjC,IACpBuiC,GAAagB,EAAYvjC,GAAWnpB,OAAS0rD,GAC/C3vB,EAAeiB,IAAI7T,EAAW,CAAEuiC,UAAWgB,EAAYvjC,GAAWnpB,OAAQ4sD,SAAUlkD,IAG1F,MACEqzB,EAAeiB,IAAI7T,EAAW,CAC5BuiC,UAAWgB,EAAYvjC,GAAWnpB,OAClC4sD,SAAU,IAAI5hD,IAAI,CAAC0hD,EAAYvjC,MAEnC,GACA,IAGG4S,CACT,CAoBsB8wB,CAA4BtkC,GAC1CikC,EAAmB3sB,EAAYA,EAAU7/B,OAAS,EAyDxD,OAvDIuoB,aAAAA,EAAAA,EAAQvoB,SAAUwsD,IAEpBjkC,EAAOnU,SAASmU,IACMpX,OAAOtD,KAAK0a,GAEpBnU,SAAStO,I,IAEMi2B,EADzB,MAAMA,EAAiBgB,EAAY30B,IAAItC,G,IACdi2B,EAAzB,MAAM+wB,EAAiD,QAA9B/wB,EAAAA,SAAwB,QAAxBA,EAAAA,EAAgB6wB,gBAAhB7wB,IAAAA,OAAAA,EAAAA,EAA0BlgC,YAA1BkgC,IAAAA,EAAAA,EAAkC,EAE3D,GAAI0wB,EAASthD,IAAIrF,GAAQ,CACvB,MAAM0D,EAAQijD,EAASrkD,IAAItC,GAEvB0D,KACEA,aAAAA,EAAAA,EAAO2b,QACTsnC,EAASzvB,IAAIl3B,EAAO,CAClBoxC,wBAAyB1tC,EAAM0tC,wBAA0B,EACzD/xB,QAAQ,EACRN,MAAOrb,EAAMqb,MACbkY,YAAa+vB,EACbpB,UAAW3vB,aAAAA,EAAAA,EAAgB2vB,YAG7Be,EAASzvB,IAAIl3B,EAAO,CAClBoxC,wBAAyB1tC,EAAM0tC,wBAA0B,EACzD/xB,QAAQ,EACRN,WAAO7nB,EACP+/B,YAAa+vB,EACbpB,UAAW3vB,aAAAA,EAAAA,EAAgB2vB,YAKnC,MACEe,EAASzvB,IAAIl3B,EAAO,CAClBoxC,wBAAyB,EACzB/xB,QAAQ,EACRN,WAAO7nB,EACP+/B,YAAa+vB,EACbpB,UAAW3vB,aAAAA,EAAAA,EAAgB2vB,WAE/B,GACA,IAIJnV,EAAoBplC,OAAO47C,YAAYN,GAGvCt7C,OAAOtD,KAAK0oC,GAAmBniC,SAASnV,IACtCs3C,EAAkBt3C,GAAKi4C,wBAA0B8V,GAC/CzW,EAAkBt3C,GAAKi4C,wBACvBsV,EAAAA,KAICjW,CACT,CA9J0B0W,CAAwBjY,EAAUr/B,IAAK4S,GAC/D,MAAMshC,EAAgB,CACpB5J,KAAMjL,EAAU2B,UAChBrwC,KAAM0uC,EAAU4B,UAChBkT,YAAa9U,EAAU8U,aAoBzB,OAhBID,IA8JN,SACEqD,EACA3W,EACAiW,GAEAU,EAAkB94C,SAASwU,I,IAIR2tB,EACHA,EAJd,IAAK3tB,EACH,OAEF,MAAM7P,EAAwC,QAA7Bw9B,EAAAA,EAAkB3tB,EAAM1pB,aAAxBq3C,IAAAA,OAAAA,EAAAA,EAA+BpxB,OAC1CN,EAAqC,QAA7B0xB,EAAAA,EAAkB3tB,EAAM1pB,aAAxBq3C,IAAAA,OAAAA,EAAAA,EAA+B1xB,MAE3C0xB,EAAkB3tB,EAAM1pB,MADtB6Z,QAAsB/b,IAAV6nB,EACkB,CAC9BqyB,wBAAyB8V,GACvBpkC,EAAMlgB,OAAOrH,QAAQmI,GAAUA,UAAuCxJ,OACtEwsD,GAEFrnC,QAAQ,EACRN,MAAOA,EACPkY,YAAayvB,GAGiB,CAC9BtV,wBAAyB8V,GACvBpkC,EAAMlgB,OAAOrH,QAAQmI,GAAUA,UAAuCxJ,OACtEwsD,GAEFrnC,QAAQ,EACRN,WAAO7nB,EACP+/B,YAAayvB,EAEjB,GAIJ,CAhMIW,CACE,CAACtD,EAAc5J,KAAM4J,EAAcvjD,QAASujD,EAAcC,aAC1DvT,EACAiW,GAGFjW,EAAoB6V,EAAoB7V,GA4L5C,SACEpxB,EACA0kC,EACAtT,G,IAcIsT,EAA4BA,EAV1BA,EAIAA,EAHgBA,EACAA,EAGAA,EACAA,EAKFA,EACAA,EAbE,IAAlB1kC,EAAOnlB,UACa,QAAlB6pD,EAAAA,EAAcvjD,YAAdujD,IAAAA,OAAAA,EAAAA,EAAoB3qD,QACtBq3C,EAAoC,QAAlBsT,EAAAA,EAAcvjD,YAAdujD,IAAAA,OAAAA,EAAAA,EAAoB3qD,MAAMimB,QAAS,EACrDoxB,EAAoC,QAAlBsT,EAAAA,EAAcvjD,YAAdujD,IAAAA,OAAAA,EAAAA,EAAoB3qD,MAAM2lB,MAAQ,IAEhC,QAAlBglC,EAAAA,EAAc5J,YAAd4J,IAAAA,OAAAA,EAAAA,EAAoB3qD,QACtBq3C,EAAoC,QAAlBsT,EAAAA,EAAc5J,YAAd4J,IAAAA,OAAAA,EAAAA,EAAoB3qD,MAAMimB,QAAS,EACrDoxB,EAAoC,QAAlBsT,EAAAA,EAAc5J,YAAd4J,IAAAA,OAAAA,EAAAA,EAAoB3qD,MAAM2lB,MAAQ,KAIlC,QAAlBglC,EAAAA,EAAc5J,YAAd4J,IAAAA,OAAAA,EAAAA,EAAoB3qD,QAA0B,QAAlB2qD,EAAAA,EAAcvjD,YAAdujD,IAAAA,OAAAA,EAAAA,EAAoB3qD,QAClDq3C,EAAoC,QAAlBsT,EAAAA,EAAcvjD,YAAdujD,IAAAA,OAAAA,EAAAA,EAAoB3qD,MAAMoC,KAAO,aACnDi1C,EAAoC,QAAlBsT,EAAAA,EAAc5J,YAAd4J,IAAAA,OAAAA,EAAAA,EAAoB3qD,MAAMoC,KAAO,cAGjDuoD,EAAcC,YAAY9pD,QAC5B6pD,EAAcC,YAAY11C,SAASwU,I,IAChBA,GAAkB,QAAlBA,EAAAA,EAAMrI,OAAOwK,aAAbnC,IAAAA,OAAAA,EAAAA,EAAoB5oB,UAEnCu2C,EAAkB3tB,EAAM1pB,MAAMoC,KAAO,aACvC,GAGN,CApNI8rD,CAHej8C,OAAOtD,KAAK0oC,GAAmBl1C,QAAQpC,GAAQs3C,EAAkBt3C,GAAKkmB,SAGzD0kC,EAAetT,IAI3C,kBAACmR,UAAAA,CAAQlsD,UAAWJ,EAAOssD,SACzB,kBAAC5S,EAA0BA,CACzBI,qBAAsBt6C,EAAMs6C,qBAC5BF,UAAWA,EACXD,eAAgBwB,EAChBtB,cAAer6C,EAAMq6C,cACrBJ,kBAAmBj6C,EAAMi6C,kBACzBM,kBAAmBv6C,EAAMu6C,mBAEzB,kBAACqS,GAAKA,CACJxS,UAAWA,EACXyS,SAAUA,EACVhqD,OAAQouD,EAAcpuD,OAAS,GAC/BD,MAAOquD,EAAcruD,MAAQ,GAC7B+qB,OAAQA,K,EAOZykC,GAAY,CAACxjD,EAAe6jD,IACzBztD,KAAK0tD,KAAK,IAAO9jD,EAAS6jD,GAsC5B,SAASzC,GAA2BphD,GACzC,IAAI2yB,GAAYoxB,EAAAA,EAAAA,yBAAwB/jD,GAKxC,MAJgC,WAAd2yB,GAA0BwvB,GAAar/C,KAAK9C,KAE5D2yB,EAAY6jB,EAAAA,UAAUC,MAEjB9jB,CACT,CC7JO,MAAMqxB,GAAgB,EAC3B3tB,YACAoV,gBACArlB,aACA4uB,YACAC,eACAx2C,YACA+jD,YACAnX,oBACAK,uBACAC,wBAEA,IAAKtV,EACH,OAAO,KAGT,MAAMmV,GAAYyY,EAAAA,EAAAA,IAAe5tB,GACjC,OAAKmV,EAKH,kBAAC2J,GAAoBA,CAACH,UAAWA,EAAWC,aAAcA,EAAcx2C,UAAWA,EAAW+sC,UAAWA,GACvG,kBAAC4W,GAASA,CACRzW,kBAAmBA,EACnBF,cAAeA,EACfC,qBAAsBA,EACtBtlB,WAAYA,EACZo8B,UAAWA,EACXnX,kBAAmBA,KAXhB,I,+ECtBJ,MAAM6Y,WAAuB5pD,EAAAA,GAO3BiB,UAAAA,GACLC,KAAKC,SAAS,CACZ0nB,KAAM,IAAIf,GAAAA,GAAU,CAAEI,qBAAqB,KAE/C,CAVAxmB,WAAAA,CAAYpB,GACVqB,MAAMrB,GAENY,KAAKW,qBAAqBX,KAAKD,WAAWa,KAAKZ,MACjD,E,GAO0B,EAAGjB,YAC3B,MAAM3I,GAASC,EAAAA,EAAAA,YAAWC,IAEpBqyD,EAAc1pD,EAAAA,GAAWoD,YAAYtD,EAAO8uC,KAC5C,KAAE7oB,GAAS/lB,EAAAA,GAAWgmB,QAAQlmB,GAAOjF,YACrC,aAAE2/C,EAAY,WAAE7uB,EAAU,kBAAE6jB,EAAiB,kBAAEma,GAAsBD,EAAY7uD,YACjF,KAAE6tB,GAAS5oB,EAAMjF,WAGjBmJ,EAAYhE,EAAAA,GAAW8T,aAAahU,IAClCyF,MAAOqkD,GAAmB5lD,EAAUnJ,WAEtC+gC,GAAYwK,EAAAA,GAAAA,IAAkBrgB,GAS9BgiC,GAAY9gB,EAAAA,EAAAA,QAAuB,MAmBzC,OACE,kBAAC3vC,MAAAA,CAAIC,UAAWJ,EAAO+1B,aAAc8a,IAAK+f,GACxC,kBAAC8B,EAAAA,YAAWA,CACVC,aAAc/jC,aAAAA,EAAAA,EAAM5lB,MACpB/H,MAAO,OACPswB,KAAMA,EAAO,kBAACA,EAAKloB,UAAS,CAACV,MAAO4oB,SAAW3vB,EAC/CgxD,QAAS,kBAACla,GAAAA,EAAsBA,CAACC,QAASN,EAAmBzsB,SAAU2mC,EAAYM,wBAElFpuB,GACC,kBAAC2tB,GAAaA,CACZxB,UAAWA,EACXxN,UApCSn9C,IACjB,MAAMgb,GAAe6xC,EAAAA,GAAAA,IAAoBruB,EAAWx+B,EAAOpC,IAAK8E,IAChEytB,EAAAA,GAAAA,IAAenwB,EAAQssD,EAAatxC,EAAa,EAmCzCpU,UAAW4lD,EACXpP,aAAcA,EACd7uB,WAAYA,QAAAA,EAAc,GAC1BqlB,cA/BarlB,KAChBu+B,EAAAA,GAAAA,GAAuBv+B,EAAY+9B,EAAYvpD,MAAMwrB,aACxD+9B,EAAY1oD,SAAS,CAAE2qB,cACzB,EA6BQiQ,UAAWA,EACXgV,kBAvBgB,KACpB8Y,EAAYvpD,MAAMq6C,cACpBkP,EAAY9Y,mBACd,EAqBQK,qBA5BoBiB,IAC5BwX,EAAY1oD,SAAS,CAAE2oD,kBAAmBzX,GAAe,EA4BjDhB,kBAAmByY,K,MA3DjBnpD,e,GAZHipD,I,4FAgFb,MAAMpyD,GAAaoB,IAA0B,CAC3Cy0B,cAAcx0B,EAAAA,EAAAA,KAAI,CAChBa,MAAO,OACPC,OAAQ,OACRqI,MAAO,sBAIP,uBAAwB,CACtBsrB,QAAS,EACTxqB,WAAY,UACZ+e,WAAY,OACZ,UAAW,CACTA,WAAYjpB,EAAMgE,OAAOC,UAAU0wB,Y,wKCpEpC,MAAMwhB,WAAsB/uC,EAAAA,GAejC2Z,WAAAA,G,IACqB,EAAnB,MAAMmS,EAAkC,QAArB,EAAA5qB,KAAKZ,MAAMwrB,kBAAX,QAAyB,GACtC6uB,EAAez5C,KAAKZ,MAAMq6C,aAC1BhL,EAAoBzuC,KAAKZ,MAAMqvC,kB,IACb,IAAxB,MAAMlkB,EAAuE,QAArD,EAA0B,QAA1B,EAAAvqB,KAAKZ,MAAMmrB,uBAAX,SAA8BC,EAAAA,GAAAA,IAAmBxqB,aAAjD,QAA0D,GAClF,MAAO,CACL4qB,WAAYnmB,KAAKC,UAAUkmB,GAC3B6uB,aAAch1C,KAAKC,UAAU+0C,GAC7BhL,kBAAmBhqC,KAAKC,UAAU+pC,GAClClkB,gBAAiB9lB,KAAKC,UAAU6lB,GAChCq+B,kBAAmBnkD,KAAKC,UAAU1E,KAAKZ,MAAMwpD,mBAEjD,CAEAlwC,aAAAA,CAAchV,GACZ,MAAM0N,EAA2C,CAAC,EAClD,IACE,GAAiC,iBAAtB1N,EAAOknB,WAAyB,CACzC,MAAMw+B,GAA8Bv+B,EAAAA,EAAAA,IAAiBpmB,KAAKsM,MAAMrN,EAAOknB,aACnEw+B,IAAsBppD,KAAKZ,MAAMwrB,aACnCxZ,EAAYwZ,WAAaw+B,EAE7B,CACA,GAAmC,iBAAxB1lD,EAAO+1C,aAA2B,CAC3C,MAAM4P,GAAkBC,EAAAA,EAAAA,IAAuB7kD,KAAKsM,MAAMrN,EAAO+1C,eACjE,GAAI4P,EAAiB,CACnB,MAAME,EAA4CF,EAC9CE,IAA4BvpD,KAAKZ,MAAMq6C,eACzCroC,EAAYqoC,aAAe8P,EAE/B,CACF,CACA,GAAwC,iBAA7B7lD,EAAO+qC,kBAAgC,CAChD,MAAM+a,GAA2BC,EAAAA,EAAAA,IAA4BhlD,KAAKsM,MAAMrN,EAAO+qC,oBAC3E+a,GAA4BA,IAA6BxpD,KAAKZ,MAAMqvC,oBACtEr9B,EAAYq9B,kBAAoB+a,EAEpC,CACA,GAAsC,iBAA3B9lD,EAAO6mB,gBAA8B,CAC9C,MAAMA,GAAkBM,EAAAA,EAAAA,IAAiBpmB,KAAKsM,MAAMrN,EAAO6mB,kBACvDA,GAAmBA,EAAgBvvB,SACrCoW,EAAYmZ,gBAAkBA,EAElC,CACA,GAAwC,iBAA7B7mB,EAAOklD,kBAAgC,CAChD,MAAMA,EAAoBnkD,KAAKsM,MAAMrN,EAAOklD,mBACxCA,IAAsB3Z,EAAa1rB,QAAUqlC,IAAsB3Z,EAAar2C,OAClFwY,EAAYw3C,kBAAoBA,EAEpC,CACF,CAAE,MAAO/jD,GAEPrC,EAAAA,EAAOe,MAAMsB,EAAG,CAAEC,IAAK,iDACzB,CAEIqH,OAAOtD,KAAKuI,GAAapW,QAC3BgF,KAAKC,SAASmR,EAElB,CAEAy+B,iBAAAA,GACE7vC,KAAKC,SAAS,CACZw5C,kBAAczhD,GAElB,CASO+H,UAAAA,GACL,MAAM2pD,EAAe,IAAIvxC,gBAAgB9D,EAAAA,gBAAgB6D,cAAcE,QACvEpY,KAAK2pD,gBAAgBD,GAEhB1pD,KAAKZ,MAAM+wB,OACdnwB,KAAK4pD,kBAGP5pD,KAAK2S,MAAMC,IACT5S,KAAK6S,kBAAiB,CAACC,EAAU6C,KAC3B7C,EAAS27B,oBAAsB94B,EAAU84B,mBAC3CzuC,KAAK4pD,iBACP,IAGN,CAEQD,eAAAA,CAAgBD,GACtB,MAAMG,EAAkBH,EAAatmD,IAAI,gBACnC0mD,EAAgBJ,EAAatmD,IAAI,cACjC2mD,EAAaL,EAAatmD,IAAI,qB,IACTsmD,EAA3B,MAAMM,EAAsC,QAAjBN,EAAAA,EAAatmD,IAAI,0BAAjBsmD,IAAAA,EAAAA,EAAuCjlD,KAAKC,WAAU8lB,EAAAA,GAAAA,IAAmBxqB,OAC9F4oD,EAAoBc,EAAatmD,IAAI,qBAE3CpD,KAAK0Y,cAAc,CACjB+gC,aAAcoQ,EACdj/B,WAAYk/B,EACZ/a,QAASgb,EACTx/B,gBAAiBy/B,EACjBpB,qBAEJ,CA8CQqB,WAAAA,GAGN,OAFAjqD,KAAKkqD,eAAiB,IAAIpc,GAAAA,EAAe,CAAC,GAEnC,IAAIlrC,EAAAA,GAAgB,CACzBiN,UAAW,SACX7W,SACmC,SAAjCgH,KAAKZ,MAAMqvC,kBACP,CACE,IAAI7rC,EAAAA,GAAgB,CAClB5J,SAAU,CACR,IAAImiB,EAAAA,GAAc,CAChB7Z,KAAM,IAAI0qC,GAAAA,EAAgB,CAAEtuB,WAAY1d,KAAKZ,MAAMse,aACnDysC,QAAS,YAIf,IAAIhvC,EAAAA,GAAc,CAChB1iB,OAAQ,sBACR6I,KAAMtB,KAAKkqD,kBAGf,CACE,IAAI/uC,EAAAA,GAAc,CAChB7Z,KAAM,IAAI0qC,GAAAA,EAAgB,CAAEtuB,WAAY1d,KAAKZ,MAAMse,aACnDysC,QAAS,SAEX,IAAIhvC,EAAAA,GAAc,CAChB1iB,OAAQ,sBACR6I,KAAM,IAAIonD,GAAe,CAAC,OAIxC,CAhMAloD,WAAAA,CAAYpB,G,QACVqB,O,yUAAM,IACDrB,G,WAAAA,CACHqvC,mBAAmB/jB,EAAAA,GAAAA,MACnBH,gBAAiB,K,gVARrB,QAAUzO,WAAW,IAAIC,EAAAA,GAAyB/b,KAAM,CACtD6I,KAAM,CAAC,aAAc,eAAgB,oBAAqB,kBAAmB,wBAE/E,QAAQqhD,sBAAkClyD,GA6E1C+1C,GAAAA,KAAAA,wBAAuB,KACrB/tC,KAAKC,SAAS,CAAEsqB,gBAAiB,KAC7BvqB,KAAKkqD,gBACPlqD,KAAKkqD,eAAenc,sBACtB,IAoCF,QAAON,oBAAmB,CAAC7pC,EAA4B,CAAC,KAClD5D,KAAKkqD,gBACPlqD,KAAKkqD,eAAezc,iBAAiB7pC,EACvC,IAGF,QAAOgmD,mBAAkB,KAMvB,GALA5pD,KAAKC,SAAS,CACZkwB,MAAOnwB,KAAKiqD,gBAIVjqD,KAAKZ,MAAM+wB,MAAO,CACpB,MAAMi6B,EAAmBnrD,EAAAA,GAAW0vB,gBAAgB3uB,KAAKZ,MAAM+wB,MAAO6b,GAAAA,GACtE,GAAIoe,EAAiBpvD,OAAQ,CAC3B,MAAMqvD,EAAkBD,EAAiB,GACzCpqD,KAAK2S,MAAMC,IACTy3C,EAAgBx3C,kBAAiB,CAACC,EAAU6C,KACtC7C,EAAS4K,aAAe/H,EAAU+H,YACpC1d,KAAKC,SAAS,CACZyd,WAAY5K,EAAS4K,YAEzB,IAGN,CACF,KAGF,QAAOurC,wBAAwB3sD,IAC7B0D,KAAKC,SAAS,CACZwuC,kBAAmBnyC,KAGrBI,EAAAA,GAAAA,IACEC,GAAAA,GAAkBC,gBAClBC,GAAAA,GAAoBD,gBAAgB0tD,0BACpC,CACE7/B,kBAAmBnuB,KAGvBiuD,EAAAA,GAAAA,IAAyBjuD,EAAK,IAtJ9B0D,KAAKW,qBAAqBX,KAAKD,WAAWa,KAAKZ,MACjD,EA0LA,GAvMW6tC,GAuMGpuC,aAAY,EAAGV,YAC3B,MAAM,MAAEoxB,GAAUpxB,EAAMjF,WAExB,GAAKq2B,EAIL,OACE,kBAAC55B,MAAAA,CAAIC,UAAWJ,GAAO+1B,cACrB,kBAACgE,EAAM1wB,UAAS,CAACV,MAAOoxB,I,IAMhC,MAAM/5B,GAAS,CACb+1B,cAAcx0B,EAAAA,EAAAA,KAAI,CAEhB,yCAAyCA,EAAAA,EAAAA,KAAI,CAE3C6yD,QAAS,OAETlvD,SAAU,W,qKChQT,MAAMmvD,EAAiB,EAAGzzD,cAC/B,MAAO0zD,EAAQC,IAAa7wD,EAAAA,EAAAA,WAAS,IAErCw3C,EAAAA,EAAAA,YAAU,KACR,IAAIsZ,EAQJ,OANIF,IACFE,EAAY39C,YAAW,KACrB09C,GAAU,EAAM,GACf,MAGE,KACL39C,aAAa49C,EAAU,CACxB,GACA,CAACF,IAEJ,MAAMG,GAAcja,EAAAA,EAAAA,cAClB,CAAChpC,EAAgCq0C,KAC/BjlD,EAAQ4Q,EAAOq0C,GACf0O,GAAU,EAAK,GAEjB,CAAC3zD,IAGH,OACE,kBAACsoB,EAAAA,WAAUA,CACTjlB,aAAYqwD,EAAS,SAAW,wBAChCtkC,QAASskC,EAAS,SAAW,wBAC7BtO,iBAAiB,MACjBzlD,QAAS+zD,EAAS,UAAY,YAC9B7zD,KAAK,KACLqD,KAAMwwD,EAAS,QAAU,YACzB1zD,QAAS6zD,G,+4BCKR,MAAM/c,UAAuBhvC,EAAAA,GAe1B6qD,eAAAA,GACN,MAAMD,EAAe,IAAIvxC,gBAAgB9D,EAAAA,gBAAgB6D,cAAcE,QAEvEpY,KAAK0Y,cAAc,CACjBk1B,UAAW8b,EAAatmD,IAAI,aAC5BkqC,eAAgBoc,EAAatmD,IAAI,mBAErC,CAEAqV,WAAAA,GACE,MAAO,CACLm1B,UAAWnpC,KAAKC,UAAU1E,KAAKZ,MAAMwuC,WACrCN,eAAgB7oC,KAAKC,UAAU1E,KAAKZ,MAAMkuC,gBAE9C,CAEA50B,aAAAA,CAAchV,GACZ,MAAM0N,EAA4C,CAAC,EACnD,IACE,GAAgC,iBAArB1N,EAAOkqC,WAA0BlqC,EAAOkqC,UAAW,CAC5D,MAAMU,GAAmBC,EAAAA,EAAAA,IAAoB9pC,KAAKsM,MAAMrN,EAAOkqC,YAC3DU,IACFl9B,EAAYw8B,UAAYU,EACxBtuC,KAAKytC,iBAAiB,CAAEG,UAAWU,IAEvC,CAEA,GAAqC,iBAA1B5qC,EAAO4pC,gBAA+B5pC,EAAO4pC,eAAgB,CACtE,MAAMwd,EAAwBrmD,KAAKsM,MAAMrN,EAAO4pC,gBACX,kBAA1Bwd,IACT15C,EAAYk8B,eAAiBwd,EAC7B9qD,KAAKytC,iBAAiB,CAAEH,eAAgBwd,IACxC9qD,KAAKytC,iBAAiB,CAAEC,mBAAoBod,IAEhD,CACF,CAAE,MAAOjmD,GAEPrC,EAAAA,EAAOe,MAAMsB,EAAG,CAAEC,IAAK,mDACzB,CAEIqH,OAAOtD,KAAKuI,GAAapW,QAC3BgF,KAAKC,SAAS,KAAKmR,GAEvB,CAEOrR,UAAAA,GAELC,KAAK2pD,kBAEA3pD,KAAKZ,MAAMkC,MACdtB,KAAKC,SAAS,CACZqB,KAAMtB,KAAK+qD,aAAa,CACtBzd,eAAgBttC,KAAKZ,MAAMkuC,eAC3BI,mBAAoB1tC,KAAKZ,MAAMkuC,eAC/BM,UAAW5tC,KAAKZ,MAAMwuC,cAK5B,MAAM3V,EAAeh5B,EAAAA,GAAWoD,YAAYrC,KAAMiS,EAAAA,IAClDjS,KAAK2S,MAAMC,IACTqlB,EAAaplB,kBAAiB,CAACC,EAAU6C,KACnC7C,EAASk4C,YAAcr1C,EAAUq1C,YAC9BhrD,KAAKZ,MAAMkC,KASdtB,KAAKZ,MAAMkC,KAAKrB,SAAS,CACvB5I,MAAO2I,KAAKirD,SAASn4C,EAASk4C,aAThChrD,KAAKC,SAAS,CACZqB,KAAMtB,KAAK+qD,aAAa,CACtBzd,eAAgBttC,KAAKZ,MAAMkuC,eAC3BI,mBAAoB1tC,KAAKZ,MAAMkuC,eAC/BM,UAAW5tC,KAAKZ,MAAMwuC,cAQ9B,IAGN,CAwCAH,gBAAAA,CAAiB7pC,EAA4B,CAAC,GAC5C,GAAK5D,KAAKZ,MAAMkC,KAAhB,CAGA,GAAI,cAAesC,GAAWA,EAAQgqC,YAAc5tC,KAAKZ,MAAMkC,KAAKlC,MAAMwE,QAAQgqC,UAAW,CAC3F,MAAMvlB,EAAQppB,EAAAA,GAAWgmB,QAAQjlB,MAC3BklB,EACJmD,aAAiBjD,EAAAA,GAAmBiD,EAAQppB,EAAAA,GAAW0vB,gBAAgBtG,EAAOjD,EAAAA,IAAkB,GAC9FF,GACFA,EAAYgmC,YAEhB,CACAlrD,KAAKZ,MAAMkC,KAAK+O,gBAAgBzM,EAThC,CAUF,CAYQunD,cAAAA,GACN,OAAOlsD,EAAAA,GAAWoD,YAAYrC,KAAM6tC,EAAAA,EACtC,CAEQod,QAAAA,CAASD,G,IAGsDI,EAFrE,MAAMC,GAAiBC,EAAAA,EAAAA,gBAAe,SAChCF,OAA+BpzD,IAAdgzD,EAA0BK,EAAeL,EAAW,QAAKhzD,EAChF,YAA0BA,IAAnBozD,EAA+B,SAASA,EAAexyD,OAA4B,QAArBwyD,EAAAA,EAAehrB,cAAfgrB,IAAAA,OAAAA,EAAAA,EAAuBG,UAAY,MAC1G,CAEQR,YAAAA,CAAannD,GACnB,MAAM+kD,EAAc3oD,KAAKmrD,iBACnB1c,EAAoBka,EAAYvpD,MAAMqvC,kBACtCxW,EAAeh5B,EAAAA,GAAWoD,YAAYrC,KAAMiS,EAAAA,I,IAatBrO,EACKA,EAG3BA,EAhBN,OACE2kB,EAAAA,GAAcpF,OACX0F,SAAS7oB,KAAKirD,SAAShzB,EAAa74B,MAAM4rD,YAC1CQ,UAAU,YAAY,GACtBA,UAAU,qBAAsBxrD,KAAKyrD,wBACrCD,UAAU,wBAAyBxrD,KAAK0rD,2BACxCF,UAAU,sBAAuBxrD,KAAK2rD,2BACtCH,UAAU,sBAAuBxrD,KAAK4rD,yBACtCJ,UAAU,yBAA0BxrD,KAAK6rD,4BACzCL,UAAU,mBAAoBxrD,KAAK8rD,kBACnCN,UAAU,mBAAoBxrD,KAAK+rD,kBACnCP,UAAU,kBAAmB7C,EAAYvpD,MAAMmrB,iBAC/CihC,UAAU,YAA8B,QAAjB5nD,EAAAA,EAAQgqC,iBAARhqC,IAAAA,EAAAA,GAAqBqqC,EAAAA,EAAAA,OAC5Cud,UAAU,iBAAwC,QAAtB5nD,EAAAA,EAAQ0pC,sBAAR1pC,IAAAA,EAAAA,EAA0B0K,SAAQ4/B,EAAAA,EAAAA,IAAsB,kBAAkB,KACtGsd,UACC,qBAC0B,QAA1B5nD,EAAAA,EAAQ8pC,0BAAR9pC,IAAAA,EAAAA,EAA8B0K,SAAQ4/B,EAAAA,EAAAA,IAAsB,kBAAkB,KAE/EtlB,QAAQ,IAAIhC,EAAAA,GAAU,CAAEI,qBAAqB,KAC7CwkC,UAAU,wBAAwB,GAElCA,UAAU,2BAA2B,GAErCA,UAAU,oBAAqBxrD,KAAKgsD,oBAEpCR,UAAU,uBAAwB,CAAC,kBAACf,EAAcA,CAACzzD,QAASgJ,KAAKisD,wBAAyBhyD,IAAK,MAE/F6uB,iBACC,IAAIqkB,EAAAA,GAAgB,CAAEsB,oBAAmBD,0BAA2Bma,EAAYM,wBAEjFjgC,OAEP,CAoIQkjC,iBAAAA,CAAkBjyD,EAAauK,EAAe6gB,EAA8BhgB,GAClF,MAAMgS,GAAe6xC,EAAAA,EAAAA,IAAoB7jC,EAAOprB,EAAK+F,OAErDysB,EAAAA,EAAAA,IAAaxyB,EAAKuK,EAAOa,EAAUrF,KAAMqX,IAEzC3a,EAAAA,EAAAA,IACEC,EAAAA,GAAkBC,gBAClBC,EAAAA,GAAoBD,gBAAgBuvD,2BACpC,CACEp+B,WAAY1W,EACZpd,MACAqO,OAAQjD,GAGd,CA1VA7E,WAAAA,CAAYpB,GACVqB,MAAM,GACJmtC,WAAWK,EAAAA,EAAAA,MACXX,eAAgBh/B,SAAQ4/B,EAAAA,EAAAA,IAAsB,kBAAkB,KAC7D9uC,IARP,OAAU0c,WAAW,IAAIC,EAAAA,GAAyB/b,KAAM,CACtD6I,KAAM,CAAC,YAAa,qBA8FtBijD,EAAAA,KAAAA,oBAAoBloC,IAClB,MAAM/gB,EAAS7C,KAAKmrD,iBAGpB,IAAe,IAFDtoD,EAAOzD,MAAMmrB,gBAAgBpc,QAAQyV,IAE/B5jB,KAAKZ,MAAMkC,KAAM,CACnC,MAAMipB,EAAkB,IAAI1nB,EAAOzD,MAAMmrB,gBAAiB3G,GAC1D5jB,KAAKytC,iBAAiB,CACpBljB,oBAEF1nB,EAAO5C,SAAS,CAAEsqB,qBAClB6hC,EAAAA,EAAAA,IAAmBpsD,KAAM6C,EAAOzD,MAAMmrB,kBAEtC7tB,EAAAA,EAAAA,IACEC,EAAAA,GAAkBC,gBAClBC,EAAAA,GAAoBD,gBAAgByvD,4BAExC,KAGFN,EAAAA,KAAAA,oBAAoBnoC,IAClB,MAAM/gB,EAAS7C,KAAKmrD,iBAGpB,GAFctoD,EAAOzD,MAAMmrB,gBAAgBpc,QAAQyV,IAEtC,GAAK5jB,KAAKZ,MAAMkC,KAAM,CACjC,MAAMipB,EAAkB1nB,EAAOzD,MAAMmrB,gBAAgBluB,QAAQiwD,GAAmB1oC,IAAU0oC,IAC1FtsD,KAAKytC,iBAAiB,CACpBljB,oBAEF1nB,EAAO5C,SAAS,CAAEsqB,qBAClB6hC,EAAAA,EAAAA,IAAmBpsD,KAAM6C,EAAOzD,MAAMmrB,kBAEtC7tB,EAAAA,EAAAA,IACEC,EAAAA,GAAkBC,gBAClBC,EAAAA,GAAoBD,gBAAgByvD,4BAExC,KAkBFte,EAAAA,KAAAA,wBAAuB,KAChB/tC,KAAKZ,MAAMkC,OAGhBtB,KAAKytC,iBAAiB,CACpBljB,gBAAiB,MAEnB6hC,EAAAA,EAAAA,IAAmBpsD,KAAM,IAAG,IAmD9B,OAAQgsD,sBAAsBO,I,IAOxBt0B,EAAAA,EALJ,MAAMA,EAAeh5B,EAAAA,GAAWoD,YAAYrC,KAAMiS,EAAAA,IAClDgmB,EAAah4B,SAAS,CACpB+qD,UAAWuB,EAAQ,GAAGvxD,UAGI,QAAxBi9B,EAAAA,EAAa74B,MAAMipB,aAAnB4P,IAAAA,GAAoC,QAApCA,EAAAA,EAA0B74B,MAAM4lB,YAAhCiT,IAAAA,OAAAA,EAAAA,EAAsCzI,SAExCyI,EAAa74B,MAAMipB,MAAMpoB,SAAS,OAC7Bg4B,EAAa74B,MAAMipB,MAAMjpB,OAAK,CACjC4lB,KAAM,OACDiT,EAAa74B,MAAMipB,MAAMjpB,MAAM4lB,MAAI,CACtCwK,OAAQ+8B,OAKUttD,EAAAA,GAAWsS,iBAAiBvR,KAAMwsD,EAAAA,EAAoBC,EAAAA,GAC9DT,mBAAmBO,EAAQ,IAG7C,OAAQN,2BAA0B,CAACrkD,EAAgCq0C,KACjE,IAAIA,aAAAA,EAAAA,EAAKyQ,QAAS1sD,KAAKZ,MAAMkC,KAAM,CACjC,MAAMuB,EAAS7C,KAAKmrD,iBACdloD,GAAY0pD,EAAAA,EAAAA,IAA8B1Q,IAChD2Q,EAAAA,EAAAA,KACE5Q,EAAAA,EAAAA,IACE,aACA,CACE74B,KAAM,CAAE0C,GAAIo2B,EAAIv2B,IAAK6E,gBAAiB1nB,EAAOzD,MAAMmrB,kBAErDtnB,GAGN,KAGF,OAAQwoD,0BAAyB,CAACxxD,EAAauK,EAAe6gB,KAC5DrlB,KAAKksD,kBAAkBjyD,EAAKuK,EAAO6gB,EAAO,SAAS,IAGrD,OAAQqmC,6BAA4B,CAACzxD,EAAauK,EAAe6gB,KAC/DrlB,KAAKksD,kBAAkBjyD,EAAKuK,EAAO6gB,EAAO,UAAU,IAGtD,OAAQsmC,6BAA4B,CAAC1xD,EAAauK,KAChD,MAAM+e,GAASqJ,EAAAA,EAAAA,IAAwB1T,EAAAA,GAAYlZ,MAC7CwjB,GAASoJ,EAAAA,EAAAA,IAAwBzoB,EAAAA,GAAYnE,MAC7C6sD,GAASjgC,EAAAA,EAAAA,IAAwBla,EAAAA,GAAY1S,MAC7C8sD,GAAWlgC,EAAAA,EAAAA,IAAwBxV,EAAAA,GAAcpX,MAEjD+sD,EAAqB1wD,GAEvBA,GACAA,EAAO+C,MAAMsC,QAAQm+B,WAClBxjC,GAA+B,MAApBA,EAAOgJ,UAAoBhJ,EAAOpC,MAAQA,GAAOoC,EAAOmI,QAAUA,KAC3E,EAiBT,OACEuoD,EAAkBxpC,IAbW,CAAClnB,IAC9B,GAAIA,EAAQ,CACV,MAAM2wD,EAAc3wD,EAAO+C,MAAMsC,QAAQge,MAAMrjB,GAA+B,MAApBA,EAAOgJ,UAAoBhJ,EAAOpC,MAAQA,IAEpG,GAAI+yD,EAEF,OADmB3oD,EAAAA,EAAAA,IAAyB2oD,EAAa/yD,GACvCuK,QAAUA,CAEhC,CACA,OAAO,CAAK,EAKZyoD,CAAuBzpC,IACvBupC,EAAkBF,IAClBE,EAAkBD,EAAS,IAI/B,OAAQjB,8BAA8BrnD,IACpC,MAAM0oD,GAAiB9uC,EAAAA,EAAAA,IAAuBpe,MAC1CktD,IACFA,EAAejtD,SAAS,CACtByB,QAAS,IACJwrD,EAAe9tD,MAAMsC,QACxB,CACE2D,SAAUwX,EAAAA,EAAaE,cACvBvY,QACAvK,IAAK+jB,EAAAA,EAAwBD,cAC7BO,SAAU4uC,EAAe9tD,MAAMsC,QAAQ1G,OAAO8K,gBAIpDpJ,EAAAA,EAAAA,IACEC,EAAAA,GAAkBC,gBAClBC,EAAAA,GAAoBD,gBAAgBuwD,yBACpC,CACEC,gBAAiB5oD,EAAMxJ,SAG7B,IAGF,OAAQ4wD,2BAA2BpnD,IACjC,MAAM0oD,GAAiB9uC,EAAAA,EAAAA,IAAuBpe,MAC1CktD,IACFA,EAAejtD,SAAS,CACtByB,QAAS,IACJwrD,EAAe9tD,MAAMsC,QACxB,CACE2D,SAAUwX,EAAAA,EAAaC,MACvBtY,QACAvK,IAAK+jB,EAAAA,EAAwBD,cAC7BO,SAAU4uC,EAAe9tD,MAAMsC,QAAQ1G,OAAO8K,gBAIpDpJ,EAAAA,EAAAA,IACEC,EAAAA,GAAkBC,gBAClBC,EAAAA,GAAoBD,gBAAgBuwD,yBACpC,CACEC,gBAAiB5oD,EAAMxJ,SAG7B,IAlUAgF,KAAKW,qBAAqBX,KAAKD,WAAWa,KAAKZ,MACjD,EAoVA,EAjWW8tC,EAiWGruC,aAAY,EAAGV,YAC3B,MAAM,KAAEuC,GAASvC,EAAMjF,WACjB1D,GAASC,EAAAA,EAAAA,YAAW61B,EAAAA,IAC1B,OAAI5qB,EAEA,kBAAC+d,OAAAA,CAAK7oB,UAAWJ,EAAO+1B,cACtB,kBAAC7qB,EAAK7B,UAAS,CAACV,MAAOuC,KAItB,kBAACib,EAAAA,mBAAkBA,CAAC3jB,KAAM,c,oJCnY9B,SAASy0D,EAAkBrqD,EAAuBsqD,EAA4BC,GAAe,GAClG,MAAMx2C,GAAiBxE,EAAAA,EAAAA,IAAkBvP,GAEzC,IAAIwqD,EAA0B,GAC1BD,GAEED,IAAuB3/B,EAAAA,KACzB6/B,EAA0B,KAAK7/B,EAAAA,YAInC,MAAM8/B,EAAe12C,EAAe3X,MAAMsC,QACpCiD,GAAS+oD,EAAAA,EAAAA,IAA2B32C,GAG1C,GAAI02C,EAAazyD,OAAQ,CACvB,GAAe,UAAX2J,EACF,MAAO,wBAAwBgpD,EAAAA,OAAoBH,KAA2BI,EAAAA,MAAqBC,EAAAA,MAAqBC,EAAAA,MAAyB9yC,EAAAA,MAAqB+yC,EAAAA,sBAAmCT,KAE3M,GAAe,SAAX3oD,EACF,MAAO,wBAAwBgpD,EAAAA,OAAoBH,KAA2BI,EAAAA,MAAqBC,EAAAA,MAAqBC,EAAAA,MAAyBE,EAAAA,MAAoBD,EAAAA,sBAAmCT,KAE1M,GAAe,WAAX3oD,EACF,MAAO,wBAAwBgpD,EAAAA,OAAoBH,KAA2BI,EAAAA,MAAqBC,EAAAA,MAAqBC,EAAAA,MAAyBG,EAAAA,MAAoBF,EAAAA,sBAAmCT,IAE5M,CACA,MAAO,wBAAwBK,EAAAA,OAAoBH,KAA2BI,EAAAA,MAAqBC,EAAAA,MAAqBC,EAAAA,MAAyBC,EAAAA,sBAAmCT,IACtL,C,i4BClBO,MAAMd,EAAqB,oBAC3B,MAAMC,UAAwB3tD,EAAAA,GAW3BiB,UAAAA,GACN,IAAKC,KAAKZ,MAAM+wB,MAAO,CACrB,MAAMA,EAAQnwB,KAAKiqD,cACnBjqD,KAAKC,SAAS,CACZkwB,UAEFnwB,KAAKkuD,sBAAsB/9B,EAC7B,CAEA,MAAM5M,GAASlO,EAAAA,EAAAA,IAAkBrV,MAC3BwjB,GAASjR,EAAAA,EAAAA,IAAkBvS,MAEjCujB,EAAO1Q,kBAAiB,CAACC,EAAU6C,MAC5BgmB,EAAAA,EAAAA,GAAe7oB,EAASpR,QAASiU,EAAUjU,UAC9C1B,KAAKC,SAAS,CACZkwB,MAAOnwB,KAAKiqD,eAEhB,IAGFzmC,EAAO3Q,kBAAiB,CAACC,EAAU6C,MAC5BgmB,EAAAA,EAAAA,GAAe7oB,EAASpR,QAASiU,EAAUjU,UAC9C1B,KAAKC,SAAS,CACZkwB,MAAOnwB,KAAKiqD,eAEhB,GAEJ,CAEQgB,QAAAA,CAASkD,EAAoCnD,G,IAElC5oD,EAW6BgsD,EAX7BhsD,EAAjB,MAAMisD,EAAwC,QAA7BjsD,EAAmB,QAAnBA,EADEnD,EAAAA,GAAWoD,YAAYrC,KAAMsC,EAAAA,IACpBlD,MAAMkd,UAAjBla,IAAAA,OAAAA,EAAAA,EAAqBisD,gBAArBjsD,IAAAA,EAAAA,EAAiCksD,EAAAA,GAC5CjD,GAAiBC,EAAAA,EAAAA,gBAAe,SAChC8C,OAAyCp2D,IAAnBm2D,EAA+B9C,EAAe8C,EAAgB,QAAKn2D,EAE/F,QAAuBA,IAAnBm2D,QAA8Cn2D,IAAdgzD,GAA2BA,EAAYqD,EAAU,C,IAG1CjD,EAFzC,MAAMA,EAAiBC,EAAeL,EAAW,GACjD,YAA0BhzD,IAAnBozD,EACH,eAAeA,EAAexyD,OAA4B,QAArBwyD,EAAAA,EAAehrB,cAAfgrB,IAAAA,OAAAA,EAAAA,EAAuBG,UAC5D,YACN,CACA,YAA+BvzD,IAAxBo2D,EACH,eAAeA,EAAoBx1D,OAAiC,QAA1Bw1D,EAAAA,EAAoBhuB,cAApBguB,IAAAA,OAAAA,EAAAA,EAA4B7C,UACtE,YACN,CAEQtB,WAAAA,G,IAoCJ95B,EAcA8H,EAjDF,MAAMA,EAAeh5B,EAAAA,GAAWoD,YAAYrC,KAAMiS,EAAAA,IAC5CmV,EAAMmB,EAAAA,GAAcC,aACvBK,SAAS7oB,KAAKirD,SAAShzB,EAAa74B,MAAM+uD,eAAgBl2B,EAAa74B,MAAM4rD,YAC7EQ,UAAU,SAAU,CAAEp7C,YAAY,EAAMm+C,MAAO,CAAC,OAAQC,YAAaC,EAAAA,kBAAkBC,OACvFC,QAAQ,SACR/lC,QAAQ,IAAIhC,EAAAA,GAAU,CAAC,IACvBkZ,gBAAe,GACfC,aAAazxB,SAAQsgD,EAAAA,EAAAA,IAAoB,eAGzC7lC,SACC2L,EAAAA,EAAAA,IAAe,EACbD,EAAAA,EAAAA,GAAe44B,EAAkBrtD,KAAM2tB,EAAAA,IAAsB,GAAQ,CACnEnI,aAAc,KAAKmI,EAAAA,aAK3BkhC,EAAAA,EAAAA,IAA0BznC,GAE1B,MAAM+I,EAAQ/I,EAAI4B,QAoDlB,OAnDAmH,EAAMlwB,SAAS,CACb6uD,mBAAoB,CAAChoD,EAAGge,IAAY9kB,KAAK+uD,0BAA0BjqC,KAGrE9kB,KAAK2S,MAAMC,IACTud,EAAMtd,kBAAiB,CAACC,EAAU6C,KAC5B7C,EAAS8U,YAAcjS,EAAUiS,YACnC5nB,KAAKkuD,sBAAsB/9B,IAC3B6+B,EAAAA,EAAAA,IAAoB,YAAal8C,EAAS8U,UAAY,YAAS5vB,GACjE,KAIJgI,KAAK2S,MAAMC,IACQ,QAAjBud,EAAAA,EAAM/wB,MAAMipB,aAAZ8H,IAAAA,OAAAA,EAAAA,EAAmBtd,kBAAkBC,I,IAC/BA,EAGAmlB,EAAAA,EAAsEnlB,EAChDmlB,EAAAA,GAJT,QAAbnlB,EAAAA,EAASkS,YAATlS,IAAAA,OAAAA,EAAAA,EAAe1T,SAAUmyB,EAAAA,aAAaC,QAGd,QAAxByG,EAAAA,EAAa74B,MAAMipB,aAAnB4P,IAAAA,GAAoC,QAApCA,EAAAA,EAA0B74B,MAAM4lB,YAAhCiT,IAAAA,OAAAA,EAAAA,EAAsC74B,SAAUmyB,EAAAA,aAAaC,OAAkC,QAAzB1e,EAAAA,EAASkS,KAAKiqC,mBAAdn8C,IAAAA,OAAAA,EAAAA,EAA2B9X,QAGnGgF,KAAKkvD,sBAFLlvD,KAAKgsD,mBAA2C,QAAxB/zB,EAAAA,EAAa74B,MAAMipB,aAAnB4P,IAAAA,GAAoC,QAApCA,EAAAA,EAA0B74B,MAAM4lB,YAAhCiT,IAAAA,OAAAA,EAAAA,EAAsCzI,SAIhE2/B,EAAAA,EAAAA,IAA2Bh/B,EAAOrd,EAASkS,KAAKwK,OAAQxvB,MAAK,KAIjEA,KAAK2S,MAAMC,IACe,QAAxBqlB,EAAAA,EAAa74B,MAAMipB,aAAnB4P,IAAAA,OAAAA,EAAAA,EAA0BplB,kBAAkBC,I,IACtCA,GAAa,QAAbA,EAAAA,EAASkS,YAATlS,IAAAA,OAAAA,EAAAA,EAAe1T,SAAUmyB,EAAAA,aAAaC,MACxCxxB,KAAKgsD,mBAAmBl5C,EAASkS,KAAKwK,OACxC,KAIJxvB,KAAK2S,MAAMC,IACTqlB,EAAaplB,kBAAiB,CAACC,EAAU6C,KACnC7C,EAASq7C,iBAAmBx4C,EAAUw4C,qBAAyCn2D,IAAvB8a,EAASk4C,YAC9DhrD,KAAKZ,MAAM+wB,MAKdnwB,KAAKZ,MAAM+wB,MAAMlwB,SAAS,CACxB5I,MAAO2I,KAAKirD,SAASn4C,EAASq7C,eAAgBr7C,EAASk4C,aALzDhrD,KAAKC,SAAS,CACZkwB,MAAOnwB,KAAKiqD,gBAOlB,KAIG95B,CACT,CAEO+9B,qBAAAA,CAAsB/9B,GAC3B,MAAMi/B,EAAkBnwD,EAAAA,GAAWoD,YAAY8tB,EAAOvtB,EAAAA,IAChDnK,EAAS03B,EAAM/wB,MAAMwoB,UAAY,GAAKhtB,KAAKkR,IAAIlR,KAAKC,MAA2B,GAArBC,OAAOu0D,aAAoB,KAC3FD,EAAgBnvD,SAAS,CACvBmB,UAAW3I,EACXA,OAAQA,EACRynC,UAAWznC,GAEf,CAEOuzD,kBAAAA,CAAmBhnC,EAAoB,IAC5ChlB,KAAKsvD,iBAAmBtqC,EACxBhlB,KAAKkvD,qBACP,CAEQA,mBAAAA,G,IAIH/+B,EACDA,EAJF,MAAMA,EAAQnwB,KAAKZ,MAAM+wB,MACzB,IACGA,KACiB,QAAjBA,EAAAA,EAAM/wB,MAAMipB,aAAZ8H,IAAAA,OAAAA,EAAAA,EAAmB/wB,MAAM4lB,QACT,QAAjBmL,EAAAA,EAAM/wB,MAAMipB,aAAZ8H,IAAAA,OAAAA,EAAAA,EAAmB/wB,MAAM4lB,KAAK5lB,SAAUmyB,EAAAA,aAAaC,OACpDxxB,KAAKsvD,iBAEN,OAEF,MAAMC,GAAeC,EAAAA,EAAAA,IAAsBxvD,KAAKsvD,kBAChDtvD,KAAKsvD,iBAAmB,KACxBn/B,EAAM/wB,MAAMipB,MAAMpoB,SAAS,CACzB+kB,KAAM,OACDmL,EAAM/wB,MAAMipB,MAAMjpB,MAAM4lB,MAAI,CAC/BiqC,YAAa,EAACQ,EAAAA,EAAAA,IAAqBF,EAAaG,MAAOH,EAAaI,SAG1E,CApKAnvD,WAAAA,CAAYpB,GACVqB,MAAM,OACDrB,GAAAA,CACHnF,IAAKuyD,KAJT,OAAQ8C,mBAAuC,MAuK/C,OAAQP,6BAA6BjqC,IACnC,MAAM8qC,GAAcn9C,EAAAA,EAAAA,IAAkBzS,MACtCA,KAAK2S,MAAMC,IACTg9C,aAAAA,EAAAA,EAAa/8C,kBAAiB,K,IAEvBsd,EAAAA,EAI6BA,EAAAA,EALlC,MAAMA,EAAQnwB,KAAKZ,MAAM+wB,OACpBA,SAAkB,QAAlBA,EAAAA,EAAO/wB,MAAMipB,aAAb8H,IAAAA,GAA8B,QAA9BA,EAAAA,EAAoB/wB,MAAM4lB,YAA1BmL,IAAAA,OAAAA,EAAAA,EAAgCX,UAIrC2/B,EAAAA,EAAAA,IAA2Bh/B,EAAOA,SAAkB,QAAlBA,EAAAA,EAAO/wB,MAAMipB,aAAb8H,IAAAA,GAA8B,QAA9BA,EAAAA,EAAoB/wB,MAAM4lB,YAA1BmL,IAAAA,OAAAA,EAAAA,EAAgCX,OAAQxvB,KAAK,KAInF8kB,EAAQ+qC,yBAA2B,CAACzlD,EAAeqvB,KAEjD,GAAIA,IAASq2B,EAAAA,2BAA2BC,kBACtC,OAGF,MAAMznD,GAAS0nD,EAAAA,EAAAA,IAAsB5lD,EAAOpK,OAE5CtD,EAAAA,EAAAA,IACEC,EAAAA,GAAkBC,gBAClBC,EAAAA,GAAoBD,gBAAgBqzD,6BACpC,CACE7lD,QACA9B,UACF,CAEH,IA7LDtI,KAAKW,qBAAqBX,KAAKD,WAAWa,KAAKZ,MACjD,EA+LA,EAxMWysD,EAwMGhtD,aAAY,EAAGV,YAC3B,MAAM,MAAEoxB,GAAUpxB,EAAMjF,WACxB,IAAKq2B,EACH,OAEF,MAAM/5B,GAASC,EAAAA,EAAAA,YAAW61B,EAAAA,IAE1B,OACE,kBAAC7M,OAAAA,CAAK7oB,UAAWJ,EAAO+1B,cACtB,kBAACgE,EAAM1wB,UAAS,CAACV,MAAOoxB,I,kcCnOzB,SAAS+/B,EAAet6D,G,IAeCu6D,EACAA,EAf9B,MAAQ/tD,WAAYguD,EAAU,QAAEz2D,EAAO,KAAE2C,G,sUAAS,IAAK1G,GAEjDwM,EAAanD,EAAAA,GAAWoD,YAAY+tD,EAAY9tD,EAAAA,IAEtD,IAAKF,EAEH,YADAI,EAAAA,EAAOC,KAAK,oCAId,MAAM,SAAEtG,EAAW,IAAOiG,EAAWhD,MAG/B+wD,EAAmBh0D,EAASE,QAAQI,GAAQA,EAAI9C,UAAYA,I,IAEpCw2D,EAA9B,MAAMpzD,EAAoF,QAA5DozD,EAA0C,QAA1CA,EAAAA,EAAiB9zD,QAAQgB,GAAiB,YAAXA,EAAEf,cAAjC6zD,IAAAA,OAAAA,EAAAA,EAAsDn1D,cAAtDm1D,IAAAA,EAAAA,EAAgE,E,IAChEA,EAA9B,MAAMnzD,EAAoF,QAA5DmzD,EAA0C,QAA1CA,EAAAA,EAAiB9zD,QAAQgB,GAAiB,YAAXA,EAAEf,cAAjC6zD,IAAAA,OAAAA,EAAAA,EAAsDn1D,cAAtDm1D,IAAAA,EAAAA,EAAgE,GAC9FzzD,EAAAA,EAAAA,IAAqBC,EAAAA,GAAkBC,gBAAiBC,EAAAA,GAAoBD,gBAAgByzD,iBAAkB,CAC5G/zD,KAAMA,EACNS,sBAAuBA,GAAkC,YAATT,EAAqB,EAAI,GACzEU,sBAAuBA,GAAkC,YAATV,EAAqB,EAAI,KAI9D,SAATA,EACF8F,EAAWnC,SAAS,CAClB9D,SAAUg0D,IAIZ/tD,EAAWnC,SAAS,CAClB9D,SAAU,IAAIg0D,EAAkB,CAAEx2D,QAASA,EAAS2C,KAAMA,KAGhE,C,kCC1CA,MAAMhG,EAAaoB,IAA0B,CAC3C44D,cAAc34D,EAAAA,EAAAA,KAAI,CAChBW,OAAQ,GAAGZ,EAAMiB,QAAQ,cAE3B43D,oBAAoB54D,EAAAA,EAAAA,KAAI,CACtB4B,MAAO7B,EAAMgE,OAAOklB,QAAQhoB,KAC5BoF,SAAU,aAEZwyD,mBAAmB74D,EAAAA,EAAAA,KAAI,CACrBC,QAAS,OACTqnB,aAAc,QAEhBwxC,mBAAmB94D,EAAAA,EAAAA,KAAI,CACrBiH,KAAM,EACN7C,aAAc,WACdT,SAAU,WAEZo1D,mBAAmB/4D,EAAAA,EAAAA,KAAI,CACrBqK,UAAW,QACXjE,WAAYrG,EAAMiB,QAAQ,OAE5Bg4D,qBAAqBh5D,EAAAA,EAAAA,KAAI,CACvBqK,UAAW,QACXjE,WAAYrG,EAAMiB,QAAQ,KAC1BH,MAAOd,EAAMiB,QAAQ,OAEvBi4D,iBAAiBj5D,EAAAA,EAAAA,KAAI,CACnBc,OAAQf,EAAMiB,QAAQ,IACtB2C,SAAU,SACVqlB,WAAYjpB,EAAMgE,OAAO9C,KAAKwiB,WAEhCy1C,sBAAsBl5D,EAAAA,EAAAA,KAAI,CACxBc,OAAQf,EAAMiB,QAAQ,IACtB2C,SAAU,SACVqlB,WAAYjpB,EAAMgE,OAAOklB,QAAQhlB,SAWxBk1D,EAA4B,EAAG3wC,SAAQ4wC,QAAOC,aAAYxsD,YACrE,MAAMysD,GAAQ56D,EAAAA,EAAAA,YAAWC,GACnB46D,EAAU,GAAGt2D,KAAKC,MAAmB,IAAbm2D,MACxBG,EAAW,CAAE34D,MAAO04D,GAE1B,OACE,kBAAC36D,MAAAA,CAAIC,UAAW2pB,EAAS,GAAG8wC,EAAMX,gBAAgBW,EAAMV,qBAAuBU,EAAMX,cACnF,kBAAC/5D,MAAAA,CAAIC,UAAWy6D,EAAMT,mBACpB,kBAACj6D,MAAAA,CAAIC,UAAWy6D,EAAMR,kBAAmBp5D,MAAOmN,GAC7CA,GAEH,kBAACjO,MAAAA,CAAIC,UAAWy6D,EAAMP,mBAAoBK,GAC1C,kBAACx6D,MAAAA,CAAIC,UAAWy6D,EAAMN,qBAAsBO,IAE9C,kBAAC36D,MAAAA,CAAIC,UAAWy6D,EAAML,iBACpB,kBAACr6D,MAAAA,CAAIC,UAAWy6D,EAAMJ,qBAAsBI,MAAOE,K,0HCzD3D,MAEM76D,EAAaoB,IAA0B,CAC3C05D,WAAWz5D,EAAAA,EAAAA,KAAI,CACbgpB,WAAY,UACZpnB,MAAO7B,EAAMgE,OAAO9C,KAAKgoB,QACzBywC,UAAW,YACX74D,MAAO,cACP0nC,UAAW,OACXsX,UAAW,OACX11C,UAAWpK,EAAMiB,QAAQ,KAE3B24D,iBAAiB35D,EAAAA,EAAAA,KAAI,CACnBy/C,aAAc,aAAa1/C,EAAMgE,OAAOG,OAAO01D,SAC/C35D,QAAS,SAEX45D,gBAAgB75D,EAAAA,EAAAA,KAAI,CAClBypB,WAAY1pB,EAAM0G,WAAWijB,iBAC7BplB,aAAcvE,EAAMiB,QAAQ,GAC5Bf,QAAS,eACTm9C,WAAY,SACZh5C,aAAc,WACdoF,SAAU,IAEZswD,gBAAgB95D,EAAAA,EAAAA,KAAI,CAClB0D,OAAQ,YAEVq2D,eAAe/5D,EAAAA,EAAAA,KAAI,CACjBe,QAAS,cASAi5D,EAA0B/7D,IACrC,MAAMq7D,GAAQ56D,EAAAA,EAAAA,YAAWC,IAEnB,MAAEs7D,EAAK,MAAEptD,GAAU5O,EAEnBi8D,EAAUD,EAAM1lD,MAAM,EA1CN,IA2CtB,IAAI4lD,EAAYD,EAAQnyC,MAAMu8B,GAAQA,EAAIz3C,QAAUA,IAChDutD,EAAYH,EAAM1lD,MA5CA,KA6CG4lD,IAIvBA,EAAYC,EAAUryC,MAAMu8B,GAAQA,EAAIz3C,QAAUA,IAClDutD,EAAYA,EAAU11D,QAAQ4/C,GAAQA,EAAIz3C,QAAUA,KAGtD,MAAMwtD,EAAaD,EAAUtsB,QAAO,CAACiD,EAAKuT,IAAQvT,EAAMuT,EAAI8U,OAAO,GAE7D1I,EADWwJ,EAAQpsB,QAAO,CAACiD,EAAKuT,IAAQvT,EAAMuT,EAAI8U,OAAO,GACtCiB,EAGzB,IAAIC,EAAe,IAAIJ,GAUvB,OAPIG,EAAa,GACfC,EAAajpD,KAAK,CAAExE,MAAO,QAASusD,MAAOiB,EAAYhB,WAAYgB,EAAa3J,IAIlF4J,EAAahsD,MAAK,CAACvI,EAAGwI,IAAMA,EAAE6qD,MAAQrzD,EAAEqzD,QAGtC,kBAACx6D,MAAAA,CAAIC,UAAWy6D,EAAMG,WACpB,kBAAC76D,MAAAA,CAAIC,UAAWy6D,EAAMK,iBACpB,kBAAC/6D,MAAAA,CAAIC,UAAWy6D,EAAMO,gBAAgB,oBAAkBnJ,EAAM,gBAEhE,kBAAC9xD,MAAAA,CAAIC,UAAWy6D,EAAMS,eACnBO,EAAa70D,KAAK80D,IACjB,yBAACpB,G,wUAAyBA,CAAAA,CAAC72D,IAAKi4D,EAAK1tD,OAAW0tD,G,WAAAA,CAAM/xC,OAAQ+xC,EAAK1tD,QAAUA,I,qeClEhF,MAAM2tD,EAAmB,EAAGC,cAAaz4D,UAAS00D,eACvD,MAAMgE,EA6HR,SAA+B14D,GAC7B,MAAM24D,EAAoB,GAC1B,IAAIC,EAAe54D,EAAQwU,QAAQ,OAEnC,MAAyB,IAAlBokD,GACLD,EAAQtpD,KAAKupD,GACbA,EAAe54D,EAAQwU,QAAQ,MAAOokD,EAAe,GAEvD,OAAOD,CACT,CAtIyBE,CAAsB74D,IACtCi4D,EAAOa,IAAY34D,EAAAA,EAAAA,eAA6C9B,IAChE06D,EAAYC,IAAiB74D,EAAAA,EAAAA,WAAS,GACvC1D,GAASC,EAAAA,EAAAA,YAAWC,GAGpBs8D,GAAmB1sB,EAAAA,EAAAA,QAAsB,MACzC2sB,GAAuB3sB,EAAAA,EAAAA,QAAyB,MAEhD4sB,EAAAA,W,WAAqB,aACzBp2D,EAAAA,EAAAA,IAAqBC,EAAAA,GAAkBC,gBAAiBC,EAAAA,GAAoBD,gBAAgBm2D,uBAC5F,MAAMv+B,EA8HV,SAAwB76B,EAAiB04D,EAA0B3wD,GACjE,IAAIy7C,EAAa,EACjB,MAAM6V,EAAmBr5D,EAAQ2K,QAAQ,QAAQ,IAAM,UAAU64C,SAGjE,MAAO,IAFkBz7C,EAAQtC,MAAM6zD,0BAEFt5D,mBAAyBq5D,cAD/CX,EAAej1D,KAAI,CAAC81D,EAAQrzC,IAAU,SAASA,EAAQ,MAAKjV,KAAK,wBAElF,CApIkBuoD,CAAex5D,EAAS04D,GAAgBh9C,EAAAA,EAAAA,IAAkB+8C,IAClEntD,QAAmBmX,EAAAA,EAAAA,IAAkBg2C,GACrCgB,EAAmBn0D,EAAAA,GAAW8T,aAAaq/C,GAAahzD,MAAMoF,MAGhEotD,GAASp9B,IAAUo+B,EAAiBhrB,SAAWwrB,IAAqBP,EAAqBjrB,UAK7FgrB,EAAiBhrB,QAAUpT,EAC3Bq+B,EAAqBjrB,QAAUwrB,EAE/BnuD,SAAAA,EACIuvB,MAAM,CACN6+B,UAAW,IACXt9C,SAAU,GACVu9C,WAAY,EACZC,WAAY,CAAC,EACbviD,MAAOoiD,EACPI,QAAS,EAAC/+B,EAAAA,EAAAA,GAAeD,EAAO,CAAE65B,cAClCoF,SAAU,GACVC,IAAK,GACLC,UAAW,IAEZvkD,SAAS7J,I,IACmCA,EAGOA,EAH9CA,EAAOnG,QAAUmyB,EAAAA,aAAaC,OAAsB,QAAbjsB,EAAAA,EAAOwvB,cAAPxvB,IAAAA,OAAAA,EAAAA,EAAevK,SAG/CuK,EAAOnG,QAAUmyB,EAAAA,aAAa/tB,QAAsB,QAAb+B,EAAAA,EAAOwvB,cAAPxvB,IAAAA,OAAAA,EAAAA,EAAevK,WAC/Dy3D,OAASz6D,GACT26D,GAAc,KAJdF,EA0DV,SAA8BltD,EAAaquD,EAAoBvF,GAC7D,MAAMwF,EAAgB,IAAI/7B,IAG1BvyB,EAAOyf,KAAK,GAAGxB,OAAO,GAAG9f,OAAOowD,UAAU1kD,SAAS5K,IACjD2H,OAAOtD,KAAKrE,GAAO4K,SAASnV,I,IAIe45D,EAAzCA,EAHKA,EAAc1tD,IAAIlM,IACrB45D,EAAc77B,IAAI/9B,EAAK,IAAI69B,KAEX79B,QAAlB45D,EAAAA,EAAczwD,IAAInJ,UAAlB45D,IAAAA,GAAAA,EAAwB77B,IAAIxzB,EAAMvK,KAAyBA,QAAlB45D,EAAAA,EAAczwD,IAAInJ,UAAlB45D,IAAAA,OAAAA,EAAAA,EAAwBzwD,IAAIoB,EAAMvK,MAAS,GAAK,EAAE,GAC3F,IAGJ,MAAM23D,EAAgC,GAGtC,IAAK,IAAIlqD,EAAI,EAAGA,GAAKksD,EAAYlsD,IAAK,C,IAEpCmsD,EADA,MAAME,EAAmC,GACP,QAAlCF,EAAAA,EAAczwD,IAAI,SAASsE,EAAI,YAA/BmsD,IAAAA,GAAAA,EAAqCzkD,SAAQ,CAAC2hD,EAAO92D,KACnD85D,EAAW/qD,KAAK,CAAExE,MAAOvK,EAAK82D,QAAOC,WAAYD,EAAQ1C,GAAW,IAEtE0F,EAAW9tD,MAAK,CAACvI,EAAGwI,IAAMA,EAAE6qD,MAAQrzD,EAAEqzD,QACtCa,EAAM5oD,KAAK+qD,EACb,CAEA,OAAOnC,CACT,CApFmBoC,CAAqBzuD,EAAQ8sD,EAAer3D,OAAQqzD,IAC7DsE,GAAc,GAIhB,IAEN,E,iOApCMG,GAsCAmB,GAAQ/V,EAAAA,EAAAA,UAAQ,IAAMvkD,EAAQmP,MAAM,QAAQ,CAACnP,IAEnD,OACE,kBAACpD,MAAAA,KACE09D,EAAM72D,KAAI,CAAC82D,EAAMr0C,IAChB,kBAACR,OAAAA,CAAKplB,IAAK4lB,GACRq0C,EACAr0C,IAAUwyC,EAAer3D,QACxB,kBAACm5D,EAAAA,UAASA,CACRC,OAAQtB,EACRr2B,QACE,oCACGm1B,GAASA,EAAM/xC,GAAO7kB,OAAS,GAAK,kBAAC22D,EAAsBA,CAACC,MAAOA,EAAM/xC,GAAQrb,MAAM,KACvFotD,GAAiC,IAAxBA,EAAM/xC,GAAO7kB,QACrB,kBAACzE,MAAAA,KAAI,gEAELq7D,GAASc,GAAc,kBAACn8D,MAAAA,KAAI,2CAC5Bq7D,IAAUc,GACV,kBAACn8D,MAAAA,CAAI06D,MAAO,CAAEv4D,QAAS,SACrB,kBAAC27D,EAAAA,QAAOA,CAACx9D,KAAK,UAMtB,kBAACwoB,OAAAA,CAAK7oB,UAAWJ,EAAOuD,SAAS,aAS/C,SAASrD,EAAUoB,GACjB,MAAO,CACLiC,SAAShC,EAAAA,EAAAA,KAAI,CACX0D,OAAQ,UACRI,gBAAiB/D,EAAMgE,OAAO44D,UAAU58D,EAAMgE,OAAOilB,WAAWC,QAAS,IACzEtoB,OAAQ,QAER,UAAW,CACTmD,gBAAiB/D,EAAMgE,OAAO44D,UAAU58D,EAAMgE,OAAOilB,WAAWC,QAAS,OAIjF,C,wHC9EO,MAAM2zC,UAAgCz1D,EAAAA,GAOnCiB,UAAAA,GACN,GAAIC,KAAKZ,MAAMkC,KACb,OAIF,MAAMkzD,GAAmB//B,EAAAA,EAAAA,GAAeggC,EAAAA,IACxCz0D,KAAK00D,uBAAuBF,GAG5B,MAAMG,GAAyBjgC,EAAAA,EAAAA,IAAe,CAAC8/B,IAC/CG,EAAuB/7B,mBAAmBrlB,WAAW/O,IACnDxE,KAAK40D,yBAAyBpwD,EAAM,IAGtCxE,KAAKC,SAAS,CACZqB,KAAM,IAAIsB,EAAAA,GAAgB,CACxBiN,UAAW,SACX7W,SAAU,CACR,IAAImiB,EAAAA,GAAc,CAChB7Z,UAAMtJ,EACNQ,MAAO,OACPC,OAAQ,IAEV,IAAI0iB,EAAAA,GAAc,CAChB1iB,OAAQ,IACRD,MAAO,OACP8I,KAAMinB,EAAAA,GAAcpF,OACjBua,gBAAe,GACf8tB,UAAU,wBAAwB,GAClCA,UAAU,YAAY,GACtBziC,QAAQ4rC,GACR3rC,cAKb,CAEQ0rC,sBAAAA,CAAuBF,GAC7B,MAAMK,EAAiC,CACrCl7D,QAASqG,KAAKZ,MAAMzF,QACpB2C,KAAM,WAEFgc,GAAeC,EAAAA,EAAAA,IAAqB,CAACs8C,IAC3CL,EAAiBzxD,KAAOyxD,EAAiBzxD,KAAKuB,QAAQupD,EAAAA,GAAmBv1C,EAC3E,CA4BQw8C,gCAAAA,GACN,MAAMC,EAAyB91D,EAAAA,GAAWoD,YAAYrC,KAAMg1D,G,IACzBD,EAAnC,MAAME,EAAoF,QAAvDF,EAAAA,EAAuB31D,MAAM61D,kCAA7BF,IAAAA,EAAAA,EAA2D,GAExFl1C,EAAQo1C,EAA2Bp1B,WAAWlmC,GAAYA,IAAYqG,KAAKZ,MAAMzF,WAExE,IAAXkmB,IACFo1C,EAA2BjqD,OAAO6U,EAAO,GAEzCk1C,EAAuB90D,SAAS,CAC9Bg1D,2BAA4BA,IAGlC,CAgDQC,iBAAAA,CAAkBvjC,GACxB,MAAMwjC,EAAiBn1D,KAAKo1D,oBACtBC,EAAcr1D,KAAKs1D,iBAWzB,OATIH,aAA0Bh6C,EAAAA,IAC5Bg6C,EAAel1D,SAAS,CACtB44B,UAAU,EACVpgC,OAAQ,OACR6I,KAAM,IAAIowB,EAAAA,GAAiB,CACzBC,UAAWA,MAIV0jC,CACT,CAEQD,iBAAAA,GACN,MAAMp8D,EAAWgH,KAAKu1D,sBACtB,OAAOv8D,aAAAA,EAAAA,EAAW,EACpB,CACQs8D,cAAAA,GACN,MAAMt8D,EAAWgH,KAAKu1D,sBACtB,OAAOv8D,aAAAA,EAAAA,EAAW,EACpB,CAEQu8D,mBAAAA,G,IACC,EAAP,OAAsB,QAAf,EAAAv1D,KAAKZ,MAAMkC,YAAX,eAAiBlC,MAAMpG,QAChC,CA2DQw8D,+BAAAA,GACN,MAAMT,EAAyB91D,EAAAA,GAAWoD,YAAYrC,KAAMg1D,G,IAChBD,EAA5C,MAAMU,EAA6F,QAAvDV,EAAAA,EAAuB31D,MAAM61D,kCAA7BF,IAAAA,EAAAA,EAA2D,GAGvGA,EAAuB90D,SAAS,CAC9Bg1D,2BAA4B,IAAIQ,EAAqCz1D,KAAKZ,MAAMzF,UAEpF,CAEA,gBAAc8F,EAAU,MAAEV,IACxB,MAAM,KAAEuC,GAASvC,EAAMjF,WACvB,OAAIwH,EACK,kBAACA,EAAK7B,UAAS,CAACV,MAAOuC,IAEzB,IACT,CAnPAd,WAAAA,CAAYpB,GACVqB,MAAMrB,GAqDR,OAAQstB,gBAAe,KACrB,MAAMgpC,GAAiBnjD,EAAAA,EAAAA,IAAkBvS,MACnC+Z,GAAsBqE,EAAAA,EAAAA,IAAuBpe,MAC7CgX,GAAiBvE,EAAAA,EAAAA,IAAkBzS,MAOzC,GANA01D,EAAez1D,SAAS,CACtByB,QAAS,KAEXsV,EAAe/W,SAAS,CACtByB,QAAS,KAEPqY,EAAoB3a,MAAMsC,QAAQ1G,OAAQ,CAC5C+e,EAAoB9Z,SAAS,CAC3ByB,QAAS,KAGX,MAAMyzD,EAAiBn1D,KAAKo1D,oBAG5BD,SAAAA,EAAgBl1D,SAAS,CACvB44B,UAAU,IAGZ74B,KAAK80D,kCACP,KAsBF,OAAQa,gBAAgBnxD,IACtB,GACE,EAAOwgB,KAAK5lB,QAAUmyB,EAAAA,aAAaC,OACH,IAA7BhtB,EAAMwgB,KAAKwK,OAAOx0B,QAAgBwJ,EAAMwgB,KAAKwK,OAAOomC,OAAOvwC,GAA2B,IAAjBA,EAAMrqB,WAC9EwJ,EAAMwgB,KAAK5lB,QAAUmyB,EAAAA,aAAa/tB,MAClC,CAEA,IAAI60C,EACJ,IACEA,EAAa,CACX1+C,QAASqG,KAAKZ,MAAMzF,QACpBk8D,SAAUpxD,KAAKC,UAAUF,EAAMwgB,KAAK6wC,UACpCC,QAASrxD,KAAKC,UAAUF,EAAMwgB,KAAK8wC,SACnChxD,IAAK,eAET,CAAE,MAAOD,GACPwzC,EAAa,CACX1+C,QAASqG,KAAKZ,MAAMzF,QACpBmL,IAAK,2BAET,CAGAtC,EAAAA,EAAOe,MAAM,IAAIC,MAAM,2CAA4C60C,GAEnEr4C,KAAKk1D,kBACH,kBAAC12D,EAAAA,MAAKA,CAACE,SAAU,QAASrH,MAAO,IAAI,kCAKvC,MAAM0+D,EAAgB/1D,KAAKs1D,iBAGvBS,aAAyB56C,EAAAA,IAC3B46C,EAAc91D,SAAS,CACrB44B,UAAU,GAGhB,KAsCF,OAAQ+7B,4BAA4BpwD,IAClC,MAAMwxD,GAAsBvhC,EAAAA,EAAAA,GAAewhC,EAAAA,IAC3Cj2D,KAAK00D,uBAAuBsB,GAE5B,MAAME,GAA4BxhC,EAAAA,EAAAA,IAAe,CAACshC,IAKlD,GAFAE,EAA0Bt9B,mBAAmBrlB,UAAUvT,KAAK21D,cAG1DnxD,EAAMwgB,KAAK5lB,QAAUmyB,EAAAA,aAAaC,OACJ,IAA7BhtB,EAAMwgB,KAAKwK,OAAOx0B,QAAgBwJ,EAAMwgB,KAAKwK,OAAOomC,OAAOvwC,GAA2B,IAAjBA,EAAMrqB,UAC5E,CACA,MAAMm6D,EAAiBn1D,KAAKo1D,oBACtBW,EAAgB/1D,KAAKs1D,iBAqB3B,GAlBIH,aAA0Bh6C,EAAAA,IAC5Bg6C,EAAel1D,SAAS,CACtB44B,UAAU,EACVpgC,OAAQ,OACR6I,KAAM,IAAIowB,EAAAA,GAAiB,CACzBC,UACE,kBAACnzB,EAAAA,MAAKA,CAACE,SAAU,UAAWrH,MAAO,IAAI,4EAErC,kBAACX,EAAAA,OAAMA,CAACF,UAAWy7B,EAAAA,GAAiBrS,OAAQ5oB,QAAS,IAAMgJ,KAAK0sB,gBAAgB,sBAUtFqpC,aAAyB56C,EAAAA,GAAe,CAC1C,MAAMgV,EAAQ4lC,EAAc32D,MAAMkC,KAC9B6uB,aAAiBnc,EAAAA,KACnBmc,SAAAA,EAAOlwB,SAAS,CACdooB,MAAO6tC,IAGb,CACAl2D,KAAKw1D,iCACP,CAEIhxD,EAAMwgB,KAAK5lB,QAAUmyB,EAAAA,aAAa/tB,OACpCxD,KAAK21D,aAAanxD,EACpB,IA7NAxE,KAAKW,qBAAqBX,KAAKD,WAAWa,KAAKZ,MACjD,EC9BK,SAASm2D,GAAyB,SAAEC,EAAQ,IAAEna,IACnD,MAAM,aAAEoa,GAAiBD,EAASt8D,WAE5Bw8D,EAAWD,aAAAA,EAAAA,EAAc32C,MAAMlQ,GAAUA,EAAMpQ,MAAMnF,MAAQgiD,EAAItiD,UASvE,OAPA23C,EAAAA,EAAAA,YAAU,KACR,IAAKglB,EAAU,CACb,MAAMC,GAQmB58D,EARiBsiD,EAAItiD,QAS3C,IAAI46D,EAAwB,CACjC56D,QAASA,EACTM,IAAKN,K,IAVoCy8D,EAAvCA,EAASn2D,SAAS,CAAEo2D,aAAc,IAAgC,QAA3BD,EAAAA,EAASh3D,MAAMi3D,oBAAfD,IAAAA,EAAAA,EAA+B,GAAKG,IAC7E,CAMJ,IAA+B58D,CAN3B,GACC,CAACsiD,EAAKma,EAAUE,IAEZA,EAAW,kBAACA,EAAS72D,UAAS,CAACV,MAAOu3D,IAAe,IAC9D,CCMA,MAAME,EAAe,CAAC,GAAI,KAAM,OAAQ,OAAQ,OAAQ,SAAU,SAAU,QAAS,SAoB9E,MAAMxB,UAA+Bl2D,EAAAA,GAM1CiB,UAAAA,G,IAEmBqC,EADjB,MACMisD,EAA8B,QAAnBjsD,EADEnD,EAAAA,GAAWoD,YAAYrC,KAAMsC,EAAAA,IACpBlD,MAAMkd,UAAjBla,IAAAA,OAAAA,EAAAA,EAAqBisD,SACtCruD,KAAKC,SAAS,CAAEouD,YAClB,CAYA,aACEhG,EACAoO,EACA/+D,EACA22D,EACA4G,GAEA,MAAM7+D,EAASsgE,EAAgBh/D,GACzBuL,EAAYhE,EAAAA,GAAW8T,aAAa/S,MAAMZ,MAAMoF,MA2GtD,MA1GsD,CACpD,CACEqhB,GAAI,iBACJ/F,OAAQ,GACR62C,KAAO/gE,IACL,MAAMghE,EAAuB,CAC3B3zD,UAAWA,EACXusB,OAAQ,CAAC55B,EAAM+gE,KAAK1a,IAAI4a,SAASh8B,WACjCz7B,MAAOmyB,EAAAA,aAAaC,MAEhBslC,EAAW,IAAIC,EAAAA,GAAc,CACjC/xC,KAAM4xC,IAGFI,EAAazuC,EAAAA,GAAcC,aAC9BO,QAAQ+tC,GACRp5B,gBAAe,GACf8tB,UAAU,UAAW,CACpB/xB,KAAMw9B,EAAAA,mBAAmBC,OAE1B19B,qBAAqB,WAAY,CAChCrpB,QAAQ,EACRiW,SAAS,IAEVoT,qBAAqB,gBAAiB29B,EAAAA,cAAcC,QACpDC,eAAe,eACfruC,QAEH,OACE,kBAACzyB,MAAAA,CAAIC,UAAWJ,EAAOkhE,qBACrB,kBAAC/gE,MAAAA,CAAIC,UAAWJ,EAAOmhE,iBACrB,kBAACP,EAAWv3D,UAAS,CAACV,MAAOi4D,K,GAMvC,CACEnxC,GAAI,QACJ/F,OAAQ,QACR03C,SAAU,SACVb,KAAO/gE,IACL,MAAM4O,GAAQizD,EAAAA,EAAAA,aAAY,IAAMjB,EAAlBiB,CAAgC7hE,EAAM+gE,KAAK1a,IAAI4a,SAASnuB,K,IAI/DlkC,EAEAA,EALP,OACE,kBAACjO,MAAAA,CAAIC,UAAWJ,EAAOshE,eACrB,kBAACnhE,MAAAA,KACc,QAAZiO,EAAAA,EAAMouB,cAANpuB,IAAAA,EAAAA,EAAgB,GAChBA,EAAM5L,KACM,QAAZ4L,EAAAA,EAAM47B,cAAN57B,IAAAA,EAAAA,EAAgB,OAM3B,CACEqhB,GAAI,UACJ/F,OAAQ,IACR03C,SAAU,SACVb,KAAO/gE,GACL,kBAACW,MAAAA,CAAIC,UAAWJ,EAAOshE,eACrB,kBAACnhE,MAAAA,MAAM,IAAOX,EAAM+gE,KAAK1a,IAAI4a,SAASnuB,IAAO2f,GAAOsP,QAAQ,GAAG,OAIrE,CACE9xC,GAAI,UACJ/F,OAAQ,UACR62C,KAAO/gE,GAEH,kBAACW,MAAAA,CAAIC,WAAWkM,EAAAA,EAAAA,IAAGk1D,IAA6BxhE,EAAOyhE,0BACrD,kBAAC1F,EAAgBA,CACfC,aAAa0F,EAAAA,EAAAA,IAAkB93D,MAC/BrG,QAAS/D,EAAM+gE,KAAK1a,IAAI4a,SAASl9D,QACjC00D,SAAUA,MAMpB,CACExoC,GAAI,UACJ/F,YAAQ9nB,EACR+/D,aAAa,EACbpB,KAAO/gE,IACL,GAAIq/D,aAAAA,EAAAA,EAA4B31D,SAAS1J,EAAM+gE,KAAK1a,IAAI4a,SAASl9D,SAC/D,OAGF,MAAMq+D,EAAkBvB,aAAAA,EAAAA,EAAiB/2C,MACtCu4C,GAAmBA,EAAet+D,UAAY/D,EAAM+gE,KAAK1a,IAAI4a,SAASl9D,UAEnE7D,EAAuC,aAA1BkiE,aAAAA,EAAAA,EAAiB17D,MAC9BzG,EAAuC,aAA1BmiE,aAAAA,EAAAA,EAAiB17D,MACpC,OACE,kBAAC3G,EAAAA,EAAYA,CACXE,WAAYA,EACZC,WAAYA,EACZC,UAAW,IAAMH,EAAM+gE,KAAK1a,IAAI4a,SAASqB,cACzCliE,UAAW,IAAMJ,EAAM+gE,KAAK1a,IAAI4a,SAASsB,cACzCliE,QAAS,IAAML,EAAM+gE,KAAK1a,IAAI4a,SAASuB,WACvCjiE,WAAY,W,GAOxB,CAQA,eAAsBkiE,EAA+BC,GACnD,MAAMC,EAAiBt5D,EAAAA,GAAWoD,YAAYrC,KAAMsC,EAAAA,IACpD,OAAO+1D,EACJh8D,QAAQm8D,IACAF,EAAmBzhE,MAAOyhE,EAAmBnyD,IAAIqyD,EAAa7+D,WAEtEyD,KAAKzD,IACG,CACLkhC,UAAWlhC,EAAQkhC,UACnBlhC,QAASA,EAAQA,QACjB+uC,IAAK/uC,EAAQ+uC,IACbwvB,YAAa,IACXhI,EAAe,CACbv2D,QAASA,EAAQA,QACjB2C,KAAM,UACN8F,WAAYm2D,IAEhBJ,YAAa,IACXjI,EAAe,CACbv2D,QAASA,EAAQA,QACjB2C,KAAM,UACN8F,WAAYm2D,IAEhBH,SAAU,IACRlI,EAAe,CACbv2D,QAASA,EAAQA,QACjB2C,KAAM,OACN8F,WAAYm2D,OAIxB,CAhLA/3D,WAAAA,CAAYpB,GACVqB,MAAMrB,GAENY,KAAKW,qBAAqBX,KAAKD,WAAWa,KAAKZ,MACjD,E,YA0OK,UAAwC,MAAEjB,IAC/C,MAAMqD,EAAanD,EAAAA,GAAWoD,YAAYtD,EAAOuD,EAAAA,KACzCnG,SAAUs6D,GAAoBr0D,EAAWtI,WAC3CpC,GAAQuB,EAAAA,EAAAA,aACR7C,EAASqiE,EAAe/gE,GAGxBghE,EAAqBz5D,EAAAA,GAAWoD,YAAYtD,EAAO45D,KACnD,mBAAEL,GAAuBI,EAAmB5+D,YAG1Cu+D,cAAeO,EAAgB,2BAAE3D,GAA+Bl2D,EAAMjF,WACxEu+D,EAAgBO,QAAAA,EAAoB,GAGpCvQ,EAAQgQ,EAAc5yB,QAAO,CAACozB,EAAexzC,IAC1CwzC,EAAgBxzC,EAAMqjB,KAC5B,GAEGowB,EAAY/5D,EAAMg6D,eAAeV,EAAeC,G,IAKpDv5D,EAJF,MAAM4rB,EAAU5rB,EAAMi6D,aACpB3Q,EACAoO,EACA/+D,EACoB,QAApBqH,EAAAA,EAAMK,MAAMivD,gBAAZtvD,IAAAA,EAAAA,EAAwBuvD,EAAAA,GACxB2G,GAGF,OACE,kBAAC1+D,MAAAA,CAAIU,cAAaC,EAAAA,EAAQiF,SAAS88D,aAAcziE,UAAWJ,EAAOusD,WACjE,kBAACuW,EAAAA,iBAAgBA,CACfvuC,QAASA,EACT3F,KAAM8zC,EACNK,SAAWv0D,GAA6BA,EAAEjL,QAC1Cy/D,kBAAoBnd,GAAQ,kBAACka,EAAwBA,CAACC,SAAUr3D,EAAOk9C,IAAKA,MAIpF,G,EAzQgBx8C,e,EAZHu1D,G,sFAoLb,MAAMt9D,EAAQ6jB,EAAAA,OAAO89C,OAEfzB,EAA4B,KACzBjgE,EAAAA,EAAAA,KAAI,CACTo6B,SAAU,QACV52B,WAAYzD,EAAM0G,WAAWohD,oBAC7BlkD,SAAU,SACVg+D,aAAc,eAIZb,EAAkB/gE,IACf,CACL4G,MAAM3G,EAAAA,EAAAA,KAAI,CACR+kC,eAAgB,cAElBimB,WAAWhrD,EAAAA,EAAAA,KAAI,CAEb,QAAS,CAEPc,OAAQ,sBACR2I,UAAW,SAGbm4D,GAAI,CACFt7D,IAAK,EACLD,SAAU,SACVvC,gBAAiB/D,EAAMgE,OAAOilB,WAAWqpB,OACzC/oB,OAAQvpB,EAAMupB,OAAOu4C,iBAKvB9C,EAAmBh/D,IAChB,CACLmgE,yBAAyBlgE,EAAAA,EAAAA,KAAI,CAC3BwD,WAAYzD,EAAM0G,WAAWohD,oBAC7BztB,SAAU,QACV1wB,SAAU,OACV/F,SAAU,SACVg+D,aAAc,aACdn7D,SAAUzG,EAAM0G,WAAWC,UAAUF,SACrCkzD,UAAW,eAEbqG,eAAe//D,EAAAA,EAAAA,KAAI,CACjBqK,UAAW,QACX7D,SAAUzG,EAAM0G,WAAWC,UAAUF,WAEvCm5D,qBAAqB3/D,EAAAA,EAAAA,KAAI,CACvBa,MAAO,QACPihE,cAAe,SAEjBlC,iBAAiB5/D,EAAAA,EAAAA,KAAI,CACnBc,OAAQ,OACR6C,SAAU,a,obClQhB,MAAMo+D,EAAUn+C,EAAAA,OAAO89C,OAAOM,cAAcD,QAQrC,MAAMf,WAA2B75D,EAAAA,GAyB9BiB,UAAAA,GACNC,KAAKm7B,aAGLn7B,KAAK2S,MAAMC,IACT3T,EAAAA,GAAWoD,YAAYrC,KAAMiS,IAAcY,kBAAiB,CAACC,EAAU6C,K,IACpD7C,EAAAA,EAAAA,EACC6C,EAAAA,EAAAA,EADlB,MAAMikD,EAAW9mD,SAAuB,QAAvBA,EAAAA,EAAU+mD,qBAAV/mD,IAAAA,GAA8B,QAA9BA,EAAAA,EAAyB1T,aAAzB0T,IAAAA,GAAoC,QAApCA,EAAAA,EAAgCkS,YAAhClS,IAAAA,OAAAA,EAAAA,EAAsC0c,OACjDsqC,EAAYnkD,SAAwB,QAAxBA,EAAAA,EAAWkkD,qBAAXlkD,IAAAA,GAA+B,QAA/BA,EAAAA,EAA0BvW,aAA1BuW,IAAAA,GAAqC,QAArCA,EAAAA,EAAiCqP,YAAjCrP,IAAAA,OAAAA,EAAAA,EAAuC6Z,OAEzD,KAAKmM,EAAAA,EAAAA,GAAei+B,EAAUE,GAAY,CACxC,MAAMC,EAAyB96D,EAAAA,GAAWoD,YAAYrC,KAAMg6D,IAC5Dh6D,KAAKoS,eAAe2nD,EAAuB36D,MAAMi5D,eAGjD0B,EAAuB95D,SAAS,CAC9BkwD,sBAAkBn4D,GAEtB,MAKJgI,KAAK2S,MAAMC,IACT3T,EAAAA,GAAWoD,YAAYrC,KAAMg6D,IAAwBnnD,kBAAiB,CAACC,EAAU6C,KAC/E,MAAMokD,EAAyB96D,EAAAA,GAAWoD,YAAYrC,KAAMg6D,IACxDlnD,EAASq9C,oBAAqBx0B,EAAAA,EAAAA,GAAe7oB,EAASq9C,iBAAkBx6C,EAAUw6C,kBACpFnwD,KAAKoS,eAAe2nD,EAAuB36D,MAAM+wD,kBAG5C4J,EAAuB36D,MAAM66D,eAChCj6D,KAAKoS,eAAe2nD,EAAuB36D,MAAMi5D,cAErD,IAGN,CAEcjmD,cAAAA,CAAeimD,EAAgC,I,kBAA7D,e,IAEE,EAAe,QAAf,IAAKj5D,MAAMkC,YAAX,SAAiB44D,cAAcrrC,IACzBA,aAAiB7a,EAAAA,IACnB6a,EAAM5uB,SAAS,CACbooB,MAAO,EAAK8xC,sBAAsB9B,KAGlCxpC,aAAiBmmC,GACnBnmC,EAAM5uB,SAAS,CACbo4D,iBAEJ,GAEJ,GAdA,E,CAgBcl9B,UAAAA,G,kBAAd,e,IAMuBlD,EAAAA,EALrB,MACMogC,EADyBp5D,EAAAA,GAAWoD,YAAY,EAAM23D,IACf56D,MAAMi5D,eAIE,QAAhCpgC,EAFAh5B,EAAAA,GAAWoD,YAAY,EAAM4P,IAEhB7S,MAAMy6D,qBAAnB5hC,IAAAA,GAA4C,QAA5CA,EAAAA,EAAkC74B,MAAM4lB,YAAxCiT,IAAAA,OAAAA,EAAAA,EAA8CzI,SAC7C6oC,EAKtB,EAAKp4D,SAAS,CACZqB,KAAM,EAAK84D,sBACX9B,mBAAoB,IAAItyD,IACxBk0B,SAAS,IAPT13B,EAAAA,EAAOC,KAAK,2CAShB,GAjBA,E,CAmBQssD,yBAAAA,CAA0B9+C,EAAoB6U,GACpD,MAAMu1C,EAAmCv1C,EAAQ+qC,yBAEjD/qC,EAAQ+qC,yBAA2B,CAAC/uD,EAAe24B,K,IAGAxpB,EAFjDoqD,SAAAA,EAAmCv5D,EAAO24B,GAE1C,MAAM6gC,EAA+E,QAApCrqD,EAAAA,EAAS7Q,MAAM+jD,YAAYG,iBAA3BrzC,IAAAA,OAAAA,EAAAA,EAAuC,GAClFsqD,EAA2BD,aAAAA,EAAAA,EAAUE,QAAQ52D,QAAQ62D,MACrDnC,EAAqB,IAAItyD,IAE3Bu0D,GACFA,EAAenrD,QAAQkpD,EAAmB1lD,IAAK0lD,GAGjDt4D,KAAKC,SAAS,CACZq4D,sBACA,CAEN,CAEQ8B,mBAAAA,GACN,MACM/B,EADyBp5D,EAAAA,GAAWoD,YAAYrC,KAAMg6D,IACf56D,MAAMi5D,cAEnD,IAAKA,EAEH,YADA71D,EAAAA,EAAOC,KAAK,qCAId,MAAMu0D,EAAah3D,KAAK06D,cAAcrC,GAEtC,OAAO,IAAItiC,EAAAA,GAAmB,CAC5BC,gBAAiB,OACjBE,SAAU,QACVC,QAAQ,EAERn9B,SAAU,CACRg+D,EACA,IAAIhC,EAAuB,CACzBqD,oBAIR,CAEQqC,aAAAA,CAAcrC,GACpB,MAAME,EAAiBt5D,EAAAA,GAAWoD,YAAYrC,KAAMsC,EAAAA,IAE9C00D,EAAazuC,EAAAA,GAAcC,aAC9BO,QAAQ/oB,KAAKm6D,sBAAsB9B,IACnC7M,UAAU,SAAU,CACnBmP,SAAS,EACTvqD,YAAY,EACZo+C,YAAaC,EAAAA,kBAAkBjM,MAC/BvgC,UAAW,QACXzpB,MAAO,MAERklC,gBAAe,GACfixB,QAAQ,SACRiM,SAAS,CACR,CACEzmD,IAAK,IACL0mD,aAAa,EACb7jE,QAAU4Q,IACRsoD,EAAe,CACbv2D,QAASiO,EAAMge,OAAOrC,OAAOrpB,KAC7BoC,KAAM,UACN8F,WAAYm2D,GACZ,EAEJlhE,MAAO,WAET,CACE8c,IAAK,IACL0mD,aAAa,EACb7jE,QAAU4Q,IACRsoD,EAAe,CACbv2D,QAASiO,EAAMge,OAAOrC,OAAOrpB,KAC7BoC,KAAM,UACN8F,WAAYm2D,GACZ,EAEJlhE,MAAO,aAGV2xB,QAMH,OAJAguC,EAAW/2D,SAAS,CAClB6uD,mBAAoB,CAAC7+C,EAAU6U,IAAY9kB,KAAK+uD,0BAA0B9+C,EAAU6U,KAG/EkyC,CACT,CAEQmD,qBAAAA,CAAsB9B,GAC5B,MAAMp1D,EAAYhE,EAAAA,GAAW8T,aAAa/S,MAAMZ,MAAMoF,MAEtD,OAAO,IAAIuyD,EAAAA,GAAc,CACvB/xC,KAAM,CACJwK,OAAQ6oC,EAAcj7D,KAAI,CAACo7D,EAAc9oC,KAEvC,MAAMmL,EAAY29B,EAAa39B,UAG/B,OAFAA,EAAUrX,OAAO,GAAGjI,OAAOhiB,MAW9B,SAA8BU,GACnC,MAAO,CACLw/B,KAAM,QACNqhC,WAAYpB,EAAQz/D,GAExB,CAhB6C8gE,CAAqBrrC,GACxDmL,EAAUrX,OAAO,GAAGtpB,KAAO,GACpB2gC,CAAS,IAElBz7B,MAAOmyB,EAAAA,aAAaC,KACpBvuB,UAAWA,IAGjB,CA9MAzC,WAAAA,CAAYpB,G,QACVqB,O,wUAAM,EACJy5B,SAAS,GACN96B,G,WAAAA,CACHk5D,mBAAoB,IAAItyD,M,gVAG1BhG,KAAKW,qBAAqBX,KAAKD,WAAWa,KAAKZ,MACjD,EAGA,EAZW24D,GAYGl5D,aAAY,EAAGV,Y,IAIV86D,EAHjB,MAAM,KAAEv4D,EAAI,QAAE44B,GAAYn7B,EAAMjF,WAC1BkhE,EAAqB/7D,EAAAA,GAAWoD,YAAYtD,EAAOkT,KACnD,cAAE4nD,GAAkBmB,EAAmBlhE,WACvCqC,EAAW09D,SAAyB,QAAzBA,EAAAA,EAAez6D,MAAM4lB,YAArB60C,IAAAA,OAAAA,EAAAA,EAA2BrqC,OAE5C,OACE,kBAACj5B,MAAAA,CAAIC,UAAWJ,GAAOK,YACnByjC,GAAW/9B,GAAYA,EAASnB,OAAS,GAAK,oCAAGsG,GAAQ,kBAACA,EAAK7B,UAAS,CAACV,MAAOuC,K,IAqM1F,MAAMlL,GAAS,CACbK,WAAWkB,EAAAA,EAAAA,KAAI,CACba,MAAO,OAEP,iBAAkB,CAChBZ,QAAS,W,mJCnPR,MAAMqjE,WAA+Bn8D,EAAAA,GAoC1C,aACE,MAAMi7D,EAAyB96D,EAAAA,GAAWoD,YAAYrC,KAAMg6D,IAC5Dh6D,KAAK2S,MAAMC,IACTmnD,EAAuBlnD,kBAAiB,CAACC,EAAU6C,KACjD,GAAI7C,EAASmnD,gBAAkBtkD,EAAUskD,cAAe,CACtD,MAAMF,EAAyB96D,EAAAA,GAAWoD,YAAYrC,KAAMg6D,IACxDD,EAAuB36D,MAAMi5D,gBAC/BhkB,EAAAA,GAAAA,GACE0lB,EAAuB36D,MAAMi5D,cAAcj7D,KAAKioB,GAAUA,EAAM1rB,UAChEogE,EAAuB36D,MAAM66D,cAC7Bj6D,KAAKk7D,eAGX,MAIJl7D,KAAK2S,MAAMC,IACTmnD,EAAuBlnD,kBAAiB,CAACC,EAAU6C,KAG/C7C,EAASmnD,gBACRnnD,EAASq9C,kBACVr9C,EAASulD,iBACR18B,EAAAA,EAAAA,GAAe7oB,EAASq9C,iBAAkBx6C,EAAUw6C,oBAErDn/B,EAAAA,GAAAA,GACEle,EAASulD,cAAcj7D,KAAKioB,GAAUA,EAAM1rB,UAC5CmZ,EAASmnD,cACTj6D,KAAKk7D,eAET,IAGN,CAOAC,mBAAAA,CAAoBh/D,EAAoBi/D,GACtC,MAAMrB,EAAyB96D,EAAAA,GAAWoD,YAAYrC,KAAMg6D,IACtD3B,EAAgB+C,QAAAA,EAAyBrB,EAAuB36D,MAAMi5D,cAE5E,GAAIA,EAAe,CACjB,MAAMgD,EAAwBhD,EAAch8D,QAAQm8D,MAC9CuB,EAAuB36D,MAAM66D,iBAAiB5B,aAAAA,EAAAA,EAAer9D,UACxDmB,EAASujB,MAAM/lB,GAAYA,IAAY6+D,EAAa7+D,YAK/DogE,EAAuB95D,SAAS,CAC9BkwD,iBAAkBkL,GAEtB,CACF,CAoBA,iBACiCp8D,EAAAA,GAAWoD,YAAYrC,KAAMg6D,IACrC/5D,SAAS,CAC9BkwD,sBAAkBn4D,GAEtB,CAnHAwI,WAAAA,CAAYpB,GACVqB,M,uUAAM,IACDrB,IASP,QAAOk8D,eAAc,KACYr8D,EAAAA,GAAWoD,YAAYrC,KAAMg6D,IACrC/5D,SAAS,CAC9Bg6D,cAAe,IACf,IAOJ,QAAOsB,sBAAsB12D,IACI5F,EAAAA,GAAWoD,YAAYrC,KAAMg6D,IACrC/5D,SAAS,CAC9Bg6D,cAAep1D,EAAEhH,OAAO2G,OACxB,IAsEJ02D,GAAAA,KAAAA,kBAAkBl2C,IAChB,MAAM+0C,EAAyB96D,EAAAA,GAAWoD,YAAYrC,KAAMg6D,IAExDD,EAAuB36D,MAAM66D,cAC/Bj6D,KAAKm7D,oBAAoBn2C,EAAK,IACrB+0C,EAAuB36D,MAAM+wD,mBAAqB4J,EAAuB36D,MAAM66D,eAExFj6D,KAAKw7D,gBACP,IAnGAx7D,KAAKW,qBAAqBX,KAAKD,WAAWa,KAAKZ,MACjD,EARA,GADWi7D,GACGx7D,aAkIT,UAAoC,MAAEV,IAC3C,MAAMg7D,EAAyB96D,EAAAA,GAAWoD,YAAYtD,EAAOi7D,KACvD,cAAEC,GAAkBF,EAAuBjgE,WACjD,OACE,kBAAC6lC,EAAAA,MAAKA,CAACnpC,UAAWJ,GAAOwtB,OACvB,kBAACsL,GAAAA,EAAWA,CACVlN,SAAUjjB,EAAMw8D,mBAChBtlE,QAAS8I,EAAMu8D,YACf92D,MAAOy1D,EACP9qC,YAAY,oBAIpB,IAvBA,MAAM/4B,GAAS,CACbwtB,OAAOjsB,EAAAA,EAAAA,KAAI,CACTmJ,MAAO,QACPme,aAAc,IAEhBmD,MAAMzqB,EAAAA,EAAAA,KAAI,CACR0D,OAAQ,a,eCrIL,SAASogE,KACd,OACE,kBAAC1iE,GAAAA,EAASA,KACR,kBAACxC,MAAAA,KACC,kBAAC8G,IAAAA,KACC,kBAAC63B,SAAAA,KAAO,6CAEV,kBAAC73B,IAAAA,KAAE,mDACgD,IACjD,kBAACq+D,EAAAA,SAAQA,CAAC/9D,KAAK,6BAA6Bg+D,UAAAA,GAAS,yCAIvD,kBAACt+D,IAAAA,KAAE,sFAIX,CAEO,SAASu+D,KACd,OACE,kBAAC7iE,GAAAA,EAASA,KACR,kBAACxC,MAAAA,KACC,kBAAC8G,IAAAA,KACC,kBAAC63B,SAAAA,KAAO,mDAAiD2mC,GAAuB,oBAElF,kBAACx+D,IAAAA,KAAE,UACO,IACR,kBAACq+D,EAAAA,SAAQA,CACP/9D,KAAK,wFACLg+D,UAAAA,GACD,iBAEW,IAAI,mBAM1B,C,yHCEO,MAAME,GAAyB,EAE/B,MAAM7B,WAA+Bl7D,EAAAA,GAkDlCiB,UAAAA,G,IAIak4B,EAAAA,EAQJA,EAXf,MAAMA,EAAeh5B,EAAAA,GAAWoD,YAAYrC,KAAMiS,IAClDjS,KAAK87D,UAEL,MAAMC,EAA6C,QAAhC9jC,EAAAA,EAAa74B,MAAMy6D,qBAAnB5hC,IAAAA,GAA4C,QAA5CA,EAAAA,EAAkC74B,MAAM4lB,YAAxCiT,IAAAA,OAAAA,EAAAA,EAA8CzI,OAG7DusC,GACF/7D,KAAKg8D,oBAAoBD,GAI3B/7D,KAAK2S,MAAMC,IAAoC,QAAhCqlB,EAAAA,EAAa74B,MAAMy6D,qBAAnB5hC,IAAAA,OAAAA,EAAAA,EAAkCplB,iBAAiB7S,KAAKi8D,cACzE,CAqBQH,OAAAA,GACN97D,KAAKC,SAAS,CACZqB,KAAM,IAAIsB,EAAAA,GAAgB,CACxBiN,UAAW,SACX7W,SAAU,CACR,IAAImiB,EAAAA,GAAc,CAChB+gD,QAAS,UACT56D,KAAM,IAAI25D,KAEZ,IAAI9/C,EAAAA,GAAc,CAChB7Z,KAAM,IAAIq3D,SAKpB,CAEQqD,mBAAAA,CAAoBD,GAC1B,IAAKA,EACH,OAGF,MAAM1D,EAAgBr4D,KAAKm8D,wBAAwBJ,GAEnD/7D,KAAKC,SAAS,CACZo4D,iBAEJ,CAEQ8D,uBAAAA,CAAwBthC,GAC9B,MAAM5C,EAAeh5B,EAAAA,GAAWoD,YAAYrC,KAAMiS,IAC5CwkD,EAAkBx3D,EAAAA,GAAWoD,YAAY41B,EAAc31B,EAAAA,IAAYlD,MAAMjD,SAE/E,OAAO0+B,EAAUz9B,KAAKy9B,I,IAGAA,EAAAA,EAFpB,MAAMm9B,EAAkBvB,aAAAA,EAAAA,EAAiB/2C,MAAMu4C,GAAmBA,EAAet+D,UAAYkhC,EAAU3gC,OAEjGwuC,EAA4B,QAAd7N,EAAAA,EAAU/kB,YAAV+kB,IAAAA,GAAsB,QAAtBA,EAAAA,EAAgBwoB,cAAhBxoB,IAAAA,OAAAA,EAAAA,EAAwB6N,I,IAGjC7N,EAKX,MAPmC,CACjCA,YACAlhC,QAAuB,QAAdkhC,EAAAA,EAAU3gC,YAAV2gC,IAAAA,EAAAA,EAAkB,GAC3B6N,MACAzT,OAAQ+iC,aAAAA,EAAAA,EAAiB17D,KAGR,GAEvB,CAjIAkE,WAAAA,CAAYpB,G,IAGNA,EAFJqB,M,uUAAM,EACJob,WACkB,QAAhBzc,EAAAA,EAAMyc,kBAANzc,IAAAA,EAAAA,EACA,IAAIsb,EAAAA,GAAiB,CACnBvb,UAAW,CAAC,IAAIwb,EAAAA,GAAe,CAAEzgB,KAAMkkC,EAAAA,GAAoB/C,cAAc,EAAMC,YAAY,OAE/FpB,SAAS,EACT+/B,cAAe,IACZ76D,IAuDP,QAAQ68D,gBAAe,CAACnpD,EAA0B6C,K,IAC9B7C,EACC6C,EAEf7C,EAQOA,EAXX,MAAM4d,EAAyB,QAAb5d,EAAAA,EAASkS,YAATlS,IAAAA,OAAAA,EAAAA,EAAe0c,OAC3B4sC,EAA2B,QAAdzmD,EAAAA,EAAUqP,YAAVrP,IAAAA,OAAAA,EAAAA,EAAgB6Z,QAElB,QAAb1c,EAAAA,EAASkS,YAATlS,IAAAA,OAAAA,EAAAA,EAAe1T,SAAUmyB,EAAAA,aAAaC,MACxCxxB,KAAKC,SAAS,CACZi6B,SAAS,KAGNyB,EAAAA,EAAAA,GAAejL,EAAW0rC,IAC7Bp8D,KAAKg8D,oBAAoBtrC,KAEL,QAAb5d,EAAAA,EAASkS,YAATlS,IAAAA,OAAAA,EAAAA,EAAe1T,SAAUmyB,EAAAA,aAAa8qC,SAC/Cr8D,KAAKC,SAAS,CACZi6B,SAAS,GAEb,IApEAl6B,KAAKW,qBAAqBX,KAAKD,WAAWa,KAAKZ,MACjD,EAuHF,SAAS1J,GAAUoB,GACjB,MAAO,CACLjB,WAAWkB,EAAAA,EAAAA,KAAI,CACbwJ,SAAU,EACVvJ,QAAS,OACTwJ,UAAW,OACXH,cAAe,WAEjBw7B,SAAS9kC,EAAAA,EAAAA,KAAI,CACXwJ,SAAU,EACVvJ,QAAS,OACT+kC,WAAYjlC,EAAMiB,QAAQ,KAE5BoJ,UAAUpK,EAAAA,EAAAA,KAAI,CACZwJ,SAAU,EACVvJ,QAAS,OACTiB,WAAY,MACZuC,IAAK1D,EAAMiB,QAAQ,KAErB2jE,eAAe3kE,EAAAA,EAAAA,KAAI,CACjBwJ,SAAU,EACVvJ,QAAS,OACTC,eAAgB,aAElB0kE,cAAc5kE,EAAAA,EAAAA,KAAI,CAChBC,QAAS,OACTC,eAAgB,YAChB2kE,aAAc,OACdhkE,MAAO,OACPyI,cAAe,WAEjBw7D,oBAAoB9kE,EAAAA,EAAAA,KAAI,CACtBe,QAAShB,EAAMiB,QAAQ,KAG7B,CAvJE,GAjBWqhE,GAiBGv6D,aAAY,EAAGV,YAC3B,MAAM,KAAEuC,EAAI,QAAE44B,EAAO,gBAAEqC,EAAe,cAAE87B,GAAkBt5D,EAAMjF,YACxD0K,MAAOvB,GAAchE,EAAAA,GAAW8T,aAAahU,GAAOjF,WACtD1D,GAASC,EAAAA,EAAAA,YAAWC,IACpBomE,GAAkBC,EAAAA,EAAAA,YAAWtmD,KAAKpT,EAAUmT,GAAI,UAAYylD,GAElE,OACE,kBAACtlE,MAAAA,CAAIC,UAAWJ,EAAOK,WACrB,kBAAC+lC,EAAAA,EAAkB,CAAEzJ,UAAWmH,EAASqC,oBACrCrC,IAAYm+B,GACZ,kBAAC9hE,MAAAA,CAAIC,UAAWJ,EAAOqmE,oBACrB,kBAACpjE,EAAAA,KAAIA,CAACC,cAAc,SAASC,MAAM,WACjC,kBAAC8D,IAAAA,KAAE,iCACH,kBAACA,IAAAA,KAAE,6CACH,kBAACA,IAAAA,KAAE,uFACH,kBAACA,IAAAA,KAAE,kEACH,kBAACA,IAAAA,KACC,kBAACu/D,OAAAA,KAAK,uCAMZ1iC,GAAqC,KAA1Bm+B,aAAAA,EAAAA,EAAer9D,SAAgB0hE,GAAmB,kBAACd,GAAcA,OAC5E1hC,GAAqC,KAA1Bm+B,aAAAA,EAAAA,EAAer9D,UAAiB0hE,GAAmB,kBAACjB,GAAmBA,OAClFvhC,GAAWm+B,GAAiBA,EAAcr9D,OAAS,GACnD,kBAACzE,MAAAA,CAAIC,UAAWJ,EAAOqmC,SAAUn7B,GAAQ,kBAACA,EAAK7B,UAAS,CAACV,MAAOuC,M,8BC1ErE,YAAKu7D,G,+EAAAA,C,CAAL,C,IAaA,MAAMC,GAAuD,CAClE,CACE/a,YAAa,OACbv9C,MAAOsN,EAAAA,GAAUqR,KACjBH,SAAU,IAiFL,IAAIpgB,EAAAA,GAAgB,CACzBiN,UAAW,SACX7W,SAAU,CACR,IAAImiB,EAAAA,GAAc,CAChB7Z,KAAM,IAAImrD,GAAAA,EAAgB,CAAC,KAE7B,IAAItxC,EAAAA,GAAc,CAChB/Z,UAAW,QACX3I,OAAQ,sBACR6I,KAAM,IAAIusC,EAAAA,EAAc,CAAC,QAzF7BkvB,OAAQ7lE,EAAAA,EAAQC,sBAAsB6lE,SAExC,CACEjb,YAAa,SACbv9C,MAAOsN,EAAAA,GAAUyR,OACjBP,SAAU,IA2FL,IAAIpgB,EAAAA,GAAgB,CACzBohB,WAAY,CAAC,IAAIi5C,EAAAA,GAAAA,GAAqB,CAAEhjE,IAAK,OAAQijE,KAAMC,GAAAA,GAAoBC,aAC/EpkE,SAAU,CACR,IAAImiB,EAAAA,GAAc,CAChB7Z,KAAM,IAAIitB,EAAAA,EAAoB,CAAC,QA9FnCwuC,OAAQ7lE,EAAAA,EAAQC,sBAAsBkmE,WAExC,CACEtb,YAAa,SACbv9C,MAAOsN,EAAAA,GAAU0R,OACjBR,SAAW5d,IAAMk4D,OAmCoBC,EAnCYn4D,EAoC5C,IAAIxC,EAAAA,GAAgB,CACzBohB,WAAY,CAAC,IAAIi5C,EAAAA,GAAAA,GAAqB,CAAEhjE,IAAK,OAAQijE,KAAMC,GAAAA,GAAoBC,aAC/EpkE,SAAU,CACR,IAAImiB,EAAAA,GAAc,CAChB7Z,KAAM,IAAIktB,EAAAA,GAAqB,CAAEyL,iBAAkBsjC,SAL3D,IAAyCA,CAnCc,EACnDR,OAAQ7lE,EAAAA,EAAQC,sBAAsBqmE,WAExC,CACEzb,YAAa,WACbv9C,MAAOsN,EAAAA,GAAU3V,SACjB6mB,SAAU,IAoBL,IAAIpgB,EAAAA,GAAgB,CACzB5J,SAAU,CACR,IAAImiB,EAAAA,GAAc,CAChB7Z,KAAM,IAAI04D,GAAuB,CAAC,QAtBtC+C,OAAQ7lE,EAAAA,EAAQC,sBAAsBsmE,cAG7BC,GAAsD,CACjE,CACE3b,YAAa,QACbv9C,MAAOmf,EAAAA,GAAW7iB,MAClBkiB,SAAWxe,GA2Cf,SAA8CA,GAC5C,OAAO,IAAI5B,EAAAA,GAAgB,CACzBohB,WAAY,CAAC,IAAIi5C,EAAAA,GAAAA,GAAqB,CAAEhjE,IAAK,OAAQijE,KAAMC,GAAAA,GAAoBC,aAC/EpkE,SAAU,CACR,IAAImiB,EAAAA,GAAc,CAChB7Z,KAAM,IAAIitB,EAAAA,EAAoB,CAAE/pB,cAIxC,CApDiCm5D,CAAqCn5D,GAClEu4D,OAAQ7lE,EAAAA,EAAQC,sBAAsBkmE,WAExC,CACEtb,YAAa,QACbv9C,MAAOmf,EAAAA,GAAWC,MAClBZ,SAAWxe,GA0Bf,SAA8CA,GAC5C,OAAO,IAAI5B,EAAAA,GAAgB,CACzBohB,WAAY,CAAC,IAAIi5C,EAAAA,GAAAA,GAAqB,CAAEhjE,IAAK,OAAQijE,KAAMC,GAAAA,GAAoBC,aAC/EpkE,SAAU,CACR,IAAImiB,EAAAA,GAAc,CAChB7Z,KAAM,IAAIktB,EAAAA,GAAqB,CAAEhqB,cAIzC,CAnCiCo5D,CAAqCp5D,GAClEu4D,OAAQ7lE,EAAAA,EAAQC,sBAAsBqmE,Y,wcC1BnC,MAAMK,WAAyB/+D,EAAAA,GAK7Bg/D,SAAAA,CAAUniD,GACf3b,KAAKC,SAAS,CAAE0b,UAClB,CAEOoiD,UAAAA,CAAWC,EAAkBC,EAAkB9pD,GAChD6pD,GACFE,GAAuB/pD,GAAOgqD,EAAAA,EAAOlmD,SAASta,OAC9Cs2C,EAAAA,EAAAA,mBAAkB,yCAA0C,CAAEmqB,eAAgBH,OAE9ErR,EAAAA,GAAAA,SACU50D,IAARmc,EACI,GAAGrZ,OAAOmd,SAASomD,aAAavjE,OAAOmd,SAASqmD,OAAO/iD,EAAAA,OAAO8P,YAAYlX,IAC1EgqD,EAAAA,EAAOlmD,SAASta,MAGlBqC,KAAKZ,MAAM2+D,YACb/9D,KAAKZ,MAAM2+D,WAAWC,EAASC,EAAS9pD,GAG9C,CAvBA3T,WAAAA,CAAYpB,GACVqB,M,uUAAM,EAAEkb,QAAQ,EAAO4iD,aAAcC,IAAgBp/D,GACvD,EAuBA,GA1BWy+D,GA0BJY,eAAc,EAAG1/D,YACtB,MAAM2/D,EAAoC,CACxC,CACEzkE,IAAK,SACL6G,MAAO,mBACPimB,MAAO,CACL,CACE9sB,IAAK,sBACLmoB,KAAM,OACNthB,MAAO,qBACP69D,OAAQ,KAAe,EACvBX,SAAS,EACTC,SAAS,GAEX,CACEhkE,IAAK,YACLmoB,KAAM,OACNthB,MAAO,WACP69D,OAAQ,KAAe,EACvBX,SAAS,EACTC,SAAS,KAIf,CACEhkE,IAAK,WACL6G,MAAO,qDACPimB,MAAO,CACL,CACE9sB,IAAK,2BACLmoB,KAAM,aACNthB,MAAO,8BACPk9D,SAAS,EACTW,OAAQ,IACCC,QAC6B5mE,IAAlC+G,EAAMK,MAAMy/D,kBACR9/D,EAAMK,MAAMy/D,oBACZ5/D,EAAAA,GAAW8T,aAAahU,IAGhCk/D,SAAS,GAEX,CACEhkE,IAAK,qBACLmoB,KAAM,aACNthB,MAAO,oBACPk9D,SAAS,EACTW,OAAQ,IACCC,QAC6B5mE,IAAlC+G,EAAMK,MAAMy/D,kBACR9/D,EAAMK,MAAMy/D,oBACZ5/D,EAAAA,GAAW8T,aAAahU,IAGhCk/D,SAAS,MAMjB,OACE,kBAACa,EAAAA,KAAIA,KACFJ,EAAYthE,KAAK2hE,GAEd,kBAACC,EAAAA,UAASA,CAAC/kE,IAAK8kE,EAAY9kE,IAAK6G,MAAOi+D,EAAYj+D,OACjDi+D,EAAYh4C,MAAM3pB,KAAK4J,GAEpB,kBAAC83D,EAAAA,KAAKG,KAAI,CACRhlE,IAAK+M,EAAO/M,IACZ6G,MAAOkG,EAAOlG,MACdshB,KAAMpb,EAAOob,KACbprB,QAAS,KACP,MAAMmd,EAAMnN,EAAO23D,SACnB5/D,EAAMg/D,WAAW/2D,EAAOg3D,QAASh3D,EAAOi3D,QAAS9pD,GACjDpV,EAAMkB,SAAS,CACbs+D,aAAcv3D,GACd,SAOhB,IAKN,GAlHW62D,GAkHJp+D,aAAY,EAAGV,YACpB,MAAM,aAAEw/D,EAAY,OAAE5iD,GAAW5c,EAAMjF,WAEvC,OACE,kBAACgtC,EAAAA,YAAWA,KACV,kBAAC3kB,EAAAA,cAAaA,CACZiE,QAASm4C,EAAaz9D,MACtBshB,KAAMm8C,EAAan8C,KACnBzrB,QAAS,SACTuoE,QAAQ,EACRloE,QAAS,KACP,MAAMmd,EAAMoqD,EAAaI,SACzB5/D,EAAMg/D,WAAWQ,EAAaP,QAASO,EAAaN,QAAS9pD,EAAI,EAEnE9Z,aAAY,sBAEZ,kBAACglB,OAAAA,KAAK,UAER,kBAACqC,EAAAA,SAAQA,CACPC,QAAS,kBAACk8C,GAAiBY,YAAW,CAAC1/D,MAAOA,IAC9CkjB,UAAU,aACVC,gBAAiBnjB,EAAM++D,UAAUl9D,KAAK7B,IAEtC,kBAACojB,EAAAA,cAAaA,CAAC+8C,QAAQ,EAAMvoE,QAAS,SAAUglB,OAAQA,EAAQthB,aAAY,4B,IAOtF,MAAMmkE,GAAqC,CACzCvkE,IAAK,YACL6G,MAAO,qBACPshB,KAAM,YACNu8C,OAAQ,KAAe,EACvBX,SAAS,EACTC,SAAS,GAQX,SAASkB,GAAmBhrD,GAC1B,IAAI+lC,EAAO/lC,EAAI7P,QAJR,GAAGxJ,OAAOmd,SAASomD,aAAavjE,OAAOmd,SAASqmD,OAAO/iD,EAAAA,OAAO8P,YAI9B,IACvC,OAAO6uB,EAAK7tC,WAAW,KAAO6tC,EAAKh/C,UAAU,EAAGg/C,EAAKl/C,QAAUk/C,CACjE,CAEO,MAAMklB,GAAAA,W,MAAkB,cAAgBllB,GAC7C,MAAM7qC,GAAYC,EAAAA,EAAAA,gBAClB,IAIE,aAHwB+vD,EAAAA,EAAAA,iBAAgBC,KAAK,kBAAmB,CAC9DplB,KAAMilB,GAAmBjlB,MAEV/lC,GACnB,CAAE,MAAO6gB,GACPle,QAAQvT,MAAM,uCAAwCyxB,GAEtD3lB,EAAUmF,QAAQ,CAChBlY,KAAMoa,EAAAA,UAAU6oB,WAAWrlC,KAC3BuZ,QAAS,CAAC,oCAEd,CACF,I,gBAf+CymC,G,gCAAlCklB,GAiBAlB,GAAAA,W,MAAyB,cAAOhkB,GAC3C,MAAM7qC,GAAYC,EAAAA,EAAAA,gBACZiwD,QAAkBH,GAAgBllB,GACpCqlB,IACF3S,EAAAA,GAAAA,IAAS2S,GACTlwD,EAAUmF,QAAQ,CAChBlY,KAAMoa,EAAAA,UAAU8oD,aAAatlE,KAC7BuZ,QAAS,CAAC,yCAGZpE,EAAUmF,QAAQ,CAChBlY,KAAMoa,EAAAA,UAAU6oB,WAAWrlC,KAC3BuZ,QAAS,CAAC,oCAGhB,I,gBAf6CymC,G,gCAAhCgkB,GAqBPU,GAAwB37D,IAC5B,MAAMqT,GAAOmpD,EAAAA,EAAAA,OAAMx8D,EAAU7D,MAAMoF,MAAM8R,MACnCF,GAAKqpD,EAAAA,EAAAA,OAAMx8D,EAAU7D,MAAMoF,MAAM4R,IACjC6B,EAAW5D,EAAAA,gBAAgB6D,cAC3BwxC,EAAep+B,EAAAA,QAAQo0C,qBAG7B,OAFAhW,EAAmB,KAAIpzC,EAAKqpD,cAC5BjW,EAAiB,GAAItzC,EAAGupD,cACjBr0C,EAAAA,QAAQC,UAAUtT,EAAS2nD,SAAUlW,EAAa,ECpOpD,MAAMmW,WAAuB/gE,EAAAA,GAOlCiB,UAAAA,GACE,MACM+/D,EADa7gE,EAAAA,GAAWoD,YAAYrC,KAAMsC,EAAAA,IAClBlD,MAAMkd,QACPtkB,KAAzB8nE,aAAAA,EAAAA,EAAYzR,WACdruD,KAAKC,SAAS,CACZouD,SAAUyR,EAAWzR,WAIpBruD,KAAKZ,MAAM2gE,kBACd//D,KAAKC,SAAS,CACZ8/D,iBAAkB,IAAIlC,GAAiB,CAAC,IAG9C,CApBAr9D,WAAAA,CAAYpB,GACVqB,MAAMrB,GAENY,KAAKW,qBAAqBX,KAAKD,WAAWa,KAAKZ,MACjD,G,6GAiBA,CAtBW6/D,GAsBGpgE,aAAY,EAAGV,YAC3B,MAAM3I,GAASC,EAAAA,EAAAA,YAAWC,IAC1B,IAAI0pE,GAA2BnuD,EAAAA,EAAAA,MAC3BouD,GAAmB,EAEvB,IAAK9zD,OAAOzI,OAAOoO,EAAAA,IAAWxS,SAAS0gE,GAA2B,CAChE,MAAME,GAAqBC,EAAAA,EAAAA,MAC3BF,GAAmB,EACfC,IAAuBv8C,EAAAA,GAAWC,QACpCo8C,EAA2BluD,EAAAA,GAAU0R,QAEnC08C,IAAuBv8C,EAAAA,GAAW7iB,QACpCk/D,EAA2BluD,EAAAA,GAAUyR,OAEzC,CAEA,MAAM0U,EAAeh5B,EAAAA,GAAWoD,YAAYtD,EAAOkT,IACagmB,EAAAA,EAAan+B,YAAvE,QAAEogC,EAAO,MAAE7R,EAAK,UAAE2iC,EAAS,eAAEmD,GAA6Bl2B,EAAV74B,E,kXAAAA,CAAU64B,EAAAA,CAAxDiC,UAAS7R,QAAO2iC,YAAWmD,oBAC7B,SAAEE,GAAatvD,EAAMjF,WAErBsmE,EAAgBhhE,EAAMghE,cAE5B,OACE,kBAACC,EAAAA,IAAGA,CAACC,SAAU,GACb,kBAAC/pE,MAAAA,CAAIC,UAAWJ,EAAO4yD,SACrB,kBAACxmB,EAAAA,MAAKA,CAACpnC,IAAK,GACTmgB,EAAAA,OAAOC,eAAe+kD,YAAc,kBAACC,GAAAA,CAA0BvoC,aAAcA,IAC7El5B,EAAMK,MAAM2gE,kBACX,kBAAChhE,EAAMK,MAAM2gE,iBAAiBtgE,UAAS,CAACV,MAAOA,EAAMK,MAAM2gE,qBAKjE,kBAACU,EAAAA,QAAOA,KACL3D,GAA0B1/D,KAAI,CAACsjE,EAAK7gD,IAEjC,kBAAC8gD,EAAAA,IAAGA,CACF1pE,cAAaypE,EAAI3D,OACjB9iE,IAAK4lB,EACL/e,MAAO4/D,EAAI3e,YACX5hC,OAAQ6/C,IAA6BU,EAAIl8D,MACzCo8D,QAASR,EAAcM,EAAI3e,kBAAe/pD,EAAY6oE,GAAWH,EAAKthE,GACtEghC,OACEsgC,EAAI3e,cAAgB8a,GAAS15C,KACzB,EAAG3sB,eAyHzB,SACEA,EACAsqE,EACA9V,EACAqD,GAEA,MAAMj4D,GAASC,EAAAA,EAAAA,YAAW0qE,IACpB1V,GAAiBC,EAAAA,EAAAA,gBAAe,SAGtC,QAAmBtzD,IAAf8oE,QAA0C9oE,IAAdgzD,GAA2BA,EAAYqD,EAAU,C,IAK1EjD,EAJL,MAAMA,EAAiBC,EAAeL,EAAW,GACjD,OACE,kBAAC3rC,OAAAA,CAAK7oB,WAAWkM,EAAAA,EAAAA,IAAGlM,EAAWJ,EAAO4qE,kBACnC5V,EAAexyD,KACM,QAArBwyD,EAAAA,EAAehrB,cAAfgrB,IAAAA,OAAAA,EAAAA,EAAuBG,OAG9B,CAAO,QAAmBvzD,IAAf8oE,EAA0B,C,IAK9B1S,EAJL,MAAMA,EAAsB/C,EAAeyV,EAAY,GACvD,OACE,kBAACzhD,OAAAA,CAAK7oB,WAAWkM,EAAAA,EAAAA,IAAGlM,EAAWJ,EAAO4qE,kBACnC5S,EAAoBx1D,KACM,QAA1Bw1D,EAAAA,EAAoBhuB,cAApBguB,IAAAA,OAAAA,EAAAA,EAA4B7C,OAGnC,CAEA,OAAO,kBAAClsC,OAAAA,CAAK7oB,WAAWkM,EAAAA,EAAAA,IAAGlM,EAAWJ,EAAO6qE,mBAC/C,CAtJyCC,CAAU1qE,EAAW23D,EAAgBnD,EAAWqD,QAAAA,EAAYC,EAAAA,SAC/Et2D,EAENoqB,KAAMg+C,EAAcM,EAAI3e,aAAe,eAAY/pD,EACnDmpE,YAAa,KACX,GAAI,EAAK38D,OAASk8D,EAAIl8D,QAAUw7D,GAA6BC,EAAkB,EAC7EvjE,EAAAA,EAAAA,IACEC,EAAAA,GAAkBC,gBAClBC,EAAAA,GAAoBD,gBAAgBwkE,oBACpC,CACEC,cAAeX,EAAIl8D,MACnB88D,mBAAoBtB,IAIxB,MAAM/nC,EAAeh5B,EAAAA,GAAWoD,YAAYtD,EAAOkT,KACnDojB,EAAAA,EAAAA,IAAwBqrC,EAAIl8D,MAAOyzB,EACrC,QAIR,IAMV,MAAM4oC,GAAa,CAACH,EAA8BthE,KAChD,OAAQshE,EAAIl8D,OACV,IAAK,SACH,OAAOpF,EAAM84B,YACf,IAAK,WACH,OAAO94B,EAAMmiE,cACf,IAAK,SACH,OAAOniE,EAAMoiE,YACf,QACE,OACJ,EAGF,SAASlrE,GAAUoB,GACjB,MAAO,CACLsxD,SAASrxD,EAAAA,EAAAA,KAAI,CACX,CAACD,EAAMqJ,YAAY0gE,GAAG/pE,EAAMqJ,YAAY2C,OAAOg+D,KAAM,CACnD1jE,SAAU,WACV0iD,MAAO,EACPz/B,OAAQ,KAIhB,CAQA,SAASu/C,GAA0B5qE,GACjC,MAAO8L,EAASigE,IAAc7nE,EAAAA,EAAAA,WAC5Bub,EAAAA,EAAAA,IAAkBzf,EAAMqiC,cAAc74B,MAAMsC,UAE9C4vC,EAAAA,EAAAA,YAAU,KACR,MAAMswB,GAAMvsD,EAAAA,EAAAA,IAAkBzf,EAAMqiC,cAAcplB,kBAAkBC,IAClE6uD,EAAW7uD,EAASpR,QAAQ,IAE9B,MAAO,KACLkgE,EAAI/sD,aAAa,CAClB,GACA,CAACjf,EAAMqiC,eAEV,MAAOtc,EAAQmiD,IAAahkE,EAAAA,EAAAA,WAAkB,GACxCmyB,GAAajG,EAAAA,EAAAA,gBAAe,CAChCC,iBAAkB,kDAClB47C,eAAgB,EAChB/8C,QAAS,CAAEpjB,aAGb,GAAIuqB,EAAW8G,WAAyC,IAA5B9G,EAAWlG,MAAM/qB,OAC3C,OAAO,KAGT,GAAgC,IAA5BixB,EAAWlG,MAAM/qB,OAAc,CACjC,MAAM6J,EAAIonB,EAAWlG,MAAM,GAE3B,OACE,kBAACxvB,MAAAA,KACC,kBAAC4rB,EAAAA,cAAaA,CAACxrB,QAAS,SAAUsD,IAAK4K,EAAEghB,GAAI7uB,QAAU4Q,I,IAAU/C,E,OAAS,QAATA,EAAAA,EAAE7N,eAAF6N,IAAAA,OAAAA,EAAAA,EAAAA,KAAAA,EAAY+C,EAAM,EAAEwa,KAAMvd,EAAEud,MAAM,WACxFvd,EAAExN,OAInB,CAEA,MAAMswB,EACJ,kBAACm3C,EAAAA,KAAIA,KACF7yC,EAAWlG,MAAM3oB,KAAKkB,GAEnB,kBAACwgE,EAAAA,KAAKG,KAAI,CACR6C,UAAWxjE,EAAKjH,MAChB+qB,MAAM9jB,aAAAA,EAAAA,EAAM8jB,OAAQ,OACpBnoB,IAAKqE,EAAKunB,GACV/kB,MAAOxC,EAAKjH,MACZL,QAAU4Q,I,IACRtJ,EAAY,QAAZA,EAAAA,EAAKtH,eAALsH,IAAAA,GAAAA,EAAAA,KAAAA,EAAesJ,EAAM,OAQjC,OACE,kBAAC8Z,EAAAA,SAAQA,CAACQ,gBAAiB47C,EAAW77C,UAAU,eAAeN,QAASgG,GACtE,kBAACxF,EAAAA,cAAaA,CAAC9nB,aAAW,eAAe1D,QAAQ,SAASglB,OAAQA,GAAQ,gBAKhF,CAiCA,SAASolD,GAAmBrpE,GAC1B,MAAO,CACLupE,kBAAkBtpE,EAAAA,EAAAA,KAAI,CACpBC,QAAS,eACTuG,SAAUzG,EAAM0G,WAAWC,UAAUF,SACrC4zB,SAAU,MACVh0B,WAAYrG,EAAMiB,QAAQ,GAC1BD,QAAShB,EAAMiB,QAAQ,IAAM,KAE/BqoE,iBAAiBrpE,EAAAA,EAAAA,KAAI,CACnBwG,SAAUzG,EAAM0G,WAAWC,UAAUF,SACrC2C,MAAO,UACP/C,WAAYrG,EAAMiB,QAAQ,GAC1Bb,aAAcJ,EAAMiB,QAAQ,GAC5B8C,gBAAiB/D,EAAMgE,OAAO4M,OAAO6iC,MACrCzyC,QAAShB,EAAMiB,QAAQ,IAAM,GAC7BY,MAAO7B,EAAMgE,OAAO9C,KAAK+C,UACzBylB,WAAY1pB,EAAM0G,WAAWijB,mBAGnC,C,gDC5PA,SAAS0gD,GAAiBv9D,EAAeuZ,GACvC,MAAMikD,EAA6B,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAIhG,OAHKjkD,GACHikD,EAA2Bh5D,KAAK,MAE3BxE,EACJsE,MAAM,IACNzM,QAAO,CAAC4lE,EAAMpiD,EAAOqiD,KAGpB,MAAMC,EAAWD,EAAYriD,EAAQ,GAC/BuiD,EAAkBJ,EAA2B1iE,SAAS6iE,GAC5D,QAAkB,OAATF,GAAiBG,EAAc,IAEzCx3D,KAAK,GACV,C,mzBCuCO,MAAMy3D,GAAyB,iBACzBC,GAAyB,iBA+B/B,SAASj9B,GAAkBrgB,GAChC,OAAOA,aAAAA,EAAAA,EAAMwK,OAAO9P,MAAM8P,GAAWA,EAAOtE,QAAUm3C,IACxD,CAEO,SAASz0C,GAAuB5qB,G,IAE9Bi1B,EAAAA,EAAAA,EAAP,OAA6C,QAAtCA,EADch5B,EAAAA,GAAWoD,YAAYW,EAAUiP,IAClC7S,MAAM+6B,2BAAnBlC,IAAAA,GAAkD,QAAlDA,EAAAA,EAAwC74B,MAAM4lB,YAA9CiT,IAAAA,GAA0D,QAA1DA,EAAAA,EAAoDzI,cAApDyI,IAAAA,OAAAA,EAAAA,EAA6D,EACtE,CAEO,SAAS5D,GAAuBrxB,G,IAEai1B,EADlD,MAAMA,EAAeh5B,EAAAA,GAAWoD,YAAYW,EAAUiP,IACtD,OAAOykB,GAAiF,QAAtCuB,EAAAA,EAAa74B,MAAMg5B,2BAAnBH,IAAAA,OAAAA,EAAAA,EAAwC74B,MAC5F,CAEO,MAAMs3B,GAA8Ct3B,I,IAElDA,EAAAA,EAAP,OAAOA,SAAW,QAAXA,EAAAA,EAAO4lB,YAAP5lB,IAAAA,GAAmB,QAAnBA,EAAAA,EAAaowB,cAAbpwB,IAAAA,OAAAA,EAAAA,EAAsB,EAAE,EAGpBw3B,GAA8Cx3B,I,IAElDA,EAAAA,EAAAA,EAAAA,EAAP,OAAiB,QAAVA,EAAAA,EAAM4lB,YAAN5lB,IAAAA,GAAkB,QAAlBA,EAAAA,EAAYowB,cAAZpwB,IAAAA,GAAuB,QAAvBA,EAAAA,EAAqB,UAArBA,IAAAA,GAA+B,QAA/BA,EAAAA,EAAyBokB,cAAzBpkB,IAAAA,OAAAA,EAAAA,EAAkC,EAAE,EAGhC03B,GAAgD13B,I,IAEpDA,EAAAA,EAAAA,EAAAA,EAAP,OAAiB,QAAVA,EAAAA,EAAM4lB,YAAN5lB,IAAAA,GAAkB,QAAlBA,EAAAA,EAAYowB,cAAZpwB,IAAAA,GAAuB,QAAvBA,EAAAA,EAAqB,UAArBA,IAAAA,GAA+B,QAA/BA,EAAAA,EAAyBokB,cAAzBpkB,IAAAA,OAAAA,EAAAA,EAAkC,EAAE,EAGtC,MAAM6S,WAAqBnT,EAAAA,GAqCxByjE,4BAAAA,GACN,MAAMljE,GAAWgW,EAAAA,EAAAA,IAAkBrV,MACG,IAAlCX,EAASD,MAAMsC,QAAQ1G,OAI3BgF,KAAK2S,MAAMC,IACTvT,EAASwT,kBAAiB,CAACC,EAAU6C,KACH,IAA5B7C,EAASpR,QAAQ1G,QACnBgF,KAAKwiE,kBAIP,IAAI,UAAEr+C,EAAS,WAAEC,EAAU,eAAExS,IAAmB2oB,EAAAA,EAAAA,MAG5CpW,IAAc2Z,EAAAA,KAChB3Z,EAAY4Z,EAAAA,IAEd,MAAM37B,EAAanD,EAAAA,GAAWoD,YAAYrC,KAAMsC,EAAAA,IAC1CmgE,EAAiBrgE,EAAWhD,MAAMsS,WAGxC,GACGoB,EAASpR,QAAQ8D,MACfJ,GAAMA,EAAEnL,MAAQkqB,GAA4B,MAAf/e,EAAEC,WAAoBq9D,EAAAA,GAAAA,IAAat9D,EAAEZ,SAAW4f,KA6B3E,KAAKuX,EAAAA,EAAAA,GAAe7oB,EAASpR,QAASiU,EAAUjU,SAAU,C,IAC/D,EACA,EACA,EACA,EAHwB,QAAxB,EAAA1B,KAAKZ,MAAMy6D,qBAAX,SAA0B3O,aACI,QAA9B,EAAAlrD,KAAKZ,MAAM+6B,2BAAX,SAAgC+wB,aACF,QAA9B,EAAAlrD,KAAKZ,MAAMg5B,2BAAX,SAAgC8yB,aACX,QAArB,EAAAlrD,KAAKZ,MAAMujE,kBAAX,SAAuBzX,YACzB,MAhCE,CACA,MAAMltB,EAAkBlrB,EAASpR,QAAQge,MAAMta,GAAqB,MAAfA,EAAEC,UAAoBD,EAAEZ,QAAUogC,EAAAA,K,IAU5E69B,EACCA,EACGA,EAXXzkC,GACF57B,EAAWnC,SAAS,CAClByR,WAAY,SACP+wD,GAAAA,CACH9wD,OAAQ,SACH8wD,aAAAA,EAAAA,EAAgB9wD,QAAM,CACzBwS,UAAW6Z,EAAgB/jC,MAAQ8jC,EAAAA,GAAeD,EAAAA,GAAmBE,EAAgB/jC,IACrFmqB,YAAYs+C,EAAAA,GAAAA,IAAa1kC,EAAgBx5B,SAE3C2P,IAAwB,QAAnBsuD,EAAAA,aAAAA,EAAAA,EAAgBtuD,WAAhBsuD,IAAAA,EAAAA,EAAuB,GAC5BvoB,KAA0B,QAApBuoB,EAAAA,aAAAA,EAAAA,EAAgBvoB,YAAhBuoB,IAAAA,EAAAA,EAAwB,GAC9BG,QAAgC,QAAvBH,EAAAA,aAAAA,EAAAA,EAAgBG,eAAhBH,IAAAA,GAAAA,MAIbziE,KAAK6iE,gBAEAjxD,GAGHwqB,EAAAA,EAAAA,KAAyB+jC,EAAAA,EAAAA,MAAyBvuD,EAAgB5R,OAFlEq1B,EAAAA,EAAAA,KAAwBxjB,EAAAA,EAAAA,MAAoB7R,OAK9CA,KAAKwiE,iBAET,CAKA,KAxDFxiE,KAAKwiE,iBA2DT,CAEQA,eAAAA,GAENxiE,KAAKC,SAAS,CACZooB,WAAOrwB,EACP2qE,gBAAY3qE,EACZsJ,UAAMtJ,EACN6hE,mBAAe7hE,EACfmiC,yBAAqBniC,EACrBogC,yBAAqBpgC,EACrBupE,mBAAevpE,EACfwpE,iBAAaxpE,EACbkgC,iBAAalgC,EACbgzD,eAAWhzD,EACXm2D,oBAAgBn2D,KAElB8qE,EAAAA,EAAAA,MAAqBC,qBAAqB/iE,KAAKZ,OAC/CY,KAAK2S,MAAMkC,cAEX7U,KAAKgjE,uBAGL/+C,EAAAA,EAAAA,KACF,CAoBA,cACE,MACM7kB,GADkB0jE,EAAAA,EAAAA,MACMG,uBAE1B7jE,GACFY,KAAKC,SAAS,MACTb,GAGT,CAEQW,UAAAA,GAEiBd,EAAAA,GAAWsS,iBAAiBvR,KAAMmR,EAAAA,GAAwBK,GAAAA,GAClEvR,SAAS,CAAEwR,QAAQ,IAClCzR,KAAKkjE,cACLljE,KAAKmjE,mBAELnjE,KAAKojE,mBAGLpjE,KAAKkrD,aAGLlrD,KAAK2S,MAAMC,IAAI5S,KAAKqjE,4BACpBrjE,KAAK2S,MAAMC,IAAI5S,KAAKsjE,kCAGpBtjE,KAAK2S,MAAMC,IAAI5S,KAAKujE,gCAA+B1xD,EAAAA,EAAAA,QAAuBC,EAAAA,GAAU0R,SACpFxjB,KAAK2S,MAAMC,IAAI5S,KAAKwjE,wBACpBxjE,KAAK2S,MAAMC,IAAI5S,KAAKyjE,6BAGpBzjE,KAAKuiE,+BACLviE,KAAK2S,MAAMC,IAAI5S,KAAK0jE,6BACpB1jE,KAAK2S,MAAMC,IAAI5S,KAAK2jE,+BACpB3jE,KAAK2S,MAAMC,IAAI5S,KAAK4jE,6BACpB5jE,KAAK2S,MAAMC,IAAI5S,KAAK6jE,iCACpB7jE,KAAK2S,MAAMC,IAAI5S,KAAK8jE,+BACpB9jE,KAAK2S,MAAMC,IAAI5S,KAAK+jE,kCAGpB/jE,KAAK2S,MAAMC,IAAI5S,KAAKgkE,wBDxRjB,SAA6B/rC,GAClC,MAAM7f,EAASkT,EAAAA,QAAQo0C,qBAEjBuE,EAA4B7rD,EAAO,kBACzC,IAAK5R,MAAMtC,QAAQ+/D,KAA+BA,EAA0BjpE,OAC1E,OAEF,MAAMkpE,EAAuBD,EAA0B,GACvD,GAAoC,iBAAzBC,IAAsCA,EAC/C,OAGF,MAAMC,GAAuB/lD,EAAAA,EAAAA,IAAuB6Z,GAC9CmsC,EAAuBF,aAAAA,EAAAA,EAAsBpnD,MAAM,eAErDsnD,GAAwD,IAAhCA,EAAqBppE,QAC/CmpE,EAAqBxjE,sBAAqB,KACxCwjE,EAAqBlkE,SAAS,CAC5ByB,QAAS,CACP,CACEzH,IAAK+jB,GAAAA,EAAwBD,cAC7B1Y,SAAUwX,GAAAA,EAAaC,MACvBtY,MAAOu9D,GAAiBqC,EAAqB,IAAI,GACjD9lD,SAAU,OAGd,IAIN,MAAM+lD,EAAyBH,aAAAA,EAAAA,EAAsBpnD,MAAM,iBACvDunD,GAA4D,IAAlCA,EAAuBrpE,QACnDmpE,EAAqBxjE,sBAAqB,KACxCwjE,EAAqB1lD,cAAc,CACjC,CACExkB,IAAK+jB,GAAAA,EAAwBC,gBAC7B5Y,SAAUwX,GAAAA,EAAaC,MACvBtY,MAAOu9D,GAAiBsC,EAAuB,IAAI,GACnD/lD,SAAU,MAEZ,WAKClG,EAAO,kBACd/D,EAAAA,gBAAgB/P,QAAQgnB,EAAAA,QAAQC,UAAUtT,SAAS2nD,SAAUxnD,GAC/D,CC4OIksD,CAAoBtkE,KACtB,CAEQ8jE,2BAAAA,GACN,OAAOzxD,EAAAA,EAAAA,IAAoBrS,MAAM6S,kBAAiB,CAACC,EAAU6C,K,IAEzD,EACA,EAFE7C,EAAStO,QAAUmR,EAAUnR,QACD,QAA9B,EAAAxE,KAAKZ,MAAMg5B,2BAAX,SAAgC8yB,aACX,QAArB,EAAAlrD,KAAKZ,MAAMujE,kBAAX,SAAuBzX,aACzB,GAEJ,CAEQ6Y,8BAAAA,GACN,OAAO3lD,EAAAA,EAAAA,IAAuBpe,MAAMiT,iBAAiBsxD,EAAAA,IAAgC,K,IACnF,EACA,EADqB,QAArB,EAAAvkE,KAAKZ,MAAMujE,kBAAX,SAAuBzX,aACO,QAA9B,EAAAlrD,KAAKZ,MAAMg5B,2BAAX,SAAgC8yB,YAAY,GAEhD,CAEQ2Y,6BAAAA,GACN,OAAOv+D,EAAAA,EAAAA,IAAsBtF,MAAM6S,kBAAiB,KAClD7S,KAAKwiE,iBAAiB,GAE1B,CAEQK,aAAAA,GACN7iE,KAAKC,SAAS,CACZi4B,iBAAalgC,EACbwpE,iBAAaxpE,EACbupE,mBAAevpE,KAGjB8qE,EAAAA,EAAAA,MAAqBC,qBAAqB/iE,KAAKZ,MACjD,CAEQskE,yBAAAA,GACN,OAAOnxD,EAAAA,EAAAA,IAAkBvS,MAAM6S,kBAAiB,CAACC,EAAU6C,K,IAEvD,EACA,GAFGgmB,EAAAA,EAAAA,GAAe7oB,EAASpR,QAASiU,EAAUjU,WAChB,QAA9B,EAAA1B,KAAKZ,MAAMg5B,2BAAX,SAAgC8yB,aACX,QAArB,EAAAlrD,KAAKZ,MAAMujE,kBAAX,SAAuBzX,aACzB,GAEJ,CAEQyY,2BAAAA,GACN,OAAOzsD,EAAAA,EAAAA,IAAoBlX,MAAM6S,kBAAiB,CAACC,EAAU6C,K,IAEzD,EACA,GAFGgmB,EAAAA,EAAAA,GAAe7oB,EAASpR,QAASiU,EAAUjU,WAChB,QAA9B,EAAA1B,KAAKZ,MAAMg5B,2BAAX,SAAgC8yB,aACX,QAArB,EAAAlrD,KAAKZ,MAAMujE,kBAAX,SAAuBzX,aACzB,GAEJ,CAEQ0Y,yBAAAA,GACN,OAAOnxD,EAAAA,EAAAA,IAAkBzS,MAAM6S,kBAAiB,CAACC,EAAU6C,K,IAEvD,EACA,GAFGgmB,EAAAA,EAAAA,GAAe7oB,EAASpR,QAASiU,EAAUjU,WAChB,QAA9B,EAAA1B,KAAKZ,MAAMg5B,2BAAX,SAAgC8yB,aACX,QAArB,EAAAlrD,KAAKZ,MAAMujE,kBAAX,SAAuBzX,aACzB,GAEJ,CAEQA,UAAAA,GACN,MAAMhnC,GAAOrS,EAAAA,EAAAA,MACP2yD,GAAarE,EAAAA,EAAAA,M,IAIjB,EAKA,EAKA,EAGA,EAdEj8C,IAASpS,EAAAA,GAAU3V,eAAyCnE,IAA7BgI,KAAKZ,MAAMmiE,eACpB,QAAxB,EAAAvhE,KAAKZ,MAAMy6D,qBAAX,SAA0B3O,aAIxBhnC,IAASpS,EAAAA,GAAUyR,QAAUihD,IAAe7gD,EAAAA,GAAW7iB,YAAoC9I,IAA3BgI,KAAKZ,MAAMoiE,aAC/C,QAA9B,EAAAxhE,KAAKZ,MAAM+6B,2BAAX,SAAgC+wB,aAI9BhnC,IAASpS,EAAAA,GAAU0R,QAAUghD,IAAe7gD,EAAAA,GAAWC,YAAoC5rB,IAA3BgI,KAAKZ,MAAM84B,aAC/C,QAA9B,EAAAl4B,KAAKZ,MAAMg5B,2BAAX,SAAgC8yB,kBAELlzD,IAAzBgI,KAAKZ,MAAM4rD,YACQ,QAArB,EAAAhrD,KAAKZ,MAAMujE,kBAAX,SAAuBzX,aAE3B,CAEQmY,wBAAAA,G,IACC,EAAP,OAA+B,QAAxB,EAAArjE,KAAKZ,MAAMy6D,qBAAX,eAA0BhnD,kBAAkBC,I,IAE7CA,EAAJ,GADA9S,KAAKykE,mBAAmB3xD,EAAU+pD,GAAS1gE,WAC1B,QAAb2W,EAAAA,EAASkS,YAATlS,IAAAA,OAAAA,EAAAA,EAAe1T,SAAUmyB,EAAAA,aAAaC,KAAM,CAC9C,MAAMkzC,EAAmB5xD,EAASkS,KAAKwK,YACNx3B,KAA7B0sE,aAAAA,EAAAA,EAAkB1pE,UAEpBgF,KAAKC,SAAS,CACZshE,cAAemD,EAAiB1pE,UAElC8nE,EAAAA,EAAAA,MAAqB6B,iBAAiBD,EAAiB1pE,QAE3D,IAEJ,CAEQsoE,8BAAAA,G,IACC,EAAP,OAAqC,QAA9B,EAAAtjE,KAAKZ,MAAM+6B,2BAAX,eAAgCtnB,kBAAkBC,I,IAEnDA,EAAJ,GADA9S,KAAKykE,mBAAmB3xD,EAAU+pD,GAASt5C,SAC1B,QAAbzQ,EAAAA,EAASkS,YAATlS,IAAAA,OAAAA,EAAAA,EAAe1T,SAAUmyB,EAAAA,aAAaC,KAAM,CAC9C,MAAMozC,EAAyB9xD,EAASkS,KAElC6/C,EAAuBD,EAAuBp1C,OAAO,GAAGhM,OAC9D,QAA6CxrB,IAAzC4sE,EAAuBp1C,OAAOx0B,aAAwDhD,IAAhC6sE,EAAqB7pE,OAAsB,CACnG,MAAM8pE,EAAsBF,EAAuBp1C,OAAO,GAAGhM,OAAOnnB,QACjE+I,GAAMuoB,EAAAA,KAAyBvoB,EAAElL,OAGpC8F,KAAKC,SAAS,CACZuhE,YAAasD,EAAoB9pE,OAAS,KAE5C8nE,EAAAA,EAAAA,MAAqBiC,eAAeF,EAAqB7pE,OAC3D,CACF,IAEJ,CAEQypE,kBAAAA,CAAmB3xD,EAA0B7Y,G,IAE9B6Y,EADrB,MAAMstD,EAAgBpgE,KAAKZ,MAAMghE,cACjCA,EAAcnmE,IAAoB,QAAb6Y,EAAAA,EAASkS,YAATlS,IAAAA,OAAAA,EAAAA,EAAe1T,SAAUmyB,EAAAA,aAAa8qC,QAE3D,MAAMniC,EAAU/tB,OAAOzI,OAAO08D,GAAe56D,MAAMjB,GAAMA,IACzDvE,KAAKC,SAAS,CAAEi6B,UAASkmC,iBAC3B,CAEQoD,oBAAAA,G,IACC,EAAP,OAAuB,QAAhB,EAAAxjE,KAAKZ,MAAMipB,aAAX,eAAkBxV,kBAAiB,CAACC,EAAU6C,K,IAE/C7C,EAA8CA,EAAlD,GADA9S,KAAKykE,mBAAmB3xD,EAAU+pD,GAAS15C,OAC1B,QAAbrQ,EAAAA,EAASkS,YAATlS,IAAAA,OAAAA,EAAAA,EAAe1T,SAAUmyB,EAAAA,aAAaC,OAAqB,QAAb1e,EAAAA,EAASkS,YAATlS,IAAAA,OAAAA,EAAAA,EAAe1T,SAAUmyB,EAAAA,aAAaE,UAAW,C,IAC7E3e,EAAAA,EAApB,MAAMohC,EAA6C,QAA/BphC,EAAuB,QAAvBA,EAAAA,EAASkS,KAAKwK,OAAO,UAArB1c,IAAAA,OAAAA,EAAAA,EAAyB9X,cAAzB8X,IAAAA,EAAAA,EAAmC,EACnDohC,IAAgBl0C,KAAKZ,MAAM4rD,WAC7BhrD,KAAKC,SAAS,CACZ+qD,UAAW9W,GAGjB,IAEJ,CAEQuvB,yBAAAA,G,IACC,EAAP,OAA4B,QAArB,EAAAzjE,KAAKZ,MAAMujE,kBAAX,eAAuB9vD,kBAAkBC,I,IAC1CA,EAAJ,IAAiB,QAAbA,EAAAA,EAASkS,YAATlS,IAAAA,OAAAA,EAAAA,EAAe1T,SAAUmyB,EAAAA,aAAaC,KAAM,C,IACZ1e,EAAAA,EAAAA,EAAAA,EAAlC,MAAMtO,EAAmD,QAAvBsO,EAAAA,EAASkS,KAAKwK,OAAO,UAArB1c,IAAAA,GAA+B,QAA/BA,EAAAA,EAAyB0Q,cAAzB1Q,IAAAA,GAAoC,QAApCA,EAAAA,EAAkC,UAAlCA,IAAAA,GAA4C,QAA5CA,EAAAA,EAAsCpP,cAAtCoP,IAAAA,OAAAA,EAAAA,EAA+C,GACjF9S,KAAKC,SAAS,CACZkuD,eAAgB3pD,GAEpB,IAEJ,CAEQ++D,8BAAAA,CAA+ByB,G,IAC9B,EAAP,OAAqC,QAA9B,EAAAhlE,KAAKZ,MAAMg5B,2BAAX,eAAgCvlB,kBAAkBC,I,IAE9BA,EAAzB,GADA9S,KAAKykE,mBAAmB3xD,EAAU+pD,GAASr5C,QACvCwhD,IAAkC,QAAblyD,EAAAA,EAASkS,YAATlS,IAAAA,OAAAA,EAAAA,EAAe1T,SAAUmyB,EAAAA,aAAaC,KAAM,CACnE,MACMyzC,EADyBnyD,EAASkS,KACYwK,OAAO,QAE9Bx3B,IAAzBitE,GAAsCA,EAAqBjqE,SAAWgF,KAAKZ,MAAM84B,cACnFl4B,KAAKC,SAAS,CACZi4B,YAAa+sC,EAAqBjqE,UAEpC8nE,EAAAA,EAAAA,MAAqBoC,eAAeD,EAAqBjqE,QAE7D,IAEJ,CAEQgpE,oBAAAA,GACN,OAAO/kE,EAAAA,GAAW8T,aAAa/S,MAAM6S,kBAAiB,K,IACpD,EACA,EACA,EACA,EAHwB,QAAxB,EAAA7S,KAAKZ,MAAMy6D,qBAAX,SAA0B3O,aACI,QAA9B,EAAAlrD,KAAKZ,MAAM+6B,2BAAX,SAAgC+wB,aACF,QAA9B,EAAAlrD,KAAKZ,MAAMg5B,2BAAX,SAAgC8yB,aACX,QAArB,EAAAlrD,KAAKZ,MAAMujE,kBAAX,SAAuBzX,YAAY,GAEvC,CAEQiY,gBAAAA,GACN,IAAI/xD,EAA0C,CAAC,EAE1CpR,KAAKZ,MAAMipB,QACdjX,EAAYiX,MAAQ88C,MAGjBnlE,KAAKZ,MAAMy6D,gBACdzoD,EAAYyoD,cAAgBuL,MAGzBplE,KAAKZ,MAAM+6B,sBACd/oB,EAAY+oB,oBAAsBkrC,MAG/BrlE,KAAKZ,MAAMg5B,sBACdhnB,EAAYgnB,oBAAsBktC,MAG/BtlE,KAAKZ,MAAMujE,aACdvxD,EAAYuxD,WAAa4C,MAGtBvlE,KAAKZ,MAAMkC,OACd8P,EAAY9P,KAAOkkE,MAGjBr5D,OAAOtD,KAAKuI,GAAapW,QAC3BgF,KAAKC,SAASmR,EAElB,CAEOgyD,gBAAAA,GACL,MAAM,KAAE9hE,GAAStB,KAAKZ,MAChBqmE,GAAgB5zD,EAAAA,EAAAA,MAChB6zD,EAAmB5I,GAA0Bp9C,MAAMnb,GAAMA,EAAEC,QAAUihE,IAE3E,IAAKnkE,EAAM,CACT,MAAM0zB,EAAM,IAAIxxB,MAAM,4CAEtB,MADAhB,EAAAA,EAAOe,MAAMyxB,EAAK,CAAElwB,IAAK,wCACnBkwB,CACR,CAEA,GAAI0wC,EACFpkE,EAAKrB,SAAS,CACZjH,SAAU,IACLsI,EAAKlC,MAAMpG,SAASkT,MAAM,EAAG,GAChCw5D,EAAiB1iD,UAAUhoB,IACM,WAA3B0qE,EAAiBlhE,OACnBxE,KAAKC,SAAS,CAAEi4B,YAAal9B,GAC/B,WAID,CACL,MAAM2qE,GAAqBxF,EAAAA,EAAAA,MACrByF,EAAwBlI,GAAoBh+C,MAAMnb,GAAMA,EAAEC,QAAUmhE,IAEtEC,GAAyB5lE,KAAKZ,MAAMiS,eACtC/P,EAAKrB,SAAS,CACZjH,SAAU,IAAIsI,EAAKlC,MAAMpG,SAASkT,MAAM,EAAG,GAAI05D,EAAsB5iD,SAAShjB,KAAKZ,MAAMiS,mBAG3F7O,EAAAA,EAAOe,MAAM,IAAIC,MAAM,8BAA+B,CAAEsB,IAAK,0BAEjE,CACF,CA9aA,YACE1F,G,IAmBQA,EARRqB,MAAM,IACJ2/D,cAAe,CACb,CAACvD,GAAS1gE,WAAW,EACrB,CAAC0gE,GAASt5C,SAAS,EACnB,CAACs5C,GAASr5C,SAAS,EACnB,CAACq5C,GAAS15C,OAAO,GAEnB+W,SAAS,EACT54B,KAAgB,QAAVlC,EAAAA,EAAMkC,YAANlC,IAAAA,EAAAA,EAAcomE,KACpBn9C,MAAO88C,KACPtL,cAAeuL,KACfjrC,oBAAqBkrC,KACrBjtC,oBAAqBktC,KACrB3C,WAAY4C,MACTnmE,IA9BP,QAAUo8B,sBAAsB,IAAIC,EAAAA,GAAyBz7B,KAAM,CACjE07B,cAAe,CAACphB,EAAAA,GAAgBpB,EAAAA,GAAY/U,EAAAA,GAAYyW,EAAAA,GAAclI,EAAAA,OA+HxE,QAAQswD,uBAAsB,KACV,EAAC3tD,EAAAA,EAAAA,IAAkBrV,OAAOuS,EAAAA,EAAAA,IAAkBvS,OAAOyS,EAAAA,EAAAA,IAAkBzS,OAC7EoP,SAAS/P,IACjBA,EAASY,SAAS,CAChByB,QAAS,IACT,GACF,IArGF1B,KAAKW,qBAAqBX,KAAKD,WAAWa,KAAKZ,MACjD,EA4ZF,SAASwlE,KACP,OAAO,IAAI5iE,EAAAA,GAAgB,CACzBiN,UAAW,SACX7W,SAAU,CACR,IAAImiB,EAAAA,GAAc,CAChB+gD,QAAS,UACT56D,KAAM,IAAIu+D,GAAe,CAAC,OAIlC,CAEA,SAASuF,KACP,OAAOS,EAAAA,EAAAA,IAAuB,EAC5BC,EAAAA,EAAAA,IAAmB,IAAInY,EAAAA,MAAoB,WAAY,CAAEziC,MAxgBhC,cA0gB7B,CAEA,SAASm6C,KACP,OAAOQ,EAAAA,EAAAA,IAAuB,EAC5BC,EAAAA,EAAAA,IAAmB,IAAInY,EAAAA,MAAoB,kBAAmB,CAAEziC,MA7gBhC,oBA+gBpC,CAEA,SAASo6C,KACP,OAAOO,EAAAA,EAAAA,IAAuB,EAC5BC,EAAAA,EAAAA,IAAmBrR,EAAAA,GAA0B,kBAAmB,CAAEvpC,MAlhBlC,oBAohBpC,CAEA,SAASi6C,KACP,OAAOzwC,EAAAA,EAAAA,IAAe,EAACD,EAAAA,EAAAA,GAAeggC,EAAAA,GAA0B,CAAEvpC,MAAOm3C,MAC3E,CAEA,SAASkD,KACP,MAAMrgD,GAAcwP,EAAAA,EAAAA,IAClB,EACED,EAAAA,EAAAA,GAAe,uBAAuBggC,EAAAA,gBAAuC,CAC3EvpC,MAAOo3C,GACPyD,UAAW,aAGf,CAAEC,eAAgB,WAGpB,GAAI9gD,aAAuBE,EAAAA,GACzB,OAAOF,EAET,MAAM3hB,EAAQ,IAAIC,MAAM,iDAExB,MADAhB,EAAAA,EAAOe,MAAMA,EAAO,CAAEuB,IAAK,gDACrBvB,CACR,CA7DE,GArbW0O,GAqbJxS,aAAY,EAAGV,YACpB,MAAM,KAAEuC,GAASvC,EAAMjF,WACvB,OAAIwH,EACK,kBAACA,EAAK7B,UAAS,CAACV,MAAOuC,IAGzB,kBAACib,EAAAA,mBAAkBA,CAAC3jB,KAAM,c,kHCtiB9B,MAAMqtE,UAAyCnnE,EAAAA,GA2B7ConE,QAAAA,CAAS/6B,GACdnrC,KAAKC,SAAS,CACZkrC,SAEJ,CAEOn0C,OAAAA,CAAQmvE,GACTA,GACFC,EAAAA,EAAAA,IAAoBpmE,KAAKZ,MAAM+kB,UAAWnkB,KAAKZ,MAAMglB,WAAYpkB,OAEjEutB,EAAAA,EAAAA,IAAevtB,KAAKZ,MAAM+kB,UAAWnkB,KAAKZ,MAAMglB,WAAYpkB,KAEhE,E,EAtC0B,EAAGjB,YAC3B,MAAM,GAAEud,EAAE,WAAE8H,EAAU,UAAED,EAAS,MAAEgnB,GAAUpsC,EAAMjF,WAC7CqsE,GAAavgE,EAAAA,EAAAA,IAAkC0W,EAAI6H,GAAW7kB,SAAS8kB,GACvEhuB,GAASC,EAAAA,EAAAA,aAAYqB,IAuCtB,CACL+F,SAAS9F,EAAAA,EAAAA,KAAI,CACXC,QAAS,OACTqJ,cAAe,SACfpJ,eAAgB,SAChBqG,UAAW,eA3CPmoE,EAAcF,EAAa,WAAW/hD,mBAA8B,OAAOA,iBAEjF,OACE,kBAAC/E,OAAAA,CAAK7oB,UAAWJ,EAAOqH,SACtB,kBAAC0kB,EAAAA,cAAaA,CACZmkD,YAAa,KACXvnE,EAAMmnE,UAAS,EAAK,EAEtBjtB,WAAY,KACVl6C,EAAMmnE,UAAS,EAAM,EAEvB9jD,KAAM,kBAAC5nB,EAAAA,KAAIA,CAACN,KAAMisE,EAAa,WAAa,OAAQtvE,KAAK,KAAKyF,KAAM6pE,EAAa,OAAS,YAC1F5sE,MAAO4sE,EAAa,oBAAsB,OAC1CnvE,QAAS,IAAM+H,EAAM/H,QAAQmvE,GAC7BjsE,KAAM,OACNG,aAAYgsE,EACZjgD,QAASigD,I,KApBH5mE,e,EADHwmE,G,mZCGN,SAASM,EAAYC,EAA0BC,EAA2BzjE,GAC/E,MAAM3D,GAAWgW,EAAAA,EAAAA,IAAkBrS,IAEnCtG,EAAAA,EAAAA,IAAqBC,EAAAA,GAAkB2jB,kBAAmBzjB,EAAAA,GAAoByjB,kBAAkBomD,iBAAkB,CAChHliE,MAAOiiE,EACP3lE,MAAO0lE,IAGT,MAIM9kE,EAAU,IAJQrC,EAASD,MAAMsC,QAAQrF,QAC5C+I,KAAQA,EAAEnL,MAAQusE,GAAoBphE,EAAEZ,QAAUiiE,KAKnD,CACExsE,IAAKusE,EACLnhE,SAAUI,EAAAA,EAASC,MACnBlB,MAAOiiE,IAIXpnE,EAASY,SAAS,CAChByB,aAGF6rB,EAAAA,EAAAA,IAAei5C,EAAkBC,EAAmBzjE,GAEhDwjE,IAAqBzoC,EAAAA,KACvByoC,EAAmB1oC,EAAAA,KAIrBne,EAAAA,EAAAA,IAA2C6mD,EAAkBC,EAC/D,CAEO,MAAME,UAA4B7nE,EAAAA,G,kBAAlC,YACL,OAAO9H,WAAU,KACVgJ,KAAKZ,MAAMglB,YAGhBmiD,EAAYvmE,KAAKZ,MAAM+kB,UAAWnkB,KAAKZ,MAAMglB,WAAYpkB,KAAK,G,EAoBlE,SAAS1J,EAAUoB,GACjB,MAAO,CACLkoB,QAAQjoB,EAAAA,EAAAA,KAAI,CACVuG,UAAW,WAGjB,CAvBE,EARWyoE,EAQGlnE,aAAY,EAAGV,YAC3B,MAAM3I,GAASC,EAAAA,EAAAA,YAAWC,GAC1B,OACE,kBAACI,EAAAA,OAAMA,CACLO,cAAaC,EAAAA,EAAQ2oB,MAAME,eAC3BqG,QAAS,iBAAiBrnB,EAAMK,MAAMglB,aACtC5tB,UAAWJ,EAAOwpB,OAClBjpB,QAAQ,YACRE,KAAK,KACLG,QAAS+H,EAAM/H,SAChB,gB,kCCnEA,MAAM4vE,EAAuB,IAEhC,kBAAC7tE,EAAAA,EAASA,KACR,kBAACsE,IAAAA,KAAE,uCACH,kBAACA,IAAAA,KACC,kBAACq+D,EAAAA,SAAQA,CAAC/9D,KAAK,uEAAuEg+D,UAAAA,GAAS,sDAIjG,kBAACtiE,EAAAA,KAAIA,CAACC,cAAc,QAClB,kBAACmjD,MAAAA,KACC,kBAACmgB,OAAAA,KAAK,iBAEJ,kBAACj+D,KAAAA,MAAK,6BCdLkoE,EAAyB,IAElC,kBAAC9tE,EAAAA,EAASA,KACR,kBAACsE,IAAAA,KAAE,oC,qNCIF,MAAMypE,UAAwBhoE,EAAAA,IACnC,EADWgoE,EACGrnE,aAAY,EAAGV,YAC3B,MAAMgoE,EAAwB9nE,EAAAA,GAAWoD,YAAYtD,EAAOiT,IACtDg1D,EAA4B/nE,EAAAA,GAAWoD,YAAYtD,EAAOkoE,IAC1D,WAAEC,EAAU,YAAE/hC,GAAgB6hC,EAA0BltE,WACxDooC,GAAgB7rC,EAAAA,EAAAA,YAAW8rC,GAE3BglC,EAAkCD,EAAW9pE,KAAKi2B,IACtD,O,wUAAO,IACFA,G,WAAAA,CACHjR,KAAMiR,EAAI+zC,MAAQ,YAASpvE,EAC3B8I,MAAO,GAAGuyB,EAAIvyB,U,yVAIlB,OACE,kBAAC0hC,EAAAA,MAAKA,CAAC3yB,UAAU,SAASzU,IAAK,EAAGqnC,KAAK,WACrC,kBAAClsC,MAAAA,CAAIC,UAAW0rC,EAAcQ,KAAKphC,MACjC,kBAACkxB,EAAAA,OAAMA,CACL6Q,kBAAkB,EAClB7qC,MAAO,GACPkvC,OAAQ,KACNs/B,EAA0BK,mBAAmB,EAE/C7jC,WAAW,EACX7nB,OAAQwpB,EACRhW,YAAa,gBACbvrB,QAASujE,EACT79B,cAAc,EACdg+B,iBAAiB,EACjBtlD,SAAWhb,IAELA,EAAOxC,QAETwiE,EAA0BK,oBAE1BN,EAAsBQ,eAAevgE,EAAOxC,OAC9C,K,IASd,MAAM29B,EAAoBzqC,IAA0B,CAClDgrC,KAAM,CACJphC,MAAM3J,EAAAA,EAAAA,KAAI,CACRe,QAAShB,EAAMiB,QAAQ,KAEzB0E,GAAG1F,EAAAA,EAAAA,KAAI,CACL0J,SAAU,S,gcC3BT,MAAM4lE,UAAkCnoE,EAAAA,GAgK7C0oE,6BAAAA,CAA8BpoE,EAAQ,M,IAAA,E,OAAsB,QAAtB,EAAAY,KAAKZ,MAAMqoE,mBAAX,eAAwBroE,K,EAAxB,I,IAC7BA,EAAP,OAAiB,QAAVA,EAAAA,EAAM4lB,YAAN5lB,IAAAA,OAAAA,EAAAA,EAAYowB,OAAO,GAAGhM,OAAOpmB,KAAKgI,IAChC,CACLtE,MAAOsE,EAAElL,KACT69B,YAAa3yB,EAAE1B,OAAO,MAG5B,CAEOgkE,oCAAAA,CAAqCnkD,GAC1C,MACMokD,EADwB1oE,EAAAA,GAAWoD,YAAYrC,KAAMgS,IACjB41D,iBACpCC,GAAYC,EAAAA,EAAAA,KAA2BxiE,EAAAA,EAAAA,IAAsBtF,MAAM6F,WAAWC,YAE9EohE,EAA0B3jD,EAC7BnmB,KAAK08B,IACJ,MAAMiuC,EAAaF,EAAU15D,QAAQ2rB,EAAEh5B,OAQvC,MAP0B,CACxBA,MAAOg5B,EAAEh5B,QAAUi9B,EAAAA,GAAeD,EAAAA,GAAmBhE,EAAEh5B,MACvD0D,MAAOs1B,EAAEh5B,MACTqf,OAAQwnD,IAAgB7tC,EAAEh5B,MAC1BsmE,OAAuB,IAAhBW,EACPA,aAEW,IAEd9hE,MAAK,CAACvI,EAAGwI,IAEJxI,EAAE8G,QAAUu5B,EAAAA,IAAgB73B,EAAE1B,QAAUu5B,EAAAA,GACnCrgC,EAAE8G,QAAUu5B,EAAAA,IAAgB,EAAI,EAIlCrgC,EAAEoD,MAAQoF,EAAEpF,OAAS,EAAIpD,EAAEoD,MAAQoF,EAAEpF,MAAQ,EAAI,IAE5Dd,KAAKC,SAAS,CACZinE,cAEJ,CAEQc,iBAAAA,GACNhoE,KAAKZ,MAAMqoE,YAAYvc,YACzB,CAEQ+c,qBAAAA,GAENjoE,KAAK2S,MAAMC,IACT3T,EAAAA,GAAW8T,aAAa/S,MAAM6S,kBAAiB,KAC7C7S,KAAKgoE,mBAAmB,KAK5BhoE,KAAK2S,MAAMC,KACTtN,EAAAA,EAAAA,IAAsBtF,MAAM6S,kBAAiB,KAC3C7S,KAAKgoE,mBAAmB,IAG9B,CAEQjoE,UAAAA,GAENC,KAAKgoE,oBAELhoE,KAAKC,SAAS,CACZygB,QAAS,IAAIomD,EAAgB,CAAC,KAGhC9mE,KAAKioE,wBAGLjoE,KAAK2S,MAAMC,KACTtN,EAAAA,EAAAA,IAAsBtF,MAAM6S,kBAAiB,KAC3C7S,KAAKZ,MAAMqoE,YAAYvc,YAAY,KAIvClrD,KAAK2S,MAAMC,KACTs1D,EAAAA,EAAAA,IAAgCloE,MAAM6S,kBAAiB,K,IACH,EAAlD,MAAM0Q,EAASvjB,KAAKwnE,8BAAoD,QAAtB,EAAAxnE,KAAKZ,MAAMqoE,mBAAX,eAAwBroE,OACtEmkB,GACFvjB,KAAK0nE,qCAAqCnkD,EAC5C,KAIJvjB,KAAK2S,MAAMC,IACT5S,KAAKZ,MAAMqoE,YAAY50D,kBAAkBC,I,IACnCA,EAAJ,IAAiB,QAAbA,EAAAA,EAASkS,YAATlS,IAAAA,OAAAA,EAAAA,EAAe1T,SAAUmyB,EAAAA,aAAaC,KAAM,CAC9C,MAAMjO,EAASvjB,KAAKwnE,8BAA8B10D,GAC5Ci0D,EAAwB9nE,EAAAA,GAAWoD,YAAYrC,KAAMgS,IAEvDuR,GACFvjB,KAAK0nE,qCAAqCnkD,GAG5C,MAAMokD,EAAcZ,EAAsBa,kBAErCrkD,aAAAA,EAAAA,EAAQ/d,MAAM1E,GAAUA,EAAMA,QAAU6mE,MAC3CZ,EAAsBoB,uBAE1B,KAGN,CAvQA3nE,WAAAA,CAAYpB,GACVqB,MAAM,GACJ0kC,aAAa,EACbsiC,aAAaW,EAAAA,EAAAA,IAAoB,CAC/BxjD,QAAS,EAACkhD,EAAAA,EAAAA,IAAmB,GAAI,oBACjCE,eAAgB,WAElBkB,WAAY,CACV,CACEpmE,MAAOg9B,EAAAA,GACPt5B,MAAOu5B,EAAAA,GACPqpC,OAAO,KAGRhoE,IA4HPipE,EAAAA,KAAAA,kBAAkBlkD,KAChBmkD,EAAAA,EAAAA,KAA0BhjE,EAAAA,EAAAA,IAAsBtF,MAAM6F,WAAWC,WAAYqe,GAE7E,MAAMZ,EAASvjB,KAAKwnE,gCAChBjkD,GACFvjB,KAAK0nE,qCAAqCnkD,GAI5C,MAAMwjD,EAAwB9nE,EAAAA,GAAWoD,YAAYrC,KAAMgS,IACvD+0D,EAAsBa,mBAAqBzjD,GAC7C4iD,EAAsBoB,uBACxB,IAGFd,EAAAA,KAAAA,qBAAoB,KAClBrnE,KAAKC,SAAS,CACZklC,aAAcnlC,KAAKZ,MAAM+lC,aACzB,IA3IFnlC,KAAKW,qBAAqBX,KAAKD,WAAWa,KAAKZ,MACjD,EAEA,EArBWinE,EAqBGxnE,aAAY,EAAGV,YAE3B,MAAM,WAAEmoE,EAAU,YAAE/hC,EAAW,QAAEzkB,EAAO,YAAE+mD,GAAgB1oE,EAAMjF,YAC1D,KAAEkrB,GAASyiD,EAAY3tE,WACvBitE,EAAwB9nE,EAAAA,GAAWoD,YAAYtD,EAAOiT,KACvCk2D,EAAAA,EAAAA,IAAgCnpE,GAExCjF,WAGb,MAAM1D,GAASC,EAAAA,EAAAA,YAAWkyE,GACpBtiC,GAAaC,EAAAA,EAAAA,QAAoB,MAGvC,OACE,kBAACu6B,EAAAA,QAAOA,KACLyG,EACE7qE,QAAQmsE,GAAaA,EAASpB,OAASoB,EAASroD,QAAUqoD,EAAShkE,QAAUu5B,EAAAA,KAC7E93B,MAAK,CAACvI,EAAGwI,KAER,OAAIxI,EAAE8G,QAAUu5B,EAAAA,IAAgB73B,EAAE1B,QAAUu5B,EAAAA,GACnCrgC,EAAE8G,QAAUu5B,EAAAA,IAAgB,EAAI,GAIrB,QAAZrgC,EAAAA,EAAEqqE,kBAAFrqE,IAAAA,EAAAA,EAAgB,IAAkB,QAAZwI,EAAAA,EAAE6hE,kBAAF7hE,IAAAA,EAAAA,EAAgB,G,IAAtCxI,EAAsBwI,CAAkB,IAEjD9I,KAAKorE,IACJ,MAAM9H,EACJ,kBAACC,EAAAA,IAAGA,CACF1mE,IAAKuuE,EAAShkE,MACd28D,YAAa,KAEX4F,EAAsBQ,eAAeiB,EAAShkE,MAAM,EAEtD1D,OAAO2nE,EAAAA,EAAAA,IAAaD,EAAS1nE,MAvBlB,IAuByC,GACpDqf,OAAQqoD,EAASroD,OACjBigB,OACEooC,EAAShkE,QAAUu5B,EAAAA,GACdnoC,GAEG,oCACE,kBAAC80C,EAAAA,QAAOA,CAACjO,QAAS,cAChB,kBAACjiC,EAAAA,KAAIA,CACH+oC,iBAAmB1+B,IACH,UAAVA,EAAE5K,KACJ8E,EAAMspE,eAAeG,EAAShkE,MAChC,EAEFxN,QAAU6N,IAERA,EAAE2G,kBACFzM,EAAMspE,eAAeG,EAAShkE,MAAM,EAEtCtK,KAAM,QACN1D,WAAWkM,EAAAA,EAAAA,IAAG9M,EAAMY,oBAM9BwB,IAKV,OAAIwwE,EAAS1nE,MAAM9F,OAtDJ,GAwDX,kBAAC0vC,EAAAA,QAAOA,CAACzwC,IAAKuuE,EAAShkE,MAAOi4B,QAAS+rC,EAAS1nE,OAC7C4/D,GAIEA,CACT,KAEH17C,aAAAA,EAAAA,EAAM5lB,SAAUmyB,EAAAA,aAAa8qC,SAAW,kBAACsE,EAAAA,IAAGA,CAAC7/D,MAAO,eAAgBshB,KAAM,aAG1E4C,aAAAA,EAAAA,EAAM5lB,SAAUmyB,EAAAA,aAAaC,MAC5B,kBAACnS,OAAAA,CAAK7oB,UAAWJ,EAAOsyE,QACtB,kBAAC/H,EAAAA,IAAGA,CAACQ,YAAapiE,EAAMsoE,kBAAmBvmE,MAAO,YAAammC,IAAKhB,EAAY7jB,KAAM,iBAIzF1B,GACC,kBAAC2mB,EAAAA,kBAAiBA,CAAC5K,QAAS,kBAAC/b,EAAQjhB,UAAS,CAACV,MAAO2hB,MACnD,CAAC4mB,EAAYC,EAAYC,KACxB,MAAMC,EAAiB,CACrBC,OAAQH,EACRI,QAASL,GAGX,OACE,oCACGrB,EAAW2B,SACV,oCAEE,kBAACC,EAAAA,QAAOA,G,EAAAA,EAAAA,CAAAA,EACFL,EACAnH,EAAAA,M,WAAIA,CACRyH,KAAM3C,EACN4C,iBAAkB3xC,EAAOsqB,QACzBsnB,iBAAkB/B,EAAW2B,QAC7BK,aAAa,I,+UACTR,M,OAAAA,IAMhB,IAuIZ,MAAM8gC,EAAiB7wE,IAA0B,CAC/CgxE,QAAQ/wE,EAAAA,EAAAA,KAAI,CACVmJ,MAAO,gBACPvH,MAAO7B,EAAMgE,OAAOklB,QAAQhoB,KAC5B,WAAY,CACVW,MAAO7B,EAAMgE,OAAOklB,QAAQhoB,QAGhC8nB,SAAS/oB,EAAAA,EAAAA,KAAI,CACXG,aAAcJ,EAAMO,MAAMC,OAAOC,QACjC0oB,UAAWnpB,EAAMopB,QAAQC,GACzBJ,WAAYjpB,EAAMgE,OAAOilB,WAAWC,QACpC/kB,OAAQ,aAAanE,EAAMgE,OAAOG,OAAOmlB,W,aCvTtC,MAAM2nD,EAAmB/yE,GAE5B,kBAACmD,EAAAA,EAASA,KACR,kBAACsE,IAAAA,KAAE,oBACgB,kBAAC63B,SAAAA,KAAQt/B,EAAMuuB,WAAmB,IAAC,kBAACxlB,KAAAA,MAAK,sD,udCW3D,MAAMiqE,UAA2C9pE,EAAAA,GAUtDiB,UAAAA,GACEC,KAAKC,SAAS,KAAKD,KAAKiuB,eACxBjuB,KAAK2S,MAAMC,KACTyC,EAAAA,EAAAA,IAAkBrV,MAAM6S,kBAAiB,KACvC,MAAMsf,EAAWnyB,KAAKiuB,aAClBjuB,KAAKZ,MAAMypE,WAAa12C,EAAS02C,UACnC7oE,KAAKC,SAAS,KAAKkyB,GACrB,IAGN,CA6CO7M,SAAAA,GACL,MAAO,CAAEprB,KAAM8F,KAAKZ,MAAMlF,KAAMsK,MAAOxE,KAAKZ,MAAMoF,MACpD,CAlEAhE,WAAAA,CAAYpB,G,QACVqB,O,EAAM,KACDrB,G,WAAAA,CACHypE,SAAU,O,gVAkBd56C,EAAAA,KAAAA,cAAa,KACX,MAAM5uB,GAAWgW,EAAAA,EAAAA,IAAkBrV,MAG7BkuB,EAA0B7uB,EAASD,MAAMsC,QAAQge,MAAMta,IAC3D,MAAMZ,GAAQuoB,EAAAA,EAAAA,IAAgC1tB,EAAU+F,GACxD,OAAOA,EAAEnL,MAAQ+F,KAAKZ,MAAMlF,MAAQsK,EAAMA,QAAUxE,KAAKZ,MAAMoF,KAAK,IAGtE,OAAK0pB,EAIE,CACL26C,SAAU36C,EAAwB7oB,WAAaI,EAAAA,EAASC,OAJjD,CAAEmjE,UAAU,EAKpB,IAgCH,OAAO7xE,WAAWsF,IAChB,MAAMD,EAAS2D,KAAKslB,aAEpBmH,EAAAA,EAAAA,IAAapwB,EAAOnC,KAAMmC,EAAOmI,MAAOlI,EAAM0D,KAAMkZ,EAAAA,IAEpD,MAAM7Z,GAAWgW,EAAAA,EAAAA,IAAkBrV,OACnCtD,EAAAA,EAAAA,IAAqBC,EAAAA,GAAkB2jB,kBAAmBzjB,EAAAA,GAAoByjB,kBAAkBwoD,eAAgB,CAC9G/6C,WAAY,gBACZ9zB,IAAKoC,EAAOnC,KACZoO,OAAQhM,EACR0xB,eAAe3uB,aAAAA,EAAAA,EAAUD,MAAMsC,QAAQ1G,SAAU,IAGnDgF,KAAKC,SAAS,KAAKD,KAAKiuB,cAAU,IA3ElCjuB,KAAKW,qBAAqBX,KAAKD,WAAWa,KAAKZ,MACjD,EAgCA,EAxCW4oE,EAwCGnpE,aAAY,EAAGV,YAC3B,MAAM,MAAEyF,EAAK,OAAEiN,EAAM,SAAEo3D,GAAa9pE,EAAMjF,WAE1C,GAAI2X,EACF,OAAO,qCAGT,MAAMrb,GAASC,EAAAA,EAAAA,YAAWC,GAC1B,OACE,kBAAC+oB,OAAAA,CAAK7oB,UAAWJ,EAAOqH,SACtB,kBAAC/G,EAAAA,OAAMA,CACL0vB,SAAsB,IAAbyiD,EAAoB,UAAUrkE,iBAAuB,OAAOA,eACrE7N,QAAS,YACTC,KAAM,UACNwrB,MAAmB,IAAbymD,EAAoB,QAAU,OACpChyE,KAAK,KACLC,iBAA4B,IAAb+xE,EACfryE,UAAWJ,EAAOW,cAClBC,QAAS,KAAoB,IAAb6xE,EAAoB9pE,EAAM/H,QAAQ,SAAW+H,EAAM/H,QAAQ,WAC3EC,cAAaC,EAAAA,EAAQC,sBAAsBC,sB,IA2BrD,MAAMd,EAAY,KACT,CACLG,WAAWkB,EAAAA,EAAAA,KAAI,CACbC,QAAS,OACTC,eAAgB,WAElBd,eAAeY,EAAAA,EAAAA,KAAI,CACjBG,aAAc,IAEhB2F,SAAS9F,EAAAA,EAAAA,KAAI,CACXC,QAAS,OACTqJ,cAAe,SACfpJ,eAAgB,SAChBqG,UAAW,a,8zBC3BjB,MAAM6qE,GAAgDxtD,EAAAA,OAAOC,eAAeC,6BAEtEutD,GAA0B,wBAGnBpnD,IAA+B+6C,EAAAA,EAAAA,UAAS,aAAc,cA2B7DsM,GAAqB,oBACrBC,GAAmB,SAElB,MAAMl3D,WAA8BlT,EAAAA,GAqFzC2Z,WAAAA,GACE,MAAM,IAAExe,GAAQkvE,KAEV9sE,GADkB6rE,EAAAA,EAAAA,IAAgCloE,MACzBZ,MAAMsC,QAAQ,GAa7C,OAXIrF,EAAOpC,KAAOoC,EAAOpC,MAAQA,IAC/BiuE,EAAAA,EAAAA,IAAgCloE,MAAMC,SAAS,CAC7CyB,QAAS,CACP,QACKrF,GAAAA,CACHpC,IAAKA,QAAAA,EAAOoC,EAAOpC,SAMpB,CAAC,CACV,CAMAye,aAAAA,CAAchV,GAA+B,CAE7C0lE,mCAAAA,CAAoCC,GAClC,MAAMpxD,EAAW5D,EAAAA,gBAAgB6D,cAC3BE,EAAS,IAAID,gBAAgBF,EAASG,QACtCkxD,EAAQlxD,EAAOhV,IAAI8lE,IACzB,GAAII,GAASD,IAAUC,EAAO,CAC5B,MAAMC,EAAatxD,EAAS2nD,SAAW3nD,EAASG,OAChDA,EAAO4f,IAAIkxC,GAAkBG,GAC7B,MAAMG,EAASvxD,EAAS2nD,SAAW,IAAMxnD,EAAOtS,WAC5CyjE,IAAeC,IACjBC,EAAAA,EAAAA,IAAeD,EAEnB,CACF,CAOAE,8BAAAA,CAA+BC,EAAgBrlE,GAAU,GACvD,MAAQrK,IAAK2vE,EAAe,OAAExxD,EAAM,SAAEH,GAAakxD,KACnD,GAAIS,EAAiB,CACnB,MAAMC,EAAoBD,aAAAA,EAAAA,EAAiB9gE,MAAM,KAGjD,IAFiB+gE,aAAAA,EAAAA,EAAoB,MAEpBF,EAAQ,CACvBE,EAAkB,GAAKF,EACvBvxD,EAAO4f,IAAIixC,GAAoBY,EAAkBj/D,KAAK,MACtD,MAAM2+D,EAAatxD,EAAS2nD,SAAW3nD,EAASG,OAC1CoxD,EAASvxD,EAAS2nD,SAAW,IAAMxnD,EAAOtS,WAC5CyjE,IAAeC,IACbllE,EACF+P,EAAAA,gBAAgB/P,QAAQklE,IAExBC,EAAAA,EAAAA,IAAeD,GAGrB,CACF,CACF,CA2HA5B,cAAAA,G,IACSM,EAAP,OAA6D,QAAtDA,GAAAA,EAAAA,EAAAA,IAAgCloE,MAAMZ,MAAMsC,QAAQ,UAApDwmE,IAAAA,OAAAA,EAAAA,EAAwDjuE,GACjE,CAEAkuE,qBAAAA,GAEEnoE,KAAK0pE,+BAA+B3rC,EAAAA,IAAc,GAClD/9B,KAAKunE,eAAexpC,EAAAA,GACtB,CAEAwpC,cAAAA,CAAepjD,IACb2lD,EAAAA,EAAAA,KAAqBxkE,EAAAA,EAAAA,IAAsBtF,MAAM6F,WAAWC,WAAYqe,IAGxE4lD,EAAAA,EAAAA,GAAoC/pE,OAGpCgqE,EAAAA,EAAAA,IAAmC7lD,EAAWnkB,KAChD,CAGAiqE,kBAAAA,CACEzD,EACAC,EACAxjE,EACAinE,EACAC,EACAC,G,IAoCUA,EAlCV,IAAIC,EACApnE,EAAUmT,GAAGC,KAAKpT,EAAUqT,KAAM,UAAY,GAAKrT,EAAUmT,GAAGC,KAAKpT,EAAUqT,KAAM,UAAY,KACnG+zD,EAAgB,MAElB,MAAMl6C,EAAQ5H,EAAAA,GAAcC,aAEzBK,SAAS49C,GACT19C,SACC2L,EAAAA,EAAAA,IACE,EACED,EAAAA,EAAAA,GAAez0B,KAAKsqE,oBAAoB7D,EAAmByD,EAAiBC,GAAkB,CAC5F3kD,aAAc,KAAKmI,EAAAA,OACnB08C,gBACAn/C,MAAO,MAAMu7C,OAGjB,CAAET,eAAgB,YAGrBxsC,qBAAqB,WAAY,CAAEC,KAAMC,EAAAA,aAAaC,SACtDH,qBAAqB,cAAe,KACpCA,qBAAqB,YAAa,GAClCA,qBAAqB,YAAa,GAClCA,qBAAqB,YAAanD,EAAAA,UAAUC,MAC5Cq4B,QAAQ,SACRlmC,aAAaC,EAAAA,IACb8iC,UAAU,SAAU,CACnBp7C,YAAY,EACZm+C,MAAO,CAAC,OACRtsC,UAAW,QACXusC,YAAaC,EAAAA,kBAAkBjM,QAEhC15B,iBAAiB,CAChB,IAAIm9C,EAAAA,EAAiC,CACnC3pD,GAA0B,QAAtB8tD,EAAAA,EAAcvkE,kBAAdukE,IAAAA,OAAAA,EAAAA,EAA0BtkE,WAC9Bqe,UAAWqiD,EACXpiD,WAAYqiD,IAEd,IAAImC,EAAmC,CACrC1uE,KAAMssE,EACNhiE,MAAOiiE,EACPh1D,OAAQzR,KAAKuqE,8BAEf,IAAI5D,EAAoB,CAAEviD,WAAYqiD,EAAmBtiD,UAAWqiD,MAErEx9C,QAEHmH,EAAMlwB,SAAS,CACb6uD,mBAAoB,CAAChoD,EAAGge,IACtB9kB,KAAK+uD,0BAA0ByX,EAAkBC,EAAmB3hD,EAASqL,KAGjF,MAAMq6C,EAAc,IAAIriD,EAAAA,GAAiB,CACvCnE,WAAY,CAAC,IAAIi5C,EAAAA,GAAAA,GAAqB,CAAEhjE,IAAK,uBAAwBijE,KAAMC,EAAAA,oBAAoBC,aAC/F97D,KAAM6uB,IAWR,OARAq6C,EAAY7pE,sBAAqB,K,IAG3B8pE,GAAiB,QAAjBA,GAFW3gD,EAAAA,EAAAA,IAA2B0gD,GAAa,GAE5CprE,MAAM4lB,YAAbylD,IAAAA,OAAAA,EAAAA,EAAmBrrE,SAAUmyB,EAAAA,aAAaC,MAC5CxxB,KAAK0qE,cAAcF,EACrB,IAGKA,CACT,CAEAD,yBAAAA,GACE,MAAMI,EAAU3qE,KAAK4qE,yBACrB,QAAQD,aAAAA,EAAAA,EAASvrE,MAAMwE,QAAQwc,kBAAkBhF,YAAYuvD,aAAAA,EAAAA,EAASvrE,MAAMwE,QAAQwc,kBAAkBD,OACxG,CAsDA0qD,uBAAAA,GACE,MAAMlD,EAAc3nE,KAAK4nE,iBACzB,OAAOD,IAAgB5pC,EAAAA,GAAeD,EAAAA,GAAmB6pC,CAC3D,CAEQmD,oBAAAA,GACN9qE,KAAKC,SAAS,CACZooB,OAAO+/C,EAAAA,EAAAA,IAAoB,CACzBxjD,QAAS,EACPmmD,EAAAA,EAAAA,IAAiB,IAAIC,EAAAA,OAA2BC,EAAAA,MAA4B,SAAUjrE,KAAK4nE,mBAE7F5B,eAAgB,aAKpBhmE,KAAKkrE,mBACP,CAEQC,mBAAAA,GACN,MAAMC,GAAmB/1D,EAAAA,EAAAA,IAAkBrV,MACrCqrE,GAAmBC,EAAAA,EAAAA,IAAyBtrE,MAE5CurE,EAAYvrE,KAAK4nE,iBACjB4D,EAAkBJ,EAAiBhsE,MAAMsC,QAAQrF,QAAQ+I,GAAMA,EAAEnL,MAAQsxE,IAE/E,MAAO,CAAE7pE,QAAS8pE,EAAiBC,YAAY9vC,EAAAA,EAAAA,GAAe6vC,EAAiBH,EAAiBjsE,MAAMsC,SACxG,CAEQgqE,aAAAA,GACN,MAAML,GAAmBC,EAAAA,EAAAA,IAAyBtrE,OAE5C,QAAE0B,EAAO,UAAE+pE,GAAczrE,KAAKmrE,sBAChCM,GACFJ,EAAiBprE,SAAS,CAAEyB,WAEhC,CAEQ3B,UAAAA,G,IAkBF,EAjBJC,KAAK2rE,uBAGL3rE,KAAK0rE,gBAGL1rE,KAAK8qE,uBAGL9qE,KAAK4rE,mCAGL5rE,KAAK6rE,gCAGL7rE,KAAK8rE,8BAA6B5D,EAAAA,EAAAA,IAAgCloE,QAEnC,QAA3B,EAAAA,KAAKZ,MAAMipB,MAAMjpB,MAAM4lB,YAAvB,eAA6B5lB,SAAUmyB,EAAAA,aAAaC,MACtDxxB,KAAK+rE,sBAIP/rE,KAAKgkE,uBAGLhkE,KAAKgsE,wBAELhsE,KAAKisE,oCAELjsE,KAAKksE,qCACP,CAEQH,mBAAAA,G,IAGA,EAKA,EAPF/rE,KAAKmsE,oCACPnsE,KAAKosE,0CAC0B,QAA3B,EAAApsE,KAAKZ,MAAMipB,MAAMjpB,MAAM4lB,YAAvB,eAA6B5lB,SAAUmyB,EAAAA,aAAaC,MACtDxxB,KAAKqsE,mBAGPrsE,KAAKssE,wCAC0B,QAA3B,EAAAtsE,KAAKZ,MAAMipB,MAAMjpB,MAAM4lB,YAAvB,eAA6B5lB,SAAUmyB,EAAAA,aAAaC,MACtDxxB,KAAKqsE,iBAGX,CAEQJ,iCAAAA,G,IAEJ,EADFjsE,KAAK2S,MAAMC,IACkB,QAA3B,EAAA5S,KAAK4qE,gCAAL,eAA+B/3D,kBAAiB,CAACC,EAAU6C,KACrD7C,EAASlP,QAAQwc,kBAAkBF,eAAiBvK,EAAU/R,QAAQwc,kBAAkBF,cAC1FlgB,KAAKqsE,gBAAe,EACtB,IAGN,CAEQL,qBAAAA,GACNhsE,KAAK2S,MAAMC,KACTtN,EAAAA,EAAAA,IAAsBtF,MAAM6S,kBAAkBC,IAC5C9S,KAAKopE,oCAAoCt2D,EAAStO,MAAMsB,YACxD9F,KAAKqsE,gBAAgB,IAG3B,CAEQP,4BAAAA,CAA6B3B,GACnCnqE,KAAK2S,MAAMC,IACTu3D,EAAgBt3D,kBAAiB,CAACC,EAAU6C,KAC1C,GAAI7C,EAASmgD,mBAAqBt9C,EAAUs9C,iBAAkB,CAC5D,MAAM0W,EAAS72D,EAASpR,QAAQ,GAAGzH,IACnC+F,KAAK0pE,+BAA+BC,GAEpC,MAAM,UAAE8B,GAAczrE,KAAKmrE,sBAEvBM,EACFzrE,KAAK0rE,gBAEL1rE,KAAKqsE,gBAAe,EAExB,KAGN,CAMA,sCACErsE,KAAK2S,MAAMC,KACT25D,EAAAA,EAAAA,IAA6BvsE,MAAM6S,kBAAiB,CAACC,EAAU6C,KACzD7C,EAAStO,QAAUmR,EAAUnR,QAE/BxE,KAAKC,SAAS,CACZqB,KAAM,IAAIy0B,EAAAA,GAAmB,CAAE/8B,SAAU,OAG3CgH,KAAKm7B,YAAW,GAClB,IAGN,CAEQywC,gCAAAA,GACN,MAAMR,GAAmB/1D,EAAAA,EAAAA,IAAkBrV,MAC3CA,KAAK2S,MAAMC,IACTw4D,EAAiBv4D,kBAAiB,CAACC,EAAU6C,MACtCgmB,EAAAA,EAAAA,GAAe7oB,EAASpR,QAASiU,EAAUjU,UAC9C1B,KAAK0rE,eACP,IAGN,CAEQG,6BAAAA,GACN,MAAMz2D,GAAYk2D,EAAAA,EAAAA,IAAyBtrE,MAC3CA,KAAK2S,MAAMC,IACTwC,EAAUvC,kBAAiB,CAACC,EAAU6C,MAC/BgmB,EAAAA,EAAAA,GAAe7oB,EAASpR,QAASiU,EAAUjU,UAC9C1B,KAAKqsE,gBAAe,EACtB,IAGN,CAEQnB,iBAAAA,GACNlrE,KAAK2S,MAAMC,IACT5S,KAAKZ,MAAMipB,MAAMxV,kBAAiB,CAACC,EAAU6C,K,IAGzC7C,EACgB6C,EAAyB7C,GAD5B,QAAbA,EAAAA,EAASkS,YAATlS,IAAAA,OAAAA,EAAAA,EAAe1T,SAAUmyB,EAAAA,aAAaC,OACrCmK,EAAAA,EAAAA,GAAehmB,SAAe,QAAfA,EAAAA,EAAWqP,YAAXrP,IAAAA,OAAAA,EAAAA,EAAiB6Z,OAAQ1c,SAAc,QAAdA,EAAAA,EAAUkS,YAAVlS,IAAAA,OAAAA,EAAAA,EAAgB0c,SAEzDxvB,KAAKm7B,YAAW,EAClB,IAGN,CAEQ6oC,oBAAAA,GACNhkE,KAAK2S,MAAMC,IACT3T,EAAAA,GAAW8T,aAAa/S,MAAM6S,kBAAiB,KACzC7S,KAAKmsE,mCACPnsE,KAAKosE,yCAELpsE,KAAKssE,uCAEPtsE,KAAKqsE,gBAAgB,IAG3B,CAMA,uBAEE,MAAM,IAAEpyE,GAAQkvE,KACXlvE,GACH+F,KAAKmoE,uBAET,CAEQgE,gCAAAA,GAEN,OADkBltE,EAAAA,GAAW8T,aAAa/S,MACzBZ,MAAMoF,MAAM8R,KAAKk2D,UAAS7P,EAAAA,EAAAA,UAAS/6C,IACtD,CAEQwqD,sCAAAA,GACN,MAAMzB,EAAU3qE,KAAK4qE,yBACrBD,SAAAA,EAAS1qE,SAAS,CAChB2D,QAAS,CACPwc,kBAAmB,QACduqD,aAAAA,EAAAA,EAASvrE,MAAMwE,QAAQwc,mBAAiB,CAC3ChF,UAAU,MAIlB,CAEQwvD,sBAAAA,GAEN,OADmB3rE,EAAAA,GAAWoD,YAAYrC,KAAMsC,EAAAA,IAC9BlD,MAAM2C,SAAS2d,MAAM/c,GAAYA,aAAmB+Y,EAAAA,GACxE,CAEQ4wD,oCAAAA,GACN,MAAM3B,EAAU3qE,KAAK4qE,yBACrBD,SAAAA,EAAS1qE,SAAS,CAChB2D,QAAS,CACPwc,kBAAmB,QACduqD,aAAAA,EAAAA,EAASvrE,MAAMwE,QAAQwc,mBAAiB,CAC3ChF,UAAU,MAIlB,CAMA,eAAuBqxD,GAAmB,GACpCA,GACFzsE,KAAK8qE,uBAGP9qE,KAAK0sE,iCACL1sE,KAAKZ,MAAMipB,MAAM6iC,YACnB,CAEQwhB,8BAAAA,GACN,MAAMxC,GAAkBqC,EAAAA,EAAAA,IAA6BvsE,MAC/CoV,GAAYC,EAAAA,EAAAA,IAAkBrV,MAC9BA,KAAKmsE,oCAAuCpD,KAA6B/oE,KAAKuqE,6BAalFL,EAAgB1xD,cAAculB,EAAAA,IAE9B3oB,EAAUnV,SAAS,CACjBqZ,KAAMC,EAAAA,GAAaC,WAErB0wD,EAAgB1xD,cAAculB,EAAAA,IAGP9+B,EAAAA,GAAWsS,iBAAiBvR,KAAMmR,EAAAA,GAAwBK,EAAAA,GAClEvR,SAAS,CAAEwR,QAAQ,MArBlCy4D,EAAgB1xD,cAAcwwD,IAG9B5zD,EAAUnV,SAAS,CACjBqZ,KAAMC,EAAAA,GAAaU,aACnBvY,QAAS,KAIYzC,EAAAA,GAAWsS,iBAAiBvR,KAAMmR,EAAAA,GAAwBK,EAAAA,GAClEvR,SAAS,CAAEwR,QAAQ,IAatC,CAEQk7D,UAAAA,GACN,IAAK3sE,KAAKZ,MAAMwtE,KAAM,CACpB,MAAMA,EAAO,IAAI3F,EAA0B,CAAC,GAC5CjnE,KAAKC,SAAS,CACZ2sE,QAEJ,CACF,CAEQC,YAAAA,GACN,OAAO7sE,KAAKZ,MAAMkC,KAAKlC,MAAMpG,QAC/B,CAEQixD,WAAAA,CAAYp7B,GAClB,OAAOA,EAAMzvB,MAAMkC,gBAAgB0S,EAAAA,GAAW6a,EAAMzvB,MAAMkC,UAAOtJ,CACnE,CAOA,cAAsB62B,GACpB,GAAIA,EAAM9a,SAAU,CAClB,MAAM+4D,GAAehjD,EAAAA,EAAAA,IAA2B+E,GAChD,GAA4B,IAAxBi+C,EAAa9xE,OAAc,C,IAKJkqB,EAJzB,MAAMA,EAAc4nD,EAAa,GAC3Bt4C,EAAQtP,EAAY9lB,MAAMwlB,QAAQ,GAGlCmoD,EAAyC,QAAtB7nD,EAAAA,EAAY9lB,MAAM4lB,YAAlBE,IAAAA,OAAAA,EAAAA,EAAwBjiB,UAC3CkZ,EAAiBld,EAAAA,GAAW8T,aAAa/S,MACzCgtE,EAAWD,EACbnyE,KAAKqyE,IAAI9wD,EAAe/c,MAAMoF,MAAM8R,KAAKD,KAAK02D,aAAAA,EAAAA,EAAkBz2D,KAAM,MACtE67B,IACE+6B,EAASH,EACXnyE,KAAKqyE,IAAI9wD,EAAe/c,MAAMoF,MAAM4R,GAAGC,KAAK02D,aAAAA,EAAAA,EAAkB32D,GAAI,MAClE+7B,IAEEx6B,EAAe1Y,EAAAA,GAAW2Y,YAAY5X,KAAMw0B,EAAMzxB,OAEpDmiB,EAAY9lB,MAAMnF,MAAQ0d,GAAgBq1D,EAAW,GAAKE,EAAS,KACrEhoD,EAAYjlB,SAAS,CACnBhG,IAAK0d,IAEPuN,EAAYgmC,aAEhB,CACF,CACF,CAEQ/vB,UAAAA,CAAW+vB,GAAa,G,IACW,EAAzC,MAAM,cAAEiiB,GAAkBntE,KAAKotE,UAAqC,QAA3B,EAAAptE,KAAKZ,MAAMipB,MAAMjpB,MAAM4lB,YAAvB,eAA6BwK,QAChEm4C,EAAc3nE,KAAK4nE,iBAGzB,GAFA5nE,KAAK2sE,aAEAQ,GAA0C,IAAzBA,EAAcnyE,OAE7B,CAEL,MAAMq0B,EAAkC,GAClCg+C,EAAmBrtE,KAAK6sE,eACxB5pE,EAAYhE,EAAAA,GAAW8T,aAAa/S,MAAMZ,MAAMoF,MAChD8oE,GAA4Bf,EAAAA,EAAAA,IAA6BvsE,MACzDmqE,GAAkBjC,EAAAA,EAAAA,IAAgCloE,MAClDutE,GAAqBjoE,EAAAA,EAAAA,IAAsBtF,MAEjD,IAAK,MAAMymE,KAAqB0G,EAAcjhE,MAAM,EAjyB5B,IAiyBgD,CACtE,MAAMshE,EAAWH,EAAiBhxE,QAAQwyB,IACxC,MAAM5e,EAAWjQ,KAAKiqD,YAAYp7B,GAClC,OAAO5e,aAAAA,EAAAA,EAAU7Q,MAAM/H,SAAUovE,CAAiB,IAGpD,GAAwB,IAApB+G,EAASxyE,OAEXq0B,EAAYrmB,KAAKwkE,EAAS,GAAIA,EAAS,IAEnCA,EAAS,GAAGz5D,UAAYm3C,GAC1BlrD,KAAK0qE,cAAc8C,EAAS,IAG1BA,EAAS,GAAGz5D,UAAYm3C,GAC1BlrD,KAAK0qE,cAAc8C,EAAS,QAEzB,CACL,MAAMC,EAAaztE,KAAKiqE,mBACtBtC,EACAlB,EACAxjE,EACAqqE,EACAnD,EACAoD,GAEIG,EAAe1tE,KAAK2tE,uBAAuBhG,EAAalB,GAE9Dp3C,EAAYrmB,KAAKykE,EAAYC,EAC/B,CACF,CAEA1tE,KAAKZ,MAAMkC,KAAKrB,SAAS,CACvBjH,SAAUq2B,EACV8G,QAAQ,EACRH,gBAAiB,2DACjBE,SAAU,QACVwrC,GAAI,CACF1rC,gBAAiB,MACjBxU,OAAQ,EACRC,UAAW,IAGjB,MArDEzhB,KAAKZ,MAAMkC,KAAKrB,SAAS,CAAEjH,SAAU,IAsDzC,CAKA,kBAA0BmrB,EAAmBC,G,IAKF,EAJzC,IAAKpkB,KAAKZ,MAAMkC,KAEd,YADAtB,KAAKm7B,aAGP,MAAM,cAAEgyC,GAAkBntE,KAAKotE,UAAqC,QAA3B,EAAAptE,KAAKZ,MAAMipB,MAAMjpB,MAAM4lB,YAAvB,eAA6BwK,QAChEo+C,EAAeT,aAAAA,EAAAA,EAAeh/D,QAAQiW,GAC5C,QAAqBpsB,IAAjB41E,GAA8BA,EAAe,EAC/C,OAEF,IAAIv+C,EAAc,IAAIrvB,KAAK6sE,gBAC3Bx9C,EAAYrkB,OAAsB,EAAf4iE,EAAmB,EAAG,EAAG5tE,KAAK2tE,uBAAuBxpD,EAAWC,IACnFpkB,KAAKZ,MAAMkC,KAAKrB,SAAS,CAAEjH,SAAUq2B,GACvC,CAEQw+C,gBAAAA,CAAiB1pD,EAAmBC,EAAoBwrC,GAC9D,MAAO,IAAIzrC,OAAeC,SAAkB6mD,EAAAA,OAA4Brb,GAC1E,CAEQ0a,mBAAAA,CACNlmD,EACA8lD,EACAC,GAEA,MAAM9tE,EAAS8tE,EAAgB/qE,MAAMsC,QAAQ,GAC7C,OAAIwoE,EAAgB9qE,MAAMoF,QAAUwkE,GAC9B3sE,EAAOpC,MAAQ8jC,EAAAA,GACV,WAAWpQ,EAAAA,uBAAyCq7C,QAA6B5kD,4CAEjF,WAAWuJ,EAAAA,uBAAyCq7C,2BAAgD3sE,EAAOpC,SAASmqB,iCAGxH,WAAWuJ,EAAAA,0BAA4CtxB,EAAOpC,SAASmqB,QAAiB6mD,EAAAA,kBACjG,CAqBQmC,SAAAA,CAAU59C,G,IACiBA,EAChBlqB,EADgBkqB,EAAjC,MAAMs+C,EAAwD,QAA7Bt+C,EAAAA,SAAW,QAAXA,EAAAA,EAAS,UAATA,IAAAA,OAAAA,EAAAA,EAAahM,OAAO,GAAG9f,cAAvB8rB,IAAAA,EAAAA,EAAiC,GAC5Du+C,EAA+C,QAApCzoE,GAAAA,EAAAA,EAAAA,IAAsBtF,MAAM6F,kBAA5BP,IAAAA,OAAAA,EAAAA,EAAwCQ,WACnDkoE,GAAeC,EAAAA,EAAAA,IAAkCjuE,MAAM6F,WACvD8hE,EAAc3nE,KAAK4nE,iBACnBuF,EASV,SAAmCe,EAAoB5xD,EAAY0xD,EAAsB7pD,GACvF,KAAK+pD,aAAAA,EAAAA,EAAUlzE,QACb,MAAO,GAGY,OAAjBgzE,IACFA,EAAe,IAGjB,MAAMG,GAA0BvoE,EAAAA,EAAAA,IAAkC0W,EAAI6H,GAAW9nB,QAC9E+xE,GAAYA,EAAQlmE,cAAc5I,SAAS0uE,EAAa9lE,gBAAkBgmE,EAAS5uE,SAAS8uE,KAI/F,OAAO5nE,MAAM8P,KAAK,IAAItQ,IAAI,IAAImoE,KAA4BD,IAC5D,CAxB0BG,CAA0BP,EAAgBC,EAAUjmE,OAAOkmE,GAAerG,GAChG,MAAO,CAAEmG,iBAAgBX,cAAeA,EAC1C,CA72BA3sE,WAAAA,CAAYpB,G,IAwCO+pE,EAvCjB1oE,MAAM,GACJa,KAAM,IAAIy0B,EAAAA,GAAmB,CAAE/8B,SAAU,KACzC6iB,WAAY,IAAInB,EAAAA,GAAiB,CAC/Bvb,UAAW,CAET,IAAI2b,EAAAA,EAAuB,CACzB5gB,KAAMo0E,EAAAA,GACNxtE,MAAO,UACPwY,KAAMC,EAAAA,GAAaU,aACnBgB,aAAa,EACbzW,MAAO,OAGT,IAAIsW,EAAAA,EAAuB,CACzB5gB,KAAMq0E,EAAAA,GACNztE,MAAO,GACPwY,KAAMC,EAAAA,GAAaM,UACnBrV,MAAOu5B,EAAAA,GACP9iB,aAAa,EACbrX,QAAS,CACP,CACEY,MAAOu5B,EAAAA,GACPj9B,MAAOi9B,EAAAA,IAET,CACEv5B,MAAOwkE,GACPloE,MAAOkoE,OAKb,IAAI/vD,EAAAA,GAAqB,CACvB/e,KAAMs0E,EAAAA,GACNl1D,KAAMC,EAAAA,GAAaM,UACnBT,kBAAoB1X,GApDhC,SAAmCA,GACjC,GAAIA,EAAQ1G,OAAQ,CAClB,MAAMqB,EAASqF,EAAQ,GACvB,MAAO,GAAGrF,EAAOpC,MAAMoC,EAAOgJ,aAAahJ,EAAOmI,SACpD,CAEA,MAAO,EACT,CA8CqBiqE,CAA0B/sE,GAEnCA,QAAS,CACP,CACEzH,IAAgC,QAA3BkvE,EAAAA,KAAwBlvE,WAAxBkvE,IAAAA,EAAAA,EAA+BprC,EAAAA,GACpCv5B,MAAO,KACPa,SAAU,SAIhB,IAAI4T,EAAAA,GAAqB,CACvB/e,KAAMw0E,EAAAA,GACNzpE,WAAYkU,EAAAA,GACZ3Z,OAAQ,WACRkC,QAAS,GACT0X,kBAAmBC,EAAAA,GACnBC,KAAMC,EAAAA,GAAaU,aACnBhgB,IAAK,+BACLghB,aAAa,OAInBoN,OAAO+/C,EAAAA,EAAAA,IAAoB,CACzBxjD,QAAS,GACTohD,eAAgB,WAElB2I,aAAc,IAAI72C,IAElBqN,aAAa,EACb+hC,WAAY,CACV,CACEpmE,MAAOg9B,EAAAA,GACPt5B,MAAOu5B,EAAAA,MAGR3+B,IA3EP,OAAU0c,WAAW,IAAIC,EAAAA,GAAyB/b,KAAM,CACtD6I,KAAM,CAACogE,OA0OT2F,EAAAA,KAAAA,0BAAyB/vD,EAAAA,EAAAA,WAAUgwD,IAEjC,MAAMC,GAAYb,EAAAA,EAAAA,IAAkCjuE,OAE5B6uE,GAAqBh7C,EAAAA,EAAAA,IAAmBg7C,GAAsB,QAC9DC,EAAU1vE,MAAMoF,OACtCsqE,EAAU7uE,SAAS,CACjBuE,MAAOqqE,GAAqBh7C,EAAAA,EAAAA,IAAmBg7C,GAAsB,KACrE/tE,MAAO+tE,QAAAA,EAAsB,KAIjC,MAAM1E,GAAkBjC,EAAAA,EAAAA,IAAgCloE,MAClD3D,EAAS8tE,EAAgB/qE,MAAMsC,QAAQ,IAGzCmyB,EAAAA,EAAAA,IAAmBi7C,EAAU1vE,MAAMoF,MAAMsB,cAAgBzJ,EAAOmI,OAClE2lE,EAAgBlqE,SAAS,CACvByB,QAAS,CACP,QACKrF,GAAAA,CACHmI,OAAOqvB,EAAAA,EAAAA,IAAmBi7C,EAAU1vE,MAAMoF,MAAMsB,kBAMxDpJ,EAAAA,EAAAA,IACEC,EAAAA,GAAkB2jB,kBAClBzjB,EAAAA,GAAoByjB,kBAAkByuD,wBACtC,CACEC,YAAaH,GACf,GAED,MAwGHI,EAAAA,KAAAA,4BAA4Bb,IAC1B,IAAIc,EAAgBlvE,KAAKZ,MAAMuvE,aAAavrE,IAAIgrE,IAAY,GAC5D,OAA6B,IAAzBc,EAAcl0E,OACT,GAQF,MANSk0E,EAAc9xE,KAAKgN,IACnB,SAAVA,IACFA,EAAQ,IAEH,GAAGujB,EAAAA,QAA0BvjB,SAEjBQ,KAAK,UAAU,IAItC+iE,EAAAA,KAAAA,0BAAyB,CAACxpD,EAAmBC,KAC3C,MAAMwrC,EAAc5vD,KAAKivE,yBAAyB7qD,GAC5ComD,EAAc,IAAIriD,EAAAA,GAAiB,CACvCnE,WAAY,CAAC,IAAIi5C,EAAAA,GAAAA,GAAqB,CAAEC,KAAMC,EAAAA,oBAAoBgS,OAClE7tE,KAAMinB,EAAAA,GAAcpF,OAEjBua,gBAAe,GACf3U,SACC2L,EAAAA,EAAAA,IACE,EACED,EAAAA,EAAAA,GAAez0B,KAAK6tE,iBAAiB1pD,EAAWC,EAAYwrC,GAAc,CACxEvB,SAAU,IACVnjC,MAAO,QAAQ9G,OAGnB,CACE4hD,eAAgB,YAIrBn9C,SAASzE,GACTonC,UAAU,YAAY,GACtBA,UAAU,oBAAoB,GAC9BxiC,UAWL,OARAwhD,EAAY7pE,sBAAqB,K,IAG3B8pE,GAAiB,QAAjBA,GAFW3gD,EAAAA,EAAAA,IAA2B0gD,GAAa,GAE5CprE,MAAM4lB,YAAbylD,IAAAA,OAAAA,EAAAA,EAAmBrrE,SAAUmyB,EAAAA,aAAaC,MAC5CxxB,KAAK0qE,cAAcF,EACrB,IAGKA,CAAW,IAibpB,OAAQzb,6BAA4B,CAClC5qC,EACAC,EACAU,EACAqL,KAEA,MAAMkqC,EAAmCv1C,EAAQ+qC,yBAEjD/qC,EAAQ+qC,yBAA2B,CAACzlD,EAAeqvB,K,IAGXtJ,EAAAA,EAAAA,EAFtCkqC,SAAAA,EAAmCjwD,EAAOqvB,GAE1C,MAAM21C,GAAYC,EAAAA,EAAAA,IAAyD,QAArCl/C,EAAiB,QAAjBA,EAAAA,EAAM/wB,MAAMipB,aAAZ8H,IAAAA,GAA6B,QAA7BA,EAAAA,EAAmB/wB,MAAM4lB,YAAzBmL,IAAAA,OAAAA,EAAAA,EAA+BX,cAA/BW,IAAAA,EAAAA,EAAyC,IACzE08B,GAASyiB,EAAAA,EAAAA,IAAsBllE,EAAOpK,KAAKZ,MAAMuvE,aAAavrE,IAAIghB,GAAaqV,EAAM21C,GAC3FpvE,KAAKZ,MAAMuvE,aAAa32C,IAAI5T,EAAYyoC,GAExC7sD,KAAKuvE,kBAAkBprD,EAAWC,EAAW,CAC9C,IAzxBDpkB,KAAKW,qBAAqBX,KAAKD,WAAWa,KAAKZ,MACjD,EA0zBF,SAASmpE,KACP,MAAMlxD,EAAW5D,EAAAA,gBAAgB6D,cAC3BE,EAAS,IAAID,gBAAgBF,EAASG,QACtCwxD,EAAkBxxD,EAAOhV,IAAI6lE,IAC7BY,EAAoBD,aAAAA,EAAAA,EAAiB9gE,MAAM,KAEjD,MAAO,CAAE7O,IADG4vE,aAAAA,EAAAA,EAAoB,GAClBzxD,SAAQH,WACxB,CAEA,SAAS3hB,GAAUoB,GACjB,MAAO,CACLjB,WAAWkB,EAAAA,EAAAA,KAAI,CACbC,QAAS,OACTqJ,cAAe,SACfE,SAAU,EACVnD,SAAU,aAEZwxE,gBAAgB73E,EAAAA,EAAAA,KAAI,CAClBmK,UAAWpK,EAAMiB,QAAQ,KAE3B82E,aAAa93E,EAAAA,EAAAA,KAAI,CACfW,OAAQ,IAEVwnB,QAAQnoB,EAAAA,EAAAA,KAAI,CACVqG,SAAU,WACV0iD,MAAO,EACPziD,IAAK,MACLgjB,OAAQ,IAEVyuD,aAAa/3E,EAAAA,EAAAA,KAAI,CACfwJ,SAAU,EACVvJ,QAAS,OACTqJ,cAAe,WAEjBK,MAAM3J,EAAAA,EAAAA,KAAI,CACRwJ,SAAU,EACVvJ,QAAS,OACTqJ,cAAe,WAEjBmhB,MAAMzqB,EAAAA,EAAAA,KAAI,CACR4B,MAAO7B,EAAMgE,OAAO9C,KAAKwiB,SACzBrd,WAAYrG,EAAMiB,QAAQo7B,KAE5B47C,4BAA4Bh4E,EAAAA,EAAAA,KAAI,CAC9BwG,SAAUzG,EAAM0G,WAAWC,UAAUF,SACrC5E,MAAO7B,EAAMgE,OAAO9C,KAAKwiB,SACzBviB,WAAY,SACZjB,QAAS,SAEXg4E,eAAej4E,EAAAA,EAAAA,KAAI,CACjBC,QAAS,OACTiB,WAAY,SACZ0E,SAAU,SAEZsyE,aAAal4E,EAAAA,EAAAA,KAAI,CACfmK,UAAWpK,EAAMiB,QAAQ,GACzBqF,SAAU,aAGhB,CA9yBE,EAvJWgU,GAuJGvS,aAAY,EAAGV,Y,IAaJspB,EAZvB,MAAMjyB,GAASC,EAAAA,EAAAA,YAAWC,KACpB,KAAEgL,EAAI,MAAE+mB,EAAK,KAAEukD,GAAS7tE,EAAMjF,YAC9B,KAAEkrB,GAASqD,EAAMvuB,WACjB6tE,EAAc5oE,EAAM6oE,iBAEpBkI,GAAwB7B,EAAAA,EAAAA,IAAkClvE,IAC1D,MAAE+B,EAAO0D,MAAOmvC,GAAgBm8B,EAAsBh2E,WACtDi2E,EAAYp8B,GAA+B,OAAhBA,GAE3B,eAAEm6B,EAAc,cAAEX,GAAkBpuE,EAAMquE,UAAUpoD,aAAAA,EAAAA,EAAMwK,QAC1DwgD,GACJhrD,aAAAA,EAAAA,EAAM5lB,SAAUmyB,EAAAA,aAAa8qC,UAAWr3C,aAAAA,EAAAA,EAAM5lB,SAAUmyB,EAAAA,aAAaE,gBAAsBz5B,IAATgtB,EAC9EirD,GAAiC,QAAhB5nD,EAAAA,EAAMjpB,MAAM4lB,YAAZqD,IAAAA,OAAAA,EAAAA,EAAkBjpB,SAAUmyB,EAAAA,aAAa/tB,M,IAK1C2pE,EAAtB,MAAM+C,EAAqC,QAArB/C,EAAAA,aAAAA,EAAAA,EAAenyE,cAAfmyE,IAAAA,EAAAA,EAAyB,EAEzCgD,EAAmB7uE,EAAKlC,MAAMpG,SAASgC,OAAS,EAEhDo1E,EAAcrxE,EAAM8rE,0BAC1B,IAAIwF,EAAcP,EAAsBjqE,WAAWC,WAC/B,OAAhBuqE,IACFA,EAAc,IAEhB,MAAMC,GAAcC,EAAAA,EAAAA,IAAqBF,G,IAsB3BlD,EApBd,OACE,kBAAC52E,MAAAA,CAAIC,UAAWJ,EAAOK,WACrB,kBAACF,MAAAA,CAAIC,UAAWJ,EAAOs5E,aACpB9C,GAAQ,kBAACA,EAAKntE,UAAS,CAACV,MAAO6tE,IAChC,kBAACjtC,EAAAA,MAAKA,CAACnpC,UAAWJ,EAAOy5E,aACvB,kBAACt5E,MAAAA,CAAIC,UAAWJ,EAAOw5E,eACrB,kBAAC/8C,EAAAA,EAAoBA,CACnBG,cAAe,CACblyB,MAAOwvE,EACP9rE,MAAO6rE,EACPjuD,KAAM,UAER2Q,UAAWi9C,EACXxrE,MAAO6rE,GAA4BvvE,EACnCkhB,SAAWwuD,GA5BA,CAACA,IACtBzxE,EAAM6vE,uBAAuB4B,EAAY,EA2BJC,CAAeD,GAC1C19C,aAAetuB,IACb+hE,EAAYoB,EAAanjE,EAAOzF,EAAM,EAExC+B,MAAOsvE,EACPxsE,QAIE,QAHAupE,EAAAA,aAAAA,EAAAA,EAAe/vE,KAAKozE,IAAiB,CACnChsE,MAAOgsE,EACP1vE,MAAO0vE,aAFTrD,IAAAA,EAAAA,EAGO,MAGT6C,GACA,kBAAC3wD,OAAAA,CAAK7oB,UAAWJ,EAAOu5E,4BAA4B,WACzCQ,EAAiB,OAAKD,EAAe,IAC9C,kBAAC5wD,EAAAA,WAAUA,CACT9oB,UAAWJ,EAAOgsB,KAClB/nB,aAAW,aACXH,KAAM,cACNksB,QAAS,GAAG8pD,uFAOpBF,GAAsBC,GAAkB,kBAACrJ,EAAoBA,OAC7DoJ,IAAuBC,GAAkBF,KAAcjC,aAAAA,EAAAA,EAAgB9yE,SAAU,kBAAC6rE,EAAsBA,OACxGmJ,IAAuBC,IAAmBF,KAAcjC,aAAAA,EAAAA,EAAgB9yE,SACxE,kBAAC2tE,EAAeA,CAACxkD,UAAWwjD,OAE1BqI,GAAsBC,IACxB,kBAAC15E,MAAAA,CAAIC,UAAWJ,EAAOkL,MACrB,kBAACA,EAAK7B,UAAS,CAACV,MAAOuC,M,sECvV9B,SAASwtC,EAAuBl5C,GAIrC,OACE,kBAACgqC,EAAAA,iBAAgBA,CACfh8B,QAAS,CACP,CACE9C,MAAO,OACP0D,MAAO,OACP6hB,YAAa,sCAEf,CACEvlB,MAAO,QACP0D,MAAO,QACP6hB,YAAa,wCAGjBxvB,KAAK,KACL2N,MAAO5O,EAAMm5C,QACb/sB,SAAUpsB,EAAMosB,UAGtB,C,kLChBO,MAAMlH,UAA+B41D,EAAAA,GAYnCC,eAAAA,CAAgBliE,GACrB,OAAOmiE,EAAAA,EAAAA,IAAG5wE,KAAKZ,MAAMwE,QACvB,CAbA,YAAmB21C,GACjB94C,M,sUAAM,EACJnE,KAAM,SACNkI,MAAO,GACP5L,KAAM,GACNgL,QAAS,GACT1J,KAAM,IACHq/C,GAEP,EAMA,EAhBWz+B,EAgBGrb,aAAY,EAAGV,YACpB8xE,EAAAA,EAAAA,IAAwB9xE,I,6EC7BnC,MAKarC,EAAuB,CAClCo0E,EACAxoE,EACAyoE,MAEA98B,EAAAA,EAAAA,mBAV4B,EAAC68B,EAA0BxoE,IAChD,GAAG2X,EAAAA,GAAc3b,QAAQ,KAAM,QAAQwsE,KAAQxoE,IASpC0oE,CAAsBF,EAAMxoE,GAASyoE,EAAW,EAGvDp0E,EAAoB,CAC/B2jB,kBAAmB,oBACnB1jB,gBAAiB,kBACjB+uB,IAAK,OASM9uB,EAAsB,CACjC,CAACF,EAAkB2jB,mBAAoB,CAErCyuD,wBAAyB,0BAEzBrI,iBAAkB,mBAElBnmD,2BAA4B,6BAC5BuoD,eAAgB,kBAElB,CAACnsE,EAAkBC,iBAAkB,CACnCq0E,wBAAyB,0BAEzB7P,oBAAqB,sBAErBtzC,oCAAqC,sCAErCiO,kCAAmC,oCAEnCk0B,6BAA8B,+BAE9BvwB,oBAAqB,sBAErBwN,8BAA+B,gCAC/BxuB,mCAAoC,qCAEpC5hB,gBAAiB,kBAEjBuzD,iBAAkB,mBAElB0C,sBAAuB,wBAEvBzI,0BAA2B,4BAE3B6B,2BAA4B,6BAE5BgB,yBAA0B,2BAE1Bd,4BAA6B,8BAE7Bre,4BAA6B,8BAE7BpS,4BAA6B,8BAE7Bs1C,mBAAoB,qBACpBplD,gBAAiB,mBAEnB,CAACnvB,EAAkBgvB,KAAM,CACvBwlD,kBAAmB,oBACnBvlD,6BAA8B,gC,gECtE3B,MAAM+P,EAAiB,CAACy1C,EAAyBC,KAEtD,UAAWD,UAAgBC,EACzB,OAAO,EAET,MAAMC,EAAO,IAAItrE,IAAIorE,GACfG,EAAO,IAAIvrE,IAAIqrE,GAGrB,OAAIC,EAAKz6E,OAAS06E,EAAK16E,MAIhBiQ,IAAAA,QAAUwqE,EAAMC,EAAK,EAGjBpoB,EAAyB,CAACioB,EAAyBC,WAEnDD,UAAgBC,GAGpBvqE,IAAAA,QAAUsqE,EAAMC,E,qqCCGlB,SAASG,EAAwB1b,GACtC,GATK,SAAuBA,GAC5B,YAAoE99D,IAA7D89D,EAAQtC,QAAQ9zC,MAAM8U,GANxB,SAAqBA,GAE1B,OAAOA,EAAM+2B,OAAOvwD,OAAS,IAhBxB,SAAyBw5B,EAAei9C,GAC7C,IAAIC,GAAkB,EAUtB,OATa/sE,EAAAA,GAAOoM,MAAMyjB,GACrBm9C,QAAQ,CACXC,MAAO,EAAGt1E,WACR,GAAIA,EAAKupB,KAAO4rD,EAEd,OADAC,GAAkB,GACX,CACT,IAGGA,CACT,CAIqCA,CAAgBl9C,EAAOq9C,EAAAA,GAC5D,CAGyCC,CAAYt9C,EAAMzxB,OAC3D,CAOMgvE,CAAcjc,GAChB,OAAO,EAET,GARK,SAAwBA,GAC7B,OAAOA,EAAQtC,QAAQ9zC,MAAM8U,GAA8B,YAApBA,EAAMuxC,WAC/C,CAMMiM,CAAelc,GACjB,OAAO,EAET,IAAK,IAAIpuD,EAAI,EAAGA,EAAIouD,EAAQtC,QAAQx4D,OAAQ0M,IAAK,C,IAC3CouD,EAAJ,GAA2B,QAAvBA,EAAAA,EAAQtC,QAAQ9rD,GAAG3E,YAAnB+yD,IAAAA,OAAAA,EAAAA,EAAyBx2D,SAAS,iBACpC,OAAO,CAEX,CACA,OAAO,CACT,CAEA,MAAM2yE,EAAuB,0BAChBC,EAAkC19C,GACtCA,EAAMlwB,QAAQ,IAAK,wBAAwB2tE,OAGvCE,EAA8B,CAACvtD,EAAsBwtD,KAChE,QAAep6E,IAAXo6E,GAA0C,IAAlBA,EAAOp3E,OACjC,OAAO4pB,EAAQxnB,KAAKo3B,GAAW,OAC1BA,GAAAA,CACHzxB,KAAMyxB,EAAMzxB,KAAKuB,QAAQ,wBAAwB2tE,MAA0B,SAI/E,IAAII,EAAaD,EAAOxnE,KAAK,KAG7B,MAAmB,OAAfynE,GAAyC,IAAlBD,EAAOp3E,QAChCq3E,EAA4B,OAAfA,EAAsB,GAAKA,EACjCztD,EAAQxnB,KAAKo3B,GAAW,OAC1BA,GAAAA,CACHzxB,KAAMyxB,EAAMzxB,KAAKuB,QAAQ,wBAAwB2tE,MAA0B,uBAAuBI,YAI/FztD,EAAQxnB,KAAKo3B,GAAW,OAC1BA,GAAAA,CACHzxB,KAAMyxB,EAAMzxB,KAAKuB,QAAQ,IAAIguE,OAAO,GAAGL,IAAwB,KAAMI,M,+zBCsDzE,SAASE,EAAWC,EAAkBC,EAAoB5yD,GACxD,MAAM6yD,GAAMC,EAAAA,EAAAA,YAAWF,EAAY/uE,OAAOmc,GAAQ2yD,EAAU9uE,QAC5D,OAAIgvE,EAAM,EACD,EAELD,EAAY/uE,OAAOmc,KAAW2yD,EAAU9uE,OAAOgvE,IAA6B,MAArBD,EAAYG,OAAoC,MAAnBJ,EAAUI,MACzFH,EAAYG,MAAM/yD,GAAS2yD,EAAUI,MAAMF,GAAOA,EAAM,EAAIA,EAEjED,EAAY/uE,OAAOmc,GAAS2yD,EAAU9uE,OAAOgvE,GACxCA,EAAM,EAERA,CACT,CAEA,SAASG,EACPC,EACAC,EACAC,EACAC,EACAC,EACAj7B,GAEA,MAAMk7B,EAaR,SAA6BX,EAAkBQ,EAAmBP,EAAoBx6B,GACpF,OAAIu6B,EAAUI,OAASH,EAAYG,WAEC56E,IAAhCw6E,EAAU9uE,OAAOsvE,IACjBR,EAAU9uE,OAAOsvE,KAAeP,EAAY/uE,OAAOu0C,SACpBjgD,IAA/Bw6E,EAAUI,MAAMI,IAChBR,EAAUI,MAAMI,KAAeP,EAAYG,MAAM36B,QAGdjgD,IAAhCw6E,EAAU9uE,OAAOsvE,IAA4BR,EAAU9uE,OAAOsvE,KAAeP,EAAY/uE,OAAOu0C,EACzG,CAvBwBm7B,CAAoBN,EAAeE,EAAWC,EAAiBh7B,GACrF,QAAKk7B,IAGc,MAAfJ,GAAwC,MAAjBG,QAKSl7E,IAAlC+6E,EAAYrvE,OAAOsvE,IAA4BD,EAAYrvE,OAAOsvE,KAAeE,EAAcxvE,OAAOu0C,GAE1G,CAcA,SAASo7B,EAAgBC,EAAuBC,EAAuB1zD,GACrE,MAAM2zD,EAAaD,EAAal3E,QAAQ+I,GAAMA,EAAElL,OAASo5E,EAAep5E,OAExE,OAA0B,IAAtBs5E,EAAWx4E,OACNw4E,EAAW,GAGbD,EAAa1zD,EACtB,CAEA,MAAM4zD,EAAmB,iCAEzB,SAASC,EACPC,EACAC,GAGA,MAAMC,EAAWF,EAAUj0D,MAAMo0D,GAAMA,EAAE/xB,cAAgB0xB,IACnDM,EAAaH,EAAYl0D,MAAMo0D,GAAMA,EAAE/xB,cAAgB0xB,IAE7D,GAAkB,MAAdM,GAAkC,MAAZF,EACxB,MAAO,CAAC,CAAErvE,MAAOuvE,EAAWvvE,MAAQqvE,EAASrvE,MAAOu9C,YAAa0xB,EAAkBxyC,KAAM4yC,EAAS5yC,OAIpG,MAAM+yC,EAAaD,QAAAA,EAAcF,EACjC,OAAkB,MAAdG,EACK,CAACA,GAGH,EACT,CAaA,SAASC,EAAe5uD,GACtB,OAAO,OACFA,GAAAA,CACH7B,OAAQ6B,EAAM7B,OAAOpmB,KAAKwmB,GAAkB,OACvCA,GAAAA,CACHlgB,OAAQkgB,EAAMlgB,YAGpB,C,+yBCrLO,SAASwwE,EAAmBjvE,EAA4B6wD,GAC7D,MAAMlxC,EAAU3f,EACbkvE,8BAA8Bre,EAAQtC,QAASsC,EAAQvC,YACvDl3D,QAAQm4B,GAAUA,EAAMzxB,OACxB3F,KAAKS,GAAY,OACbA,GAAAA,CACHkF,KAAMmvE,EAA+Br0E,EAAOkF,UAGhD,OAGF,SACEkC,EACA6wD,EACAse,GAEA,IAAIC,GAAa,EACbC,EAAoC,CAAEtvD,KAAM,GAAI5lB,MAAOmyB,EAAAA,aAAaE,UAAWx3B,KAAKs6E,EAAAA,EAAAA,MACpFC,EAA4C,KAC5CC,EAAa,IAAI38C,IACjB48C,EAAmD,KAEvD,MAAMC,EAAiB,CACrBC,EACAC,EACAzC,EACA0C,KAEA,IAAIC,EAAgBD,EAChBE,GAAW,EAEa,MAAxBR,IACFA,EAAqB3/D,cACrB2/D,EAAuB,MAGzB,MAAMS,EAAO,KACXX,EAAel1E,MAAQi1E,EAAa9iD,EAAAA,aAAa/tB,MAAQ+tB,EAAAA,aAAaC,KACtEojD,EAAWM,KAAKZ,GAChBM,EAAWO,UAAU,EAGvB,GAAId,EAEF,YADAY,IAIF,MAAMG,EAAc,KAClB,MAAMC,EAAYz6E,KAAK+tC,IAAIksC,EAAQC,EAAW1C,EAAOp3E,QACjD65E,EAAQzC,EAAOp3E,QAAUq6E,GAAajD,EAAOp3E,OAC/C25E,EAAeC,EAAYS,EAAWjD,EAAQ2C,GAGhDE,GAAM,EAGFK,EAASC,IACb,IACE,GAAIA,IAuMZ,SAA0BA,G,IAGpBA,EADCA,EACDA,EAFJ,MAAMpgD,EAAUogD,EAAcxgD,QACM,QAA/BwgD,EAAAA,EAAcxgD,OAAO,GAAGI,eAAxBogD,IAAAA,EAAAA,EAAmC,IAAIrtE,cACZ,QAA5BqtE,EAAmB,QAAnBA,EAAAA,EAAchyE,aAAdgyE,IAAAA,OAAAA,EAAAA,EAAqBpgD,eAArBogD,IAAAA,EAAAA,EAAgC,GACpC,GAAIpgD,EAAQ71B,SAAS,WACnB,OAAO,EACF,GAAI61B,EAAQ71B,SAAS,eAE1B,MAAM,IAAIkE,MAAM2xB,GAElB,OAAO,CACT,CAlN8BqgD,CAAiBD,GACrC,OAAO,CAEX,CAAE,MAAO1wE,G,IAGE0wE,EACCA,EACAA,EAFDA,EACCA,EACAA,EAGV,OAPA/yE,EAAAA,EAAOe,MAAMsB,EAAG,CACdC,IAAK,uBACLvB,MAAoC,QAA7BgyE,EAAAA,SAAoB,QAApBA,EAAAA,EAAehyE,aAAfgyE,IAAAA,OAAAA,EAAAA,EAAsBpgD,eAAtBogD,IAAAA,EAAAA,EAAiC,GACxCxgD,OAA0D,QAAlDwgD,EAAAA,SAAqB,QAArBA,EAAAA,EAAexgD,cAAfwgD,IAAAA,OAAAA,EAAAA,EAAuBn4E,KAAKyH,GAAMA,EAAEswB,UAASvqB,KAAK,cAAlD2qE,IAAAA,EAAAA,EAA4D,GACpEE,OAAsC,QAA9BF,EAAAA,SAAuB,QAAvBA,EAAAA,EAAe1f,gBAAf0f,IAAAA,OAAAA,EAAAA,EAAyB3qE,KAAK,YAA9B2qE,IAAAA,EAAAA,EAAsC,KAEhDlB,GAAa,GACN,CACT,CAEA,GAAIS,EAAY,EAKd,OAHA9uB,EAAM,qCADN8uB,EAAYl6E,KAAK86E,MAAM96E,KAAK+6E,KAAKb,OAEjCE,GAAW,EACXL,EAAeC,EAAYC,EAAOzC,EAAQ0C,IACnC,E,IAGOL,EAAhB,MAAMmB,EAAyBf,QAAfJ,EAAAA,EAAWrxE,IAAIyxE,UAAfJ,IAAAA,EAAAA,EAAyB,EACzC,OAAImB,EAAU,GACZvB,GAAa,GACN,IAGTI,EAAWz8C,IAAI68C,EAAOe,EAAU,GAEhClB,EAAaznE,YAAW,KACtBzK,EAAAA,EAAOgL,KAAK,YAAYqnE,MAAUe,EAAU,MAC5CjB,EAAeC,EAAYC,EAAOzC,EAAQ0C,GAC1CJ,EAAa,IAAI,GAChB,KAAO95E,KAAKi7E,IAAI,EAAGD,IAEtBZ,GAAW,GAEJ,EAAI,EAGPc,EAmJV,SAA4B1D,EAAkB1iB,EAAeolB,GAC3D,OAAIplB,IAAU0iB,EAAOp3E,OACZ,EAAE,GAEJo3E,EAAOlmE,MAAMwjD,EAAOA,EAAQolB,EACrC,CAxJ0BiB,CAAmB3D,EAAQyC,EAAOC,GACxD9uB,EAAM,YAAY8vB,EAAclrE,KAAK,SACrC,MAAMorE,EAAa,OAAKlgB,GAAAA,CAAStC,QAAS2e,EAA4BiC,EAAkB0B,KAEpFhgB,EAAQzC,YACV2iB,EAAW3iB,UAAY,GAAGyC,EAAQzC,mBAAmBwhB,KAASC,KAIhEN,EAAuBvvE,EAAWgxE,SAASD,GAAYziE,UAAU,CAC/D2hE,KAAOgB,I,IACAA,IAAsB,QAAtBA,EAAAA,EAAgBnhD,cAAhBmhD,IAAAA,EAAAA,EAA0B,IAAIl7E,OAAS,GAA8B,MAAzBk7E,EAAgB3yE,QAC3D+xE,EAAMY,KAIZnB,EA8HR,SAA4BF,EAAeC,EAAmB1C,GAE5D,OAAOx3E,KAAK+tC,IAAImsC,EAAWl6E,KAAKkR,IAAIlR,KAAK86E,MADvB,IAC8BtD,EAASyC,IAAqB,GAChF,CAjIwBsB,CACdtB,EAAQC,EAyFlB,SAAqCsB,EAA6BC,G,IAMLD,EAAAA,EAL3D,IAAKA,EAASpxD,KAAKhqB,OAEjB,OAAOq7E,EAAc,EAGvB,MAAMC,EAA0E,QAArBF,EAAAA,EAASpxD,KAAK,GAAGlP,YAAjBsgE,IAAAA,GAA4B,QAA5BA,EAAAA,EAAuBxkB,aAAvBwkB,IAAAA,OAAAA,EAAAA,EAA8B12D,MACtFwyC,GAAmD,uBAArBA,EAAKnQ,cAGtC,GAAIu0B,EAAmB,CACrB,MAAMC,EAAgB37E,KAAKC,MAAMy7E,EAAkB9xE,OAGnD,OAFAwhD,EAAM,GAAGswB,EAAkB9xE,SAEvB+xE,GAAiB,EACZ37E,KAAK86E,MAAoB,IAAdW,GACTE,EAAgB,EAClB37E,KAAK0tD,KAAmB,IAAd+tB,GAIC,IAAhBA,EACKA,EACEE,EAAgB,GAClB37E,KAAK0tD,KAAmB,GAAd+tB,GAEVz7E,KAAK86E,MAAMW,EAAc,EAEpC,CAEA,OAAOA,CACT,CAvHUG,CAA4BN,EAAiBpB,GAC7C1C,EAAOp3E,QAEL+5E,IAAkBD,GACpB9uB,EAAM,kBAAkB+uB,KAE1BT,ED7JD,SAA0BmC,EAAyCC,GACxE,IAAKD,EACH,OAqMkB,OADaL,EApMLM,GAsMvBN,CACHpxD,KAAMoxD,EAASpxD,KAAK5nB,IAAI62E,KAHrB,IAA4BmC,EAxLPK,EAAiCC,EAT3DA,EAAU1xD,KAAK5V,SAASwqD,IACtB,MAAM+c,EAAeF,EAAczxD,KAAKtF,MAAM2F,GAkNlD,SAAuBuxD,EAAmBC,G,IAQrBD,EACAC,EAeCD,EAAAA,EACAC,EAAAA,EAxBpB,GAAID,EAAO1rD,QAAU2rD,EAAO3rD,MAC1B,OAAO,EAET,GAAmB,MAAf0rD,EAAO18E,MAA+B,MAAf28E,EAAO38E,MAAgB08E,EAAO18E,OAAS28E,EAAO38E,KACvE,OAAO,EAGT,MAAM48E,EAAwB,QAAXF,EAAAA,EAAO9gE,YAAP8gE,IAAAA,OAAAA,EAAAA,EAAat6E,KAGhC,GAAIw6E,KAF0B,QAAXD,EAAAA,EAAO/gE,YAAP+gE,IAAAA,OAAAA,EAAAA,EAAav6E,MAI9B,OAAO,EAIT,GAAIw6E,IAAe9yB,EAAAA,cAAc+yB,gBAC/B,OAoBJ,SAAuBH,EAAmBC,GACxC,MAAMG,EAASJ,EAAOpzD,OAAO9D,MAAMta,GAAMA,EAAE9I,OAAS0+C,EAAAA,UAAU8B,SACxDm6B,EAASJ,EAAOrzD,OAAO9D,MAAMta,GAAMA,EAAE9I,OAAS0+C,EAAAA,UAAU8B,SAC9D,YAAe9kD,IAAXg/E,QAAmCh/E,IAAXi/E,IAKT,MAAfL,EAAO18E,OACT08E,EAAO18E,KAAOuK,KAAKC,UAAUsyE,EAAOzzD,SAEnB,MAAfszD,EAAO38E,OACT28E,EAAO38E,KAAOuK,KAAKC,UAAUuyE,EAAO1zD,SAE/BqzD,EAAO18E,OAAS28E,EAAO38E,KAChC,CAnCWg9E,CAAcN,EAAQC,GAM/B,MAAMM,EAAyB,QAAXP,EAAAA,EAAO9gE,YAAP8gE,IAAAA,GAAmB,QAAnBA,EAAAA,EAAavzB,cAAbuzB,IAAAA,OAAAA,EAAAA,EAAqBQ,UACnCC,EAAyB,QAAXR,EAAAA,EAAO/gE,YAAP+gE,IAAAA,GAAmB,QAAnBA,EAAAA,EAAaxzB,cAAbwzB,IAAAA,OAAAA,EAAAA,EAAqBO,UAEzC,MAAoB,sBAAhBD,GAAuD,sBAAhBE,GAEhCF,IAAgBE,CAO7B,CAtP4DC,CAAcjyD,EAAOu0C,KACxE+c,EAqCF,SAAqBY,EAAiBhnD,G,IAmETgnD,EAAwBhnD,EAlE1D,MAAMuiD,EAAgByE,EAAK/zD,OAAO9D,MAAMkE,GAAUA,EAAMtnB,OAAS0+C,EAAAA,UAAUC,OACrE83B,EAAcwE,EAAK/zD,OAAO9D,MAAMkE,GAAUA,EAAMtnB,OAAS0+C,EAAAA,UAAUgF,QAAyB,OAAfp8B,EAAM1pB,OACnF+4E,EAAkB1iD,EAAO/M,OAAO9D,MAAMkE,GAAUA,EAAMtnB,OAAS0+C,EAAAA,UAAUC,OACzEi4B,EAAgB3iD,EAAO/M,OAAO9D,MAAMkE,GAAUA,EAAMtnB,OAAS0+C,EAAAA,UAAUgF,QAAyB,OAAfp8B,EAAM1pB,OAE7F,IAAK44E,IAAkBG,EAErB,YADAzwE,EAAAA,EAAOe,MAAM,IAAIC,MAAM,6C,IAIAyvE,EAAzB,MAAMuE,EAAiD,QAA9BvE,EAAAA,aAAAA,EAAAA,EAAiBvvE,OAAOwI,MAAM,UAA9B+mE,IAAAA,EAAAA,EAAoC,GACvDwE,EAAc78E,KAAKkR,IAAIyrE,EAAK/zD,OAAOxoB,OAAQu1B,EAAO/M,OAAOxoB,QAE/D,IAAK,IAAI0M,EAAI,EAAGA,EAAI8vE,EAAiBx8E,OAAQ0M,IAAK,CAChD,MAAMgwE,EAAUnF,EAAWO,EAAeG,EAAiBvrE,GAErDiwE,EAAoB9E,EAAeC,EAAeC,EAAa2E,EAASzE,EAAiBC,EAAexrE,GAE9G,IAAK,IAAItC,EAAI,EAAGA,EAAIqyE,EAAaryE,IAAK,CAEpC,IAAKmyE,EAAK/zD,OAAOpe,GACf,SAIF,MAAMqtE,EAAcY,EAAgBkE,EAAK/zD,OAAOpe,GAAImrB,EAAO/M,OAAQpe,GACnE,GAAKqtE,EAIL,GAAIkF,EAAmB,CACrB,GAAIJ,EAAK/zD,OAAOpe,GAAG9I,OAAS0+C,EAAAA,UAAUC,KAEpC,S,IAGkCs8B,EAFzBA,EAAK/zD,OAAOpe,GAAG9I,OAAS0+C,EAAAA,UAAU8B,OAE3Cy6B,EAAK/zD,OAAOpe,GAAG1B,OAAOg0E,IAA0C,QAA9BH,EAAAA,EAAK/zD,OAAOpe,GAAG1B,OAAOg0E,UAAtBH,IAAAA,EAAAA,EAAkC,GAAK9E,EAAY/uE,OAAOgE,GACnF6vE,EAAK/zD,OAAOpe,GAAG9I,OAAS0+C,EAAAA,UAAUmD,MAEN,iBAA1Bs0B,EAAY/uE,OAAOgE,GAC5B6vE,EAAK/zD,OAAOpe,GAAG1B,OAAOg0E,GAAW,KAC5BH,EAAK/zD,OAAOpe,GAAG1B,OAAOg0E,GACtBjF,EAAY/uE,OAAOgE,IAEU,MAAzB+qE,EAAY/uE,OAAOgE,KAC5B6vE,EAAK/zD,OAAOpe,GAAG1B,OAAOg0E,GAAWjF,EAAY/uE,OAAOgE,IAItD6vE,EAAK/zD,OAAOpe,GAAG1B,OAAOg0E,GAAWjF,EAAY/uE,OAAOgE,EAExD,MAAO,QAA8B1P,IAA1By6E,EAAY/uE,OAAOgE,GAAkB,C,IAK5C6vE,EADuBA,EAFzBA,EAAK/zD,OAAOpe,GAAG1B,OAAOsH,OAAO0sE,EAAS,EAAGjF,EAAY/uE,OAAOgE,IACxD+qE,EAAYG,QACd2E,EAAK/zD,OAAOpe,GAAGwtE,MAA4B,QAApB2E,EAAAA,EAAK/zD,OAAOpe,GAAGwtE,aAAf2E,IAAAA,EAAAA,EAAwB,IAAI/wE,MAAM+wE,EAAK/zD,OAAOpe,GAAG1B,OAAO1I,OAAS,GAAGpE,KAAK,GAC5E,QAApB2gF,EAAAA,EAAK/zD,OAAOpe,GAAGwtE,aAAf2E,IAAAA,GAAAA,EAAsBvsE,OAAO0sE,EAAS,EAAGjF,EAAYG,MAAMlrE,IAE/D,CACF,CACF,C,IAMkC6vE,EAAwBhnD,EAJ1DgnD,EAAKv8E,OAASu8E,EAAK/zD,OAAO,GAAG9f,OAAO1I,OAEpCu8E,EAAKzhE,KAAO,OACPyhE,EAAKzhE,MAAI,CACZ87C,MAAO8hB,EAAyC,QAAhB6D,EAAS,QAATA,EAAAA,EAAKzhE,YAALyhE,IAAAA,OAAAA,EAAAA,EAAW3lB,aAAX2lB,IAAAA,EAAAA,EAAoB,GAAsB,QAAlBhnD,EAAW,QAAXA,EAAAA,EAAOza,YAAPya,IAAAA,OAAAA,EAAAA,EAAaqhC,aAAbrhC,IAAAA,EAAAA,EAAsB,KAElF,CAtGIqnD,CAAYjB,EAAc/c,GAHxB6c,EAAczxD,KAAKhc,KAAKirE,EAAera,GAGN,IAGrC,MAAMie,EAAe,IAAyB,QAApBpB,EAAAA,EAAc1hD,cAAd0hD,IAAAA,EAAAA,EAAwB,MAAyB,QAAhBC,EAAAA,EAAU3hD,cAAV2hD,IAAAA,EAAAA,EAAoB,I,IAc3DD,EAThBoB,EAAa78E,OAAS,IACxBy7E,EAAc1hD,OAAS8iD,GAQzB,MAAMC,EAAiC,QAAnBrB,EAAAA,EAAclzE,aAAdkzE,IAAAA,EAAAA,EAAuBC,EAAUnzE,M,IAKzBkzE,EAAmCC,EAJ5C,MAAfoB,IACFrB,EAAclzE,MAAQu0E,GAGxB,MAAMC,EAAiB,IAA2B,QAAtBtB,EAAAA,EAAc5gB,gBAAd4gB,IAAAA,EAAAA,EAA0B,MAA2B,QAAlBC,EAAAA,EAAU7gB,gBAAV6gB,IAAAA,EAAAA,EAAsB,IAKrF,OAJIqB,EAAe/8E,OAAS,IAC1By7E,EAAc5gB,SAAWkiB,GAGpBtB,CACT,CCsHyBuB,CAAiB1D,EAAgB4B,GAAgB,EAEpEf,SAAU,KACJH,IAIAV,EAAetvD,KAAKhqB,QACtB45E,EAAWM,KAAKZ,GAElBc,IAAa,EAEf7xE,MAAQA,IACNf,EAAAA,EAAOe,MAAMA,EAAO,CAAEuB,IAAK,oBAC3B8vE,EAAWM,KAAKZ,GACZgB,KAGJF,GAAa,GAEf,EAGE6C,EAAsBrD,IAC1BJ,EAAuBvvE,EAAWuvB,MAAMshC,GAASviD,UAAU,CACzD2hE,KAAOgB,IACL5B,EAAiB4B,CAAe,EAElCf,SAAU,KACRP,EAAWM,KAAKZ,EAAe,EAEjC/wE,MAAQA,IACNf,EAAAA,EAAOe,MAAMA,EAAO,CAAEuB,IAAK,0CAC3B8vE,EAAWrxE,MAAM+wE,EAAe,GAElC,EAGE8B,EAAW,IAAI8B,EAAAA,YAA+BtD,IAClD,MAAMuD,EFnI+B,CAAC3jD,IACxC,MAAM2jD,GAAWC,EAAAA,EAAAA,IAAkB5jD,EAAO,CAACR,EAAAA,KAC3C,OAAImkD,EAASn9E,OAAS,EACbw5B,EACJt5B,UAAUi9E,EAAS,GAAG7hE,KAAM6hE,EAAS,GAAG/hE,IACxC9R,QAAQ,wBAAwB2tE,MAA0B,KAExD,EAAE,EE4HUoG,CAA0BjE,EAAiB,GAAGrxE,MAE/D,OAAKu1E,EAAAA,EAAAA,IAAaH,IAMlBlzE,EAAWxB,iBACR80E,iBAAiB,mBAAoB,CACpCt1E,UAAW6yD,EAAQ9kD,MACnBwnE,eAAgBL,QAAsBngF,IAEvCqkB,MAAM3Y,IACL,MAAM0uE,EAAS1uE,EAAOtG,KAAKoH,GAAUgE,SAAShE,EAAO,MAChD4tE,GAAWA,EAAOp3E,QAIrBo3E,EAAOnsE,MAAK,CAACvI,EAAGwI,IAAMA,EAAIxI,IAC1BsoD,EAAM,YAAYosB,EAAOxnE,KAAK,gBAC9B+pE,EAAeC,EAAY,EAAGxC,EAsExC,SAA6BA,GAC3B,OAAOx3E,KAAK86E,MAAM96E,KAAK+6E,KAAKvD,EAAOp3E,QACrC,CAxEgDy9E,CAAoBrG,MAL1D5vE,EAAAA,EAAOC,KAAK,2DACZw1E,EAAmBrD,GAKrB,IAED8D,OAAO7zE,IACNrC,EAAAA,EAAOe,MAAMsB,EAAG,CAAEC,IAAK,sDACvBmzE,EAAmBrD,EAAW,IAE3B,KACLP,GAAa,EACTK,GACF1nE,aAAa0nE,GAEa,MAAxBF,IACFA,EAAqB3/D,cACrB2/D,EAAuB,KACzB,IAjCAxuB,EAAM,8BAA8BmyB,UACpCvD,EAAWO,WAiCZ,IAGH,OAAOiB,CACT,CAnMSuC,CAA0B1zE,EAAY6wD,EAASlxC,EACxD,CAsQA,MAAMg0D,EAAgBtqE,QAAQhO,aAAaI,QAAQ,GAAGuf,EAAAA,8BACtD,SAAS+lC,EAAM7wB,GACRyjD,GAGL9hE,QAAQ+hE,IAAI1jD,EACd,CC9TO,eAAK2jD,G,+DAAAA,C,CAAL,C,upCCwBA,MAAMC,EAAsB,sBAsCtBC,EAA6B,OAE7BC,EAAmC,cAEnCC,EAA8B,SAE9BC,EAA4B,OAElC,MAAMC,WAA8BC,EAAAA,GAKzC7kD,KAAAA,CAAMshC,GACJ,OAAO,IAAIoiB,EAAAA,YAA+BtD,I,IACnC9e,EAAL,KAAuB,QAAlBA,EAAAA,EAAQvC,kBAARuC,IAAAA,OAAAA,EAAAA,EAAoBwjB,eACvB,MAAM,IAAI91E,MAAM,qC,YAGlBL,EAAAA,EAAAA,oBACGC,KAAIC,EAAAA,EAAAA,IAAcyyD,EAAQvC,WAAW+lB,cAAcC,YACnDl9D,KAAI,W,MAAC,aAAOC,G,IAMOw5C,EALlB,KAAMx5C,aAAchZ,EAAAA,uBAClB,MAAM,IAAIE,MAAM,uBAIlBsyD,EAAQtC,QAAyB,QAAfsC,EAAAA,EAAQtC,eAARsC,IAAAA,OAAAA,EAAAA,EAAiB14D,KAAKS,IACtCA,EAAOoH,WAAaqX,EACbze,KAGT,MAAM27E,EAAa,IAAIxzE,IAKvB,GAJA8vD,EAAQtC,QAAQpkD,SAASvR,I,IACRA,EAAf27E,EAAW5mE,IAAmB,QAAf/U,EAAAA,EAAO47E,gBAAP57E,IAAAA,EAAAA,EAAmB,GAAG,IAGf,IAApB27E,EAAW3iF,KACb,MAAM,IAAI2M,MAAM,0DAKlB,OAFoBsyD,EAAQtC,QAAQ,GAAGimB,UAGrC,IAAK,eACG,EAAKC,UAAU5jB,EAASx5C,EAAIs4D,GAClC,MAEF,IAAK,iBACG,EAAK+E,YAAY7jB,EAASx5C,EAAIs4D,GACpC,MAEF,IAAK,wBACG,EAAKgF,kBAAkB9jB,EAASx5C,EAAIs4D,GAC1C,MAEF,IAAK,wBACG,EAAKiF,kBAAkB/jB,EAASx5C,EAAIs4D,GAC1C,MAEF,IAAK,eACG,EAAKxH,UAAUtX,EAASx5C,EAAIs4D,GAClC,MAEF,QACE,EAAK3vD,QAAQ6wC,EAASx5C,EAAIs4D,GAIhC,I,gBAhDat4D,G,gCAAR,G,GAkDX,CAEQ2I,OAAAA,CAAQ6wC,EAAgCx5C,EAAoBs4D,GAClE,MAAMkF,EAAkBv+D,EAAAA,OAAOC,eAAeu+D,0BAExCC,EAAiB,OAClBlkB,GAAAA,CACHtC,QAASxzD,KAAKi6E,oBACZ39D,EAAG63D,8BAA8Bre,EAAQtC,QAASsC,EAAQvC,YAAYn2D,KAAKS,GAAY,OAClFA,GAAAA,CACH47E,cAAUzhF,EACV+K,MAAMm3E,EAAAA,EAAAA,IAAuBr8E,EAAOkF,aAY1C,QAL8C,IAA5CyuE,EAAwBwI,IAA8BF,EAElD5F,EAAmB53D,EAAI09D,GADvB19D,EAAGkY,MAAMwlD,IAEJzmE,UAAUqhE,GAEdA,CACT,CAEc+E,WAAAA,CACZ7jB,EACAx5C,EACAs4D,G,kBAHF,eAKE,MAAMphB,EAAUsC,EAAQtC,QAAQn3D,QAAQwB,GACX,aAApBA,EAAO47E,WAGhB,GAAuB,IAAnBjmB,EAAQx4D,OACV,MAAM,IAAIwI,MAAM,iDAElB,MAAM,mBAAE22E,EAAkB,WAAEC,GAAe,EAAKxiE,YAAY0E,EAAIk3C,EAASsC,GACzE8e,EAAWM,KAAK,CAAElwD,KAAM,GAAI5lB,MAAOmyB,EAAAA,aAAa8qC,UAEhD,I,IAUiBvG,EATf,MAAMukB,EAAa/9D,EAAGg+D,YACpB,WACA,CACE9lD,MAAO4lD,EACP1qB,MAAOoG,EAAQ9kD,MAAMsF,KAAKikE,MAAM5a,cAChChQ,IAAKmG,EAAQ9kD,MAAMoF,GAAGmkE,MAAM5a,cAC5B6a,KAAM1kB,EAAQ//C,UAEhB,CACEs9C,UAA4B,QAAjByC,EAAAA,EAAQzC,iBAARyC,IAAAA,EAAAA,EAAqB,WAChC2kB,QAAS,CACP,eAAgB,UAAU96E,EAAAA,QAI1By2E,QAAmCiE,EACnCK,EAAetE,aAAAA,EAAAA,EAAUpxD,KAE/B,IAAI21D,GAAW,IACXC,EAAW,E,IAGbF,EADF,MAAMjqD,EA8CJ,QA7CAiqD,EAAAA,aAAAA,EAAAA,EAAct9E,KAAKzD,IACjB,MAAMkhF,EAAuB,GACvBC,EAAwB,GAC9B,IAAIpyC,EAAM,EAkBV,OAjBA/uC,EAAQohF,QAAQ3rE,SAAQ,EAAE6rC,EAAM8V,MAC9B8pB,EAAW7xE,KAAY,IAAPiyC,GAChB6/B,EAAY9xE,KAAK+nD,GACbA,EAAQ4pB,IACVA,EAAW5pB,GAETA,EAAQ6pB,IACVA,EAAW7pB,GAETA,EAAQ4pB,IACVA,EAAW5pB,GAETA,EAAQ6pB,IACVA,EAAW7pB,GAEbroB,GAAOqoB,CAAK,KAEPiqB,EAAAA,EAAAA,iBAAgB,CACrB9vD,MAAOivD,EAAmBjvD,MAC1BhxB,KAAMP,EAAQA,QACd6pB,OAAQ,CACN,CACEtpB,KAAM,OACNoC,KAAM0+C,EAAAA,UAAUC,KAChBv3C,OAAQm3E,EACRt/D,OAAQ,CAAC,GAEX,CACErhB,KAAMP,EAAQA,QACd2C,KAAM0+C,EAAAA,UAAU8B,OAChBp5C,OAAQo3E,EACRv/D,OAAQ,CAAC,IAGbzF,KAAM,CACJmlE,2BAA4B,QAC5B53B,OAAQ,CACN3a,SAGJ,WA5CJgyC,IAAAA,EAAAA,EA6CM,GAERjqD,EAAOxqB,MAAK,CAACvI,EAAGwI,K,IAAOA,EAAAA,EAAkCxI,EAAAA,E,OAA5B,QAANwI,EAAAA,EAAE4P,YAAF5P,IAAAA,GAAc,QAAdA,EAAAA,EAAQm9C,cAARn9C,IAAAA,OAAAA,EAAAA,EAAgBwiC,MAAwB,QAANhrC,EAAAA,EAAEoY,YAAFpY,IAAAA,GAAc,QAAdA,EAAAA,EAAQ2lD,cAAR3lD,IAAAA,OAAAA,EAAAA,EAAgBgrC,IAAG,IAC5EksC,EAAWM,KAAK,CAAElwD,KAAMyL,EAAQrxB,MAAOmyB,EAAAA,aAAaC,MACtD,CAAE,MAAO3sB,GACP+vE,EAAWM,KAAK,CAAElwD,KAAM,GAAI5lB,MAAOmyB,EAAAA,aAAa/tB,OAClD,CAEA,OAAOoxE,CACT,GA5FA,E,CA8FQh9D,WAAAA,CACN0E,EACAk3C,EACAsC,GAEA,MAAMolB,EAAsB5+D,EAAG63D,8BAA8B3gB,EAASsC,EAAQvC,YAC9E,IAAK2nB,EAAoBlgF,OACvB,MAAM,IAAIwI,MAAM,2CAElB,MAAM22E,EAAqBe,EAAoB,GAE/C,MAAO,CAAEf,qBAAoBC,YADVF,EAAAA,EAAAA,IAAuBC,EAAmBp3E,MAE/D,CAEQk3E,mBAAAA,CAAoBzmB,GAC1B,MAAM5lB,GAAYS,EAAAA,EAAAA,QAAkCJ,EAAAA,EAAAA,MACpD,OAAOulB,EAAQp2D,KAAKS,IACdA,EAAOqtB,QAAUm3C,EAAAA,KAGrBxkE,EAAOgS,UACL+9B,IAAcO,EAAAA,GAAcC,WAAa0qC,EAAmBqC,SAAWrC,EAAmBsC,SAHnFv9E,IAMb,CAEc+7E,iBAAAA,CACZ9jB,EACAx5C,EACAs4D,G,kBAHF,eAKE,MAAMphB,EAAUsC,EAAQtC,QAAQn3D,QAAQwB,GACX,oBAApBA,EAAO47E,WAGhB,GAAuB,IAAnBjmB,EAAQx4D,OACV,MAAM,IAAIwI,MAAM,wDAGlB,IAAI,mBAAE22E,EAAkB,WAAEC,GAAe,EAAKxiE,YAAY0E,EAAIk3C,EAASsC,GAGpD,OAAfskB,IACFA,EAAa,IAGfxF,EAAWM,KAAK,CAAElwD,KAAM,GAAI5lB,MAAOmyB,EAAAA,aAAa8qC,UAEhD,I,IAkBiB+Z,EAAAA,EATAtgB,EARf,MAAMsgB,QAAiB95D,EAAGg+D,YACxB,kBACA,CACE9lD,MAAO4lD,EACP1qB,MAAOoG,EAAQ9kD,MAAMsF,KAAKikE,MAAM5a,cAChChQ,IAAKmG,EAAQ9kD,MAAMoF,GAAGmkE,MAAM5a,eAE9B,CACEtM,UAA4B,QAAjByC,EAAAA,EAAQzC,iBAARyC,IAAAA,EAAAA,EAAqB,kBAChC2kB,QAAS,CACP,eAAgB,UAAU96E,EAAAA,SAKxBwkB,UAAWqiD,IAAqBjsC,EAAAA,EAAAA,MAElChX,EAAgC,QAAvB6yD,EAAAA,EAAS74C,sBAAT64C,IAAAA,GACiF,QADjFA,EAAAA,EACX/5E,QAAQyE,GAAU0lE,IAAqB1lE,EAAMA,QAAU2F,EAAAA,GAAiBnH,SAASwB,EAAMA,gBAD5Es1E,IAAAA,OAAAA,EAAAA,EAEXnwE,MAAK,CAACvI,EAAGwI,KAAMm1E,EAAAA,EAAAA,IAAwB39E,EAAGwI,KAExCo1E,EAA6C/3D,aAAAA,EAAAA,EAAQnmB,KAAK0D,IACvD,CACL5G,KAAM4G,EAAMA,MACZ4C,OAAQ,CAAC5C,EAAMi3B,iBAIb8C,GAAYmgD,EAAAA,EAAAA,iBAAgB,CAChC9vD,MAAOivD,EAAmBjvD,MAC1B1H,OAAQ83D,QAAAA,EAAuB,KAGjC1G,EAAWM,KAAK,CAAElwD,KAAM,CAAC6V,GAAYz7B,MAAOmyB,EAAAA,aAAaC,MAC3D,CAAE,MAAO3sB,GACP+vE,EAAWM,KAAK,CAAElwD,KAAM,GAAI5lB,MAAOmyB,EAAAA,aAAa/tB,OAClD,CAEA,OAAOoxE,CACT,GA9DA,E,CAgEciF,iBAAAA,CACZ/jB,EACAx5C,EACAs4D,G,kBAHF,eAKE,MAAMphB,EAAUsC,EAAQtC,QAAQn3D,QAAQwB,GACX,oBAApBA,EAAO47E,WAGhB,GAAuB,IAAnBjmB,EAAQx4D,OACV,MAAM,IAAIwI,MAAM,wDAGlBoxE,EAAWM,KAAK,CAAElwD,KAAM,GAAI5lB,MAAOmyB,EAAAA,aAAa8qC,UAEhD,MAAM,mBAAE8d,EAAkB,WAAEC,GAAe,EAAKxiE,YAAY0E,EAAIk3C,EAASsC,GAEzE,I,IA0BEsgB,EAjBetgB,EARf,MAAMsgB,QAAiB95D,EAAGg+D,YACxB,kBACA,CACE9lD,MAAO4lD,EACP1qB,MAAOoG,EAAQ9kD,MAAMsF,KAAKikE,MAAM5a,cAChChQ,IAAKmG,EAAQ9kD,MAAMoF,GAAGmkE,MAAM5a,eAE9B,CACEtM,UAA4B,QAAjByC,EAAAA,EAAQzC,iBAARyC,IAAAA,EAAAA,EAAqB,kBAChC2kB,QAAS,CACP,eAAgB,UAAU96E,EAAAA,QAK1B47E,EAAmB,CAAErhF,KAAM8+E,EAA4B18E,KAAM0+C,EAAAA,UAAUgF,OAAQt8C,OAAQ,GAAI6X,OAAQ,CAAC,GACpGigE,EAA0B,CAC9BthF,KAAM++E,EACN38E,KAAM0+C,EAAAA,UAAU8B,OAChBp5C,OAAQ,GACR6X,OAAQ,CAAC,GAELkgE,EAAqB,CAAEvhF,KAAMg/E,EAA6B58E,KAAM0+C,EAAAA,UAAUgF,OAAQt8C,OAAQ,GAAI6X,OAAQ,CAAC,GACvGmgE,EAAmB,CAAExhF,KAAMi/E,EAA2B78E,KAAM0+C,EAAAA,UAAUgF,OAAQt8C,OAAQ,GAAI6X,OAAQ,CAAC,GAE1F,QAAf66D,EAAAA,EAAS5yD,cAAT4yD,IAAAA,GAAAA,EAAiBhnE,SAASwU,I,IAIEA,EAHrB+3D,EAAAA,GAAiBr8E,SAASskB,EAAM9iB,SACnCy6E,EAAU73E,OAAOsF,KAAK4a,EAAM9iB,OAC5B06E,EAAiB93E,OAAOsF,KAAK4a,EAAMmU,aACnC0jD,EAAY/3E,OAAOsF,MAAkB,QAAb4a,EAAAA,EAAMg4D,eAANh4D,IAAAA,OAAAA,EAAAA,EAAe5oB,QAAS4oB,EAAMg4D,QAAQhxE,KAAK,MAAQ,sBAC3E8wE,EAAUh4E,OAAOsF,KAAK4a,EAAMtnB,MAC9B,IAGF,MAAMu+B,GAAYmgD,EAAAA,EAAAA,iBAAgB,CAChC9vD,MAAOivD,EAAmBjvD,MAC1B1H,OAAQ,CAAC+3D,EAAWC,EAAkBC,EAAaC,KAGrD9G,EAAWM,KAAK,CAAElwD,KAAM,CAAC6V,GAAYz7B,MAAOmyB,EAAAA,aAAaC,MAC3D,CAAE,MAAO3sB,GACPrC,EAAAA,EAAOe,MAAMsB,EAAG,CAAEC,IAAK,0BACvB8vE,EAAWM,KAAK,CAAElwD,KAAM,GAAI5lB,MAAOmyB,EAAAA,aAAa/tB,OAClD,CAEA,OAAOoxE,CACT,GAhEA,E,CAmEc8E,SAAAA,CACZ5jB,EACAx5C,EACAs4D,G,OAHF,eAKE,GAA+B,IAA3B9e,EAAQtC,QAAQx4D,OAClB,MAAM,IAAIwI,MAAM,+CAGlB,MAAM3F,EAASi4D,EAAQtC,QAAQ,GACzBqoB,EAAeh+E,EAAOg+E,aAC5B,IAAKA,EACH,MAAM,IAAIr4E,MAAM,iDAGlB,MAAM03E,EAAsB5+D,EAAG63D,8BAA8B,CAACt2E,GAASi4D,EAAQvC,YACzE6mB,GAAaF,EAAAA,EAAAA,IAAuBgB,EAAoB,GAAGn4E,KAAKuB,QAAQ,OAAQ,OAEtFswE,EAAWM,KAAK,CAAElwD,KAAM,GAAI5lB,MAAOmyB,EAAAA,aAAa8qC,UAEhD,I,IA4BgByf,EAIgBA,EAtBfhmB,EATf,MAAMgmB,QAA4Cx/D,EAAGg+D,YACnD,eACA,CACE9lD,MAAO4lD,EACP1qB,MAAOoG,EAAQ9kD,MAAMsF,KAAKikE,MAAM5a,cAChChQ,IAAKmG,EAAQ9kD,MAAMoF,GAAGmkE,MAAM5a,cAC5B97D,MAAO,KAET,CACEwvD,UAA4B,QAAjByC,EAAAA,EAAQzC,iBAARyC,IAAAA,EAAAA,EAAqB,SAChC2kB,QAAS,CACP,eAAgB,UAAU96E,EAAAA,QAIhCm8E,SAAAA,EAAgB92D,KAAKzf,OAAOU,MAAK,CAAC81E,EAAmBC,KACnD,MAAMC,EAA4BF,EAAIv3E,MAAM,GACtC03E,EAA4BF,EAAIx3E,MAAM,GAC5C,OAAO28B,OAAO+6C,GAAgB/6C,OAAO86C,EAAa,IAIpD,MAAME,GAAKnB,EAAAA,EAAAA,iBAAgB,CACzBx3D,OAAQ,CACN,CAEEtpB,KAAM6jC,EAAAA,GACNr6B,OAAQo4E,SAA2B,QAA3BA,EAAAA,EAAgB92D,KAAKzf,cAArBu2E,IAAAA,OAAAA,EAAAA,EAA6B1+E,KAAKwH,GACjCA,EAAEw3E,OAAOP,MAGpB,CAAE3hF,KAAM,SAAUwJ,OAAQo4E,SAA2B,QAA3BA,EAAAA,EAAgB92D,KAAKzf,cAArBu2E,IAAAA,OAAAA,EAAAA,EAA6B1+E,KAAKwH,GAAMu8B,OAAOv8B,EAAEJ,MAAM,UAIrFowE,EAAWM,KAAK,CAAElwD,KAAM,CAACm3D,IAC3B,CAAE,MAAOt3E,GACPrC,EAAAA,EAAOe,MAAMsB,GACb+vE,EAAWM,KAAK,CAAElwD,KAAM,GAAI5lB,MAAOmyB,EAAAA,aAAa/tB,OAClD,CAIA,OAFAoxE,EAAWO,WAEJP,CACT,GAjEA,E,CAmEcxH,SAAAA,CACZtX,EACAx5C,EACAs4D,G,OAHF,eAKE,GAA+B,IAA3B9e,EAAQtC,QAAQx4D,OAClB,MAAM,IAAIwI,MAAM,+CAGlB,I,IAQiBsyD,EAPf,MAAMumB,QAAuC//D,EAAGg+D,YAC9C,SACA,CACE5qB,MAAOoG,EAAQ9kD,MAAMsF,KAAKikE,MAAM5a,cAChChQ,IAAKmG,EAAQ9kD,MAAMoF,GAAGmkE,MAAM5a,eAE9B,CACEtM,UAA4B,QAAjByC,EAAAA,EAAQzC,iBAARyC,IAAAA,EAAAA,EAAqB,SAChC2kB,QAAS,CACP,eAAgB,UAAU96E,EAAAA,QAM1Bw8E,GAAKnB,EAAAA,EAAAA,iBAAgB,CACzBx3D,OAAQ,CAAC,CAAEtpB,KAAM,SAAUwJ,OAAQ24E,aAAAA,EAAAA,EAAgBr3D,SAErD4vD,EAAWM,KAAK,CAAElwD,KAAM,CAACm3D,GAAK/8E,MAAOmyB,EAAAA,aAAaC,MACpD,CAAE,MAAO3sB,GACP+vE,EAAWM,KAAK,CAAElwD,KAAM,GAAI5lB,MAAOmyB,EAAAA,aAAa/tB,OAClD,CAIA,OAFAoxE,EAAWO,WAEJP,CACT,GApCA,E,CAsCA0H,cAAAA,GACE,OAAO5iE,QAAQC,QAAQ,CAAEsb,OAAQ,UAAWE,QAAS,yBAA0B99B,MAAO,WACxF,CA9bAmJ,WAAAA,CAAY+Z,EAAkBmL,GAC5BjlB,MAAM8Z,EAAUmL,EAClB,EAqcF,SANA,WACE62D,EAAAA,GAAWC,0BAA0B,CACnC1c,WAAY,IAAIsZ,GAAsB,kBAAmBL,IAE7D,C,0GC1gBO,SAAS0D,EAAkBz5E,GAEhC,MAAMZ,EAAanD,EAAAA,GAAWoD,YAAYW,EAAUV,EAAAA,IACXrD,EAAAA,GAAWgV,eAClD7R,GACC0R,GAAMA,aAAamyD,EAAAA,IAEW72D,SAAS0kE,GAAMA,EAAE4I,gBAIpBz9E,EAAAA,GAAW0vB,gBAAgBvsB,EAAY4P,EAAAA,IAC/C5C,SAAS0kE,GAAMA,EAAE4I,eACzC,CAEO,SAASnvD,EAAepJ,EAAmBC,EAAoBphB,GACpE,MAAMsZ,GAAKhX,EAAAA,EAAAA,IAAsBtC,GAAU6C,YAC3C82E,EAAAA,EAAAA,IAAiCrgE,EAAI6H,EAAWC,GAChDq4D,EAAkBz5E,EACpB,CAEO,SAASojE,EAAoBjiD,EAAmBC,EAAoBphB,GACzE,MAAMsZ,GAAKhX,EAAAA,EAAAA,IAAsBtC,GAAU6C,YAC3C+2E,EAAAA,EAAAA,IAA6BtgE,EAAI6H,EAAWC,GAC5Cq4D,EAAkBz5E,EACpB,C,sOCiBA,MAAM65E,EAAgBptD,IACpB,GAAIA,GACuBtjB,OAAOzI,OAAO8kC,EAAAA,WAC5BlpC,SAASmwB,GAClB,OAAOA,CAGK,EAOX,SAASqtD,EAAwBC,GACtC,OAAQA,GACN,IAAK,OACH,MAAO,OACT,IAAK,SACH,MAAO,SACT,IAAK,GAEL,IAAK,qBACH,MAAO,qBACT,QACE,MAAO,QAEb,CAEO,SAASC,EAA2BC,GACzC,OAAQA,GACN,IAAK,MACL,IAAK,QACL,IAAK,WACL,IAAK,UACL,IAAK,QACH,OAAOA,EACT,QACE,MAAO,SAEb,CAEO,SAASxkD,EAAuBmjD,G,IACVA,EAA3B,MAAMsB,EAAa,IAAIl3E,IAAkC,QAA9B41E,EAAAA,aAAAA,EAAAA,EAASx+E,KAAKmH,GAAMA,EAAEuB,oBAAtB81E,IAAAA,EAAAA,EAAqC,IAGhEsB,EAAW3lD,OAAO,sBAGlB,MAAM4lD,EAAe32E,MAAM8P,KAAK4mE,GAEhC,OAA4B,IAAxBC,EAAaniF,OACR8hF,EAAwBK,EAAa,IAItB,IAApBD,EAAWrmF,KACN,qBAIF,OACT,CAEO,SAASw2B,EAAkB5H,EAAmBziB,G,IAOay4E,EANhE,MAAMrnD,GAAsBC,EAAAA,EAAAA,IAAuBrxB,GAC7Cy4E,EAAyCrnD,aAAAA,EAAAA,EAAqB5Q,OAAO,GACrE45D,EAAwChpD,aAAAA,EAAAA,EAAqB5Q,OAAO,GAEpE3D,EAAQu9D,aAAAA,EAAAA,EAAY15E,OAAOyK,QAAQsX,G,IAEuBg2D,EADhE,MAAM92E,OACM3M,IAAV6nB,IAAkC,IAAXA,EAAei9D,EAAoD,QAA5BrB,EAAAA,SAAmB,QAAnBA,EAAAA,EAAa/3E,cAAb+3E,IAAAA,OAAAA,EAAAA,EAAsB57D,UAAtB47D,IAAAA,EAAAA,EAAgC,SAAMzjF,EAEtG,YAAeA,IAAX2M,GACFnC,EAAAA,EAAOC,KAAK,yCAA0C,CAAEgjB,cACjD,SAEF9gB,CACT,CAEO,SAASyxB,EACd60B,EACAgG,EACAvjC,EACA2vD,EACAC,GAEA,MAAO,CAACj4D,EAAkBk4D,KACxB,MAAMC,EAAYX,EAAaQ,EAAYj+E,MAAMqwB,QAC3CU,EAAQ5H,EAAAA,GAAcC,aACzBgjC,UAAU,SAAU,CAAEp7C,YAAY,IAClCopB,qBAAqB,cAAe,GACpC3Q,SAASoiC,EAAS5lC,IAGlB0D,QACC,IAAIqH,EAAAA,GAAqB,CACvBC,gBAAiB,CAAC,IAgCrB,SAAmChL,GACxC,OAAQkL,GACCA,EAAOC,MACZpzB,EAAAA,EAAAA,MAAI,IACK,CAACioB,KAIhB,CAxCkCo4D,CAA0Bp4D,OAGrDoD,aAAaC,EAAAA,IACbE,QAAQ,IAAIhC,EAAAA,GAAU,CAAEvB,QAAOI,UAAWwlC,EAAS5lC,GAAQlB,UAAWm5D,KACtEx0D,iBAAiB,CAAC,IAAI+E,EAAAA,GAAmB,CAAExI,QAAOqI,mBAqBrD,OAnBIujC,IAAU56B,EAAAA,UAAUC,MACtBnG,EACGqJ,qBAAqB,WAAY,CAAEC,KAAMC,EAAAA,aAAaC,SACtDH,qBAAqB,cAAe,KACpCA,qBAAqB,YAAa,GAClCA,qBAAqB,YAAa,GAClC/Q,aAAaC,EAAAA,IACb8Q,qBAAqB,YAAanD,EAAAA,UAAUC,MAG7CknD,IACFrtD,EAAMq7B,UAAU,SAAU,CACxBp7C,YAAY,EACZm+C,MAAO,CAACivB,KAGVrtD,EAAMutD,eAAe,MAGhB,IAAIv1D,EAAAA,GAAiB,CAC1B7mB,KAAM6uB,EAAMnH,SACZ,CAEN,CAmCO,SAASkgC,EACd7jC,EACAprB,EACA+I,GAEA,MAAM26E,EAAYt4D,EA5Bb,SAA+Bi4D,EAAkBj4D,EAAkBxF,EAAQ,G,IAC9DwF,EAAlB,MAAMq2D,EAAwD,QAA5Cr2D,EAAAA,EAAM7B,OAAO9D,MAAMkE,GAAyB,eAAfA,EAAM1pB,cAAnCmrB,IAAAA,OAAAA,EAAAA,EAA2D3hB,OAAOmc,GACpF,IAAK67D,EACH,OAAO,KAET,OAAQA,EAAU4B,IAChB,IAAK,IACH,OAAOM,EAAAA,EAAUC,QACnB,IAAK,IACH,OAAOD,EAAAA,EAAUE,mBACnB,IAAK,IACH,OAAOF,EAAAA,EAAUG,OACnB,QACE,OAAO,KAEb,CAa4BC,CAAsB/jF,EAAKorB,GAASu4D,EAAAA,EAAUG,OAExE,GAAIJ,EAEF,OAiBG,SAAoCrhF,EAAiBrC,GAC1D,OAAQqC,GACN,KAAKshF,EAAAA,EAAUC,QACb,OAAO3kE,EAAAA,GAET,KAAK0kE,EAAAA,EAAUG,OACb,OAAO55E,EAAAA,GAET,KAAKy5E,EAAAA,EAAUE,mBAEb,OAAI7jF,IAAQ0zB,EAAAA,GACHjb,EAAAA,GAEF0E,EAAAA,GAET,QAAS,CACP,MAAM4d,EAAM,IAAIxxB,MAAM,0BAA0BvJ,KAEhD,MADAuI,EAAAA,EAAOe,MAAMyxB,EAAK,CAAE14B,OAAMwI,IAAK,0BAA0B7K,MACnD+6B,CACR,EAEJ,CAtCWipD,CAA2BN,EAAW1jF,GAI/C,MAAMy7B,EAAqBrI,EAAkBpzB,EAAK+I,GAClD,MAA2B,uBAAvB0yB,EACKte,EAAAA,IAGT5U,EAAAA,EAAOC,KAAK,mEAAoE,CAC9ExI,MACAy7B,mBAAoBA,QAAAA,EAAsB,KAGrCvxB,EAAAA,GACT,CAyBO,SAASupD,EAA2BlqC,GAKzC,OAAOiV,EAJSjV,EAAOpkB,MAAMsC,QAAQtE,KAAKf,IACjCgI,EAAAA,EAAAA,IAAyBhI,GAAQsI,SAI5C,CAEO,SAASu0B,EAAW/B,GACzB,MAAqB,aAAdA,GAA0C,UAAdA,GAAuC,UAAdA,CAC9D,CAuBO,SAASC,EAAqB9B,EAAqBlB,G,IAIgB8pD,EAHxE,MAAMd,EAAwChpD,aAAAA,EAAAA,EAAqB5Q,OAAO,GACpE06D,EAAwC9pD,aAAAA,EAAAA,EAAqB5Q,OAAO,GACpE3D,EAAQu9D,aAAAA,EAAAA,EAAY15E,OAAOyK,QAAQmnB,GACzC,YAAiBt9B,IAAV6nB,IAAkC,IAAXA,EAAem9D,EAA2BkB,SAAkB,QAAlBA,EAAAA,EAAYx6E,cAAZw6E,IAAAA,OAAAA,EAAAA,EAAqBr+D,SAAU7nB,CACzG,CAEO,SAASu8B,EACde,EACAve,EACAqd,G,IAQgEqnD,EAGGyC,EATnE,MAAMzC,EAAyCrnD,aAAAA,EAAAA,EAAqB5Q,OAAO,GACrE45D,EAAwChpD,aAAAA,EAAAA,EAAqB5Q,OAAO,GACpE06D,EAAwC9pD,aAAAA,EAAAA,EAAqB5Q,OAAO,GACpE3D,EAAQu9D,aAAAA,EAAAA,EAAY15E,OAAOyK,QAAQmnB,GAEnCI,OACM19B,IAAV6nB,IAAkC,IAAXA,EAAei9D,EAAwBrB,SAAmB,QAAnBA,EAAAA,EAAa/3E,cAAb+3E,IAAAA,OAAAA,EAAAA,EAAsB57D,IAAU,QAE1Fs+D,OACMnmF,IAAV6nB,IAAkC,IAAXA,EAAem9D,EAA2BkB,SAAkB,QAAlBA,EAAAA,EAAYx6E,cAAZw6E,IAAAA,OAAAA,EAAAA,EAAqBr+D,SAAU7nB,EAG5F4jF,EAAU7kE,EAAe3X,MAAMsC,QAAQtE,KAAKf,I,IAUlBo/E,EAT9B,MAAM57D,EAAQu9D,aAAAA,EAAAA,EAAY15E,OAAOyK,QAAQ9R,EAAOpC,KAC1CmkF,GAAwB/5E,EAAAA,EAAAA,IAAyBhI,GACvD,GAAI+hF,EAAsBz5E,OACxB,OAAOy5E,EAAsBz5E,O,IAMD82E,EAF9B,MAAM92E,OACM3M,IAAV6nB,IAAkC,IAAXA,EACnBi9D,EAAoD,QAA5BrB,EAAAA,SAAmB,QAAnBA,EAAAA,EAAa/3E,cAAb+3E,IAAAA,OAAAA,EAAAA,EAAsB57D,UAAtB47D,IAAAA,EAAAA,EAAgC,cACxDzjF,EACN,OAAO2M,QAAAA,EAAU,OAAO,IAK1B,IAAI05E,EAAuB,GACvBC,EAA0B,GAiB9B,MAf2B,uBAAvB5oD,EACF4oD,EAA0B,KAAKhpD,QAG/B+oD,EAAuB,KAAK/oD,QArEzB,SAA0BA,EAAqB1xB,GACpD,OAAIA,EAAQuzB,WAAa,CAAC,QAAS,YAAY73B,SAASsE,EAAQuzB,WAE5D,kBAAiBonD,EAAAA,EAAAA,IAAsB36E,eACvCA,EAAQuzB,UACR,IAAI7B,qCAEG1xB,EAAQuzB,WAAmC,UAAtBvzB,EAAQuzB,UAEpC,kBAAiBonD,EAAAA,EAAAA,IAAsB36E,eAAuB0xB,EAAc,mCAGvE,WAAWA,wBAAiCipD,EAAAA,EAAAA,IAAsB36E,gBAE7E,CAkES46E,CAAiBlpD,EAPU,CAChCgpD,0BACAD,uBACA15E,OAhBa8zB,EAAuB,IAAImjD,EAASlmD,IAiBjDyB,UAAWgnD,GAIf,CAGO,SAAS5mE,EAAqB/S,GACnC,MAAqB,iBAAVA,EACFA,EAAMF,QAAQ,KAAM,SAEtBE,CACT,C,qFCnWO,SAAS62E,EAAwB39E,EAAkBwI,GACxD,OAAsB,IAAlBxI,EAAEq6B,YACG,EAEa,IAAlB7xB,EAAE6xB,aACI,EAEHr6B,EAAEq6B,YAAc7xB,EAAE6xB,WAC3B,CAIO,SAASmG,EAAgB3a,GAC9B,MAAM3f,EAAU,IAAI2f,GACfA,EAAOjkB,SAASquB,EAAAA,KACnB/pB,EAAQ66E,QAAQ9wD,EAAAA,IAGlB,MAAM+wD,EAAsC96E,EAAQxG,KAAK0D,IAAW,CAClEA,QACA0D,MAAOsD,OAAOhH,OAGhB,MAAO,CAAC,CAAEA,MAAO,MAAO0D,MAAO60B,EAAAA,OAAyBqlD,EAC1D,CACO,MACM/C,EAAmB,CAAC,kBAAmBhuD,EAAAA,GADpB,SAGnBlnB,EAAmB,CAAC,wBAAyB,oBACnD,SAASy0B,EAAgB3X,GAC9B,MACMm7D,EADU,IAAIn7D,GACgCnmB,KAAK0D,IAAW,CAClEA,QACA0D,MAAOsD,OAAOhH,OAGhB,MAAO,CAAC,CAAEA,MAAO,MAAO0D,MAAO60B,EAAAA,OAAyBqlD,EAC1D,C,sFCrCO,MAAMlhD,EAAwC,uCAE9C,SAASC,EAAiBz6B,EAAuBsyB,EAAqBqpD,GAC3E,IAAIC,EAAuB,GACvBN,EAA0B,GAE9B,MAAM96D,GAASjR,EAAAA,EAAAA,IAAkBvP,GAC3B2B,GAAS+oD,EAAAA,EAAAA,IAA2BlqC,GAQ1C,OANIm7D,GAAcA,IAAehxD,EAAAA,GAC/BixD,EAAuB,KAAKD,UACnBA,GAAcA,IAAehxD,EAAAA,KACtC2wD,EAA0B,MAAMK,YAG3BlqD,EAAAA,EAAAA,GACL,wBAAuB8pD,EAAAA,EAAAA,IAAsB,CAC3CK,uBACAN,0BACA35E,8BACoB2wB,KACtB,CAAE9P,aAAc,KAAK8P,MAAiBpK,MAAO,0BAEjD,C,4HCjBO,SAASokD,EACdllE,EACAy0E,EACAplD,EACA21C,GAEA,GAAI31C,IAASq2B,EAAAA,2BAA2BgvB,gBAAiB,CACvD,MAAMjyB,EAASgyB,QAAAA,EAAiB,GAChC,OAAsB,IAAlBhyB,EAAO7xD,QAAgB6xD,EAAOvtD,SAAS8K,GAClC,GAEF,CAACA,EACV,CAKA,IAAIyiD,GAAUgyB,aAAAA,EAAAA,EAAe7jF,QAAqB6jF,EAAZzP,EACtC,OAAIviB,EAAOvtD,SAAS8K,GACXyiD,EAAOxwD,QAAQ0iF,GAAkBA,IAAkB30E,IAGrD,IAAIyiD,EAAQziD,EACrB,CAEO,SAASilE,EAAoB7/C,GAClC,OAAOA,EAAOpyB,KAAKy9B,I,IAAc6O,E,OAA2B7O,QAA3B6O,EAAAA,EAA2B7O,UAA3B6O,IAAAA,EAAAA,EAAyC,MAAM,GAClF,CAEO,SAASA,EAA2BrkB,G,IAC1BA,EAAf,MAAM9B,EAAwB,QAAf8B,EAAAA,EAAM7B,OAAO,UAAb6B,IAAAA,OAAAA,EAAAA,EAAiB9B,OAEhC,IAAKA,EACH,OAAO,KAGT,MAAM1a,EAAOsD,OAAOtD,KAAK0a,GACzB,OAAoB,IAAhB1a,EAAK7N,OACA,KAGFuoB,EAAO1a,EAAK,GACrB,CAMO,SAASm2E,EAAiB5P,EAAqBpsE,GACpD,MAAMi8E,GAAexsE,EAAAA,EAAAA,IAAkBzP,GACjCk8E,EAAeD,EAAa7/E,MAAMsC,QACrCrF,QAAQA,GAAWA,EAAOgJ,WAAaI,EAAAA,EAASC,QAChDtI,KAAKf,GAAW8iF,EAAmB9iF,EAAOmI,SACvC46E,EAAiBH,EAAa7/E,MAAMsC,QACvCrF,QAAQA,GAAWA,EAAOgJ,WAAaI,EAAAA,EAAS+W,WAChDpf,KAAKf,GAAW8iF,EAAmB9iF,EAAOmI,SAC7C,OAAO4qE,EAAU/yE,QAAQ+N,IACnBg1E,EAAe9/E,SAAS8K,KAGG,IAAxB80E,EAAalkF,QAAgBkkF,EAAa5/E,SAAS8K,KAE9D,CAEA,SAAS+0E,EAAmB/0E,GAC1B,MAAc,OAAVA,EACK,OAEFA,CACT,CAQO,SAAS4lD,EAAsB5lD,EAAepH,GACnD,MAAM4sD,GAAcn9C,EAAAA,EAAAA,IAAkBzP,GAChCuxC,EAA6C,IAArCqb,EAAYxwD,MAAMsC,QAAQ1G,OAClCwyB,EAAeoiC,EAAYxwD,MAAMsC,QAAQge,MAC5CrjB,GAAWA,EAAOmI,QAAU4F,GAAS/N,EAAOgJ,WAAaI,EAAAA,EAASC,QAOrE,IAAI4C,EASJ,MAbc,SAAV8B,IACFA,EAAQ,MAINmqC,IAAU/mB,IACZC,EAAAA,EAAAA,IAAcE,EAAAA,GAAsBvjB,EAAO,UAAWpH,GACtDsF,EAAS,SAETmkB,EAAAA,EAAAA,IAAakB,EAAAA,GAAsBvjB,EAAO,SAAUpH,GACpDsF,EAAS,UAGJA,CACT,C,ogBCxGA,MAAM+2E,EAAiB,CACrB3rB,IAAKzzC,EAAAA,GACLq/D,Q,SAGW98E,EAAS,CACpBgL,KAAM,CAAC1I,EAAaggB,KAClB,MAAMa,EAAM,KAAK05D,EAAmBv6D,GACpChO,QAAQ+hE,IAAI/zE,EAAK6gB,GACjB45D,EAAgBz6E,EAAK6gB,EAAI,EAE3BljB,KAAM,CAACqC,EAAaggB,KAClB,MAAMa,EAAM,KAAK05D,EAAmBv6D,GACpChO,QAAQrU,KAAKqC,EAAK6gB,GAClB65D,EAAgB16E,EAAK6gB,EAAI,EAE3BpiB,MAAO,CAACyxB,EAAsBlQ,KAC5B,MAAMa,EAAM,KAAK05D,EAAmBv6D,GACpChO,QAAQvT,MAAMyxB,EAAKrP,GACnB85D,EAAezqD,EAAKrP,EAAI,GAItB45D,EAAkB,CAACz6E,EAAaggB,KACpC,KACE46D,EAAAA,EAAAA,SAAQ56E,EAAKggB,EACf,CAAE,MAAOjgB,GACPiS,QAAQrU,KAAK,4BACf,GAGI+8E,EAAkB,CAAC16E,EAAaggB,KACpC,KACE66D,EAAAA,EAAAA,YAAW76E,EAAKggB,EAClB,CAAE,MAAOjgB,GACPiS,QAAQrU,KAAK,8BAA+B,CAAEqC,MAAKggB,WACrD,GAgCI26D,EAAiB,CAACzqD,EAAmC4qD,KACzD,IAAI96D,EAAU86D,EACd,KA3BF,SAAmC5qD,EAA2BlQ,GAC5D,GAAmB,iBAARkQ,GAA4B,OAARA,KACzB6qD,EAAAA,EAAAA,IAAS7qD,IACX7oB,OAAOtD,KAAKmsB,GAAK5lB,SAASnV,IACxB,MAAMuK,EAAQwwB,EAAI/6B,GACG,iBAAVuK,GAAuC,kBAAVA,GAAwC,iBAAVA,IACpEsgB,EAAQ7qB,GAAOuK,EAAMsB,WACvB,IAIAg6E,EAAQ9qD,IACV,GAAwB,iBAAbA,EAAIhQ,MAAkC,OAAbgQ,EAAIhQ,KACtC,IACEF,EAAQE,KAAOvgB,KAAKC,UAAUswB,EAAIhQ,KACpC,CAAE,MAAOngB,GAET,KAC6B,iBAAbmwB,EAAIhQ,MAAyC,kBAAbgQ,EAAIhQ,MAA0C,iBAAbgQ,EAAIhQ,OACrFF,EAAQE,KAAOgQ,EAAIhQ,KAAKlf,WAIhC,CAKIi6E,CAA0B/qD,EAAKlQ,GAE3BkQ,aAAexxB,OACjB80C,EAAAA,EAAAA,UAAStjB,EAAKlQ,GACU,iBAARkQ,GAChBsjB,EAAAA,EAAAA,UAAS,IAAI90C,MAAMwxB,GAAMlQ,GAChBkQ,GAAsB,iBAARA,EACnBlQ,EAAQhgB,KACVwzC,EAAAA,EAAAA,UAAS,IAAI90C,MAAMshB,EAAQhgB,KAAMggB,IAEjCwzB,EAAAA,EAAAA,UAAS,IAAI90C,MAAM,gBAAiBshB,IAGtCwzB,EAAAA,EAAAA,UAAS,IAAI90C,MAAM,iBAAkBshB,EAEzC,CAAE,MAAOjgB,GACPiS,QAAQvT,MAAM,4BAA6B,CAAEyxB,MAAKlQ,WACpD,GAGIg7D,EAAWt7E,GACR,SAAUA,C,8FCnEnB,SAASw7E,EAASC,EAAmB/lF,EAAci9B,GACjD,MAAMvT,EAAQq8D,EAAMC,eAAehmF,GACnC,QAAclC,IAAV4rB,EAIJ,OAAOA,EAAMtnB,OAAS66B,EAAYvT,OAAQ5rB,CAC5C,CAEO,MAAMmoF,EAA2B,YAC3BC,EAAsB,OACtBC,EAA0B,WAC1BC,EAAoB,KACpBC,EAAwB,SAE9B,SAASC,EAAuBC,GACrC,MAAMl7E,EAAiB,CAAC,EAMxB,OAJA4G,OAAOC,QAAQq0E,GAAgBrxE,SAAQ,EAAEsxE,EAAGn8E,MAC1CgB,EAAOm7E,GAAkB,iBAANn8E,EAAiBA,EAAIE,KAAKC,UAAUH,EAAE,IAGpDgB,CACT,CAEO,SAASkjD,EAAepjC,G,IACzBA,EAAJ,OAAc,QAAVA,EAAAA,EAAMvP,YAANuP,IAAAA,OAAAA,EAAAA,EAAY/oB,QAAS0nD,EAAAA,cAAcC,SAOlC,SAAiC5+B,GACtC,MAAM46D,EAAQ,IAAIU,EAAAA,WAAWt7D,GAEvBu7D,EAAiBZ,EAASC,EAAOE,EAA0BnlC,EAAAA,UAAUC,MACrErJ,EAAYouC,EAASC,EAAOG,EAAqBplC,EAAAA,UAAUgF,QAGjE,QAAuBhoD,IAAnB4oF,QAA8C5oF,IAAd45C,EAClC,OAAO,K,IAGaouC,EAAtB,MAAMa,EAAyE,QAAzDb,EAAAA,EAASC,EAAOI,EAAyBrlC,EAAAA,UAAUgF,eAAnDggC,IAAAA,EAAAA,EAA8D,K,IACpEA,EAAhB,MAAMrkC,EAA6D,QAAnDqkC,EAAAA,EAASC,EAAOK,EAAmBtlC,EAAAA,UAAUgF,eAA7CggC,IAAAA,EAAAA,EAAwD,K,IACpDA,EAApB,MAAMc,EAAoE,QAAtDd,EAAAA,EAASC,EAAOM,EAAuBvlC,EAAAA,UAAUmD,cAAjD6hC,IAAAA,EAAAA,EAA2D,KAEzEz8D,EAAyB,OAAhBu9D,EAAuB,KAAOA,EAAYp9E,OAEnDohD,EAAcm7B,EAAMz8D,OAAOnnB,QAC/B,CAACyK,EAAGY,IACFA,IAAMk5E,EAAe/gE,OACrBnY,IAAMkqC,EAAU/xB,OAChBnY,KAAMm5E,aAAAA,EAAAA,EAAehhE,QACrBnY,KAAMi0C,aAAAA,EAAAA,EAAS97B,QACfnY,KAAMo5E,aAAAA,EAAAA,EAAajhE,SAGvB,MAAO,CACLlP,IAAK0U,EACLssB,UAAWivC,EACXhvC,YACAivC,gBACAllC,UACAolC,kBAAmB,IAAMx9D,EACzBy9D,oBAAqB,KACrBz5B,0BAA2B,IAAkB,OAAXhkC,EAAkBA,EAAOnmB,IAAIojF,GAA0B,KACzFS,kBAAmB,IAAuB,OAAhBH,EAAuBA,EAAY5mF,KAAO,KACpE4qD,cAEJ,CA5CWo8B,CAAwB77D,GA+C5B,SAA8BA,GACnC,MAAM46D,EAAQ,IAAIU,EAAAA,WAAWt7D,GACvBssB,EAAYsuC,EAAMkB,oBAAoBnmC,EAAAA,UAAUC,MAChDrJ,EAAYquC,EAAMkB,oBAAoBnmC,EAAAA,UAAUgF,QAGtD,QAAkBhoD,IAAd25C,QAAyC35C,IAAd45C,EAC7B,OAAO,K,IAGmBquC,EAA5B,MAAMe,EAA2C,QAArBf,EAAAA,EAAMC,eAAe,eAArBD,IAAAA,EAAAA,EAAgC,K,IACtCA,EAAtB,MAAMY,EAAqC,QAArBZ,EAAAA,EAAMC,eAAe,gBAArBD,IAAAA,EAAAA,EAAiC,K,IACvCA,EAAhB,MAAMtkC,EAA+B,QAArBskC,EAAAA,EAAMC,eAAe,aAArBD,IAAAA,EAAAA,EAA8B,MAMvCa,EAAaM,GA6BtB,SACEnB,EACAoB,EACAh8D,GAGA,MAAMy7D,EAAcb,EAAMC,eAAe,UACzC,QAAoBloF,IAAhB8oF,GAA6BA,EAAYxkF,OAAS0+C,EAAAA,UAAUmD,MAAO,CACrE,MAAMz6C,EAASo9E,EAAYp9E,OAAOtG,IAAIojF,GACtC,MAAO,CAACM,EAAa,IAAMp9E,EAC7B,CAEE,MAAO,CAAC,KAAM,IAMlB,SAAyB29E,EAAkBrmF,GACzC,MAAMsmF,EAAaD,EAAU99D,OAC7B,QAAmBvrB,IAAfspF,EAA0B,CAC5B,MAAM/7E,EAAS,IAAIiB,MAAMxL,GAEzB,OADAuK,EAAO3O,KAAK0qF,GACL/7E,CACT,CACE,OAAO,IAEX,CAfwBg8E,CAAgBF,EAAWh8D,EAAMrqB,QAEzD,CA3C8BwmF,CAAiBvB,EAAOruC,EAAWvsB,GAEzDy/B,EAAcm7B,EAAMz8D,OAAOnnB,QAC/B,CAACyK,EAAGY,IACFA,IAAMiqC,EAAU9xB,OAChBnY,IAAMkqC,EAAU/xB,OAChBnY,KAAMs5E,aAAAA,EAAAA,EAAqBnhE,QAC3BnY,KAAMm5E,aAAAA,EAAAA,EAAehhE,QACrBnY,KAAMi0C,aAAAA,EAAAA,EAAS97B,QACfnY,KAAMo5E,aAAAA,EAAAA,EAAajhE,SAGvB,MAAO,CACL8xB,YACAC,YACAovC,sBACAH,gBACAllC,UACAolC,kBAAmBK,EACnB75B,0BAA2B65B,EAC3BH,kBAAmB,K,IAAMH,E,OAAiB,QAAjBA,EAAAA,aAAAA,EAAAA,EAAa5mF,YAAb4mF,IAAAA,EAAAA,EAAqB,IAAI,EAClDh8B,cACAn0C,IAAK0U,EAET,CAvFWo8D,CAAqBp8D,EAEhC,CAuHO,SAAS4sB,EAAYjC,G,IACnBA,EAAP,OAAgC,QAAzBA,EAAAA,aAAAA,EAAAA,EAAW2B,UAAUz3C,YAArB81C,IAAAA,EAAAA,EAA6BmwC,CACtC,CAEO,SAAS/tC,EAAYpC,G,IACnBA,EAAP,OAAgC,QAAzBA,EAAAA,aAAAA,EAAAA,EAAW4B,UAAU13C,YAArB81C,IAAAA,EAAAA,EAA6BowC,CACtC,CAEO,SAASj7B,EAAUnV,G,IACjBA,EAAAA,EAAP,OAA+B,QAAxBA,EAAAA,SAAkB,QAAlBA,EAAAA,EAAW2L,eAAX3L,IAAAA,OAAAA,EAAAA,EAAoB91C,YAApB81C,IAAAA,EAAAA,EAA4BswC,CACrC,CAEO,SAAS9wB,EAAsBhgC,G,IAIlBA,EAHlB,IAAIkgC,EAAQ,EACRC,EAAM,EAEV,MAAMhe,EAAqB,QAATniB,EAAAA,EAAO,UAAPA,IAAAA,OAAAA,EAAAA,EAAWhM,OAAO9D,MAAMkE,GAAUA,EAAMtnB,OAAS0+C,EAAAA,UAAUC,OAC7E,GAAItJ,EAAW,CACb,MAAMjuC,EAAS,IAAIiuC,EAAUjuC,QAAQuC,OAC/By7E,EAAch+E,EAAO,GAAKA,EAAOA,EAAO1I,OAAS,GACvD00D,EAAQgyB,EAAch+E,EAAO,GAAKA,EAAOA,EAAO1I,OAAS,GACzD20D,EAAM+xB,EAAch+E,EAAOA,EAAO1I,OAAS,GAAK0I,EAAO,EACzD,CACA,MAAO,CAAEgsD,QAAOC,MAClB,CAEO,MAAMgyB,EAAqB,gBAC3B,SAASlyB,EAAqBC,EAAeC,GAClD,MAAMtqC,GAAQu8D,EAAAA,EAAAA,kBAAiB,CAC7B,CACE3mC,KAAMyU,EACNmyB,QAASlyB,EACTmyB,UAAU,EACVlpF,KAAM,8CACNW,MAAO,6BAQX,OALA8rB,EAAMnrB,KAAOynF,EACbt8D,EAAMvP,KAAO,CACXisE,UAAWC,EAAAA,UAAUC,aAGhB58D,CACT,C,iBC9NA,IAAI68D,EAEG,SAASC,IACTD,IACHA,EAAkB,IAAIE,EAE1B,C,2BAKO,MAAMA,EAEJnf,oBAAAA,GACL,OAAOjjE,KAAKqiF,iBACd,CAEO1d,gBAAAA,CAAiB5T,GACjB/wD,KAAKqiF,oBACRriF,KAAKqiF,kBAAoB,CAAC,GAG5BriF,KAAKqiF,kBAAkB9gB,cAAgBxQ,CACzC,CAEOgU,cAAAA,CAAehU,GACf/wD,KAAKqiF,oBACRriF,KAAKqiF,kBAAoB,CAAC,GAG5BriF,KAAKqiF,kBAAkB7gB,YAAczQ,CACvC,CAEOmU,cAAAA,CAAenU,GACf/wD,KAAKqiF,oBACRriF,KAAKqiF,kBAAoB,CAAC,GAG5BriF,KAAKqiF,kBAAkBnqD,YAAc64B,CACvC,CAEOgS,oBAAAA,CAAqB3jE,GAC1BY,KAAKqiF,kBAAoB,CACvB9gB,cAAeniE,EAAMmiE,cACrBC,YAAapiE,EAAMoiE,YACnBtpC,YAAa94B,EAAM84B,YACnBgC,QAAS96B,EAAM86B,QACf8wB,UAAW5rD,EAAM4rD,UACjBmD,eAAgB/uD,EAAM+uD,eAE1B,C,6BAtCiEn2D,G,EAAzDqqF,uBAAR,K,sBAAA,K,uDAAA,K,MAyCK,SAASvf,IACd,OAAOof,CACT,C,yHCrDA,MAAMI,EAASxuE,GAAyC,iBAANA,GAAwB,OAANA,EAEpE,SAASyuE,EAA+Bv9D,EAAcw9D,GACpD,OAAOA,KAAQx9D,CACjB,CAEA,MAAMy9D,EAAY3O,GAA6B,iBAANA,GAAkBA,GAAM,GAEpD+L,EAAY5vD,GAAgE,iBAARA,EAE1E,SAASpF,EAAiBntB,GAC/B,IAAIglF,EAAoB,GACxB,GAAIl8E,MAAMtC,QAAQxG,GAChB,IAAK,IAAIgK,EAAI,EAAGA,EAAIhK,EAAE1C,OAAQ0M,IAC5Bg7E,EAAQ15E,KAAKy5E,EAAS/kF,EAAEgK,KAG5B,OAAOg7E,CACT,CAEO,SAASp5B,EAAuBx1C,GACrC,MAAM6uE,EAAWL,EAAMxuE,IAAMyuE,EAAQzuE,EAAG,QAAUyuE,EAAQzuE,EAAG,OAASA,EAEtE,GAAI6uE,EAAU,CACZ,MAAM1mC,EAA8B,iBAAjB0mC,EAAS1mC,KAAoB0mC,EAAS1mC,IACnDp2B,EAA4B,iBAAhB88D,EAAS98D,IAAmB88D,EAAS98D,GACvD,IAAW,IAAPA,IAAwB,IAARo2B,EAClB,MAAO,CAAEA,MAAKp2B,KAElB,CAEA,OAAO,CACT,CAEO,SAAS4jC,EAA4B31C,GAC1C,MAAoB,iBAANA,IAAyB,SAANA,GAAsB,UAANA,IAAkBA,CACrE,CACO,SAASy6B,EAAoBz6B,GAClC,MAAiB,iBAANA,GAAkBA,IAAMq6B,EAAAA,cAAcU,UAAU/oC,WAClDqoC,EAAAA,cAAcU,UAGN,iBAAN/6B,GAAkBA,IAAMq6B,EAAAA,cAAcC,WAAWtoC,YACnDqoC,EAAAA,cAAcC,UAIzB,CAEO,SAASw0C,EAAiB9uE,GAC/B,MAAM6uE,EAAWL,EAAMxuE,IAAMyuE,EAAQzuE,EAAG,UAAYyuE,EAAQzuE,EAAG,WAAaA,EAE5E,GAAI6uE,EAAU,CACZ,MAAMh+E,EACuB,iBAApBg+E,EAASh+E,SACK,WAApBg+E,EAASh+E,QACY,SAApBg+E,EAASh+E,QACW,UAApBg+E,EAASh+E,QACW,uBAApBg+E,EAASh+E,SACXg+E,EAASh+E,OACLH,EAAkC,iBAAnBm+E,EAASn+E,OAAsBm+E,EAASn+E,MAE7D,IAAe,IAAXG,IAA8B,IAAVH,EACtB,MAAO,CAAEG,SAAQH,QAErB,CAEA,OAAO,CACT,CAEO,SAAS+rC,EAAyBz8B,GACvC,MAAM6uE,EAAWL,EAAMxuE,IAAM+rE,EAAS/rE,IAAMA,EAE5C,GAAI6uE,EAAU,CACZ,MAAM95E,EAAOsD,OAAOtD,KAAK85E,GACnBE,EAAuC,CAAC,EAC9C,IAAK,IAAIn7E,EAAI,EAAGA,EAAImB,EAAK7N,OAAQ0M,IAAK,CACpC,MAAMzN,EAAM4O,EAAKnB,GACXlD,EAAQm+E,EAAS95E,EAAKnB,IACP,iBAAVlD,IACTq+E,EAAa5oF,GAAOuK,EAExB,CAEA,OAAOq+E,CACT,CAEA,OAAO,CACT,CAEO,SAAS5xE,EAAgBH,GAC9B,MAAME,EAAQsxE,EAAMxxE,IAAiByxE,EAAQzxE,EAAc,OAASyxE,EAAQzxE,EAAc,SAAWA,EACrG,GAAIE,EAAO,CACT,MAAMoF,EAAKqsE,EAASzxE,EAAMoF,IACpBE,EAAOmsE,EAASzxE,EAAMsF,MAC5B,GAAIF,GAAME,EACR,MAAO,CAAEF,KAAIE,OAEjB,CAGF,CAEO,MAAMk6B,UAAuBhtC,O,sSC/FpC,IAAIs/E,EAcG,SAASC,EAAsB7oC,EAA0B8oC,GAC9D,OAAO13D,EAAAA,QAAQC,UAAU2uB,EAGpB,SAAiC8oC,GACtC,O,sUAAO,IACF72E,OAAOC,QAAQkf,EAAAA,QAAQo0C,sBAAsBj6B,QAAoB,CAACC,GAAMzrC,EAAKuK,MAC1EggB,EAAAA,GAAmBllB,SAASrF,KAC9ByrC,EAAIzrC,GAAOuK,GAGNkhC,IACN,CAAC,GACDs9C,EAEP,CAdiCC,CAAwBD,GACzD,CAqBO,SAAS5mD,EAAyB8mD,EAAqBpiF,EAAem3B,GAC3E,MAAM71B,EAAanD,EAAAA,GAAWoD,YAAY41B,EAAc31B,EAAAA,IAExD,GAAIF,EAAY,C,IACOA,EACCA,EADtB,MAAM+gF,EAA0C,QAA3B/gF,EAAAA,EAAWhD,MAAMsS,kBAAjBtP,IAAAA,OAAAA,EAAAA,EAA6BuP,OAAOwS,UACnDi/D,EAA2C,QAA3BhhF,EAAAA,EAAWhD,MAAMsS,kBAAjBtP,IAAAA,OAAAA,EAAAA,EAA6BuP,OAAOyS,WAC1D,GAAI++D,GAAgBC,EAAe,CACjC,IAAIC,EA1CV,SAAgCviF,EAAeoiF,EAAqB9+D,EAAoBD,EAAY,WAClG,OAAIrjB,IAAUu4B,EAAAA,IAAsB6pD,IAAYv/D,EAAAA,GAAW7iB,OAClD4hB,EAAAA,EAAAA,IAAY,GAAG5Q,EAAAA,GAAUC,WAAWoS,MAAau+C,EAAAA,EAAAA,IAAat+C,MAAetS,EAAAA,GAAUyR,UACrFziB,IAAUu4B,EAAAA,IAAsB6pD,IAAYv/D,EAAAA,GAAWC,OACzDlB,EAAAA,EAAAA,IAAY,GAAG5Q,EAAAA,GAAUC,WAAWoS,MAAau+C,EAAAA,EAAAA,IAAat+C,MAAetS,EAAAA,GAAU0R,WAEvFd,EAAAA,EAAAA,IACL,GAAG5Q,EAAAA,GAAUC,WAAWoS,MAAau+C,EAAAA,EAAAA,IAAat+C,MAAe8+D,MAAWxgB,EAAAA,EAAAA,IAAa5hE,KAG/F,CAgCoBwiF,CAAuBxiF,EAAOoiF,EAASE,EAAeD,GACpE,MAAMI,EAAUR,EAAsBM,GAStC,OANIprD,IACsB6qC,EAAAA,EAAAA,MACRC,qBAAqB9qC,EAAa74B,YAGpDqqE,EAAe8Z,EAEjB,CACE/gF,EAAAA,EAAOC,KAAK,qBAAsB,CAChC0gF,aAAcA,QAAAA,EAAgB,GAC9BC,cAAeA,QAAAA,EAAiB,IAGtC,CACF,CAQO,SAASzjE,EAA2CwE,EAAmBC,GAE5EqlD,EADqBsZ,EAAsBx+D,EAAAA,GAAOpB,KAAKiB,EAAYD,IAErE,CASO,SAASkR,EAAwB6kB,EAAiBjiB,EAA4B+qD,G,IAE7D5gF,EACDA,EAFrB,MAAMA,EAAanD,EAAAA,GAAWoD,YAAY41B,EAAc31B,EAAAA,IAClD8gF,EAA2C,QAA3BhhF,EAAAA,EAAWhD,MAAMsS,kBAAjBtP,IAAAA,OAAAA,EAAAA,EAA6BuP,OAAOyS,WACpD++D,EAA0C,QAA3B/gF,EAAAA,EAAWhD,MAAMsS,kBAAjBtP,IAAAA,OAAAA,EAAAA,EAA6BuP,OAAOwS,UAEzD,GAAIi/D,EAAJ,CACE,MACMI,EAAeT,GADLrgE,EAAAA,EAAAA,IAAY,GAAG5Q,EAAAA,GAAUC,WAAWoxE,MAAgBzgB,EAAAA,EAAAA,IAAa0gB,MAAkBlpC,KAC/C8oC,GAGhD/qD,IACsB6qC,EAAAA,EAAAA,MACRC,qBAAqB9qC,EAAa74B,OAGpDqqE,EAAe+Z,EAEjB,CACF,CAEO,SAAS/Z,EAAeD,GAC7BsZ,EAAgBtZ,EAChBn1D,EAAAA,gBAAgBrL,KAAKwgE,EACvB,CAKO,SAASvlD,IACd,MAAMhM,EAAW5D,EAAAA,gBAAgB6D,cAC3BurE,GAAaC,EAAAA,EAAAA,IAAiBn/D,EAAAA,GAAOxS,WACrCw3D,EAAatxD,EAAS2nD,SAAW3nD,EAASG,OAC1CA,EAAS/D,EAAAA,gBAAgBsvE,YAE3BF,IAAela,GAAcA,EAAWjqE,SAASmkF,KAIhDrrE,EAAOhV,IAAI,eAOdqmE,EAAega,IALXX,GACFzuE,EAAAA,gBAAgB/P,QAAQw+E,GAE1BzuE,EAAAA,gBAAgBrL,KAAKy6E,IAIzB,C,4HC3IO,MAAMG,UAA6Bx+D,EAAAA,GAKjC8lC,UAAAA,GACL,MAAMjoD,EAAYhE,EAAAA,GAAW8T,aAAa/S,MAO1CA,KAAuB,iBAAEiD,EAC3B,CAbAzC,WAAAA,CAAY+4C,GACV94C,MAAM84C,EACR,E,i1BCwBF,MAAMsqC,EAAqB,OACpB,SAASn7D,EAAuB46B,GACrCA,EAAUwgC,oBAAoB,QAAQC,cAAc,CAClDtqD,KAAM,QACNqhC,WAAY,oBAEdxX,EAAUwgC,oBAAoB,SAASC,cAAc,CACnDtqD,KAAM,QACNqhC,WAAY,mBAEdxX,EAAUwgC,oBAAoB,SAASC,cAAc,CACnDtqD,KAAM,QACNqhC,WAAY,kBAEdxX,EAAUwgC,oBAAoB,QAAQC,cAAc,CAClDtqD,KAAM,QACNqhC,WAAY,qBAEdxX,EAAUwgC,oBAAoB,QAAQC,cAAc,CAClDtqD,KAAM,QACNqhC,WAAY,YAEhB,CAEO,SAASjM,EACdm1B,GAEA,OAAOA,EACJxqD,qBAAqB,WAAY,CAAEC,KAAMC,EAAAA,aAAaC,SACtDH,qBAAqB,cAAe,KACpCA,qBAAqB,YAAa,GAClCA,qBAAqB,YAAa,GAClCA,qBAAqB,YAAanD,EAAAA,UAAUC,MAC5C7N,aAAaC,EAClB,CAMO,SAASu7D,EAAwBp3B,EAAkBq3B,GACxDA,EACGpnE,MAAM,CACL+I,GAAIs+D,EAAAA,eAAeC,QACnBxgF,QAAS,CACP61B,KAAM,UACNghC,MAAO5N,EACPj6B,OAAQ,cACRyxD,UAAU,KAGbC,0BAA6D,WAAY,CACxEn0E,QAAQ,EACRiW,SAAS,EACTgB,KAAK,IAIT,MAAMk8B,EAAY4gC,EAAel7D,QAEjCs6B,EAAUA,EAAUtoD,OAAS,GAAGupF,YAAc,gBAChD,CAEO,SAASp1B,EAA2Bh/B,EAAiBX,EAAqBxsB,GAC/E,MAAMwhF,GAAgBxF,EAAAA,EAAAA,KAAiB3P,EAAAA,EAAAA,IAAoB7/C,GAASxsB,GACpE,GAAIwhF,aAAAA,EAAAA,EAAexpF,OAAQ,CACzB,MAAMugB,EAASszC,EAA0B41B,EAAAA,GAAoBj8D,cAAcC,aACzEw7D,EAAwBrjF,KAAK,KAAM4jF,IAEjCjpE,aAAkBmpE,EAAAA,IACpBv0D,EAAMw0D,oBAAoBppE,EAAOyN,SAAS,EAE9C,CACF,CACA,SAAS47D,IACP,OAAQr0D,GACCA,EAAOC,MACZpzB,EAAAA,EAAAA,MAAK4nB,GACIA,EAAK5nB,KAAI,CAACioB,EAAOk4D,IACf,OACFl4D,GAAAA,CACH7B,OAAQ6B,EAAM7B,OAAOpmB,KAAI,CAACgI,EAAG+3C,KAE3B,GAAI/3C,EAAE9I,OAAS0+C,EAAAA,UAAUC,KACvB,OAAO71C,EAET,MAAM28C,GAAc8iC,EAAAA,EAAAA,qBAAoBz/E,EAAGigB,EAAOL,GAClD,OAAO,OACF5f,GAAAA,CACHmW,OAAQ,OACHnW,EAAEmW,QAAM,CACXwmC,cACAxoD,MAAO,CACLkgC,KAAMqrD,EAAAA,iBAAiBC,yB,UAU3C,CAEO,SAASC,IACd,OAAQz0D,GACCA,EAAOC,MACZpzB,EAAAA,EAAAA,MAAK4nB,GACIA,EACJ5nB,KAAKi9C,IACAA,EAAE72B,OAAOxoB,OAAS,GAGjBq/C,EAAE72B,OAAO,GAAGjI,OAAO0pE,oBACtB5qC,EAAE72B,OAAO,GAAGjI,OAAO0pE,kBAAoBpB,GAHhCxpC,KAOVp0C,MAAK,CAACvI,EAAGwI,KACR,GAAIxI,EAAE8lB,OAAOxoB,OAAS,GAAKkL,EAAEsd,OAAOxoB,OAAS,EAC3C,OAAO,EAET,MAAMkqF,EAA4BxnF,EAAE8lB,OAAO,GAAGjI,OAAO0pE,kBAC/CE,GAAOD,aAAAA,EAAAA,EAAO5lF,SAAS,UAAW,GAAI4lF,aAAAA,EAAAA,EAAO5lF,SAAS,SAAU,GAAI4lF,aAAAA,EAAAA,EAAO5lF,SAAS,SAAU,EAAI,EAClG8lF,EAA4Bl/E,EAAEsd,OAAO,GAAGjI,OAAO0pE,kBAErD,OAAOE,IADMC,aAAAA,EAAAA,EAAO9lF,SAAS,UAAW,GAAI8lF,aAAAA,EAAAA,EAAO9lF,SAAS,SAAU,GAAI8lF,aAAAA,EAAAA,EAAO9lF,SAAS,SAAU,EAAI,EACtF,MAK9B,CAEO,SAASumE,EAAuBjhD,GACrC,OAAO,IAAIg/D,EAAqB,CAC9B3+E,WAAY,CAAEygB,IAAKqzD,EAAAA,qBACnBn0D,QAASA,GAEb,CAEO,SAAS8P,EAAe9P,EAAsBygE,GAMnD,MAAMC,EAAW1gE,EAAQlF,MAAM8U,I,IAAUA,E,OAAkB,QAAlBA,EAAAA,EAAMhP,oBAANgP,IAAAA,OAAAA,EAAAA,EAAoBtsB,cAAc5I,SAAS,QAAQ,IACtFimF,EAAkB3gE,EAAQlF,MAC7B8U,GAAUA,EAAMtJ,QAAUm3C,EAAAA,IAA0B7tC,EAAMtJ,QAAUo3C,EAAAA,KAGvE,OAAIgjB,EACK,IAAIl1D,EAAAA,GAAqB,CAC9B/H,MAAO+/C,EAAoB,GACzBnjE,WAAY,CAAEygB,IAAKqzD,EAAAA,qBACnBn0D,QAASA,GACNygE,IAELh1D,gBAAiB,CAAC20D,KAIjBO,EAWEnd,EAAoB,GACzBnjE,WAAY,CAAEygB,IAAKqzD,EAAAA,qBACnBn0D,QAASA,GACNygE,IAbI,IAAIj1D,EAAAA,GAAqB,CAC9B/H,MAAO+/C,EAAoB,GACzBnjE,WAAY,CAAEygB,IAAKqzD,EAAAA,qBACnBn0D,QAASA,GACNygE,IAELh1D,gBAAiB,CAACu0D,IASxB,CAEO,SAASxc,EAAoBid,GAClC,OAAO,IAAIjgE,EAAAA,GAAiB,GAC1BngB,WAAY,CAAEygB,IAAKqzD,EAAAA,qBACnBn0D,QAAS,IACNygE,GAEP,C,qDCrNO,MAAM1lF,E,QAAYsgB,GACZ6D,EAAkB,MAAMnkB,IAG9B,SAAS+iB,EAAY8iE,GAC1B,MAAO,GAAG1hE,KAAmB0hE,GAC/B,C,ihCCYO,MAAM1f,EAAqB,CAChC/iE,EACA02E,EACAgM,EACA5J,IAEO,WACF6J,GAAAA,CACHjM,WACAvuD,MAAOuuD,IACJgM,GAAAA,CACHxgF,WAAY,CAAEygB,IAAKigE,EAAAA,IACnB5iF,OACA84E,iBASSpnD,EAAiB,CAAC1xB,EAAc0iF,IACpC,OACFC,EACAD,GAAAA,CACH1iF,SAIE2iF,EAAqB,CACzBx6D,MAAO,IACP66C,UAAW,QACX6f,WAAY,OACZC,oBAAqBlmF,EAAAA,IAGVorE,EAAmB,CAC9BhoE,EACA02E,EACAoC,EACA4J,IAEO3f,EAAmB/iE,EAAM02E,EAAU,KAAKgM,GAAwB5J,GAGlE,SAASiK,EAAoBpkF,GAClC,MAAMqkF,EAAWrkF,EAAQrF,QAAQA,GAAWA,EAAOgJ,WAAaI,EAAAA,EAASC,QAIzE,MAAO,CAAEsgF,SAHQtkF,EAAQrF,QAAQA,GAAWA,EAAOgJ,WAAaI,EAAAA,EAAS+W,WAGtDypE,gBADIC,EAAAA,EAAAA,SAAQH,GAAW1pF,GAAWA,EAAOpC,MAE9D,CAgBO,SAASof,EAAwB3X,GACtC,IAAI,gBAAEykF,EAAe,SAAEH,GAflB,SAA8BtkF,GACnC,MAAM,SAAEskF,EAAQ,eAAEC,GAAmBH,EAAoBpkF,GAEzD,IAAIykF,EAA4B,GAChC,IAAK,MAAMlsF,KAAOgsF,EAAgB,CAChC,MAAMviF,EAASuiF,EAAehsF,GAAKmD,KAAKf,GAAWA,EAAOmI,QAC1D2hF,EAAgBn9E,KACI,IAAlBtF,EAAO1I,OAAeorF,EAAeH,EAAehsF,GAAK,IAAMosF,EAAuBpsF,EAAKyJ,GAE/F,CAEA,MAAO,CAAEyiF,kBAAiBH,WAC5B,CAGsCM,CAAqB5kF,GACzD,MAAM6kF,EAAkBP,EAAS5oF,KAAKf,GAAW+pF,EAAe/pF,KAASuO,KAAK,MAI9E,OAFe2gD,EAAAA,EAAAA,MAAK,GAAG46B,EAAgBv7E,KAAK,UAAU27E,IAAmB,KAG3E,CAEO,SAAS3sE,EAAwBlY,GAEtC,MAAMqkF,EAAWrkF,EAAQrF,QAAQA,GAAWA,EAAOgJ,WAAaI,EAAAA,EAASC,QACnEsgF,EAAWtkF,EAAQrF,QAAQA,GAAWA,EAAOgJ,WAAaI,EAAAA,EAAS+W,WAEnEgqE,EAAU9kF,EAAQrF,QAAQA,GACE4Y,EAAAA,GACX3V,SAASjD,EAAOgJ,YAGjC4gF,GAAiBC,EAAAA,EAAAA,SAAQH,GAAW1pF,GAAWA,EAAOpC,MAE5D,IAAIksF,EAAkB,GACtB,IAAK,MAAMlsF,KAAOgsF,EAChBE,GAAmB,MAAQF,EAAehsF,GAAKmD,KAAKf,GAAW,GAAGoqF,EAAyBpqF,OAAWuO,KAAK,QAO7G,MAAO,GAAGu7E,KAJcH,EAAS5oF,KAAKf,GAAW,KAAKoqF,EAAyBpqF,OAAWuO,KAAK,QAE1E47E,EAAQppF,KAAKf,GAAW,KAoF/C,SAAyCA,GACvC,MACMmI,GADcH,EAAAA,EAAAA,IAAyBhI,GACnBmI,MAG1B,MAAO,GAAGnI,EAAOpC,MAAMoC,EAAOgJ,WAAWb,GAC3C,CA1FoDkiF,CAAgCrqF,OAAWuO,KAAK,OAEjC2gD,MACnE,CAkCO,SAASrxC,EAAsBxY,GAEpC,OADAod,EAAAA,EAAAA,GAAgBpd,GACTA,EACJtE,KAAKf,GACiB,KAAjBA,EAAOmI,MACF,GAxBf,SAA8BnI,EAA+BmI,GAE3D,OAAInI,EAAOpC,MAAQ+jB,EAAAA,EAAwBC,gBACrC5hB,EAAOgJ,WAAawX,EAAAA,EAAaI,eAAiB5gB,EAAOgJ,WAAawX,EAAAA,EAAaE,cAC9E,GAAGF,EAAAA,EAAaI,sBAAsBzY,KAExC,GAAGqY,EAAAA,EAAaG,cAAcxY,KAGhC,GAAGnI,EAAOgJ,aAAab,IAChC,CAkBamiF,CAAqBtqF,EAzC3B,SAAsCA,GAE3C,OAAIA,EAAOgJ,WAAawX,EAAAA,EAAaC,OAASzgB,EAAOgJ,WAAawX,EAAAA,EAAaE,eACzE1gB,EAAOpC,MAAQ+jB,EAAAA,EAAwBC,gBAMpC2oE,EAAgCvqF,EAAOmI,OAyKzCoiF,EA9KoCvqF,EAAOmI,MA2KrCF,QAAQuiF,EAAoB,QApK3C,CA6BoBC,CAA6BzqF,MAG5CuO,KAAK,IACV,CACO,SAASkP,EAA2BpY,GACzC,MAAMqkF,EAAWrkF,EAAQrF,QAAQA,GAAWA,EAAOgJ,WAAaI,EAAAA,EAASC,QACnEsgF,EAAWtkF,EAAQrF,QAAQA,GAAWA,EAAOgJ,WAAaI,EAAAA,EAAS+W,WAEnEypE,GAAiBC,EAAAA,EAAAA,SAAQH,GAAW1pF,GAAWA,EAAOpC,MAE5D,IAAIksF,EAAkB,GACtB,IAAK,MAAMlsF,KAAOgsF,EAChBE,GAAmB,MAAQF,EAAehsF,GAAKmD,KAAKf,GAAW,GAAG+pF,EAAe/pF,OAAWuO,KAAK,QAKnG,MAAO,GAAGu7E,KAFcH,EAAS5oF,KAAKf,GAAW,KAAK+pF,EAAe/pF,OAAWuO,KAAK,OAEtC2gD,MACjD,CAEA,SAAS66B,EAAe/pF,GAEtB,OAAIA,EAAOmI,QAAUogC,EAAAA,GACZ,GAAGvoC,EAAOpC,MAAMoC,EAAOgJ,WAAWhJ,EAAOmI,QAE3C,GAAGnI,EAAOpC,MAAMoC,EAAOgJ,aAAahJ,EAAOmI,SACpD,CAEA,SAASiiF,EAAyBpqF,GAChC,MACMmI,GADcH,EAAAA,EAAAA,IAAyBhI,GACnBmI,MAE1B,OAAIA,IAAUogC,EAAAA,GACL,GAAGvoC,EAAOpC,MAAMoC,EAAOgJ,WAAWb,IAEpC,GAAGnI,EAAOpC,MAAMoC,EAAOgJ,aAAab,KAC7C,CAUO,SAAS6hF,EAAuBpsF,EAAayJ,GAClD,MAAO,GAAGzJ,OAASyJ,EAAOkH,KAAK,OACjC,CAEO,SAAS2N,EAAqBpc,GACnC,MACM4qF,EADkB5qF,EAASE,QAAQ1C,GAA6B,YAAjBA,EAAQ2C,OAE1Dc,KAAKC,GAAM,QAAQA,EAAE1D,cACrBiR,KAAK,KACL2gD,OAEGnvD,EAAkBD,EAASE,QAAQ1C,GAA6B,YAAjBA,EAAQ2C,OAC7D,IAAI0qF,EAAsB,GAQ1B,OAPI5qF,EAAgBpB,OAAS,IAEzBgsF,EAD6B,IAA3B5qF,EAAgBpB,OACI,QAAQoB,EAAgB,GAAGzC,YAE3B,OAAOyC,EAAgBgB,KAAKC,GAAM,KAAKA,EAAE1D,cAAaiR,KAAK,WAG9E,GAAGm8E,KAAuBC,IAAsBz7B,MACzD,CAEO,SAASpmD,EAAe9F,GAC7B,MAAM,eAAE4mF,EAAc,SAAED,GAAaF,EAAoBzmF,EAASD,MAAMsC,SAElEA,EAAmC,GACzC,IAAK,MAAMzH,KAAOgsF,EAAgB,CAChC,MAAMviF,EAASuiF,EAAehsF,GAAKmD,KAAKf,GAAWA,EAAOmI,QACpC,IAAlBd,EAAO1I,OACT0G,EAAQsH,KAAK,CACX/O,MACAuK,MAAOyhF,EAAehsF,GAAK,GAAGuK,MAC9Ba,SAAU,MAGZ3D,EAAQsH,KAAK,CACX/O,MACAuK,MAAOd,EAAOkH,KAAK,KACnBvF,SAAU,MAGhB,CAKA,OAHA2gF,EAAS52E,SAAS/S,IAChBqF,EAAQsH,KAAK3M,EAAO,IAEfqF,CACT,CAEO,SAASmyB,EAAmBC,GACjC,MAAc,OAAVA,GAA4C,OAA1BA,EAAM54B,UAAU,EAAG,GAChC,KAAK44B,MAGPA,CACT,CAEO,SAASy8C,EAAqBz8C,GACnC,MAA8B,OAA1BA,EAAM54B,UAAU,EAAG,IAAmC,OAApB44B,EAAM5nB,OAAO,GAC1C4nB,EAAM5nB,MAAM,GAAGA,MAAM,GAAI,GAE3B4nB,CACT,CAEO,SAASomD,EAAuBE,GACrC,OAAOA,EAAW91E,QAAQ,WAAY,IACxC,CAGO,MAAMgqD,EAAa,IAQnB,SAASs4B,EAAgCxiE,GAC9C,OAAOA,EAAW9f,QAAQ,MAAO,QAAQA,QAAQ,MAAO,OAAOA,QAAQ,KAAM,MAC/E,CAMA,MAAMuiF,EAAqB,sB,yVChRpB,eAAK/0E,G,mGAAAA,C,CAAL,C,IAOA,WAAK6R,G,uCAAAA,C,CAAL,C,IAaA,MAAMY,EAAS,CACpBxS,QAAS,KAAM2Q,EAAAA,EAAAA,IAAY,WAC3BS,KAAM,CAACiB,EAAoBD,EAAY,aACrCzB,EAAAA,EAAAA,IAAY,WAAwByB,MAAau+C,EAAAA,EAAAA,IAAat+C,WAChEZ,OAAQ,CAACY,EAAoBD,EAAY,aACvCzB,EAAAA,EAAAA,IAAY,WAAwByB,MAAau+C,EAAAA,EAAAA,IAAat+C,aAChEjoB,SAAU,CAACioB,EAAoBD,EAAY,aACzCzB,EAAAA,EAAAA,IAAY,WAAwByB,MAAau+C,EAAAA,EAAAA,IAAat+C,eAChEb,OAAQ,CAACa,EAAoBD,EAAY,aACvCzB,EAAAA,EAAAA,IAAY,WAAwByB,MAAau+C,EAAAA,EAAAA,IAAat+C,cAGrDM,EAAa,CACxB5jB,MAAO,CAACsjB,EAAoBD,EAAY,UAAW8iE,KACjDvkE,EAAAA,EAAAA,IACE,WAAwByB,MAAau+C,EAAAA,EAAAA,IAAat+C,YAAmC6iE,KAEzFrjE,MAAO,CAACQ,EAAoBD,EAAY,UAAW8iE,KACjDvkE,EAAAA,EAAAA,IACE,WAAwByB,MAAau+C,EAAAA,EAAAA,IAAat+C,YAAmC6iE,MAI9E/jE,EAA4D,CACvEnR,SAAS2Q,EAAAA,EAAAA,IAAY,WACrBS,MAAMT,EAAAA,EAAAA,IAAY,uCAClBc,QAAQd,EAAAA,EAAAA,IAAY,yCACpBvmB,UAAUumB,EAAAA,EAAAA,IAAY,2CACtBa,QAAQb,EAAAA,EAAAA,IAAY,0CAGTe,EAAmE,CAC9EG,OAAOlB,EAAAA,EAAAA,IAAY,wDACnB5hB,OAAO4hB,EAAAA,EAAAA,IAAY,yDAMRI,EAAmB,CAAC,OAAQ,KAAM,OAAOxI,EAAAA,KAAkB,OAAOpB,EAAAA,MAElEsL,EAAqB,CAChC,OACA,KACA,OACA,aACA,oBACA,eACA,kBACA,aACA5J,EAAAA,GACA,OAAOA,EAAAA,KACP,OAAON,EAAAA,KACP,OAAOpB,EAAAA,KACP,OAAO/U,EAAAA,KACP,OAAOuO,EAAAA,KACP,OAAO0oB,EAAAA,KACP,OAAOgD,EAAAA,KACP,OAAO9jB,EAAAA,KACP,OAAOO,EAAAA,KACP,OAAOzD,EAAAA,KACP,OAAO4C,EAAAA,MAGF,SAASnI,IACd,MAAMoG,EAAW5D,EAAAA,gBAAgB6D,cAEjC,OADaD,EAAS2nD,SAAS1zD,MAAM+L,EAAS2nD,SAAS5zD,YAAY,KAAO,EAAGiM,EAAS2nD,SAAS5kE,OAEjG,CAOO,SAASu/B,IACd,MAAMtiB,EAAW5D,EAAAA,gBAAgB6D,cAG3BgvE,EADWjvE,EAAS2nD,SAAS1zD,MAAM+L,EAAS2nD,SAASzxD,QADxC,sCAC8Dg5E,GAAoB,GACxEr+E,MAAM,KAEnC,IAAIqb,EAAY+iE,EAAY,GAC5B,MAAM9iE,EAAa8iE,EAAY,GACzBt1E,EAAiBs1E,EAAY,GAKnC,OAHI/iE,IAAc4Z,EAAAA,KAChB5Z,EAAY2Z,EAAAA,IAEP,CAAE3Z,YAAWC,aAAYxS,iBAClC,CAEO,SAASuuD,IACd,MACMinB,EADW/yE,EAAAA,gBAAgB6D,cACF0nD,SAAS92D,MAAM,KAE9C,OADas+E,EAAcA,EAAcpsF,OAAS,EAEpD,CAEO,SAAS0oF,EAAiBxpC,EAAc8oC,GAC7C,OAAO13D,EAAAA,QAAQC,UAAU2uB,EAUpB,SAA4B8oC,GACjC,O,sUAAO,IACF72E,OAAOC,QAAQkf,EAAAA,QAAQo0C,sBAAsBj6B,QAAoB,CAACC,GAAMzrC,EAAKuK,MAC1Ese,EAAiBxjB,SAASrF,KAC5ByrC,EAAIzrC,GAAOuK,GAGNkhC,IACN,CAAC,GACDs9C,EAEP,CArBiCqE,CAAmBrE,GACpD,CACO,SAAS3+D,EAAuB3S,GACrC,MAAO,CACLyS,UAAWzS,EAAWC,OAAOwS,UAC7BC,WAAY1S,EAAWC,OAAOyS,WAC9BxS,eAAgBF,EAAWC,OAAOC,eAEtC,CAqBO,SAASgpB,EAAkB53B,GAChC,MAAMskF,GAAiBjyE,EAAAA,EAAAA,IAAkBrS,GACzC,IAAI,UAAEmhB,EAAS,WAAEC,GAAemW,IAKhC,GAJIpW,IAAc2Z,EAAAA,KAChB3Z,EAAY4Z,EAAAA,KAEOupD,EAAeloF,MAAMsC,QAAQge,MAAMrjB,GAAWA,EAAOpC,MAAQkqB,IAC/D,CACjB,MAAMlM,EAAW5D,EAAAA,gBAAgB6D,cAEjC1V,EAAAA,EAAOgL,KAAK,oCAAqC,CAC/C2W,YACAhQ,IAAK,GAAG8D,EAAS2nD,WAAW3nD,EAASG,UAEzC,CAGA,IAD0BkvE,EAAeloF,MAAMsC,QAAQge,MAAMrjB,IAAWqmE,EAAAA,EAAAA,IAAarmE,EAAOmI,SAAW4f,IAC/E,CACtB,MAAMnM,EAAW5D,EAAAA,gBAAgB6D,cAEjC1V,EAAAA,EAAOgL,KAAK,qCAAsC,CAChD4W,aACAjQ,IAAK,GAAG8D,EAAS2nD,WAAW3nD,EAASG,UAEzC,CACF,C,yRC3LO,SAAS0/C,EAAkB/4D,GAChC,OAAOE,EAAAA,GAAWoD,YAAYtD,EAAOuD,EAAAA,GACvC,CAMO,SAASe,EAAckkF,GAC5B,OAAOtoF,EAAAA,GAAW2Y,YAAY2vE,EAAa5B,EAAAA,GAC7C,CAEO,SAASt7D,EAAa+nC,GAC3B,OAAOnzD,EAAAA,GAAW2Y,YAAYw6C,EAAaqC,EAAAA,IAA0BnwD,QAAQ,OAAQ,IACvF,CAWO,SAAe8X,EAAkBmrE,G,OAAlBnrE,EAAAA,MAAAA,KAAAA,U,UAAAA,I,eAAf,UAAiCmrE,GAItC,aAHkBpkF,EAAAA,EAAAA,oBAAmBC,IAAIuiF,EAAAA,GAAqB,CAAErM,cAAe,CAAE90E,MAAO+iF,IAI1F,EALsBnrE,E,8KAAAA,EAAAA,MAAAA,KAAAA,U,CAWf,SAAS0N,EAA2By9D,GACzC,OAAOtoF,EAAAA,GAAW0vB,gBAAgB44D,EAAaniE,EAAAA,GACjD,CAcO,SAASD,EACd3V,EACAg4E,EACAC,GAEA,MAAMx3D,EAAMhxB,EAAAA,GAAW4U,WAAWrE,EAAOg4E,GACzC,OAAIv3D,aAAew3D,EACVx3D,GACU,OAARA,GACTztB,EAAAA,EAAOC,KAAK,wBAAwBglF,EAAW3hF,cAG1C,KACT,CAEO,SAAS4J,EAAcF,G,IACrBA,EAAP,OAA2B,QAApBA,EAAAA,EAAMpQ,MAAM2C,gBAAZyN,IAAAA,OAAAA,EAAAA,EAAsBkQ,MAAMo0D,GAAMA,aAAaz4D,EAAAA,IACxD,C,kEC3EA,MAAMqsE,EAAK,IAAIC,EAAAA,EAAO,CACpBC,UAAW,EACXC,SAAU,EACVC,SAAU,EACVC,SAAU,EACVC,SAAU,IAGL,SAASh3D,EAAYD,EAAoByD,EAAenqB,GAC7D,MAAO49E,EAAMz6E,EAAM06E,GAASR,EAAGtvE,OAAO2Y,EAAUyD,EAAO,EAAG,KAE1D,IAAI2zD,EAA0B,GAC1BC,EAA0B,IAAIpiF,IAClC,GAAIiiF,GAAQC,EAAO,CAMjB,MAAMG,EAAO,CAACn0B,EAAco0B,KACtBA,GACFF,EAAWx1E,IAAIshD,EACjB,EAIF,IAAK,IAAIxsD,EAAI,EAAGA,EAAIwgF,EAAMltF,OAAQ0M,IAAK,CACrC,IAAI6gF,EAAUL,EAAMxgF,GAGpBigF,EAAAA,EAAOa,UAAUz3D,EAASvjB,EAAKklE,IAAI6V,IAAW/6E,EAAKi7E,OAAOF,GAAUF,GAEpEF,EAAcn/E,KAAK+nB,EAASvjB,EAAKklE,IAAI6V,IACvC,CAEAl+E,EAAS,CAAC89E,EAAe,IAAIC,IAC/B,MAAY5zD,GACVnqB,EAAS,GAEb,CAEO,MAAMgqC,GAAuBq0C,EAAAA,EAAAA,UAAe13D,EAAa,I,8PCpCzD,MAAMwE,EAAkB,cAElBjG,GAAao5D,EAAAA,EAAAA,UACxB,CAACn5D,EAAqBC,EAAgB5f,KACpC,GAAe,iBAAX4f,EACF,OAAOm5D,EAAiBp5D,EAAQ3f,GAGnB,aAAX4f,GACFo5D,EAAoBr5D,GAGtB,MAAM8yB,EAAWznB,I,IAgBbiuD,EAdF,IACE,GAAe,gBAAXr5D,EACF,OAAOs5D,EAA+BluD,GACjC,GAAe,aAAXpL,EACT,OAAOu5D,EAAsBx5D,EAAQqL,EAEzC,CAAE,MAAOh2B,GACPrC,EAAAA,EAAOe,MAAMsB,EAAG,CAAEC,IAAK,mBAGvB2qB,EAAS+Y,EAAAA,UAAUC,MACrB,CACA,MAAMqgD,EAAelgD,EAAAA,cAAcxlC,IAAIqsB,G,IAErCq5D,EACKtkF,EAAP,OAAoB,QAAbA,GAD4C,QAAjDskF,EAAmB,QAAnBA,EAAAA,EAAarjD,cAAbqjD,IAAAA,OAAAA,EAAAA,EAAAA,KAAAA,EAAsBjuD,EAAUrX,OAAO,IAAI,GAAM,UAAjDslE,IAAAA,EAAAA,GAA0DG,EAAAA,EAAAA,iBAAgBpuD,EAAUrX,OAAO,IAAI,GAAM,IAC1FiM,UAANjrB,IAAAA,EAAAA,EAAiB,CAAC,EAGrB0kF,EAAc15D,EAAOpyB,KAAKy9B,IAAe,CAC7Cr2B,MAAO89C,EAAQznB,GACfA,UAAWA,MAcb,OAXAquD,EAAYjjF,MAAK,CAACvI,EAAGwI,SACHlO,IAAZ0F,EAAE8G,YAAmCxM,IAAZkO,EAAE1B,MACtB0B,EAAE1B,MAAQ9G,EAAE8G,MAEd,IAGS,QAAdqL,GACFq5E,EAAY3nC,UAGP2nC,EAAY9rF,KAAI,EAAGy9B,eAAgBA,GAAU,IAEtD,CAACrL,EAAqBC,EAAgB5f,KACpC,MAAMs5E,EAAiB35D,EAAOx0B,OAAS,EAAIw0B,EAAO,GAAGhM,OAAO,GAAG9f,OAAO,GAAK,EACrE0lF,EACJ55D,EAAOx0B,OAAS,EACZw0B,EAAOA,EAAOx0B,OAAS,GAAGwoB,OAAO,GAAG9f,OAAO8rB,EAAOA,EAAOx0B,OAAS,GAAGwoB,OAAO,GAAG9f,OAAO1I,OAAS,GAC/F,EACAquF,EAAa75D,EAAOx0B,OAAS,GAAI0uC,EAAAA,EAAAA,IAA2Bla,EAAO,IAAM,GACzE85D,EAAY95D,EAAOx0B,OAAS,GAAI0uC,EAAAA,EAAAA,IAA2Bla,EAAOA,EAAOx0B,OAAS,IAAM,GAExFuuF,EAAe/5D,EAAOpyB,KACzBioB,GACCA,EAAMrqB,OACN,IACAqqB,EAAM7B,OAAOpmB,KAAKwmB,GAAUA,EAAM1pB,KAAO,IAAM0pB,EAAMlgB,OAAO,GAAK,IAAMkgB,EAAMlgB,OAAOkgB,EAAMlgB,OAAO1I,OAAS,OAE9G,MAAO,GAAGquF,KAAcC,KAAaH,KAAkBC,KAAiB55D,EAAOx0B,UAAUuuF,KAAgB95D,KAAU5f,GAAW,IAIrHk5E,EAAkC/jE,IAC7C,IAAKwkE,IACH,MAAM,IAAIhmF,MAAM,2CAGlB,MAAMggB,EAASwB,EAAKxB,OAAOnnB,QAAQ+I,GAAMA,EAAE9I,OAAS0+C,EAAAA,UAAU8B,SAExD2sC,EAAajmE,EAAO,GAAG9f,OAAO1I,OAEpC,IAAI0uF,EAAe9uF,KAAK86E,MAAM+T,EAAa,MAAQ,EAC/CC,EAAe,IAEjBA,EAAe9uF,KAAK0tD,KAAKohC,EAAe,IAG1C,MAAMC,EAASnmE,EAAO,GAAG9f,OAAOrH,QAAO,CAACyK,EAAGY,IAAMA,EAAIgiF,GAAiB,IAEhEhmF,EAAS,IAAIkmF,aAAaD,GAGhC,OAFeE,EAAAA,oBAAoBC,gBAAgBC,mBAAmBrmF,GAExD4uD,QAAQt3D,MAAM,EAGjB4tF,EAAmB,CAACp5D,EAAqB3f,KACpD,MAAMyf,EAAe,IAAIE,GAYzB,OAXAF,EAAarpB,MAAK,CAACvI,EAAGwI,KACpB,MAAM8jF,GAAStgD,EAAAA,EAAAA,IAA2BhsC,GACpCusF,GAASvgD,EAAAA,EAAAA,IAA2BxjC,GAC1C,OAAK8jF,GAAWC,GAGaA,QAAtBD,EAAAA,aAAAA,EAAAA,EAAQE,cAAcD,UAAtBD,IAAAA,EAAAA,EAFE,E,IAEFA,CAAkC,IAEzB,SAAdn6E,GACFyf,EAAaiyB,UAERjyB,CAAY,EAGfu5D,EAAuBr5D,IAC3B,IAAKg6D,IACH,OAIF,MAAMW,GAASC,EAAAA,EAAAA,qBAAoB,CAAE35D,OAAQjB,IAC7C,IAAK26D,EACH,OAIF,MACME,EADeF,EAAO3mE,OAAOnnB,QAAQ+I,GAAMA,EAAE9I,OAAS0+C,EAAAA,UAAU8B,SAC1CqH,SAAS30B,GAAW,IAAIo6D,aAAap6D,EAAO9rB,UAExE,IACE,MAAM4mF,EAAWC,EAAAA,gBAAgBC,OAAO,CAAEtzC,YAAa,KAAOuzC,WAAWJ,GACzEK,EAAWJ,EAASK,QACtB,CAAE,MAAO9lF,GACPrC,EAAAA,EAAOe,MAAMsB,EAAG,CAAEC,IAAK,8CACzB,GAGF,IAAI4lF,EAEG,MAAM1B,EAAwB,CAACx5D,EAAqBxK,KACzD,IAAKwkE,IACH,MAAM,IAAIhmF,MAAM,2CAElB,IAAKknF,EACH,MAAM,IAAIlnF,MAAM,qCAGlB,MAAMqc,EAAQ2P,EAAOrhB,QAAQ6W,GAC7B,OAAI0lE,EAASE,cAAc/qE,GAAOgrE,UACzBH,EAASE,cAAc/qE,GAAOirE,iBAAiB9vF,OAGjD,CAAC,EAGGwuF,EAAgB,KAC3B,MAAMuB,EAAiC,iBAAhBC,YAMvB,OAJKD,IACHruF,EAAAA,EAAAA,IAAqBC,EAAAA,GAAkBC,gBAAiBC,EAAAA,GAAoBD,gBAAgBs0E,oBAGvF6Z,CAAO,C,yTC1JhB,MAAME,EAAiD,GAAGhrE,EAAAA,uBACpDirE,EAA+C,GAAGjrE,EAAAA,iCAClDkrE,EAAsB,GAAGlrE,EAAAA,gBAGxB,SAASra,EAAkCwlF,EAAyBjnE,GACzE,IAAKinE,GAA0B,iBAAVA,EACnB,MAAO,GAET,MAAMnxF,EAAMoxF,EAAkCD,EAAOjnE,GACrD,IAAImnE,EAAwB,GAC5B,IACEA,GAAczgE,EAAAA,EAAAA,IAAiBpmB,KAAKsM,MAAMzQ,aAAaI,QAAQzG,IAAQ,MACzE,CAAE,MAAO4K,GACPrC,EAAAA,EAAOe,MAAMsB,EAAG,CAAEC,IAAK,sDACzB,CAKA,OAHK0B,MAAMtC,QAAQonF,KACjBA,EAAc,IAETA,CACT,CAGO,SAAS3O,EAAiCyO,EAAyBjnE,EAAmBC,GAC3F,IAAKgnE,GAA0B,iBAAVA,EACnB,OAEF,MAAMnxF,EAAMoxF,EAAkCD,EAAOjnE,GACrD,IAAI+pD,EAAqB,GACzB,IACEA,GAAWrjD,EAAAA,EAAAA,IAAiBpmB,KAAKsM,MAAMzQ,aAAaI,QAAQzG,IAAQ,MACtE,CAAE,MAAO4K,GACPrC,EAAAA,EAAOe,MAAMsB,EAAG,CAAEC,IAAK,sDACzB,CAEK0B,MAAMtC,QAAQgqE,KACjBA,EAAW,IAIb,MAAMqd,EAAkBrd,EAAS7xE,QAAQ+xE,GAAoBA,IAAYhqD,IACzEmnE,EAAgB9M,QAAQr6D,GAExB9jB,aAAaC,QAAQtG,EAAKwK,KAAKC,UAAU6mF,GAC3C,CAEO,SAAS3O,EAA6BwO,EAAsBjnE,EAAmBC,GACpF,IAAKgnE,IAAUjnE,IAAcC,GAA+B,iBAAVgnE,EAChD,OAEF,MAAMnxF,EAAMoxF,EAAkCD,EAAOjnE,GACrD,IAAI+pD,EAAqB,GACzB,IACEA,GAAWrjD,EAAAA,EAAAA,IAAiBpmB,KAAKsM,MAAMzQ,aAAaI,QAAQzG,IAAQ,MACtE,CAAE,MAAO4K,GACPrC,EAAAA,EAAOe,MAAMsB,EAAG,CAAEC,IAAK,sDACzB,CAEK0B,MAAMtC,QAAQgqE,KACjBA,EAAW,IAEb,MAAMqd,EAAkBrd,EAAS7xE,QAAQ+xE,GAAoBA,IAAYhqD,IACzE9jB,aAAaC,QAAQtG,EAAKwK,KAAKC,UAAU6mF,GAC3C,CAEO,SAASzhB,EAAqBshB,EAAejnE,GAClD,IAAKinE,IAAUjnE,EACb,OAGF,MAAMlqB,EAAMuxF,EAA0BJ,GAEtC,IAAIld,EAAqB,GACzB,IACEA,GAAWrjD,EAAAA,EAAAA,IAAiBpmB,KAAKsM,MAAMzQ,aAAaI,QAAQzG,IAAQ,MACtE,CAAE,MAAO4K,GACPrC,EAAAA,EAAOe,MAAMsB,EAAG,CAAEC,IAAK,+CACzB,CAMA,GAJK0B,MAAMtC,QAAQgqE,KACjBA,EAAW,KAGwB,IAAjCA,EAAS//D,QAAQgW,GAAmB,CAEtC,MAAMonE,EAAkBrd,EAAS7xE,QAAQovF,GAAoBA,IAAYtnE,IACzEonE,EAAgB9M,QAAQt6D,GAExB7jB,aAAaC,QAAQtG,EAAKwK,KAAKC,UAAU6mF,GAC3C,CACF,CAEO,SAASjjB,EAA0B8iB,EAAejnE,GACvD,IAAKinE,IAAUjnE,EACb,OAEF,MAAMlqB,EAAMuxF,EAA0BJ,GACtC,IAAIld,EAAqB,GACzB,IACEA,GAAWrjD,EAAAA,EAAAA,IAAiBpmB,KAAKsM,MAAMzQ,aAAaI,QAAQzG,IAAQ,MACtE,CAAE,MAAO4K,GACPrC,EAAAA,EAAOe,MAAMsB,EAAG,CAAEC,IAAK,sDACzB,CAEK0B,MAAMtC,QAAQgqE,KACjBA,EAAW,IAEb,MAAMqd,EAAkBrd,EAAS7xE,QAAQovF,GAAoBA,IAAYtnE,IACzE7jB,aAAaC,QAAQtG,EAAKwK,KAAKC,UAAU6mF,GAC3C,CAEO,SAASzjB,EAA2BsjB,GACzC,IAAKA,GAA0B,iBAAVA,EACnB,MAAO,GAET,MAAMnxF,EAAMuxF,EAA0BJ,GACtC,IAAIM,EAAqB,GACzB,IACEA,GAAW7gE,EAAAA,EAAAA,IAAiBpmB,KAAKsM,MAAMzQ,aAAaI,QAAQzG,IAAQ,MACtE,CAAE,MAAO4K,GACPrC,EAAAA,EAAOe,MAAMsB,EAAG,CAAEC,IAAK,sDACzB,CAKA,OAHK0B,MAAMtC,QAAQwnF,KACjBA,EAAW,IAENA,CACT,CAEA,SAASL,EAAkC/uE,EAAY6H,GAMrD,OAJEA,EADEA,IAAc4Z,EAAAA,GACJ,GAEA,IAAI5Z,IAEX,GAAG8mE,KAAkD3uE,IAAK6H,GACnE,CAEA,SAASqnE,EAA0BlvE,GACjC,MAAO,GAAG4uE,KAAgD5uE,GAC5D,CAEO,SAAS3D,I,IACPrY,EAAP,OAA4B6qF,QAArB7qF,EAAAA,aAAaI,QAAQyqF,UAArB7qF,IAAAA,EAAAA,OAA6CtI,CACtD,CAEO,SAASyiB,EAA+B2wE,GAC7C9qF,aAAaC,QAAQ4qF,EAAqBC,EAC5C,CAEA,MAAMO,EAA2B,GAAG1rE,EAAAA,iBAC7B,SAASsV,EACd13B,EACA+tF,EACAC,G,IAEmBvrF,EAAnB,MACM2zD,GAD4E,QAA/D3zD,EAAAA,aAAaI,QAAQ,GAAGirF,KAA4B9tF,eAApDyC,IAAAA,EAAAA,EAAoE,IAC9DwI,MAAM,KAC/B,OAAKmrD,EAAM,IAAOA,EAAM,GAKjB,CAAExkC,OAFMwkC,EAAM,GAEJpkD,UADCokD,EAAM,IAHf,CAAExkC,OAAQm8D,EAAe/7E,UAAWg8E,EAK/C,CAEO,SAAS7iD,EAAoBnrC,EAAgB4xB,EAAgB5f,GAE9D4f,GAAU5f,GACZvP,aAAaC,QAAQ,GAAGorF,KAA4B9tF,OAAa,GAAG4xB,KAAU5f,IAElF,CAEA,SAASi8E,EAAqB9oF,GAG5B,MAAO,IAFI+oF,EAAAA,EAAAA,IAAkB/oF,OACTgpF,EAAAA,EAAAA,IAAehpF,IAErC,CAEO,SAASwnB,EAAmBxnB,GACjC,MAAMipF,EAASH,EAAqB9oF,GAC9BkpF,EAAe5rF,aAAaI,QAAQ,GAAGuf,EAAAA,MAAiBgsE,iBAC9D,OAAIC,EACKznF,KAAKsM,MAAMm7E,GAEb,EACT,CAEO,SAAS9/B,EAAmBppD,EAAuBwgB,GACxD,MAAMyoE,EAASH,EAAqB9oF,GACpC1C,aAAaC,QAAQ,GAAG0f,EAAAA,MAAiBgsE,gBAAsBxnF,KAAKC,UAAU8e,GAChF,CAGA,MAAM2oE,EAA+B,GAAGlsE,EAAAA,iBACjC,SAASiuB,EAAgBlnC,EAAuBolF,GAErD,OAD2B9rF,aAAaI,QAAQ,GAAGyrF,KAAgCnlF,MAClColF,CACnD,CAEO,SAAS7+C,EAAavmC,EAAuBxC,GAClD,IAAI6nF,EAAc7nF,EAAMsB,WACH,kBAAVtB,GAAwBA,IACjC6nF,EAAc,IAEhB/rF,aAAaC,QAAQ,GAAG4rF,KAAgCnlF,IAAUqlF,EACpE,CAGA,MAAMC,EAA+B,kCAC9B,SAASt9B,EAAoBhoD,EAAqBxC,GACvD,MAAMvK,EAAM,GAAGqyF,KAAgCtlF,SACjChP,IAAVwM,EAIJlE,aAAaC,QAAQtG,EAAKuK,GAHxBlE,aAAaisF,WAAWtyF,EAI5B,CAEO,SAAS20D,EAAoB5nD,GAClC,OAAO1G,aAAaI,QAAQ,GAAG4rF,KAAgCtlF,IACjE,CAKA,MAAMwlF,EAAsC,yCACrC,SAAS9hE,I,IACKpqB,EAAnB,MAAMmsF,EAAkCD,QAArBlsF,EAAAA,aAAaI,QAAQ8rF,UAArBlsF,IAAAA,EAAAA,EAA6D,GAChF,OAAQmsF,GACN,IAAK,QACL,IAAK,OACH,OAAOA,EACT,QACE,MAAO,OAEb,CAEO,SAASliC,EAAyBjuD,GACvCgE,aAAaC,QAAQisF,EAAqClwF,EAC5D,CAGA,MAAMowF,EAAuC,GAAGzsE,EAAAA,uBACzC,SAAS6sB,EAAkB/uB,GAChC,IAAIsuE,EAActuE,EAAcjY,WAC3BiY,IACHsuE,EAAc,IAGhB/rF,aAAaC,QAAQ,GAAGmsF,kBAAsDL,EAChF,CAEO,SAASt/C,EAAmB/vB,GACjC,IAAIqvE,EAAcrvE,EAAMlX,WACnBkX,IACHqvE,EAAc,IAGhB/rF,aAAaC,QAAQ,GAAGmsF,UAA8CL,EACxE,CAEO,SAAS7/C,EAAuBrtB,GACrC,IAAIktE,EAAcltE,EAAUrZ,WACvBqZ,IACHktE,EAAc,IAGhB/rF,aAAaC,QAAQ,GAAGmsF,cAAkDL,EAC5E,CAEO,SAASjgD,EAAkBggD,GAEhC,MAAuB,SADH9rF,aAAaI,QAAQ,GAAGgsF,oBACLN,CACzC,CAEO,SAAS//C,EAAmB+/C,GAEjC,MAAuB,SADH9rF,aAAaI,QAAQ,GAAGgsF,YACLN,CACzC,CAEO,SAAS9/C,EAAuB8/C,GAErC,MAAuB,SADH9rF,aAAaI,QAAQ,GAAGgsF,gBACLN,CACzC,CAGA,MAAMO,EAAiC,GAAG1sE,EAAAA,kBAKnC,SAAS+Y,EACdhyB,EACAtD,GAEA,MAAM6B,EAASjF,aAAaI,QAAQ,GAAGisF,KAAkC3lF,K,IAEhEtD,EADT,OAAe,OAAX6B,GACmChB,QAA9Bb,EAAAA,EAAOgc,MAAMnb,GAAMgB,IAAWhB,WAA9Bb,IAAAA,EAAAA,EAGF,IACT,CAEO,SAASskB,EAAwEhhB,EAAWxC,GACjGlE,aAAaC,QAAQ,GAAGosF,KAAkC3lF,IAAUxC,EACtE,C,kCC7TO,MAAMtN,EAAU,CACrB01F,UAAW,CACTn2F,UAAW,2BACXo2F,OAAQ,yBACRC,OAAQ,yBACRhhD,OAAQ,8BAEVvY,qBAAsB,CACpBnb,OAAQ,+BAEV0H,OAAQ,CACNitE,cAAe,wCAEjB5tF,UAAW,CACT8F,WAAY,CACVnE,MAAO,sEAETksF,SAAU,CAAC,EACXxc,YAAa,CACX1vE,MAAO,kEAGXgiC,WAAY,CACVvf,OAAQ,CAAC,EACTC,OAAQ,CAAC,EACTuf,OAAQ,CACNsG,eAAgB,8BAChBlN,gBAAiB,+BACjB4K,kBAAmB,kCACnBC,aAAc,4BACdG,aAAc,4BACdnE,qBAAsB,CACpBzoC,aAAc,oCACd4pC,aAAc,oCACdC,aAAc,oCACdd,iBAAkB,gCAClBM,qBAAsB,iCACtBX,0BAA2B,iCAE3Be,cAAe,gCACfC,kBAAmB,iCACnBF,uBAAwB,oCAK9BlkB,MAAO,CACLE,eAAgB,wBAChBktE,eAAgB,4BAChBC,sBAAuB,oCACvB7qE,sBAAuB,sCACvBN,wBAAyB,wCACzBjC,OAAQ,CACNC,eAAgB,iCAIpB5oB,sBAAuB,CACrBs0C,WAAY,0BACZ0hD,YAAa,2BACb1vB,YAAa,2BACbT,QAAS,uBACTQ,UAAW,yBACXH,UAAW,yBACX/iE,oBAAqB,oCACrBlD,oBAAqB,oCACrBK,oBAAqB,qCAEvB0E,SAAU,CACR88D,aAAc,4BACd97D,sBAAuB,sCACvBG,sBAAuB,uCAEzB8vF,gBAAiB,CACfttE,OAAQ,gCACRutE,MAAO,4BAETnxC,MAAO,CACLz+C,QAAS,4BACT0+C,YAAa,sBACbmD,WAAY,4B,yGC5ET,MAAMsN,EAAY5M,IACvB,GAAIz4C,UAAUqJ,WAAa9V,OAAOwyF,gBAChC/lF,UAAUqJ,UAAU28E,UAAUvtC,OACzB,CACL,MAAM12C,EAAKH,SAASqkF,cAAc,YAClClkF,EAAG9E,MAAQw7C,EACX72C,SAAS7H,KAAKmsF,YAAYnkF,GAC1BA,EAAGqpB,SACHxpB,SAASukF,YAAY,QACrBvkF,SAAS7H,KAAKqsF,YAAYrkF,EAC5B,GAoBW0yC,EAAuB,CAAC4xC,EAAmB5oE,EAAyB/hB,KAC/E,MAAMgV,EAAW5D,EAAAA,gBAAgB6D,cAC3BwxC,EAAe,IAAIvxC,gBAAgBF,EAASG,QAElDsxC,EAAa1xB,IAAI,OAAuB/0B,EAAUqT,KAAKqpD,eACvDjW,EAAa1xB,IAAI,KAAqB/0B,EAAUmT,GAAGupD,eACnDjW,EAAa1xB,IAAI41D,EAAWnpF,KAAKC,UAAUsgB,IAI3C,MAAMgpD,EAAetkB,EAAa5jD,WAAWxB,QAAQ,MAAO,OAC5D,OAAOxJ,OAAOmd,SAAS2N,OAAS3N,EAAS2nD,SAAW,IAAMoO,CAAY,EAGjE,SAAS1pD,EAAsBwP,GACpC,OAAIA,EAAM94B,QACD84B,aAAAA,EAAAA,EAAO+5D,OAAO,GAAGC,eAAgBh6D,EAAM5nB,MAAM,IAGtD1J,EAAAA,EAAOC,KAAK,2BACLqxB,EACT,CAEO,SAAS20C,EAAa30C,EAAe94B,EAAgB+yF,GAC1D,OAAOj6D,EAAM54B,UAAU,EAAGF,IAAW+yF,GAAYj6D,EAAM94B,OAASA,EAAS,IAAM,GACjF,CAEO,SAAS2xD,EAA8B1Q,GAE5C,MAAM3lC,GAAOqmD,EAAAA,EAAAA,UAAS1gB,EAAI+xC,YAAc,GAClC53E,GAAKumD,EAAAA,EAAAA,UAAS1gB,EAAI+xC,YAAc,GAWtC,MATc,CACZ13E,OACAF,KACAzF,IAAK,CACH2F,OACAF,MAKN,C,8RClCO,SAASmoE,EAAsB36E,GACpC,MAAM,qBACJg7E,EAAuB,GAAE,wBACzBN,EAA0B,GAAE,qBAC5BD,EAAuB,GAAE,OACzB15E,GACEf,EAEJ,OAAQe,GACN,IAAK,qBACH,MAAO,IAAIgpD,EAAAA,KAAkBixB,MAAyBN,KAA2B2P,EAAAA,MAAmBrgC,EAAAA,MAAqBC,EAAAA,MAAqBC,EAAAA,MAAyBuwB,KAAwBtwB,EAAAA,KACjM,IAAK,OACH,MAAO,IAAIJ,EAAAA,KAAkBixB,MAAyBN,KAA2B2P,EAAAA,MAAmBrgC,EAAAA,MAAqBC,EAAAA,MAAqBC,EAAAA,MAAyBE,EAAAA,MAAoBqwB,KAAwBtwB,EAAAA,KACrN,IAAK,SACH,MAAO,IAAIJ,EAAAA,KAAkBixB,MAAyBN,KAA2B2P,EAAAA,MAAmBrgC,EAAAA,MAAqBC,EAAAA,MAAqBC,EAAAA,MAAyBG,EAAAA,MAAoBowB,KAAwBtwB,EAAAA,KACrN,QACE,MAAO,IAAIJ,EAAAA,KAAkBixB,MAAyBN,KAA2B2P,EAAAA,MAAmBrgC,EAAAA,MAAqBC,EAAAA,MAAqBC,EAAAA,MAAyB9yC,EAAAA,MAAqBqjE,KAAwBtwB,EAAAA,KAE1N,CAEO,SAAS17C,EAAoB7C,GAClC,MAAMnQ,EAAWJ,EAAAA,GAAWivF,eAAetzE,EAAAA,GAAcpL,GACzD,KAAMnQ,aAAoBsb,EAAAA,IACxB,MAAM,IAAInX,MAAM,0BAElB,OAAOnE,CACT,CAEO,SAASgW,EAAkB7F,GAChC,OAAOod,EAAwB1T,EAAAA,GAAY1J,EAC7C,CAEO,SAAS87D,EAAyB97D,GACvC,OAAOod,EAAwB8hD,EAAAA,GAAoBl/D,EACrD,CAEO,SAAS0H,EAAoB1H,GAClC,OAAOod,EAAwBxV,EAAAA,GAAc5H,EAC/C,CAEO,SAAS+C,EAAkB/C,GAChC,OAAOod,EAAwBzoB,EAAAA,GAAYqL,EAC7C,CAEO,SAASiD,EAAkBjD,GAChC,OAAOod,EAAwBla,EAAAA,GAAYlD,EAC7C,CAEO,SAASy8B,EAAsBz8B,GACpC,MAAMnQ,EAAWJ,EAAAA,GAAWivF,eAAerzE,EAAAA,GAAiBrL,GAC5D,KAAMnQ,aAAoB4Z,EAAAA,IACxB,MAAM,IAAIzV,MAAM,6BAElB,OAAOnE,CACT,CAEO,SAAS89B,EAAwB3tB,GACtC,MAAMnQ,EAAWJ,EAAAA,GAAWivF,eAAe9vD,EAAAA,GAAoB5uB,GAC/D,KAAMnQ,aAAoByb,EAAAA,GACxB,MAAM,IAAItX,MAAM,gCAElB,OAAOnE,CACT,CAEO,SAASktE,EAA6B/8D,GAC3C,MAAMnQ,EAAWJ,EAAAA,GAAWivF,eAAe3f,EAAAA,GAAwB/+D,GACnE,KAAMnQ,aAAoByb,EAAAA,GACxB,MAAM,IAAItX,MAAM,+BAElB,OAAOnE,CACT,CAEO,SAAS60B,EAAwB1kB,GACtC,MAAMnQ,EAAWJ,EAAAA,GAAWivF,eAAe9yD,EAAAA,GAAoB5rB,GAC/D,KAAMnQ,aAAoByb,EAAAA,GACxB,MAAM,IAAItX,MAAM,gCAElB,OAAOnE,CACT,CAEO,SAASiG,EAAsBkK,GACpC,MAAMnQ,EAAWJ,EAAAA,GAAWivF,eAAe5zE,EAAAA,GAAgB9K,GAC3D,KAAMnQ,aAAoBgb,EAAAA,IACxB,MAAM,IAAI7W,MAAM,4BAElB,OAAOnE,CACT,CAEO,SAAS+e,EAAuB5O,GACrC,MAAMnQ,EAAWJ,EAAAA,GAAWivF,eAAel0E,EAAAA,GAAkBxK,GAC7D,KAAMnQ,aAAoB4Z,EAAAA,IACxB,MAAM,IAAIzV,MAAM,8BAElB,OAAOnE,CACT,CAEO,SAASutB,EAAwBc,EAAsBle,GAC5D,MAAMnQ,EAAWJ,EAAAA,GAAWivF,eAAexgE,EAAcle,GAEzD,KAAMnQ,aAAoB4Z,EAAAA,IACxB,MAAM,IAAIzV,MAAM,sCAAsCkqB,0BAExD,OAAOruB,CACT,CAEO,SAAS4uE,EAAkCjrE,GAChD,MAAM3D,EAAWJ,EAAAA,GAAWivF,eAAe5f,EAAAA,GAA0BtrE,GACrE,KAAM3D,aAAoByb,EAAAA,GACxB,MAAM,IAAItX,MAAM,sCAElB,OAAOnE,CACT,CAEO,SAAS0qE,EAAoC/mE,GAClDirE,EAAkCjrE,GAAU/C,SAAS,CACnDuE,MAAO,KACP1D,MAAO,IAEX,CAEO,SAASonE,EAAgCllE,GAC9C,MAAM3D,EAAWJ,EAAAA,GAAWivF,eAAe1f,EAAAA,GAAmBxrE,GAC9D,KAAM3D,aAAoB4Z,EAAAA,IACxB,MAAM,IAAIzV,MAAM,+BAElB,OAAOnE,CACT,CAEO,SAAS2qE,EAAmC/vE,EAAa+I,GAC9DklE,EAAgCllE,GAAU/C,SAAS,CACjDyB,QAAS,CACP,CAEE8C,MAAO,KACPa,SAAU,KACVpL,IAAKA,KAIb,CAEO,SAASuY,EAA2Bkb,GACzC,MAAO,OAAOA,GAChB,CAEO,SAASrpB,EAAyBhI,EAA6BqxB,EAAuBvpB,EAAAA,IAC3F,IACE,MAAM2oB,GAAa81D,EAAAA,EAAAA,IAAiBn+E,KAAKsM,MAAM1U,EAAOmI,QACtD,IAAmB,IAAfsoB,EACF,OAAOA,EAEP,MAAM,IAAI0jB,EAAAA,GAAe,kDAE7B,CAAE,MAAO3rC,GAQP,GAPIA,aAAa2rC,EAAAA,GACfhuC,EAAAA,EAAOe,MAAMsB,EAAG,CAAEC,IAAK,gDAAgD4oB,IAAgBlpB,MAAOnI,EAAOmI,QAErGhC,EAAAA,EAAOe,MAAMsB,EAAG,CAAEC,IAAK,6CAA6C4oB,IAAgBlpB,MAAOnI,EAAOmI,QAIhGnI,EAAOmI,MACT,MAAO,CACLA,MAAOnI,EAAOmI,MACdG,OAAQ,SAGZ,MAAME,CACR,CACF,CAEO,SAASkoB,EACd1tB,EACAhD,GAEA,OAAIgD,EAASD,MAAMlF,OAASiK,EAAAA,IAAc9H,EACjCgI,EAAyBhI,GAG3B,CACLmI,MAAOnI,aAAAA,EAAAA,EAAQmI,MAEnB,CAEO,SAASwnF,EAAex8E,GAE7B,OAGK,SACL2+E,GAEA,MAAM3d,EAAc2d,EAA0BzsF,QAC3CrF,QAAQA,GAAWA,EAAOpC,MAAQ8jC,EAAAA,KAClC3gC,KAAKf,GAAWA,EAAOmI,QAE1B,IAAKgsE,EACH,MAAM,IAAIhtE,MAAM,uCAElB,OAAOgtE,EAAY,EACrB,CAdS4d,CADgB/4E,EAAkB7F,GACapQ,MACxD,CAeO,SAAS2sF,EAAkBv8E,GAEhC,OADmBlK,EAAsBkK,GACvB3J,UACpB,C,+FCjPO,SAASi1B,EAA6B14B,GAC3C,MAAMjD,EAAYF,EAAAA,GAAWC,aAAakD,GAC1C,IAAIisF,EAAoC,GAExC,IAAK,MAAMhvF,KAAYF,EAAUC,MAAMD,UACjCE,aAAoB4Z,EAAAA,IAAwB5Z,EAASD,MAAMsC,QAAQ1G,QACrEqzF,EAAiBrlF,KAAK3J,GAEpBA,aAAoByb,EAAAA,GAA0Bzb,EAASD,MAAMoF,OAAiC,eAAxBnF,EAASD,MAAMlF,MACvFm0F,EAAiBrlF,KAAK3J,GAG1B,OAAOgvF,CACT,CAEO,SAASpzD,EAAej4B,GAE7B,MAAMZ,EAAanD,EAAAA,GAAWoD,YAAYW,EAAUV,EAAAA,IACpDF,EAAWnC,SAAS,CAClB9D,SAAU,KAGa2+B,EAA6B14B,GAErCgN,SAAS/P,IACxB,GAAIA,aAAoB4Z,EAAAA,IAA+C,yBAAvB5Z,EAASD,MAAMnF,IAAgC,CAC7F,IAAI,UAAEkqB,IAAcoW,EAAAA,EAAAA,MAEhBpW,IAAc2Z,EAAAA,KAChB3Z,EAAY4Z,EAAAA,IAEd1+B,EAASY,SAAS,CAChByB,QAASrC,EAASD,MAAMsC,QAAQrF,QAAQA,GAAWA,EAAOpC,MAAQkqB,KAEtE,MAAW9kB,aAAoB4Z,EAAAA,GAC7B5Z,EAASY,SAAS,CAChByB,QAAS,KAEFrC,aAAoByb,EAAAA,GAC7Bzb,EAASY,SAAS,CAChBuE,MAAO,GACP5L,KAAM,IAEV,GAEJ,C","sources":["webpack://grafana-lokiexplore-app/./Components/FilterButton.tsx","webpack://grafana-lokiexplore-app/./Components/GrotError.tsx","webpack://grafana-lokiexplore-app/./Components/IndexScene/PatternTag.tsx","webpack://grafana-lokiexplore-app/./Components/IndexScene/PatternControls.tsx","webpack://grafana-lokiexplore-app/./Components/IndexScene/GiveFeedbackButton.tsx","webpack://grafana-lokiexplore-app/./Components/IndexScene/InterceptBanner.tsx","webpack://grafana-lokiexplore-app/./Components/IndexScene/CustomVariableValueSelectors.tsx","webpack://grafana-lokiexplore-app/./Components/IndexScene/LayoutScene.tsx","webpack://grafana-lokiexplore-app/./services/TagValuesProviders.ts","webpack://grafana-lokiexplore-app/./services/TagKeysProviders.ts","webpack://grafana-lokiexplore-app/./services/Mousetrap.ts","webpack://grafana-lokiexplore-app/./services/KeybindingSet.ts","webpack://grafana-lokiexplore-app/./services/keyboardShortcuts.ts","webpack://grafana-lokiexplore-app/./Components/IndexScene/IndexScene.tsx","webpack://grafana-lokiexplore-app/./Components/IndexScene/LineFilterVariablesScene.tsx","webpack://grafana-lokiexplore-app/./Components/IndexScene/ShowLogsButtonScene.tsx","webpack://grafana-lokiexplore-app/./Components/IndexScene/ToolbarScene.tsx","webpack://grafana-lokiexplore-app/./Components/Pages.tsx","webpack://grafana-lokiexplore-app/./Components/ServiceScene/Breakdowns/AddToExplorationButton.tsx","webpack://grafana-lokiexplore-app/./Components/Panels/PanelMenu.tsx","webpack://grafana-lokiexplore-app/./Components/ServiceScene/GoToExploreButton.tsx","webpack://grafana-lokiexplore-app/./Components/ServiceScene/Breakdowns/AddToFiltersButton.tsx","webpack://grafana-lokiexplore-app/./Components/ServiceScene/Breakdowns/BreakdownSearchScene.tsx","webpack://grafana-lokiexplore-app/./Components/ServiceScene/Breakdowns/ByFrameRepeater.tsx","webpack://grafana-lokiexplore-app/./Components/ServiceScene/Breakdowns/EmptyLayoutScene.tsx","webpack://grafana-lokiexplore-app/./Components/ServiceScene/Breakdowns/FieldSelector.tsx","webpack://grafana-lokiexplore-app/./Components/ServiceScene/Breakdowns/FieldValuesBreakdownScene.tsx","webpack://grafana-lokiexplore-app/./Components/ServiceScene/Breakdowns/FieldsAggregatedBreakdownScene.tsx","webpack://grafana-lokiexplore-app/./Components/ServiceScene/Breakdowns/FieldsBreakdownScene.tsx","webpack://grafana-lokiexplore-app/./Components/ServiceScene/Breakdowns/LabelsAggregatedBreakdownScene.tsx","webpack://grafana-lokiexplore-app/./Components/ServiceScene/Breakdowns/LabelBreakdownScene.tsx","webpack://grafana-lokiexplore-app/./Components/ServiceScene/Breakdowns/LabelValuesBreakdownScene.tsx","webpack://grafana-lokiexplore-app/./Components/ServiceScene/Breakdowns/LayoutSwitcher.tsx","webpack://grafana-lokiexplore-app/./Components/ServiceScene/Breakdowns/NoMatchingLabelsScene.tsx","webpack://grafana-lokiexplore-app/./Components/ServiceScene/Breakdowns/Panels/ValueSummary.tsx","webpack://grafana-lokiexplore-app/./Components/ServiceScene/Breakdowns/SearchInput.tsx","webpack://grafana-lokiexplore-app/./Components/ServiceScene/Breakdowns/NumericFilterPopoverScene.tsx","webpack://grafana-lokiexplore-app/./Components/ServiceScene/Breakdowns/SelectLabelActionScene.tsx","webpack://grafana-lokiexplore-app/./Components/ServiceScene/Breakdowns/SortByScene.tsx","webpack://grafana-lokiexplore-app/./Components/ServiceScene/Breakdowns/StatusWrapper.tsx","webpack://grafana-lokiexplore-app/./Components/ServiceScene/Breakdowns/TimeSeriesLimit.ts","webpack://grafana-lokiexplore-app/./services/mixins.ts","webpack://grafana-lokiexplore-app/./Components/ServiceScene/LineFilter/RegexIconButton.tsx","webpack://grafana-lokiexplore-app/./Components/ServiceScene/LineFilter/LineFilterCaseSensitivityButton.tsx","webpack://grafana-lokiexplore-app/./Components/ServiceScene/LineFilter/LineFilterEditor.tsx","webpack://grafana-lokiexplore-app/./Components/ServiceScene/LineFilter/LineFilterScene.tsx","webpack://grafana-lokiexplore-app/./Components/ServiceScene/LogOptionsScene.tsx","webpack://grafana-lokiexplore-app/./Components/Table/Context/TableColumnsContext.tsx","webpack://grafana-lokiexplore-app/./Components/Table/Context/TableCellContext.tsx","webpack://grafana-lokiexplore-app/./Components/Table/Context/TableHeaderContext.tsx","webpack://grafana-lokiexplore-app/./Components/Table/ColumnSelection/LogsColumnSearch.tsx","webpack://grafana-lokiexplore-app/./Components/Table/ColumnSelection/LogsTableEmptyFields.tsx","webpack://grafana-lokiexplore-app/./Components/Table/ColumnSelection/LogsTableNavField.tsx","webpack://grafana-lokiexplore-app/./Components/Table/ColumnSelection/LogsTableActiveFields.tsx","webpack://grafana-lokiexplore-app/./Components/Table/ColumnSelection/LogsTableAvailableFields.tsx","webpack://grafana-lokiexplore-app/./Components/Table/ColumnSelection/LogsTableMultiSelect.tsx","webpack://grafana-lokiexplore-app/./Components/Table/ColumnSelection/ColumnSelectionDrawerWrap.tsx","webpack://grafana-lokiexplore-app/./Components/Table/DefaultCellWrapComponent.tsx","webpack://grafana-lokiexplore-app/./Components/Table/Context/QueryContext.tsx","webpack://grafana-lokiexplore-app/./Components/Table/CellContextMenu.tsx","webpack://grafana-lokiexplore-app/./Components/Table/constants.ts","webpack://grafana-lokiexplore-app/./Components/Table/DefaultPill.tsx","webpack://grafana-lokiexplore-app/./Components/Table/LineActionIcons.tsx","webpack://grafana-lokiexplore-app/./Components/Table/DefaultCellComponent.tsx","webpack://grafana-lokiexplore-app/./Components/Table/LogLinePill.tsx","webpack://grafana-lokiexplore-app/./Components/Table/Scroller.tsx","webpack://grafana-lokiexplore-app/./Components/Table/RawLogLineText.tsx","webpack://grafana-lokiexplore-app/./Components/Table/LogLineCellComponent.tsx","webpack://grafana-lokiexplore-app/./Components/Table/LogsTableHeader.tsx","webpack://grafana-lokiexplore-app/./Components/Table/LogsTableHeaderWrap.tsx","webpack://grafana-lokiexplore-app/./Components/Table/Table.tsx","webpack://grafana-lokiexplore-app/./Components/Table/TableWrap.tsx","webpack://grafana-lokiexplore-app/./Components/Table/TableProvider.tsx","webpack://grafana-lokiexplore-app/./Components/ServiceScene/LogsTableScene.tsx","webpack://grafana-lokiexplore-app/./Components/ServiceScene/LogsListScene.tsx","webpack://grafana-lokiexplore-app/./Components/ServiceScene/CopyLinkButton.tsx","webpack://grafana-lokiexplore-app/./Components/ServiceScene/LogsPanelScene.tsx","webpack://grafana-lokiexplore-app/./services/expressions.ts","webpack://grafana-lokiexplore-app/./Components/ServiceScene/LogsVolumePanel.tsx","webpack://grafana-lokiexplore-app/./Components/ServiceScene/Breakdowns/Patterns/FilterByPatternsButton.tsx","webpack://grafana-lokiexplore-app/./Components/ServiceScene/Breakdowns/Patterns/PatternFieldLabelStatsRow.tsx","webpack://grafana-lokiexplore-app/./Components/ServiceScene/Breakdowns/Patterns/PatternFieldLabelStats.tsx","webpack://grafana-lokiexplore-app/./Components/ServiceScene/Breakdowns/Patterns/PatternNameLabel.tsx","webpack://grafana-lokiexplore-app/./Components/ServiceScene/Breakdowns/Patterns/PatternsLogsSampleScene.tsx","webpack://grafana-lokiexplore-app/./Components/ServiceScene/Breakdowns/Patterns/PatternsTableExpandedRow.tsx","webpack://grafana-lokiexplore-app/./Components/ServiceScene/Breakdowns/Patterns/PatternsViewTableScene.tsx","webpack://grafana-lokiexplore-app/./Components/ServiceScene/Breakdowns/Patterns/PatternsFrameScene.tsx","webpack://grafana-lokiexplore-app/./Components/ServiceScene/Breakdowns/Patterns/PatternsViewTextSearch.tsx","webpack://grafana-lokiexplore-app/./Components/ServiceScene/Breakdowns/Patterns/PatternsNotDetected.tsx","webpack://grafana-lokiexplore-app/./Components/ServiceScene/Breakdowns/Patterns/PatternsBreakdownScene.tsx","webpack://grafana-lokiexplore-app/./Components/ServiceScene/BreakdownViews.ts","webpack://grafana-lokiexplore-app/./Components/IndexScene/ShareButtonScene.tsx","webpack://grafana-lokiexplore-app/./Components/ServiceScene/ActionBarScene.tsx","webpack://grafana-lokiexplore-app/./services/migrations.ts","webpack://grafana-lokiexplore-app/./Components/ServiceScene/ServiceScene.tsx","webpack://grafana-lokiexplore-app/./Components/ServiceSelectionScene/FavoriteServiceHeaderActionScene.tsx","webpack://grafana-lokiexplore-app/./Components/ServiceSelectionScene/SelectServiceButton.tsx","webpack://grafana-lokiexplore-app/./Components/ServiceSelectionScene/ConfigureVolumeError.tsx","webpack://grafana-lokiexplore-app/./Components/ServiceSelectionScene/NoServiceSearchResults.tsx","webpack://grafana-lokiexplore-app/./Components/ServiceSelectionScene/TabPopoverScene.tsx","webpack://grafana-lokiexplore-app/./Components/ServiceSelectionScene/ServiceSelectionTabsScene.tsx","webpack://grafana-lokiexplore-app/./Components/ServiceSelectionScene/NoServiceVolume.tsx","webpack://grafana-lokiexplore-app/./Components/ServiceSelectionScene/AddLabelToFiltersHeaderActionScene.tsx","webpack://grafana-lokiexplore-app/./Components/ServiceSelectionScene/ServiceSelectionScene.tsx","webpack://grafana-lokiexplore-app/./Components/Table/LogsHeaderActions.tsx","webpack://grafana-lokiexplore-app/./services/CustomConstantVariable.ts","webpack://grafana-lokiexplore-app/./services/analytics.ts","webpack://grafana-lokiexplore-app/./services/comparison.ts","webpack://grafana-lokiexplore-app/./services/logql.ts","webpack://grafana-lokiexplore-app/./services/combineResponses.ts","webpack://grafana-lokiexplore-app/./services/shardQuerySplitting.ts","webpack://grafana-lokiexplore-app/./services/lokiQuery.ts","webpack://grafana-lokiexplore-app/./services/datasource.ts","webpack://grafana-lokiexplore-app/./services/favorites.ts","webpack://grafana-lokiexplore-app/./services/fields.ts","webpack://grafana-lokiexplore-app/./services/filters.ts","webpack://grafana-lokiexplore-app/./services/labels.ts","webpack://grafana-lokiexplore-app/./services/levels.ts","webpack://grafana-lokiexplore-app/./services/logger.ts","webpack://grafana-lokiexplore-app/./services/logsFrame.ts","webpack://grafana-lokiexplore-app/./services/metadata.ts","webpack://grafana-lokiexplore-app/./services/narrowing.ts","webpack://grafana-lokiexplore-app/./services/navigate.ts","webpack://grafana-lokiexplore-app/./services/LogsSceneQueryRunner.ts","webpack://grafana-lokiexplore-app/./services/panel.ts","webpack://grafana-lokiexplore-app/./services/plugin.ts","webpack://grafana-lokiexplore-app/./services/query.ts","webpack://grafana-lokiexplore-app/./services/routing.ts","webpack://grafana-lokiexplore-app/./services/scenes.ts","webpack://grafana-lokiexplore-app/./services/search.ts","webpack://grafana-lokiexplore-app/./services/sorting.ts","webpack://grafana-lokiexplore-app/./services/store.ts","webpack://grafana-lokiexplore-app/./services/testIds.ts","webpack://grafana-lokiexplore-app/./services/text.ts","webpack://grafana-lokiexplore-app/./services/variableGetters.ts","webpack://grafana-lokiexplore-app/./services/variableHelpers.ts"],"sourcesContent":["import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, useStyles2 } from '@grafana/ui';\nimport React from 'react';\nimport { testIds } from 'services/testIds';\n\ntype Props = {\n  onInclude: () => void;\n  onClear: () => void;\n  isIncluded: boolean;\n  onExclude: () => void;\n  isExcluded: boolean;\n  buttonFill: 'solid' | 'outline' | 'text';\n  titles?: {\n    include: string;\n    exclude: string;\n  };\n};\n\nexport const FilterButton = (props: Props) => {\n  const { isExcluded, isIncluded, onInclude, onExclude, onClear, titles, buttonFill } = props;\n  const styles = useStyles2(getStyles, isIncluded, isExcluded);\n  return (\n    <div className={styles.container}>\n      <Button\n        variant={isIncluded ? 'primary' : 'secondary'}\n        fill={buttonFill}\n        size=\"sm\"\n        aria-selected={isIncluded}\n        className={styles.includeButton}\n        onClick={isIncluded ? onClear : onInclude}\n        data-testid={testIds.exploreServiceDetails.buttonFilterInclude}\n        title={titles?.include}\n      >\n        Include\n      </Button>\n      <Button\n        variant={isExcluded ? 'primary' : 'secondary'}\n        fill={buttonFill}\n        size=\"sm\"\n        aria-selected={isExcluded}\n        className={styles.excludeButton}\n        onClick={isExcluded ? onClear : onExclude}\n        title={titles?.exclude}\n        data-testid={testIds.exploreServiceDetails.buttonFilterExclude}\n      >\n        Exclude\n      </Button>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2, isIncluded: boolean, isExcluded: boolean) => {\n  return {\n    container: css({\n      display: 'flex',\n      justifyContent: 'center',\n    }),\n    includeButton: css({\n      borderRadius: 0,\n      borderRight: isIncluded ? undefined : 'none',\n    }),\n    excludeButton: css({\n      borderRadius: `0 ${theme.shape.radius.default} ${theme.shape.radius.default} 0`,\n      borderLeft: isExcluded ? undefined : 'none',\n    }),\n  };\n};\n","import React from 'react';\n\nimport { css } from '@emotion/css';\nimport SVG from 'react-inlinesvg';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2, useTheme2, Text } from '@grafana/ui';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    graphicContainer: css({\n      display: 'flex',\n      justifyContent: 'center',\n      margin: '0 auto',\n    }),\n    graphic: css({ width: '200px', height: '120px', padding: theme.spacing(1) }),\n    text: css({\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n    }),\n    wrap: css({\n      margin: '0 auto',\n    }),\n  };\n};\n\ntype Props = {\n  children?: React.ReactNode;\n};\n\nexport const GrotError = ({ children }: React.PropsWithChildren<Props>) => {\n  const styles = useStyles2(getStyles);\n  const theme = useTheme2();\n  return (\n    <div className={styles.wrap}>\n      <div className={styles.graphicContainer}>\n        <SVG\n          className={styles.graphic}\n          src={\n            theme.isDark\n              ? `/public/plugins/grafana-lokiexplore-app/img/grot_err.svg`\n              : `/public/plugins/grafana-lokiexplore-app/img/grot_err_light.svg`\n          }\n        />\n      </div>\n      <div className={styles.text}>\n        <Text textAlignment=\"center\" color=\"primary\" element=\"span\">\n          {children ? children : 'An error occurred'}\n        </Text>\n      </div>\n    </div>\n  );\n};\n","import { css } from '@emotion/css';\nimport { Button, Icon, Tag, useStyles2 } from '@grafana/ui';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport React, { useState } from 'react';\nimport { testIds } from 'services/testIds';\n\ninterface Props {\n  onRemove(): void;\n  pattern: string;\n  size?: PatternSize;\n}\n\ntype PatternSize = 'sm' | 'lg';\n\nexport const PatternTag = ({ onRemove, pattern, size = 'lg' }: Props) => {\n  const styles = useStyles2(getStyles);\n  const [expanded, setExpanded] = useState(false);\n  return (\n    <div className={styles.pattern} onClick={() => setExpanded(!expanded)} onMouseLeave={() => setExpanded(false)}>\n      <Tag\n        title={pattern}\n        key={pattern}\n        name={expanded ? pattern : getPatternPreview(pattern, size)}\n        className={styles.tag}\n      />\n      <Button\n        aria-label=\"Remove pattern\"\n        data-testid={testIds.exploreServiceDetails.buttonRemovePattern}\n        variant=\"secondary\"\n        size=\"sm\"\n        className={styles.removeButton}\n        onClick={onRemove}\n      >\n        <Icon name=\"times\" />\n      </Button>\n    </div>\n  );\n};\n\nconst PREVIEW_WIDTH: Record<PatternSize, number> = {\n  sm: 50,\n  lg: Math.round(window.innerWidth / 8),\n};\n\nfunction getPatternPreview(pattern: string, size: PatternSize) {\n  const length = pattern.length;\n  if (length < PREVIEW_WIDTH[size]) {\n    return pattern;\n  }\n\n  const substringLength = Math.round(PREVIEW_WIDTH[size] * 0.4);\n\n  return `${pattern.substring(0, substringLength)} … ${pattern.substring(length - substringLength)}`;\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    pattern: css({\n      display: 'flex',\n      fontFamily: 'monospace',\n      gap: theme.spacing(0.25),\n      cursor: 'pointer',\n      overflow: 'hidden',\n    }),\n    tag: css({\n      borderTopRightRadius: 0,\n      borderBottomRightRadius: 0,\n      backgroundColor: theme.colors.secondary.main,\n      border: `solid 1px ${theme.colors.secondary.border}`,\n      color: theme.colors.secondary.text,\n      boxSizing: 'border-box',\n      padding: theme.spacing(0.25, 0.75),\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n    }),\n    removeButton: css({\n      paddingLeft: 2.5,\n      paddingRight: 2.5,\n    }),\n  };\n};\n","import React from 'react';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { AppliedPattern } from './IndexScene';\nimport { PatternTag } from './PatternTag';\nimport { css } from '@emotion/css';\nimport { useStyles2, Text } from '@grafana/ui';\nimport { USER_EVENTS_ACTIONS, USER_EVENTS_PAGES, reportAppInteraction } from 'services/analytics';\nimport { testIds } from 'services/testIds';\n\ntype Props = {\n  patterns: AppliedPattern[] | undefined;\n  onRemove: (patterns: AppliedPattern[]) => void;\n};\nexport const PatternControls = ({ patterns, onRemove }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  if (!patterns || patterns.length === 0) {\n    return null;\n  }\n\n  const includePatterns = patterns.filter((pattern) => pattern.type === 'include');\n  const excludePatterns = patterns.filter((pattern) => pattern.type !== 'include');\n\n  const onRemovePattern = (pattern: AppliedPattern) => {\n    onRemove(patterns.filter((pat) => pat !== pattern));\n    reportAppInteraction(USER_EVENTS_PAGES.service_details, USER_EVENTS_ACTIONS.service_details.pattern_removed, {\n      includePatternsLength: includePatterns.length - (pattern?.type === 'include' ? 1 : 0),\n      excludePatternsLength: excludePatterns.length - (pattern?.type !== 'include' ? 1 : 0),\n      type: pattern.type,\n    });\n  };\n\n  return (\n    <div>\n      {includePatterns.length > 0 && (\n        <div className={styles.patternsContainer}>\n          <Text variant=\"bodySmall\" weight=\"bold\" data-testid={testIds.patterns.buttonIncludedPattern}>\n            Included pattern{patterns.length > 1 ? 's' : ''}\n          </Text>\n          <div className={styles.patterns}>\n            {includePatterns.map((p) => (\n              <PatternTag key={p.pattern} pattern={p.pattern} size=\"lg\" onRemove={() => onRemovePattern(p)} />\n            ))}\n          </div>\n        </div>\n      )}\n      {excludePatterns.length > 0 && (\n        <div className={styles.patternsContainer}>\n          <Text variant=\"bodySmall\" weight=\"bold\" data-testid={testIds.patterns.buttonExcludedPattern}>\n            Excluded pattern{excludePatterns.length > 1 ? 's' : ''}:\n          </Text>\n          <div className={styles.patterns}>\n            {excludePatterns.map((p) => (\n              <PatternTag\n                key={p.pattern}\n                pattern={p.pattern}\n                size={excludePatterns.length > 1 ? 'sm' : 'lg'}\n                onRemove={() => onRemovePattern(p)}\n              />\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    patternsContainer: css({\n      overflow: 'hidden',\n    }),\n    patterns: css({\n      display: 'flex',\n      gap: theme.spacing(1),\n      alignItems: 'center',\n      flexWrap: 'wrap',\n    }),\n  };\n}\n","import React from 'react';\nimport { Icon, useStyles2 } from '@grafana/ui';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { css } from '@emotion/css';\n\nexport const GiveFeedbackButton = () => {\n  const styles = useStyles2(getStyles);\n  return (\n    <div className={styles.wrapper}>\n      <a\n        href=\"https://forms.gle/1sYWCTPvD72T1dPH9\"\n        className={styles.feedback}\n        title=\"Share your thoughts about Logs in Grafana.\"\n        target=\"_blank\"\n        rel=\"noreferrer noopener\"\n      >\n        <Icon name=\"comment-alt-message\" /> Give feedback\n      </a>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    wrapper: css({\n      display: 'flex',\n      marginLeft: 'auto',\n      gap: theme.spacing(1),\n      position: 'relative',\n      top: theme.spacing(-1),\n    }),\n    feedback: css({\n      alignSelf: 'center',\n      color: theme.colors.text.secondary,\n      fontSize: theme.typography.bodySmall.fontSize,\n      '&:hover': {\n        color: theme.colors.text.link,\n      },\n    }),\n  };\n};\n","import { Alert, useStyles2 } from '@grafana/ui';\nimport React from 'react';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { css } from '@emotion/css';\n\nexport function InterceptBanner(props: { onRemove: () => void }) {\n  const styles = useStyles2(getStyles);\n  return (\n    <>\n      <Alert className={styles.alert} severity={'info'} title={'Welcome to Explore Logs!'} onRemove={props.onRemove}>\n        <div>\n          Check out our{' '}\n          <a\n            className=\"external-link\"\n            target=\"_blank\"\n            href=\"https://grafana.com/docs/grafana-cloud/visualizations/simplified-exploration/logs/\"\n            rel=\"noreferrer\"\n          >\n            Get started doc\n          </a>\n          , or see{' '}\n          <a\n            className=\"external-link\"\n            target=\"_blank\"\n            href=\"https://github.com/grafana/explore-logs/releases\"\n            rel=\"noreferrer\"\n          >\n            recent changes\n          </a>\n          .<br />\n          Help us shape the future of the app.{' '}\n          <a className=\"external-link\" target=\"_blank\" href=\"https://forms.gle/1sYWCTPvD72T1dPH9\" rel=\"noreferrer\">\n            Send us feedback\n          </a>{' '}\n          or engage with us on{' '}\n          <a\n            className=\"external-link\"\n            target=\"_blank\"\n            href=\"https://github.com/grafana/explore-logs/?tab=readme-ov-file#explore-logs\"\n            rel=\"noreferrer\"\n          >\n            GitHub\n          </a>\n          .\n        </div>\n      </Alert>\n    </>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    alert: css({\n      flex: 'none',\n    }),\n  };\n}\n","import {\n  ControlsLayout,\n  SceneComponentProps,\n  sceneGraph,\n  SceneObjectBase,\n  SceneObjectState,\n  VariableValueSelectWrapper,\n} from '@grafana/scenes';\nimport React from 'react';\n\nexport interface VariableValueSelectorsState extends SceneObjectState {\n  layout?: ControlsLayout;\n  include?: string[];\n  exclude?: string[];\n}\n\nexport class CustomVariableValueSelectors extends SceneObjectBase<VariableValueSelectorsState> {\n  public static Component = CustomVariableValueSelectorsRenderer;\n}\n\nfunction CustomVariableValueSelectorsRenderer({ model }: SceneComponentProps<CustomVariableValueSelectors>) {\n  const variablesSetState = sceneGraph.getVariables(model).useState();\n  let variables = variablesSetState.variables;\n\n  if (model.state.include?.length) {\n    variables = variablesSetState.variables.filter((variable) =>\n      model.state.include?.includes(variable.state.name ?? '')\n    );\n  }\n  if (model.state.exclude?.length) {\n    variables = variablesSetState.variables.filter(\n      (variable) => !model.state.exclude?.includes(variable.state.name ?? '')\n    );\n  }\n\n  return (\n    <>\n      {variables.map((variable) => (\n        <VariableValueSelectWrapper key={variable.state.key} variable={variable} layout={model.state.layout} />\n      ))}\n    </>\n  );\n}\n","import { GrafanaTheme2 } from '@grafana/data';\nimport { SceneComponentProps, SceneFlexLayout, sceneGraph, SceneObjectBase, SceneObjectState } from '@grafana/scenes';\nimport { useStyles2 } from '@grafana/ui';\nimport React from 'react';\nimport { PatternControls } from './PatternControls';\nimport { AppliedPattern, IndexScene, IndexSceneState } from './IndexScene';\nimport { css, cx } from '@emotion/css';\nimport { GiveFeedbackButton } from './GiveFeedbackButton';\nimport { InterceptBanner } from './InterceptBanner';\n\nimport { PLUGIN_ID } from '../../services/plugin';\nimport { CustomVariableValueSelectors } from './CustomVariableValueSelectors';\nimport { logger } from '../../services/logger';\nimport { LineFilterVariablesScene } from './LineFilterVariablesScene';\n\ninterface LayoutSceneState extends SceneObjectState {\n  interceptDismissed: boolean;\n  lineFilterRenderer?: LineFilterVariablesScene;\n}\n\nconst interceptBannerStorageKey = `${PLUGIN_ID}.interceptBannerStorageKey`;\n\nexport const CONTROLS_VARS_FIRST_ROW_KEY = 'vars-row__datasource-labels-timepicker-button';\nexport const CONTROLS_VARS_METADATA_ROW_KEY = 'vars-metadata';\nexport const CONTROLS_VARS_FIELDS_ELSE_KEY = 'vars-all-else';\nexport const CONTROLS_VARS_TIMEPICKER = 'vars-timepicker';\nexport const CONTROLS_VARS_REFRESH = 'vars-refresh';\nexport const CONTROLS_VARS_TOOLBAR = 'vars-toolbar';\n\nexport class LayoutScene extends SceneObjectBase<LayoutSceneState> {\n  constructor(state: Partial<LayoutSceneState>) {\n    super({\n      ...state,\n      interceptDismissed: !!localStorage.getItem(interceptBannerStorageKey),\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  static Component = ({ model }: SceneComponentProps<LayoutScene>) => {\n    const indexScene = sceneGraph.getAncestor(model, IndexScene);\n    const { controls, contentScene, patterns } = indexScene.useState();\n    const { interceptDismissed, lineFilterRenderer } = model.useState();\n\n    if (!contentScene) {\n      logger.warn('content scene not defined');\n      return null;\n    }\n\n    const styles = useStyles2(getStyles);\n    return (\n      <div className={styles.bodyContainer}>\n        <div className={styles.container}>\n          {!interceptDismissed && (\n            <InterceptBanner\n              onRemove={() => {\n                model.dismiss();\n              }}\n            />\n          )}\n          <div className={styles.controlsContainer}>\n            <>\n              {/* First row - datasource, timepicker, refresh, labels, button */}\n              {controls && (\n                <div className={styles.controlsFirstRowContainer}>\n                  <div className={styles.filtersWrap}>\n                    <div className={cx(styles.filters, styles.firstRowWrapper)}>\n                      {controls.map((control) => {\n                        return control instanceof SceneFlexLayout ? (\n                          <control.Component key={control.state.key} model={control} />\n                        ) : null;\n                      })}\n                    </div>\n                  </div>\n                  <div className={styles.controlsWrapper}>\n                    <GiveFeedbackButton />\n                    <div className={styles.controls}>\n                      {controls.map((control) => {\n                        return !(control instanceof CustomVariableValueSelectors) &&\n                          !(control instanceof SceneFlexLayout) ? (\n                          <control.Component key={control.state.key} model={control} />\n                        ) : null;\n                      })}\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              {/* Second row - Metadata  */}\n              <div className={styles.controlsRowContainer}>\n                {controls &&\n                  controls.map((control) => {\n                    return control.state.key === CONTROLS_VARS_METADATA_ROW_KEY ? (\n                      <div className={styles.filtersWrap}>\n                        <div className={styles.filters}>\n                          <control.Component key={control.state.key} model={control} />\n                        </div>\n                      </div>\n                    ) : null;\n                  })}\n              </div>\n\n              {/* 3rd row - Patterns */}\n              <div className={styles.controlsRowContainer}>\n                <PatternControls\n                  patterns={patterns}\n                  onRemove={(patterns: AppliedPattern[]) => model.parent?.setState({ patterns } as IndexSceneState)}\n                />\n              </div>\n\n              {/* 4th row - line filters */}\n              <div className={styles.controlsRowContainer}>\n                {lineFilterRenderer && <lineFilterRenderer.Component model={lineFilterRenderer} />}\n              </div>\n\n              {/* 5th row - Fields  */}\n              <div className={styles.controlsRowContainer}>\n                {controls && (\n                  <div className={styles.filtersWrap}>\n                    <div className={styles.filters}>\n                      {controls.map((control) => {\n                        return control.state.key === CONTROLS_VARS_FIELDS_ELSE_KEY ? (\n                          <control.Component key={control.state.key} model={control} />\n                        ) : null;\n                      })}\n                    </div>\n                  </div>\n                )}\n              </div>\n            </>\n          </div>\n\n          {/* Final \"row\" - body */}\n          <div className={styles.body}>{contentScene && <contentScene.Component model={contentScene} />}</div>\n        </div>\n      </div>\n    );\n  };\n\n  public onActivate() {\n    this.setState({\n      lineFilterRenderer: new LineFilterVariablesScene({}),\n    });\n  }\n\n  public dismiss() {\n    this.setState({\n      interceptDismissed: true,\n    });\n    localStorage.setItem(interceptBannerStorageKey, 'true');\n  }\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    firstRowWrapper: css({\n      '& > div > div': {\n        gap: '16px',\n        label: 'first-row-wrapper',\n\n        [theme.breakpoints.down('lg')]: {\n          flexDirection: 'column',\n        },\n\n        // The datasource variable width should be auto, not fill the section\n        '& > div:first-child': {\n          flex: '1 0 auto',\n          display: 'inline-block',\n        },\n      },\n    }),\n    bodyContainer: css({\n      flexGrow: 1,\n      display: 'flex',\n      minHeight: '100%',\n      flexDirection: 'column',\n    }),\n    container: css({\n      flexGrow: 1,\n      display: 'flex',\n      minHeight: '100%',\n      flexDirection: 'column',\n      padding: theme.spacing(2),\n      maxWidth: '100vw',\n    }),\n    body: css({\n      flexGrow: 1,\n      display: 'flex',\n      flexDirection: 'column',\n      gap: theme.spacing(1),\n    }),\n    controlsFirstRowContainer: css({\n      label: 'controls-first-row',\n      display: 'flex',\n      gap: theme.spacing(2),\n      justifyContent: 'space-between',\n      alignItems: 'flex-start',\n    }),\n    controlsRowContainer: css({\n      '&:empty': {\n        display: 'none',\n      },\n      label: 'controls-row',\n      display: 'flex',\n      // @todo add custom renderers for all variables, this currently results in 2 \"empty\" rows that always take up space\n      gap: theme.spacing(1),\n      justifyContent: 'space-between',\n      alignItems: 'flex-start',\n      paddingLeft: theme.spacing(2),\n    }),\n    controlsContainer: css({\n      label: 'controlsContainer',\n      display: 'flex',\n      flexDirection: 'column',\n      gap: theme.spacing(1),\n    }),\n    filters: css({\n      label: 'filters',\n      display: 'flex',\n    }),\n    filtersWrap: css({\n      label: 'filtersWrap',\n      display: 'flex',\n      gap: theme.spacing(2),\n      width: 'calc(100% - 450)',\n      flexWrap: 'wrap',\n      alignItems: 'flex-end',\n      '& + div[data-testid=\"data-testid Dashboard template variables submenu Label Filters\"]:empty': {\n        visibility: 'hidden',\n      },\n\n      //@todo not like this\n      // The filter variables container: i.e. services, filters\n      '& > div &:first-child': {\n        // The wrapper of each filter\n        '& > div': {\n          // The actual inputs container\n          '& > div': {\n            flexWrap: 'wrap',\n            // wrapper around all inputs\n            '& > div': {\n              maxWidth: '380px',\n\n              // Wrapper around each input: i.e. label name, binary operator, value\n              '& > div': {\n                // These inputs need to flex, otherwise the value takes all of available space and they look broken\n                flex: '1 0 auto',\n\n                // The value input needs to shrink when the parent component is at max width\n                '&:nth-child(3)': {\n                  flex: '0 1 auto',\n                },\n              },\n            },\n          },\n        },\n      },\n      // the `service_name` filter is a special case where we want to hide the operator\n      '[data-testid=\"AdHocFilter-service_name\"]': {\n        'div[class*=\"input-wrapper\"]:first-child': {\n          display: 'none',\n        },\n        'div[class*=\"input-wrapper\"]:nth-child(2)': {\n          marginLeft: 0,\n        },\n      },\n\n      ['div >[title=\"Add filter\"]']: {\n        border: 0,\n        display: 'none',\n        width: 0,\n        padding: 0,\n        margin: 0,\n      },\n    }),\n    controlsWrapper: css({\n      label: 'controlsWrapper',\n      display: 'flex',\n      flexDirection: 'column',\n      marginTop: theme.spacing(0.375),\n    }),\n    controls: css({\n      display: 'flex',\n      gap: theme.spacing(1),\n    }),\n    feedback: css({\n      textAlign: 'end',\n    }),\n    rotateIcon: css({\n      svg: { transform: 'rotate(180deg)' },\n    }),\n  };\n}\n","import { AdHocFiltersVariable, SceneObject } from '@grafana/scenes';\nimport { DataSourceGetTagValuesOptions, GetTagResponse, MetricFindValue, ScopedVars, TimeRange } from '@grafana/data';\nimport { BackendSrvRequest, DataSourceWithBackend, getDataSourceSrv } from '@grafana/runtime';\nimport { AdHocFilterWithLabels, getDataSource } from './scenes';\nimport { logger } from './logger';\nimport { LokiDatasource, LokiQuery } from './lokiQuery';\nimport { getDataSourceVariable, getValueFromFieldsFilter } from './variableGetters';\nimport { VAR_FIELDS, VAR_LEVELS, VAR_METADATA } from './variables';\nimport { isArray } from 'lodash';\nimport { joinTagFilters } from './query';\nimport { FilterOp } from './filterTypes';\nimport { getFavoriteLabelValuesFromStorage } from './store';\n\ntype FetchDetectedLabelValuesOptions = {\n  expr?: string;\n  timeRange?: TimeRange;\n  limit?: number;\n  scopedVars?: ScopedVars;\n  throwError: boolean;\n};\n\ninterface LokiLanguageProviderWithDetectedLabelValues {\n  fetchDetectedLabelValues: (\n    labelName: string,\n    queryOptions?: FetchDetectedLabelValuesOptions,\n    requestOptions?: Partial<BackendSrvRequest>\n  ) => Promise<string[] | Error>;\n}\n\nexport const getDetectedFieldValuesTagValuesProvider = async (\n  filter: AdHocFilterWithLabels,\n  expr: string,\n  sceneRef: SceneObject,\n  timeRange: TimeRange,\n  variable: typeof VAR_FIELDS | typeof VAR_METADATA | typeof VAR_LEVELS\n): Promise<{\n  replace?: boolean;\n  values: MetricFindValue[];\n}> => {\n  const datasourceUnknownType = await getDataSourceSrv().get(getDataSource(sceneRef));\n  // Narrow the DataSourceApi type to DataSourceWithBackend\n  if (!(datasourceUnknownType instanceof DataSourceWithBackend)) {\n    logger.error(new Error('getTagValuesProvider: Invalid datasource!'));\n    throw new Error('Invalid datasource!');\n  }\n\n  // Assert datasource is Loki\n  const lokiDatasource = datasourceUnknownType as LokiDatasource;\n  // Assert language provider is LokiLanguageProvider\n  const languageProvider = lokiDatasource.languageProvider as LokiLanguageProviderWithDetectedLabelValues;\n\n  let values: MetricFindValue[] = [];\n\n  if (languageProvider && languageProvider.fetchDetectedLabelValues) {\n    const options: FetchDetectedLabelValuesOptions = {\n      expr,\n      limit: 1000,\n      timeRange,\n      throwError: true,\n    };\n\n    const requestOptions: Partial<BackendSrvRequest> = {\n      showErrorAlert: false,\n    };\n\n    try {\n      let results = await languageProvider.fetchDetectedLabelValues(filter.key, options, requestOptions);\n      // If the variable has a parser in the value, make sure we extract it and carry it over, this assumes the parser for the currently selected value is the same as any value in the response.\n      // @todo is the parser always the same for the currently selected values and the results from detected_field/.../values?\n      if (results && isArray(results)) {\n        if (variable === VAR_FIELDS) {\n          const valueDecoded = getValueFromFieldsFilter(filter, variable);\n          return {\n            replace: true,\n            values: results.map((v) => ({\n              text: v,\n              value: JSON.stringify({\n                value: v,\n                parser: valueDecoded.parser,\n              }),\n            })),\n          };\n        } else {\n          values = results.map((r) => ({ text: r }));\n        }\n      } else {\n        values = [];\n      }\n    } catch (e) {\n      logger.error(e, {\n        msg: 'getDetectedFieldValuesTagValuesProvider: loki missing detected_field/.../values endpoint. Upgrade to Loki 3.3.0 or higher.',\n      });\n      values = [];\n    }\n  } else {\n    logger.warn(\n      'getDetectedFieldValuesTagValuesProvider: fetchDetectedLabelValues is not defined in Loki datasource. Upgrade to Grafana 11.4 or higher.'\n    );\n    values = [];\n  }\n\n  return { replace: true, values };\n};\n\nexport async function getLabelsTagValuesProvider(\n  variable: AdHocFiltersVariable,\n  filter: AdHocFilterWithLabels\n): Promise<{\n  replace?: boolean;\n  values: GetTagResponse | MetricFindValue[];\n}> {\n  const datasource_ = await getDataSourceSrv().get(getDataSource(variable));\n  if (!(datasource_ instanceof DataSourceWithBackend)) {\n    logger.error(new Error('getTagValuesProvider: Invalid datasource!'));\n    throw new Error('Invalid datasource!');\n  }\n  const datasource = datasource_ as LokiDatasource;\n\n  if (datasource && datasource.getTagValues) {\n    // Filter out other values for this key so users can include other values for this label\n    const filters = joinTagFilters(variable).filter((f) => !(filter.operator === '=' && f.key === filter.key));\n\n    const options: DataSourceGetTagValuesOptions<LokiQuery> = {\n      key: filter.key,\n      filters,\n    };\n    let results = await datasource.getTagValues(options);\n\n    if (isArray(results)) {\n      results = results.filter((result) => {\n        // Filter out values that we already have added as filters\n        return !variable.state.filters\n          .filter((f) => f.key === filter.key)\n          .some((f) => {\n            // If true, the results should be filtered out\n            return f.operator === FilterOp.Equal && f.value === result.text;\n          });\n      });\n      const favoriteValuesArray = getFavoriteLabelValuesFromStorage(\n        getDataSourceVariable(variable).getValue()?.toString(),\n        filter.key\n      );\n      const favoriteValuesSet = new Set(favoriteValuesArray);\n      if (favoriteValuesArray.length) {\n        results.sort((a, b) => {\n          return (favoriteValuesSet.has(b.text) ? 1 : -1) - (favoriteValuesSet.has(a.text) ? 1 : -1);\n        });\n      }\n    }\n\n    return { replace: true, values: results };\n  } else {\n    logger.error(new Error('getTagValuesProvider: missing or invalid datasource!'));\n    return { replace: true, values: [] };\n  }\n}\n","import { logger } from './logger';\nimport { LokiDatasource, LokiQuery } from './lokiQuery';\nimport { DataSourceGetTagKeysOptions, GetTagResponse, MetricFindValue } from '@grafana/data';\nimport { AdHocFiltersVariable } from '@grafana/scenes';\nimport { DataSourceWithBackend, getDataSourceSrv } from '@grafana/runtime';\nimport { getDataSource } from './scenes';\nimport { LABELS_TO_REMOVE } from './filters';\nimport { joinTagFilters } from './query';\n\nexport async function getLabelsTagKeysProvider(variable: AdHocFiltersVariable): Promise<{\n  replace?: boolean;\n  values: GetTagResponse | MetricFindValue[];\n}> {\n  const datasource_ = await getDataSourceSrv().get(getDataSource(variable));\n  if (!(datasource_ instanceof DataSourceWithBackend)) {\n    logger.error(new Error('getTagKeysProvider: Invalid datasource!'));\n    throw new Error('Invalid datasource!');\n  }\n  const datasource = datasource_ as LokiDatasource;\n\n  if (datasource && datasource.getTagKeys) {\n    const filters = joinTagFilters(variable);\n\n    const options: DataSourceGetTagKeysOptions<LokiQuery> = {\n      filters,\n    };\n\n    const tagKeys = await datasource.getTagKeys(options);\n    const result: MetricFindValue[] = Array.isArray(tagKeys) ? tagKeys : [];\n    const filteredResult = result.filter((key) => !LABELS_TO_REMOVE.includes(key.text));\n\n    return { replace: true, values: filteredResult };\n  } else {\n    logger.error(new Error('getTagKeysProvider: missing or invalid datasource!'));\n    return { replace: true, values: [] };\n  }\n}\n","/**\n * Originally from https://github.com/ccampbell/mousetrap\n *\n * Copyright 2012-2017 Craig Campbell\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * Mousetrap is a simple keyboard shortcut library for Javascript with\n * no external dependencies\n *\n * @version 1.6.5\n * @url craig.is/killing/mice\n */\n\ninterface ExtendedKeyboardEvent extends KeyboardEvent {\n  returnValue: boolean; // IE returnValue\n}\n\ntype MousetrapCallback = (e: ExtendedKeyboardEvent, combo: string) => boolean | void;\n\ninterface KeyInfo {\n  key: string;\n  modifiers: string[];\n  action: string;\n}\n\ninterface CallbackInfo {\n  /**\n   * Modifiers (such as `ctrl`) involved in this binding\n   */\n  modifiers: string[];\n\n  /**\n   * A single key press binding, such as `t` (for `t v`) or  `ctrl + z`\n   */\n  combo: string;\n\n  /**\n   * If this binding is a part of a sequence (`t v`, but not `ctrl + z`), this is the full sequence\n   */\n  seq?: string;\n\n  /**\n   * The event type, such as keydown, keyup, or keypress\n   */\n  action: string;\n  level: number | undefined;\n  callback: MousetrapCallback;\n}\n\n/**\n * mapping of special keycodes to their corresponding keys\n *\n * everything in this dictionary cannot use keypress events\n * so it has to be here to map to the correct keycodes for\n * keyup/keydown events\n */\nlet MAP: Record<string, string> = {\n  8: 'backspace',\n  9: 'tab',\n  13: 'enter',\n  16: 'shift',\n  17: 'ctrl',\n  18: 'alt',\n  20: 'capslock',\n  27: 'esc',\n  32: 'space',\n  33: 'pageup',\n  34: 'pagedown',\n  35: 'end',\n  36: 'home',\n  37: 'left',\n  38: 'up',\n  39: 'right',\n  40: 'down',\n  45: 'ins',\n  46: 'del',\n  91: 'meta',\n  93: 'meta',\n  224: 'meta',\n};\n\n/**\n * mapping for special characters so they can support\n *\n * this dictionary is only used incase you want to bind a\n * keyup or keydown event to one of these keys\n */\nlet KEYCODE_MAP: Record<string, string> = {\n  106: '*',\n  107: '+',\n  109: '-',\n  110: '.',\n  111: '/',\n  186: ';',\n  187: '=',\n  188: ',',\n  189: '-',\n  190: '.',\n  191: '/',\n  192: '`',\n  219: '[',\n  220: '\\\\',\n  221: ']',\n  222: \"'\",\n};\n\n/**\n * this is a mapping of keys that require shift on a US keypad\n * back to the non shift equivalents\n *\n * this is so you can use keyup events with these keys\n *\n * note that this will only work reliably on US keyboards\n */\nlet SHIFT_MAP: Record<string, string> = {\n  '~': '`',\n  '!': '1',\n  '@': '2',\n  '#': '3',\n  $: '4',\n  '%': '5',\n  '^': '6',\n  '&': '7',\n  '*': '8',\n  '(': '9',\n  ')': '0',\n  _: '-',\n  '+': '=',\n  ':': ';',\n  '\"': \"'\",\n  '<': ',',\n  '>': '.',\n  '?': '/',\n  '|': '\\\\',\n};\n\n/**\n * this is a list of special strings you can use to map\n * to modifier keys when you specify your keyboard shortcuts\n */\nlet SPECIAL_ALIASES: Record<string, string> = {\n  option: 'alt',\n  command: 'meta',\n  return: 'enter',\n  escape: 'esc',\n  plus: '+',\n  mod: /Mac|iPod|iPhone|iPad/.test(navigator.platform) ? 'meta' : 'ctrl',\n};\n\n/**\n * variable to store the flipped version of _MAP from above\n * needed to check if we should use keypress or not when no action\n * is specified\n */\nlet REVERSE_MAP: Record<string, string> | null = null;\n\n/**\n * loop through the f keys, f1 to f19 and add them to the map\n * programmatically\n */\nfor (let i = 1; i < 20; ++i) {\n  MAP[111 + i] = 'f' + i;\n}\n\n/**\n * loop through to map numbers on the numeric keypad\n */\nfor (let i = 0; i <= 9; ++i) {\n  // This needs to use a string cause otherwise since 0 is falsey\n  // mousetrap will never fire for numpad 0 pressed as part of a keydown\n  // event.\n  //\n  // @see https://github.com/ccampbell/mousetrap/pull/258\n  MAP[i + 96] = i.toString();\n}\n\n/**\n * takes the event and returns the key character\n */\nfunction characterFromEvent(event: KeyboardEvent): string {\n  // for keypress events we should return the character as is\n  if (event.type === 'keypress') {\n    let character = String.fromCharCode(event.which);\n\n    // if the shift key is not pressed then it is safe to assume\n    // that we want the character to be lowercase.  this means if\n    // you accidentally have caps lock on then your key bindings\n    // will continue to work\n    //\n    // the only side effect that might not be desired is if you\n    // bind something like 'A' cause you want to trigger an\n    // event when capital A is pressed caps lock will no longer\n    // trigger the event.  shift+a will though.\n    if (!event.shiftKey) {\n      character = character.toLowerCase();\n    }\n\n    return character;\n  }\n\n  // for non keypress events the special maps are needed\n  if (MAP[event.which]) {\n    return MAP[event.which];\n  }\n\n  if (KEYCODE_MAP[event.which]) {\n    return KEYCODE_MAP[event.which];\n  }\n\n  // if it is not in the special map\n\n  // with keydown and keyup events the character seems to always\n  // come in as an uppercase character whether you are pressing shift\n  // or not.  we should make sure it is always lowercase for comparisons\n  return String.fromCharCode(event.which).toLowerCase();\n}\n\n/**\n * checks if two arrays are equal\n */\nfunction modifiersMatch(modifiers1: string[], modifiers2: string[]): boolean {\n  return modifiers1.sort().join(',') === modifiers2.sort().join(',');\n}\n\n/**\n * takes a key event and figures out what the modifiers are\n */\nfunction eventModifiers(event: KeyboardEvent): string[] {\n  let modifiers = [];\n\n  if (event.shiftKey) {\n    modifiers.push('shift');\n  }\n\n  if (event.altKey) {\n    modifiers.push('alt');\n  }\n\n  if (event.ctrlKey) {\n    modifiers.push('ctrl');\n  }\n\n  if (event.metaKey) {\n    modifiers.push('meta');\n  }\n\n  return modifiers;\n}\n\n/**\n * prevents default for this event\n */\nfunction preventDefault(event: KeyboardEvent): void {\n  if (event.preventDefault) {\n    event.preventDefault();\n    return;\n  }\n\n  event.returnValue = false;\n}\n\n/**\n * stops propagation for this event\n */\nfunction stopPropagation(event: KeyboardEvent): void {\n  if (event.stopPropagation) {\n    event.stopPropagation();\n    return;\n  }\n\n  event.cancelBubble = true;\n}\n\n/**\n * determines if the keycode specified is a modifier key or not\n */\nfunction isModifier(key: string): boolean {\n  return key === 'shift' || key === 'ctrl' || key === 'alt' || key === 'meta';\n}\n\n/**\n * reverses the map lookup so that we can look for specific keys\n * to see what can and can't use keypress\n */\nfunction getReverseMap() {\n  if (!REVERSE_MAP) {\n    REVERSE_MAP = {};\n    for (let key in MAP) {\n      const keyNumber = parseInt(key, 10);\n      // pull out the numeric keypad from here cause keypress should\n      // be able to detect the keys from the character\n      if (keyNumber > 95 && keyNumber < 112) {\n        continue;\n      }\n\n      if (MAP.hasOwnProperty(key)) {\n        REVERSE_MAP[MAP[key]] = key;\n      }\n    }\n  }\n  return REVERSE_MAP;\n}\n\n/**\n * picks the best action based on the key combination\n */\nfunction pickBestAction(key: string, modifiers: string[], action?: string): string {\n  // if no action was picked in we should try to pick the one\n  // that we think would work best for this key\n  if (!action) {\n    action = getReverseMap()[key] ? 'keydown' : 'keypress';\n  }\n\n  // modifier keys don't work as expected with keypress,\n  // switch to keydown\n  if (action === 'keypress' && modifiers.length) {\n    action = 'keydown';\n  }\n\n  return action;\n}\n\n/**\n * Converts from a string key combination to an array\n */\nfunction keysFromString(combination: string): string[] {\n  if (combination === '+') {\n    return ['+'];\n  }\n\n  combination = combination.replace(/\\+{2}/g, '+plus');\n  return combination.split('+');\n}\n\n/**\n * Gets info for a specific key combination\n */\nfunction getKeyInfo(combination: string, action?: string): KeyInfo {\n  let keys;\n  let key;\n  let i;\n  let modifiers = [];\n\n  // take the keys from this pattern and figure out what the actual\n  // pattern is all about\n  keys = keysFromString(combination);\n\n  for (i = 0; i < keys.length; ++i) {\n    key = keys[i];\n\n    // normalize key names\n    if (SPECIAL_ALIASES[key]) {\n      key = SPECIAL_ALIASES[key];\n    }\n\n    // if this is not a keypress event then we should\n    // be smart about using shift keys\n    // this will only work for US keyboards however\n    if (action && action !== 'keypress' && SHIFT_MAP[key]) {\n      key = SHIFT_MAP[key];\n      modifiers.push('shift');\n    }\n\n    // if this key is a modifier then add it to the list of modifiers\n    if (isModifier(key)) {\n      modifiers.push(key);\n    }\n  }\n\n  if (!key) {\n    throw new Error('Unable to get key');\n  }\n\n  // depending on what the key combination is\n  // we will try to pick the best event for it\n  action = pickBestAction(key, modifiers, action);\n\n  return {\n    key: key,\n    modifiers: modifiers,\n    action: action,\n  };\n}\n\nfunction belongsTo(element: null | ParentNode | Element | Document, ancestor: Element | Document): boolean {\n  if (element === null || element === document) {\n    return false;\n  }\n\n  if (element === ancestor) {\n    return true;\n  }\n\n  return belongsTo(element.parentNode, ancestor);\n}\n\nexport class Mousetrap {\n  target: HTMLElement | Document;\n\n  /**\n   * a list of all the callbacks setup via Mousetrap.bind()\n   */\n  _callbacks: Record<string, CallbackInfo[]> = {};\n\n  /**\n   * direct map of string combinations to callbacks used for trigger()\n   */\n  _directMap: Record<string, Function> = {};\n\n  /**\n   * keeps track of what level each sequence is at since multiple\n   * sequences can start out with the same sequence\n   */\n  _sequenceLevels: Record<string, number> = {};\n\n  /**\n   * variable to store the setTimeout call\n   */\n  _resetTimer: undefined | number = undefined;\n\n  /**\n   * temporary state where we will ignore the next keyup\n   */\n  _ignoreNextKeyup: boolean | string = false;\n\n  /**\n   * temporary state where we will ignore the next keypress\n   */\n  _ignoreNextKeypress = false;\n\n  /**\n   * are we currently inside of a sequence?\n   * type of action (\"keyup\" or \"keydown\" or \"keypress\") or false\n   */\n  _nextExpectedAction: boolean | string = false;\n\n  _globalCallbacks: Record<string, boolean> = {};\n\n  constructor(el: HTMLElement | Document) {\n    this.target = el;\n\n    this.target.addEventListener('keypress', (event) => {\n      if (event instanceof KeyboardEvent) {\n        this._handleKeyEvent(event);\n      }\n    });\n    this.target.addEventListener('keydown', (event) => {\n      if (event instanceof KeyboardEvent) {\n        this._handleKeyEvent(event);\n      }\n    });\n    this.target.addEventListener('keyup', (event) => {\n      if (event instanceof KeyboardEvent) {\n        this._handleKeyEvent(event);\n      }\n    });\n  }\n\n  /**\n   * resets all sequence counters except for the ones passed in\n   */\n  private _resetSequences = (doNotReset: Record<string, number>): void => {\n    doNotReset = doNotReset || {};\n\n    let activeSequences = false,\n      key;\n\n    for (key in this._sequenceLevels) {\n      if (doNotReset[key]) {\n        activeSequences = true;\n        continue;\n      }\n      this._sequenceLevels[key] = 0;\n    }\n\n    if (!activeSequences) {\n      this._nextExpectedAction = false;\n    }\n  };\n\n  /**\n   * finds all callbacks that match based on the keycode, modifiers,\n   * and action\n   */\n  private _getMatches = (\n    character: string,\n    modifiers: string[],\n    event: Pick<KeyboardEvent, 'type' | 'metaKey' | 'ctrlKey'>,\n    sequenceName?: string,\n    combination?: string,\n    level?: number\n  ): CallbackInfo[] => {\n    let i;\n    let callback;\n    let matches = [];\n    let action = event.type;\n\n    // if there are no events related to this keycode\n    if (!this._callbacks[character]) {\n      return [];\n    }\n\n    // if a modifier key is coming up on its own we should allow it\n    if (action === 'keyup' && isModifier(character)) {\n      modifiers = [character];\n    }\n\n    // loop through all callbacks for the key that was pressed\n    // and see if any of them match\n    for (i = 0; i < this._callbacks[character].length; ++i) {\n      callback = this._callbacks[character][i];\n\n      // if a sequence name is not specified, but this is a sequence at\n      // the wrong level then move onto the next match\n      if (!sequenceName && callback.seq && this._sequenceLevels[callback.seq] !== callback.level) {\n        continue;\n      }\n\n      // if the action we are looking for doesn't match the action we got\n      // then we should keep going\n      if (action !== callback.action) {\n        continue;\n      }\n\n      // if this is a keypress event and the meta key and control key\n      // are not pressed that means that we need to only look at the\n      // character, otherwise check the modifiers as well\n      //\n      // chrome will not fire a keypress if meta or control is down\n      // safari will fire a keypress if meta or meta+shift is down\n      // firefox will fire a keypress if meta or control is down\n      if (\n        (action === 'keypress' && !event.metaKey && !event.ctrlKey) ||\n        modifiersMatch(modifiers, callback.modifiers)\n      ) {\n        // when you bind a combination or sequence a second time it\n        // should overwrite the first one.  if a sequenceName or\n        // combination is specified in this call it does just that\n        //\n        // @todo make deleting its own method?\n        let deleteCombo = !sequenceName && callback.combo === combination;\n        let deleteSequence = sequenceName && callback.seq === sequenceName && callback.level === level;\n        if (deleteCombo || deleteSequence) {\n          this._callbacks[character].splice(i, 1);\n        }\n\n        matches.push(callback);\n      }\n    }\n\n    return matches;\n  };\n\n  /**\n   * actually calls the callback function\n   *\n   * if your callback function returns false this will use the jquery\n   * convention - prevent default and stop propagation on the event\n   *\n   * @param combo Is the key binding that triggered this callback. When a sequence is triggered, this is the whole sequence. Otherwise, it's the intermediate keys\n   * @param sequence Is the 'parent sequence' of the combo. When the whole sequence is triggered, this is undefined.\n   */\n  private _fireCallback = (callback: Function, e: KeyboardEvent, combo: string, sequence?: string) => {\n    // if this event should not happen stop here\n    const target = e.target || e.srcElement;\n    if (target && target instanceof HTMLElement && this.stopCallback(e, target, combo, sequence)) {\n      return;\n    }\n\n    if (callback(e, combo) === false) {\n      preventDefault(e);\n      stopPropagation(e);\n    }\n  };\n\n  /**\n   * handles a character key event\n   */\n  private _handleKey = (character: string, modifiers: string[], e: KeyboardEvent) => {\n    let callbacks = this._getMatches(character, modifiers, e);\n    let i;\n    let doNotReset: Record<string, number> = {};\n    let maxLevel = 0;\n    let processedSequenceCallback = false;\n\n    // Calculate the maxLevel for sequences so we can only execute the longest callback sequence\n    for (i = 0; i < callbacks.length; ++i) {\n      if (callbacks[i].seq) {\n        maxLevel = Math.max(maxLevel, callbacks[i].level ?? 0);\n      }\n    }\n\n    // loop through matching callbacks for this key event\n    for (i = 0; i < callbacks.length; ++i) {\n      // fire for all sequence callbacks\n      // this is because if for example you have multiple sequences\n      // bound such as \"g i\" and \"g t\" they both need to fire the\n      // callback for matching g cause otherwise you can only ever\n      // match the first one\n      const seq = callbacks[i].seq;\n      if (seq) {\n        // only fire callbacks for the maxLevel to prevent\n        // subsequences from also firing\n        //\n        // for example 'a option b' should not cause 'option b' to fire\n        // even though 'option b' is part of the other sequence\n        //\n        // any sequences that do not match here will be discarded\n        // below by the _resetSequences call\n        if (callbacks[i].level !== maxLevel) {\n          continue;\n        }\n\n        processedSequenceCallback = true;\n\n        // keep a list of which sequences were matches for later\n        doNotReset[seq] = 1;\n        this._fireCallback(callbacks[i].callback, e, callbacks[i].combo, seq);\n\n        // When matching a callback, don't reset other callbacks that starts with this prefix\n        // This allows chaining of multiple shortcuts that share a prefix. e.g. if we have\n        // `t left` and `t right`, allow user to hit `t left`, `right` without resetting the sequence\n        const suffixPrefixIndex = seq.lastIndexOf(character);\n        const sequencePrefix = seq.slice(0, suffixPrefixIndex);\n        for (const [seq, level] of Object.entries(this._sequenceLevels)) {\n          if (level > 0 && seq.startsWith(sequencePrefix)) {\n            doNotReset[seq] = 1;\n          }\n        }\n\n        continue;\n      }\n\n      // if there were no sequence matches but we are still here\n      // that means this is a regular match so we should fire that\n      if (!processedSequenceCallback) {\n        this._fireCallback(callbacks[i].callback, e, callbacks[i].combo);\n      }\n    }\n\n    // Don't reset a sequence if this character is the start of a sequence that has already progressed.\n    // This allows `t left` to be hit immediately after a `t right`\n    for (const callback of this._callbacks[character] ?? []) {\n      if (callback.action === e.type && callback.seq && callback.level === 0) {\n        doNotReset[callback.seq] = 1;\n      }\n    }\n\n    // if the key you pressed matches the type of sequence without\n    // being a modifier (ie \"keyup\" or \"keypress\") then we should\n    // reset all sequences that were not matched by this event\n    //\n    // this is so, for example, if you have the sequence \"h a t\" and you\n    // type \"h e a r t\" it does not match.  in this case the \"e\" will\n    // cause the sequence to reset\n    //\n    // modifier keys are ignored because you can have a sequence\n    // that contains modifiers such as \"enter ctrl+space\" and in most\n    // cases the modifier key will be pressed before the next key\n    //\n    // also if you have a sequence such as \"ctrl+b a\" then pressing the\n    // \"b\" key will trigger a \"keypress\" and a \"keydown\"\n    //\n    // the \"keydown\" is expected when there is a modifier, but the\n    // \"keypress\" ends up matching the _nextExpectedAction since it occurs\n    // after and that causes the sequence to reset\n    //\n    // we ignore keypresses in a sequence that directly follow a keydown\n    // for the same character\n    let ignoreThisKeypress = e.type === 'keypress' && this._ignoreNextKeypress;\n    if (e.type === this._nextExpectedAction && !isModifier(character) && !ignoreThisKeypress) {\n      this._resetSequences(doNotReset);\n    }\n\n    this._ignoreNextKeypress = processedSequenceCallback && e.type === 'keydown';\n  };\n\n  /**\n   * handles a keydown event\n   */\n  private _handleKeyEvent = (rawEvent: Event) => {\n    if (!(rawEvent instanceof KeyboardEvent)) {\n      throw new Error(\"Didn't get a KeyboardEvent\");\n    }\n    const event: KeyboardEvent = rawEvent;\n\n    // Don't trigger shortcuts when a key is just held down\n    if (event.repeat) {\n      return;\n    }\n\n    // normalize e.which for key events\n    // @see http://stackoverflow.com/questions/4285627/javascript-keycode-vs-charcode-utter-confusion\n    if (typeof event.which !== 'number') {\n      // @ts-expect-error - TODO: determine what to do with this compat\n      event.which = event.keyCode;\n    }\n\n    let character = characterFromEvent(event);\n\n    // no character found then stop\n    if (!character) {\n      return;\n    }\n\n    // need to use === for the character check because the character can be 0\n    if (event.type === 'keyup' && this._ignoreNextKeyup === character) {\n      this._ignoreNextKeyup = false;\n      return;\n    }\n\n    this.handleKey(character, eventModifiers(event), event);\n  };\n\n  /**\n   * called to set a 1 second timeout on the specified sequence\n   *\n   * this is so after each key press in the sequence you have 1 second\n   * to press the next key before you have to start over\n   */\n  private _resetSequenceTimer = () => {\n    clearTimeout(this._resetTimer);\n    this._resetTimer = setTimeout(this._resetSequences, 1000);\n  };\n\n  /**\n   * binds a key sequence to an event\n   */\n  private _bindSequence = (combo: string, keys: string[], callback: MousetrapCallback, action?: string): void => {\n    // start off by adding a sequence level record for this combination\n    // and setting the level to 0\n    this._sequenceLevels[combo] = 0;\n\n    /**\n     * callback to increase the sequence level for this sequence and reset\n     * all other sequences that were active\n     */\n    const _increaseSequence = (nextAction: string): MousetrapCallback => {\n      return () => {\n        this._nextExpectedAction = nextAction;\n        ++this._sequenceLevels[combo];\n        this._resetSequenceTimer();\n      };\n    };\n\n    /**\n     * wraps the specified callback inside of another function in order\n     * to reset all sequence counters as soon as this sequence is done\n     */\n    const _callbackAndReset = (e: KeyboardEvent): void => {\n      this._fireCallback(callback, e, combo);\n\n      // we should ignore the next key up if the action is key down\n      // or keypress.  this is so if you finish a sequence and\n      // release the key the final key will not trigger a keyup\n      if (action !== 'keyup') {\n        this._ignoreNextKeyup = characterFromEvent(e);\n      }\n\n      // Reset the sequence timer and allow for this shortcut to be\n      // triggered again just by repeating the last key\n      this._resetSequenceTimer();\n    };\n\n    // loop through keys one at a time and bind the appropriate callback\n    // function.  for any key leading up to the final one it should\n    // increase the sequence. after the final, it should reset all sequences\n    //\n    // if an action is specified in the original bind call then that will\n    // be used throughout.  otherwise we will pass the action that the\n    // next key in the sequence should match.  this allows a sequence\n    // to mix and match keypress and keydown events depending on which\n    // ones are better suited to the key provided\n    for (let i = 0; i < keys.length; ++i) {\n      let isFinal = i + 1 === keys.length;\n      let wrappedCallback = isFinal ? _callbackAndReset : _increaseSequence(action || getKeyInfo(keys[i + 1]).action);\n      this._bindSingle(keys[i], wrappedCallback, action, combo, i);\n    }\n  };\n\n  /**\n   * binds a single keyboard combination\n   */\n  private _bindSingle = (\n    combination: string,\n    callback: MousetrapCallback,\n    action?: string,\n    sequenceName?: string,\n    level?: number\n  ): void => {\n    // store a direct mapped reference for use with Mousetrap.trigger\n    this._directMap[combination + ':' + action] = callback;\n\n    // make sure multiple spaces in a row become a single space\n    combination = combination.replace(/\\s+/g, ' ');\n\n    let sequence = combination.split(' ');\n    let info;\n\n    // if this pattern is a sequence of keys then run through this method\n    // to reprocess each pattern one key at a time\n    if (sequence.length > 1) {\n      this._bindSequence(combination, sequence, callback, action);\n      return;\n    }\n\n    info = getKeyInfo(combination, action);\n\n    // make sure to initialize array if this is the first time\n    // a callback is added for this key\n    this._callbacks[info.key] = this._callbacks[info.key] || [];\n\n    // remove an existing match if there is one\n    const eventLike = { type: info.action, metaKey: false, ctrlKey: false };\n    this._getMatches(info.key, info.modifiers, eventLike, sequenceName, combination, level);\n\n    const callbackInfo: CallbackInfo = {\n      callback: callback,\n      modifiers: info.modifiers,\n      action: info.action,\n      seq: sequenceName,\n      level: level,\n      combo: combination,\n    };\n\n    // add this call back to the array\n    // if it is a sequence put it at the beginning\n    // if not put it at the end\n    //\n    // this is important because the way these are processed expects\n    // the sequence ones to come first\n    this._callbacks[info.key][sequenceName ? 'unshift' : 'push'](callbackInfo);\n  };\n\n  /**\n   * binds multiple combinations to the same callback\n   */\n  private _bindMultiple = (combinations: string[], callback: MousetrapCallback, action: string | undefined): void => {\n    for (let i = 0; i < combinations.length; ++i) {\n      this._bindSingle(combinations[i], callback, action);\n    }\n  };\n\n  /**\n   * binds an event to mousetrap\n   *\n   * can be a single key, a combination of keys separated with +,\n   * an array of keys, or a sequence of keys separated by spaces\n   *\n   * be sure to list the modifier keys first to make sure that the\n   * correct key ends up getting bound (the last key in the pattern)\n   */\n  bind = (keys: string | string[], callback: MousetrapCallback, action?: string) => {\n    keys = keys instanceof Array ? keys : [keys];\n    this._bindMultiple(keys, callback, action);\n    return self;\n  };\n\n  /**\n   * unbinds an event to mousetrap\n   *\n   * the unbinding sets the callback function of the specified key combo\n   * to an empty function and deletes the corresponding key in the\n   * _directMap dict.\n   *\n   * TODO: actually remove this from the _callbacks dictionary instead\n   * of binding an empty function\n   *\n   * the keycombo+action has to be exactly the same as\n   * it was defined in the bind method\n   */\n  unbind = (keys: string | string[], action?: string) => {\n    return this.bind(keys, function () {}, action);\n  };\n\n  // From bind-global plugin\n  // https://github.com/Elvynia/mousetrap-global-bind/blob/master/mousetrap-global-bind.js#L28\n  bindGlobal = (keys: string | string[], callback: MousetrapCallback, action?: string) => {\n    this.bind(keys, callback, action);\n\n    if (keys instanceof Array) {\n      for (let i = 0; i < keys.length; i++) {\n        this._globalCallbacks[keys[i]] = true;\n      }\n      return;\n    }\n\n    this._globalCallbacks[keys] = true;\n  };\n\n  // From bind-global plugin\n  // https://github.com/Elvynia/mousetrap-global-bind/blob/master/mousetrap-global-bind.js#L42\n  unbindGlobal = (keys: string | string[], action?: string) => {\n    this.unbind(keys, action);\n\n    if (keys instanceof Array) {\n      for (let i = 0; i < keys.length; i++) {\n        this._globalCallbacks[keys[i]] = false;\n      }\n      return;\n    }\n\n    this._globalCallbacks[keys] = false;\n  };\n\n  /**\n   * triggers an event that has already been bound\n   */\n  trigger = (keys: string, action: string | undefined) => {\n    let self = this;\n    if (self._directMap[keys + ':' + action]) {\n      self._directMap[keys + ':' + action]({}, keys);\n    }\n    return self;\n  };\n\n  /**\n   * resets the library back to its initial state.  this is useful\n   * if you want to clear out the current keyboard shortcuts and bind\n   * new ones - for example if you switch to another page\n   */\n  reset = () => {\n    this._callbacks = {};\n    this._directMap = {};\n    return this;\n  };\n\n  /**\n   * should we stop this event before firing off callbacks\n   */\n  stopCallback = (e: Event, element: HTMLElement, combo: string, sequence?: string): boolean => {\n    // From global bind plugin https://github.com/Elvynia/mousetrap-global-bind/blob/master/mousetrap-global-bind.js\n    if (this._globalCallbacks[combo] || (sequence && this._globalCallbacks[sequence])) {\n      return false;\n    }\n\n    // if the element has the class \"mousetrap\" then no need to stop\n    if ((' ' + element.className + ' ').indexOf(' mousetrap ') > -1) {\n      return false;\n    }\n\n    if (belongsTo(element, this.target)) {\n      return false;\n    }\n\n    // Events originating from a shadow DOM are re-targetted and `e.target` is the shadow host,\n    // not the initial event target in the shadow tree. Note that not all events cross the\n    // shadow boundary.\n    // For shadow trees with `mode: 'open'`, the initial event target is the first element in\n    // the event’s composed path. For shadow trees with `mode: 'closed'`, the initial event\n    // target cannot be obtained.\n    if ('composedPath' in e && typeof e.composedPath === 'function') {\n      // For open shadow trees, update `element` so that the following check works.\n      let initialEventTarget = e.composedPath()[0];\n      if (initialEventTarget !== e.target && initialEventTarget instanceof HTMLElement) {\n        element = initialEventTarget;\n      }\n    }\n\n    // stop for input, select, and textarea\n    return Boolean(\n      element.tagName === 'INPUT' ||\n        element.tagName === 'SELECT' ||\n        element.tagName === 'TEXTAREA' ||\n        ('isContentEditable' in element && element.isContentEditable)\n    );\n  };\n\n  /**\n   * exposes _handleKey publicly so it can be overwritten by extensions\n   */\n  handleKey: typeof this._handleKey = (...args) => {\n    return this._handleKey(...args);\n  };\n\n  /**\n   * allow custom key mappings\n   */\n  addKeycodes = (object: Record<string, string>) => {\n    for (let key in object) {\n      if (object.hasOwnProperty(key)) {\n        MAP[key] = object[key];\n      }\n    }\n    REVERSE_MAP = null;\n  };\n}\n","import { Mousetrap } from './Mousetrap';\n\nexport const mousetrap = new Mousetrap(document);\n\nexport interface KeyBindingItem {\n  /** Key or key pattern like mod+o */\n  key: string;\n  /** Defaults to keydown */\n  type?: string;\n  /** The handler callback */\n  onTrigger: () => void;\n}\n\n/**\n * Small util to make it easier to add and unbind Mousetrap keybindings\n */\nexport class KeybindingSet {\n  private _binds: KeyBindingItem[] = [];\n\n  addBinding(item: KeyBindingItem) {\n    mousetrap.bind(\n      item.key,\n      (evt) => {\n        evt.preventDefault();\n        evt.stopPropagation();\n        evt.returnValue = false;\n        item.onTrigger();\n      },\n      'keydown'\n    );\n    this._binds.push(item);\n  }\n\n  removeAll() {\n    this._binds.forEach((item) => {\n      mousetrap.unbind(item.key, item.type);\n    });\n    this._binds = [];\n  }\n}\n","import { IndexScene } from '../Components/IndexScene/IndexScene';\nimport { KeybindingSet } from './KeybindingSet';\nimport { getAppEvents, locationService } from '@grafana/runtime';\nimport { BusEventBase, BusEventWithPayload, RawTimeRange, SetPanelAttentionEvent } from '@grafana/data';\nimport { sceneGraph, SceneObject, VizPanel } from '@grafana/scenes';\nimport { getExploreLink } from '../Components/Panels/PanelMenu';\nimport { getTimePicker } from './scenes';\nimport { OptionsWithLegend } from '@grafana/ui';\nimport { narrowTimeRange } from './narrowing';\n\nconst appEvents = getAppEvents();\n\nexport function setupKeyboardShortcuts(scene: IndexScene) {\n  const keybindings = new KeybindingSet();\n  let vizPanelKey: string | null = null;\n\n  const panelAttentionSubscription = appEvents.subscribe(SetPanelAttentionEvent, (event) => {\n    if (typeof event.payload.panelId === 'string') {\n      vizPanelKey = event.payload.panelId;\n    }\n  });\n\n  function withFocusedPanel(scene: IndexScene, fn: (vizPanel: VizPanel) => void) {\n    return () => {\n      const vizPanel = sceneGraph.findObject(scene, (o) => o.state.key === vizPanelKey && o.isActive);\n      if (vizPanel && vizPanel instanceof VizPanel) {\n        fn(vizPanel);\n        return;\n      }\n    };\n  }\n\n  function withAllPanels(scene: IndexScene, fn: (vizPanel: VizPanel) => void) {\n    return () => {\n      const vizPanels = sceneGraph.findAllObjects(scene, (o) => o instanceof VizPanel && o.isActive);\n      vizPanels.forEach((vizPanel) => {\n        if (vizPanel && vizPanel instanceof VizPanel) {\n          fn(vizPanel);\n        }\n      });\n    };\n  }\n\n  // Toggle legend\n  keybindings.addBinding({\n    key: 'p l',\n    onTrigger: withFocusedPanel(scene, toggleVizPanelLegend),\n  });\n\n  // Toggle all legend\n  keybindings.addBinding({\n    key: 'a l',\n    onTrigger: withAllPanels(scene, toggleVizPanelLegend),\n  });\n\n  // Go to Explore for panel\n  keybindings.addBinding({\n    key: 'p x',\n    onTrigger: withFocusedPanel(scene, async (vizPanel: VizPanel) => {\n      const url = getExploreLink(vizPanel);\n      if (url) {\n        locationService.push(url);\n      }\n    }),\n  });\n\n  // Copy time range\n  keybindings.addBinding({\n    key: 't c',\n    onTrigger: () => {\n      const timeRange = sceneGraph.getTimeRange(scene);\n      setWindowGrafanaSceneContext(timeRange);\n      appEvents.publish(new CopyTimeEvent());\n    },\n  });\n\n  // Paste time range\n  keybindings.addBinding({\n    key: 't v',\n    onTrigger: () => {\n      const event = new PasteTimeEvent({ updateUrl: false });\n      scene.publishEvent(event);\n      appEvents.publish(event);\n    },\n  });\n\n  // Refresh\n  keybindings.addBinding({\n    key: 'd r',\n    onTrigger: () => sceneGraph.getTimeRange(scene).onRefresh(),\n  });\n\n  // Zoom out\n  keybindings.addBinding({\n    key: 't z',\n    onTrigger: () => {\n      handleZoomOut(scene);\n    },\n  });\n\n  // Zoom out alias\n  keybindings.addBinding({\n    key: 'ctrl+z',\n    onTrigger: () => {\n      handleZoomOut(scene);\n    },\n  });\n\n  // Relative -> Absolute time range\n  keybindings.addBinding({\n    key: 't a',\n    onTrigger: () => {\n      const timePicker = getTimePicker(scene);\n      timePicker?.toAbsolute();\n    },\n  });\n\n  keybindings.addBinding({\n    key: 't left',\n    onTrigger: () => {\n      handleTimeRangeShift(scene, 'left');\n    },\n  });\n  keybindings.addBinding({\n    key: 't right',\n    onTrigger: () => {\n      handleTimeRangeShift(scene, 'right');\n    },\n  });\n  return () => {\n    keybindings.removeAll();\n    panelAttentionSubscription.unsubscribe();\n  };\n}\n\nfunction handleZoomOut(scene: IndexScene) {\n  const timePicker = getTimePicker(scene);\n  timePicker?.onZoom();\n}\n\nfunction handleTimeRangeShift(scene: IndexScene, direction: 'left' | 'right') {\n  const timePicker = getTimePicker(scene);\n\n  if (!timePicker) {\n    return;\n  }\n\n  if (direction === 'left') {\n    timePicker.onMoveBackward();\n  }\n  if (direction === 'right') {\n    timePicker.onMoveForward();\n  }\n}\n\nexport function toggleVizPanelLegend(vizPanel: VizPanel): void {\n  const options = vizPanel.state.options;\n  if (hasLegendOptions(options) && typeof options.legend.showLegend === 'boolean') {\n    vizPanel.onOptionsChange({\n      legend: {\n        showLegend: options.legend.showLegend ? false : true,\n      },\n    });\n  }\n}\n\nfunction hasLegendOptions(optionsWithLegend: unknown): optionsWithLegend is OptionsWithLegend {\n  return optionsWithLegend != null && typeof optionsWithLegend === 'object' && 'legend' in optionsWithLegend;\n}\n\n// Copied from https://github.com/grafana/grafana/blob/main/public/app/types/events.ts\n// @todo export from core grafana\nexport class CopyTimeEvent extends BusEventBase {\n  static type = 'copy-time';\n}\n\n// Copied from https://github.com/grafana/grafana/blob/main/public/app/types/events.ts\n// @todo export from core grafana\ninterface PasteTimeEventPayload {\n  updateUrl?: boolean;\n  timeRange?: string;\n}\n\n// Copied from https://github.com/grafana/grafana/blob/main/public/app/types/events.ts\n// @todo export from core grafana\nexport class PasteTimeEvent extends BusEventWithPayload<PasteTimeEventPayload> {\n  static type = 'paste-time';\n}\n\n/**\n * Adds the scene object to the global window state so that templateSrv in core can interpolate strings using the scene interpolation engine with the scene as scope.\n * This is needed for old datasources that call templateSrv.replace without passing scopedVars. For example in DataSourceAPI.metricFindQuery.\n *\n * This is also used from TimeSrv to access scene time range.\n *\n * @todo delete after https://github.com/grafana/scenes/pull/999 is available\n */\nexport function setWindowGrafanaSceneContext(activeScene: SceneObject) {\n  const prevScene = (window as any).__grafanaSceneContext;\n\n  (window as any).__grafanaSceneContext = activeScene;\n\n  return () => {\n    if ((window as any).__grafanaSceneContext === activeScene) {\n      (window as any).__grafanaSceneContext = prevScene;\n    }\n  };\n}\n\n// taken from /Users/galen/projects/grafana/grafana/public/app/core/utils/timePicker.ts\ntype CopiedTimeRangeResult = { range: RawTimeRange; isError: false } | { range: string; isError: true };\n// modified to narrow types from clipboard\nexport async function getCopiedTimeRange(): Promise<CopiedTimeRangeResult> {\n  const raw = await navigator.clipboard.readText();\n  let unknownRange: unknown;\n\n  try {\n    unknownRange = JSON.parse(raw);\n    const range = narrowTimeRange(unknownRange);\n    if (range) {\n      return { isError: false, range };\n    }\n  } catch (e) {}\n  return { range: raw, isError: true };\n}\n","import React from 'react';\n\nimport { AdHocVariableFilter, AppEvents, AppPluginMeta, rangeUtil, SelectableValue } from '@grafana/data';\nimport {\n  AdHocFiltersVariable,\n  CustomVariable,\n  DataSourceVariable,\n  SceneComponentProps,\n  SceneFlexItem,\n  SceneFlexLayout,\n  sceneGraph,\n  SceneObject,\n  SceneObjectBase,\n  SceneObjectState,\n  SceneObjectUrlSyncConfig,\n  SceneObjectUrlValues,\n  SceneRefreshPicker,\n  SceneTimePicker,\n  SceneTimeRange,\n  SceneTimeRangeLike,\n  SceneTimeRangeState,\n  SceneVariableSet,\n} from '@grafana/scenes';\nimport {\n  DETECTED_FIELD_VALUES_EXPR,\n  DETECTED_LEVELS_VALUES_EXPR,\n  DETECTED_METADATA_VALUES_EXPR,\n  EXPLORATION_DS,\n  MIXED_FORMAT_EXPR,\n  PENDING_FIELDS_EXPR,\n  VAR_DATASOURCE,\n  VAR_FIELDS,\n  VAR_LABELS,\n  VAR_LEVELS,\n  VAR_LINE_FILTER,\n  VAR_LINE_FILTERS,\n  VAR_LOGS_FORMAT,\n  VAR_METADATA,\n  VAR_PATTERNS,\n} from 'services/variables';\n\nimport { addLastUsedDataSourceToStorage, getLastUsedDataSourceFromStorage } from 'services/store';\nimport { ServiceScene } from '../ServiceScene/ServiceScene';\nimport {\n  CONTROLS_VARS_FIELDS_ELSE_KEY,\n  CONTROLS_VARS_FIRST_ROW_KEY,\n  CONTROLS_VARS_METADATA_ROW_KEY,\n  CONTROLS_VARS_REFRESH,\n  CONTROLS_VARS_TIMEPICKER,\n  CONTROLS_VARS_TOOLBAR,\n  LayoutScene,\n} from './LayoutScene';\nimport { getDrilldownSlug, PageSlugs } from '../../services/routing';\nimport { ServiceSelectionScene } from '../ServiceSelectionScene/ServiceSelectionScene';\nimport { LoadingPlaceholder } from '@grafana/ui';\nimport { config, getAppEvents, locationService } from '@grafana/runtime';\nimport {\n  renderLogQLFieldFilters,\n  renderLogQLLabelFilters,\n  renderLogQLLineFilter,\n  renderLogQLMetadataFilters,\n  renderPatternFilters,\n} from 'services/query';\nimport { VariableHide } from '@grafana/schema';\nimport { CustomConstantVariable } from '../../services/CustomConstantVariable';\nimport {\n  getFieldsVariable,\n  getLabelsVariable,\n  getLevelsVariable,\n  getMetadataVariable,\n  getPatternsVariable,\n  getUrlParamNameForVariable,\n  getValueFromFieldsFilter,\n} from '../../services/variableGetters';\nimport { ToolbarScene } from './ToolbarScene';\nimport { DEFAULT_TIME_RANGE, OptionalRouteMatch } from '../Pages';\nimport { plugin } from '../../module';\nimport { JsonData } from '../AppConfig/AppConfig';\nimport { reportAppInteraction } from '../../services/analytics';\nimport { getDetectedFieldValuesTagValuesProvider, getLabelsTagValuesProvider } from '../../services/TagValuesProviders';\nimport { lokiRegularEscape } from '../../services/fields';\nimport { logger } from '../../services/logger';\nimport { getLabelsTagKeysProvider } from '../../services/TagKeysProviders';\nimport { AdHocFilterWithLabels, getLokiDatasource } from '../../services/scenes';\nimport { FilterOp, LineFilterOp } from '../../services/filterTypes';\nimport { ShowLogsButtonScene } from './ShowLogsButtonScene';\nimport { CustomVariableValueSelectors } from './CustomVariableValueSelectors';\nimport { getCopiedTimeRange, PasteTimeEvent, setupKeyboardShortcuts } from '../../services/keyboardShortcuts';\nimport { LokiDatasource } from '../../services/lokiQuery';\n\nexport const showLogsButtonSceneKey = 'showLogsButtonScene';\nexport interface AppliedPattern {\n  pattern: string;\n  type: 'include' | 'exclude';\n}\n\nexport interface IndexSceneState extends SceneObjectState {\n  // contentScene is the scene that is displayed in the main body of the index scene - it can be either the service selection or service scene\n  contentScene?: SceneObject;\n  controls: SceneObject[];\n  body?: LayoutScene;\n  initialFilters?: AdHocVariableFilter[];\n  patterns?: AppliedPattern[];\n  routeMatch?: OptionalRouteMatch;\n  ds?: LokiDatasource;\n}\n\nexport class IndexScene extends SceneObjectBase<IndexSceneState> {\n  protected _urlSync = new SceneObjectUrlSyncConfig(this, { keys: ['patterns'] });\n\n  public constructor(state: Partial<IndexSceneState>) {\n    const { variablesScene, unsub } = getVariableSet(\n      getLastUsedDataSourceFromStorage() ?? 'grafanacloud-logs',\n      state.initialFilters\n    );\n\n    const controls: SceneObject[] = [\n      new SceneFlexLayout({\n        key: CONTROLS_VARS_FIRST_ROW_KEY,\n        direction: 'row',\n        children: [\n          new SceneFlexItem({\n            body: new CustomVariableValueSelectors({\n              key: 'vars-labels-ds',\n              layout: 'vertical',\n              include: [VAR_LABELS, VAR_DATASOURCE],\n            }),\n          }),\n          new ShowLogsButtonScene({\n            key: showLogsButtonSceneKey,\n            disabled: true,\n          }),\n        ],\n      }),\n      new CustomVariableValueSelectors({\n        key: CONTROLS_VARS_METADATA_ROW_KEY,\n        layout: 'vertical',\n        include: [VAR_METADATA, VAR_LEVELS],\n      }),\n      new CustomVariableValueSelectors({\n        key: CONTROLS_VARS_FIELDS_ELSE_KEY,\n        layout: 'vertical',\n        exclude: [VAR_LABELS, VAR_DATASOURCE, VAR_METADATA, VAR_LEVELS],\n      }),\n      new SceneTimePicker({ key: CONTROLS_VARS_TIMEPICKER }),\n      new SceneRefreshPicker({ key: CONTROLS_VARS_REFRESH }),\n    ];\n\n    if (getDrilldownSlug() === 'explore' && config.featureToggles.exploreLogsAggregatedMetrics) {\n      controls.push(\n        new ToolbarScene({\n          key: CONTROLS_VARS_TOOLBAR,\n          isOpen: false,\n        })\n      );\n    }\n\n    super({\n      $timeRange: state.$timeRange ?? new SceneTimeRange({}),\n      $variables: state.$variables ?? variablesScene,\n      controls: state.controls ?? controls,\n      // Need to clear patterns state when the class in constructed\n      patterns: [],\n      ...state,\n      body: new LayoutScene({}),\n    });\n\n    this._subs.add(unsub);\n    this.addActivationHandler(this.onActivate.bind(this));\n\n    getLokiDatasource(this).then((ds) => {\n      this.setState({ ds });\n    });\n  }\n\n  static Component = ({ model }: SceneComponentProps<IndexScene>) => {\n    const { body } = model.useState();\n    if (body) {\n      return <body.Component model={body} />;\n    }\n\n    return <LoadingPlaceholder text={'Loading...'} />;\n  };\n\n  public onActivate() {\n    const stateUpdate: Partial<IndexSceneState> = {};\n    this.setVariableTagValuesProviders();\n\n    // Show \"show logs\" button\n    const showLogsButton = sceneGraph.findByKeyAndType(this, showLogsButtonSceneKey, ShowLogsButtonScene);\n    showLogsButton.setState({ hidden: false });\n\n    if (!this.state.contentScene) {\n      stateUpdate.contentScene = getContentScene(this.state.routeMatch?.params.breakdownLabel);\n    }\n    this.setTagProviders();\n    this.setVariableOperators();\n\n    this.setState(stateUpdate);\n\n    this.updatePatterns(this.state, getPatternsVariable(this));\n    this.resetVariablesIfNotInUrl(getFieldsVariable(this), getUrlParamNameForVariable(VAR_FIELDS));\n    this.resetVariablesIfNotInUrl(getLevelsVariable(this), getUrlParamNameForVariable(VAR_LEVELS));\n\n    this._subs.add(\n      this.subscribeToState((newState) => {\n        this.updatePatterns(newState, getPatternsVariable(this));\n      })\n    );\n\n    const timeRange = sceneGraph.getTimeRange(this);\n\n    this._subs.add(timeRange.subscribeToState(this.limitMaxInterval(timeRange)));\n    this._subs.add(this.subscribeToEvent(PasteTimeEvent, this.subscribeToPasteTimeEvent));\n\n    const clearKeyBindings = setupKeyboardShortcuts(this);\n\n    return () => {\n      clearKeyBindings();\n    };\n  }\n\n  private setVariableOperators() {\n    const fieldsVar = getFieldsVariable(this);\n    // No wip set when this is called, so once the operations must be consistent for all filters\n    // @todo we'll need to split out the duration, bytes, and float filters out of the VAR_FIELDS variable and into a new variable if we want to keep comparison operations out of string, int, etc filters\n    fieldsVar._getOperators = function () {\n      if (fieldsVar.state.filters.some((filter) => numericOperatorArray.includes(filter.operator as FilterOp))) {\n        return [...operators, ...numericOperators];\n      }\n      return operators;\n    };\n  }\n\n  private setTagProviders() {\n    const labelsVar = getLabelsVariable(this);\n\n    labelsVar._getOperators = function () {\n      const wip = labelsVar.state._wip;\n      if (\n        wip &&\n        labelsVar.state.filters.some((filter) => filter.key === wip.key && filter.operator === FilterOp.Equal)\n      ) {\n        return includeOperators;\n      }\n\n      return operators;\n    };\n\n    labelsVar.setState({\n      getTagKeysProvider: getLabelsTagKeysProvider,\n      getTagValuesProvider: getLabelsTagValuesProvider,\n    });\n  }\n\n  private subscribeToPasteTimeEvent = async () => {\n    const copiedRange = await getCopiedTimeRange();\n\n    if (copiedRange.isError) {\n      return;\n    }\n\n    const timeRange = sceneGraph.getTimeRange(this);\n    const to = typeof copiedRange.range.to === 'string' ? copiedRange.range.to : undefined;\n    const from = typeof copiedRange.range.from === 'string' ? copiedRange.range.from : undefined;\n    const newRange = rangeUtil.convertRawToRange(copiedRange.range);\n\n    if (timeRange && newRange) {\n      timeRange.setState({\n        value: newRange,\n        to,\n        from,\n      });\n    } else {\n      logger.error(new Error('Invalid time range from clipboard'), {\n        msg: 'Invalid time range from clipboard',\n        sceneTimeRange: typeof timeRange,\n        to: to ?? '',\n        from: from ?? '',\n      });\n    }\n  };\n\n  /**\n   * If user selects a time range longer then the max configured interval, show toast and set the previous time range.\n   * @param timeRange\n   * @private\n   */\n  private limitMaxInterval(timeRange: SceneTimeRangeLike) {\n    return (newState: SceneTimeRangeState, prevState: SceneTimeRangeState) => {\n      const { jsonData } = plugin.meta as AppPluginMeta<JsonData>;\n      if (jsonData?.interval) {\n        try {\n          const maxInterval = rangeUtil.intervalToSeconds(jsonData?.interval ?? '');\n          if (!maxInterval) {\n            return;\n          }\n          const timeRangeInterval = newState.value.to.diff(newState.value.from, 'seconds');\n          if (timeRangeInterval > maxInterval) {\n            const prevInterval = prevState.value.to.diff(prevState.value.from, 'seconds');\n            if (timeRangeInterval <= prevInterval) {\n              timeRange.setState({\n                value: prevState.value,\n                from: prevState.from,\n                to: prevState.to,\n              });\n            } else {\n              const defaultRange = new SceneTimeRange(DEFAULT_TIME_RANGE);\n              timeRange.setState({\n                value: defaultRange.state.value,\n                from: defaultRange.state.from,\n                to: defaultRange.state.to,\n              });\n            }\n\n            const appEvents = getAppEvents();\n            appEvents.publish({\n              type: AppEvents.alertWarning.name,\n              payload: [`Time range interval exceeds maximum interval configured by the administrator.`],\n            });\n\n            reportAppInteraction('all', 'interval_too_long', {\n              attempted_duration_seconds: timeRangeInterval,\n              configured_max_interval: maxInterval,\n            });\n          }\n        } catch (e) {\n          console.error(e);\n        }\n      }\n    };\n  }\n\n  private setVariableTagValuesProviders() {\n    const fieldsVariable = getFieldsVariable(this);\n    const levelsVariable = getLevelsVariable(this);\n    const metadataVariable = getMetadataVariable(this);\n\n    fieldsVariable.setState({\n      getTagValuesProvider: this.getFieldsTagValuesProvider(VAR_FIELDS),\n    });\n\n    levelsVariable.setState({\n      getTagValuesProvider: this.getFieldsTagValuesProvider(VAR_LEVELS),\n    });\n\n    metadataVariable.setState({\n      getTagValuesProvider: this.getFieldsTagValuesProvider(VAR_METADATA),\n    });\n  }\n\n  private getFieldsTagValuesProvider(variableType: typeof VAR_FIELDS | typeof VAR_METADATA | typeof VAR_LEVELS) {\n    return (variable: AdHocFiltersVariable, filter: AdHocFilterWithLabels) => {\n      const filters = variable.state.filters.filter((f) => f.key !== filter.key);\n      const values = filters.map((f) => {\n        const parsed = variableType === VAR_FIELDS ? getValueFromFieldsFilter(f, variableType) : { value: f.value };\n        return `${f.key}${f.operator}\\`${lokiRegularEscape(parsed.value)}\\``;\n      });\n      const otherFiltersString = values.length ? '| ' + values.join(' |') : '';\n      const uninterpolatedExpression = this.getFieldsTagValuesExpression(variableType);\n      const expr = uninterpolatedExpression.replace(PENDING_FIELDS_EXPR, otherFiltersString);\n      const interpolated = sceneGraph.interpolate(this, expr);\n      return getDetectedFieldValuesTagValuesProvider(\n        filter,\n        interpolated,\n        this,\n        sceneGraph.getTimeRange(this).state.value,\n        variableType\n      );\n    };\n  }\n\n  private getFieldsTagValuesExpression(variableType: typeof VAR_FIELDS | typeof VAR_METADATA | typeof VAR_LEVELS) {\n    switch (variableType) {\n      case VAR_FIELDS:\n        return DETECTED_FIELD_VALUES_EXPR;\n      case VAR_METADATA:\n        return DETECTED_METADATA_VALUES_EXPR;\n      case VAR_LEVELS:\n        return DETECTED_LEVELS_VALUES_EXPR;\n      default:\n        const error = new Error(`Unknown variable type: ${variableType}`);\n        logger.error(error, {\n          variableType,\n          msg: `getFieldsTagValuesExpression: Unknown variable type: ${variableType}`,\n        });\n        throw error;\n    }\n  }\n\n  /**\n   * @todo why do we need to manually sync fields and levels, but not other ad hoc variables?\n   * @param variable\n   * @param urlParamName\n   * @private\n   */\n  private resetVariablesIfNotInUrl(variable: AdHocFiltersVariable, urlParamName: string) {\n    const location = locationService.getLocation();\n    const search = new URLSearchParams(location.search);\n    const filtersFromUrl = search.get(urlParamName);\n\n    // If the filters aren't in the URL, then they're coming from the cache, set the state to sync with url\n    if (filtersFromUrl === null) {\n      variable.setState({ filters: [] });\n    }\n  }\n\n  private updatePatterns(newState: IndexSceneState, patternsVariable: CustomVariable) {\n    const patternsLine = renderPatternFilters(newState.patterns ?? []);\n    patternsVariable.changeValueTo(patternsLine);\n  }\n\n  getUrlState() {\n    return {\n      patterns: JSON.stringify(this.state.patterns),\n    };\n  }\n\n  updateFromUrl(values: SceneObjectUrlValues) {\n    const stateUpdate: Partial<IndexSceneState> = {};\n\n    if (values.patterns && typeof values.patterns === 'string') {\n      stateUpdate.patterns = JSON.parse(values.patterns) as AppliedPattern[];\n    }\n\n    this.setState(stateUpdate);\n  }\n}\n\nfunction getContentScene(drillDownLabel?: string) {\n  const slug = getDrilldownSlug();\n  if (slug === PageSlugs.explore) {\n    return new ServiceSelectionScene({});\n  }\n\n  return new ServiceScene({\n    drillDownLabel,\n  });\n}\nconst operators = [FilterOp.Equal, FilterOp.NotEqual].map<SelectableValue<string>>((value) => ({\n  label: value,\n  value,\n}));\n\nconst includeOperators = [FilterOp.Equal].map<SelectableValue<string>>((value) => ({\n  label: value,\n  value,\n}));\n\nexport const numericOperatorArray = [FilterOp.gt, FilterOp.gte, FilterOp.lt, FilterOp.lte];\n\nconst numericOperators = numericOperatorArray.map<SelectableValue<string>>((value) => ({\n  label: value,\n  value,\n}));\n\nconst lineFilterOperators: SelectableValue[] = [\n  { label: 'match', value: LineFilterOp.match },\n  { label: 'negativeMatch', value: LineFilterOp.negativeMatch },\n  { label: 'regex', value: LineFilterOp.regex },\n  { label: 'negativeRegex', value: LineFilterOp.negativeRegex },\n];\n\nfunction getVariableSet(initialDatasourceUid: string, initialFilters?: AdHocVariableFilter[]) {\n  const labelVariable = new AdHocFiltersVariable({\n    name: VAR_LABELS,\n    datasource: EXPLORATION_DS,\n    layout: 'combobox',\n    label: 'Labels',\n    filters: initialFilters ?? [],\n    expressionBuilder: renderLogQLLabelFilters,\n    hide: VariableHide.dontHide,\n    key: 'adhoc_service_filter',\n  });\n\n  labelVariable._getOperators = function () {\n    return operators;\n  };\n\n  const fieldsVariable = new AdHocFiltersVariable({\n    name: VAR_FIELDS,\n    label: 'Fields',\n    applyMode: 'manual',\n    layout: 'vertical',\n    getTagKeysProvider: () => Promise.resolve({ replace: true, values: [] }),\n    getTagValuesProvider: () => Promise.resolve({ replace: true, values: [] }),\n    expressionBuilder: renderLogQLFieldFilters,\n    hide: VariableHide.hideLabel,\n  });\n\n  fieldsVariable._getOperators = () => {\n    return operators;\n  };\n\n  const metadataVariable = new AdHocFiltersVariable({\n    name: VAR_METADATA,\n    label: 'Metadata',\n    applyMode: 'manual',\n    layout: 'vertical',\n    getTagKeysProvider: () => Promise.resolve({ replace: true, values: [] }),\n    getTagValuesProvider: () => Promise.resolve({ replace: true, values: [] }),\n    expressionBuilder: renderLogQLMetadataFilters,\n    hide: VariableHide.hideLabel,\n  });\n\n  metadataVariable._getOperators = () => {\n    return operators;\n  };\n\n  const levelsVariable = new AdHocFiltersVariable({\n    name: VAR_LEVELS,\n    label: 'Filters',\n    applyMode: 'manual',\n    layout: 'vertical',\n    getTagKeysProvider: () => Promise.resolve({ replace: true, values: [] }),\n    getTagValuesProvider: () => Promise.resolve({ replace: true, values: [] }),\n    expressionBuilder: renderLogQLMetadataFilters,\n    hide: VariableHide.hideLabel,\n  });\n\n  levelsVariable._getOperators = () => {\n    return operators;\n  };\n\n  const lineFiltersVariable = new AdHocFiltersVariable({\n    name: VAR_LINE_FILTERS,\n    hide: VariableHide.hideVariable,\n    getTagKeysProvider: () => Promise.resolve({ replace: true, values: [] }),\n    getTagValuesProvider: () => Promise.resolve({ replace: true, values: [] }),\n    expressionBuilder: renderLogQLLineFilter,\n    layout: 'horizontal',\n  });\n\n  lineFiltersVariable._getOperators = () => {\n    return lineFilterOperators;\n  };\n\n  const dsVariable = new DataSourceVariable({\n    name: VAR_DATASOURCE,\n    label: 'Data source',\n    value: initialDatasourceUid,\n    pluginId: 'loki',\n  });\n\n  const unsub = dsVariable.subscribeToState((newState) => {\n    const dsValue = `${newState.value}`;\n    newState.value && addLastUsedDataSourceToStorage(dsValue);\n  });\n\n  return {\n    variablesScene: new SceneVariableSet({\n      variables: [\n        dsVariable,\n        labelVariable,\n        fieldsVariable,\n        levelsVariable,\n        metadataVariable,\n        new CustomVariable({\n          name: VAR_PATTERNS,\n          value: '',\n          hide: VariableHide.hideVariable,\n        }),\n        new AdHocFiltersVariable({\n          name: VAR_LINE_FILTER,\n          hide: VariableHide.hideVariable,\n          expressionBuilder: renderLogQLLineFilter,\n        }),\n        lineFiltersVariable,\n\n        // This variable is a hack to get logs context working, this variable should never be used or updated\n        new CustomConstantVariable({\n          name: VAR_LOGS_FORMAT,\n          value: MIXED_FORMAT_EXPR,\n          skipUrlSync: true,\n          hide: VariableHide.hideVariable,\n          options: [{ value: MIXED_FORMAT_EXPR, label: MIXED_FORMAT_EXPR }],\n        }),\n      ],\n    }),\n    unsub,\n  };\n}\n","import { SceneComponentProps, SceneObjectBase, SceneObjectState } from '@grafana/scenes';\nimport React, { ChangeEvent, KeyboardEvent } from 'react';\nimport { getLineFiltersVariable } from '../../services/variableGetters';\nimport { LineFilterOp } from '../../services/filterTypes';\nimport { reportAppInteraction, USER_EVENTS_ACTIONS, USER_EVENTS_PAGES } from '../../services/analytics';\nimport { AdHocFilterWithLabels } from '../../services/scenes';\nimport { debounce } from 'lodash';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { css } from '@emotion/css';\nimport { IconButton, useStyles2 } from '@grafana/ui';\nimport { LineFilterCaseSensitive } from '../ServiceScene/LineFilter/LineFilterScene';\nimport { LineFilterEditor, LineFilterEditorProps } from '../ServiceScene/LineFilter/LineFilterEditor';\n\ninterface LineFilterRendererState extends SceneObjectState {}\n\n/**\n * The scene for the submitted line filter that is rendered up top with the other variables.\n * @todo refactor into new directory with other custom variable renderers and/or layout scenes\n */\nexport class LineFilterVariablesScene extends SceneObjectBase<LineFilterRendererState> {\n  static Component = ({ model }: SceneComponentProps<LineFilterVariablesScene>) => {\n    const lineFilterVar = getLineFiltersVariable(model);\n    const { filters } = lineFilterVar.useState();\n    const styles = useStyles2(getStyles);\n    sortLineFilters(filters);\n\n    if (!filters.length) {\n      return null;\n    }\n\n    return (\n      <div className={styles.lineFiltersWrap}>\n        {filters.map((filter) => {\n          const props: LineFilterEditorProps = {\n            lineFilter: filter.value,\n            regex: filter.operator === LineFilterOp.regex || filter.operator === LineFilterOp.negativeRegex,\n            caseSensitive: filter.key === LineFilterCaseSensitive.caseSensitive,\n            exclusive: model.isFilterExclusive(filter),\n            handleEnter: (e, lineFilter) => model.handleEnter(e, filter.value, filter),\n            setExclusive: () => model.onToggleExclusive(filter),\n            updateFilter: (lineFilter, debounced) =>\n              model.updateFilter(\n                filter,\n                {\n                  ...filter,\n                  value: lineFilter,\n                },\n                debounced\n              ),\n            onRegexToggle: () => model.onRegexToggle(filter),\n            onInputChange: (e) => model.onInputChange(e, filter),\n            onCaseSensitiveToggle: () => model.onCaseSensitiveToggle(filter),\n          };\n          return (\n            <span key={filter.keyLabel} className={styles.wrapper}>\n              <div className={styles.titleWrap}>\n                <span>Line filter</span>\n                <IconButton\n                  onClick={() => model.removeFilter(filter)}\n                  name={'times'}\n                  size={'xs'}\n                  aria-label={'Line filter variable'}\n                />{' '}\n              </div>\n              <LineFilterEditor {...props} />\n            </span>\n          );\n        })}\n      </div>\n    );\n  };\n  /**\n   * Submit on enter\n   */\n  handleEnter = (e: KeyboardEvent<HTMLInputElement>, lineFilter: string, filter: AdHocFilterWithLabels) => {\n    if (e.key === 'Enter') {\n      this.updateVariableLineFilter(filter, { ...filter, value: lineFilter });\n    }\n  };\n\n  isFilterExclusive({ operator }: AdHocFilterWithLabels): boolean {\n    return operator === LineFilterOp.negativeMatch || operator === LineFilterOp.negativeRegex;\n  }\n\n  /**\n   * Updates filter operator when user toggles regex\n   */\n  onRegexToggle = (filter: AdHocFilterWithLabels) => {\n    let newOperator: LineFilterOp;\n    // Set value to scene state\n    switch (filter.operator) {\n      case LineFilterOp.match: {\n        newOperator = LineFilterOp.regex;\n        break;\n      }\n      case LineFilterOp.negativeMatch: {\n        newOperator = LineFilterOp.negativeRegex;\n        break;\n      }\n      case LineFilterOp.regex: {\n        newOperator = LineFilterOp.match;\n        break;\n      }\n      case LineFilterOp.negativeRegex: {\n        newOperator = LineFilterOp.negativeMatch;\n        break;\n      }\n      default: {\n        throw new Error('Invalid operator!');\n      }\n    }\n\n    this.updateFilter(filter, { ...filter, operator: newOperator }, false);\n  };\n\n  /**\n   * Updates filter operator when user toggles exclusion\n   */\n  onToggleExclusive = (filter: AdHocFilterWithLabels) => {\n    let newOperator: string;\n    switch (filter.operator) {\n      case LineFilterOp.match: {\n        newOperator = LineFilterOp.negativeMatch;\n        break;\n      }\n      case LineFilterOp.negativeMatch: {\n        newOperator = LineFilterOp.match;\n        break;\n      }\n      case LineFilterOp.regex: {\n        newOperator = LineFilterOp.negativeRegex;\n        break;\n      }\n      case LineFilterOp.negativeRegex: {\n        newOperator = LineFilterOp.regex;\n        break;\n      }\n      default: {\n        throw new Error('Invalid operator!');\n      }\n    }\n\n    this.updateFilter(filter, { ...filter, operator: newOperator }, false);\n  };\n\n  /**\n   * Updates filter key when user toggles case sensitivity\n   */\n  onCaseSensitiveToggle = (filter: AdHocFilterWithLabels) => {\n    const caseSensitive =\n      filter.key === LineFilterCaseSensitive.caseSensitive\n        ? LineFilterCaseSensitive.caseInsensitive\n        : LineFilterCaseSensitive.caseSensitive;\n    this.updateFilter(filter, { ...filter, key: caseSensitive }, false);\n  };\n\n  /**\n   * Updates existing line filter ad-hoc variable filter\n   */\n  updateFilter(existingFilter: AdHocFilterWithLabels, filterUpdate: AdHocFilterWithLabels, debounced = true) {\n    if (debounced) {\n      // We want to update the UI right away, which uses the filter state as the UI state, but we don't want to execute the query immediately\n      this.updateVariableLineFilter(existingFilter, filterUpdate, true);\n      // Run the debounce to force the event emit, as the prior setState will have already set the filterExpression, which will otherwise prevent the emit of the event which will trigger the query\n      this.updateVariableDebounced(existingFilter, filterUpdate, false, true);\n    } else {\n      this.updateVariableLineFilter(existingFilter, filterUpdate);\n    }\n  }\n\n  /**\n   * Line filter input onChange helper method\n   */\n  onInputChange = (e: ChangeEvent<HTMLInputElement>, filter: AdHocFilterWithLabels) => {\n    this.updateFilter(filter, { ...filter, value: e.target.value }, true);\n  };\n\n  /**\n   * Remove a filter, will trigger query\n   */\n  removeFilter = (filter: AdHocFilterWithLabels) => {\n    const variable = getLineFiltersVariable(this);\n    const otherFilters = variable.state.filters.filter(\n      (f) => f.keyLabel !== undefined && f.keyLabel !== filter.keyLabel\n    );\n\n    variable.setState({\n      filters: otherFilters,\n    });\n  };\n\n  /**\n   * Update existing line filter ad-hoc variable\n   */\n  private updateVariableLineFilter = (\n    existingFilter: AdHocFilterWithLabels,\n    filterUpdate: AdHocFilterWithLabels,\n    skipPublish = false,\n    forcePublish = false\n  ) => {\n    const variable = getLineFiltersVariable(this);\n    const otherFilters = variable.state.filters.filter(\n      (f) => f.keyLabel !== undefined && f.keyLabel !== existingFilter.keyLabel\n    );\n\n    variable.updateFilters(\n      [\n        {\n          keyLabel: existingFilter.keyLabel,\n          key: filterUpdate.key,\n          operator: filterUpdate.operator,\n          value: filterUpdate.value,\n        },\n        ...otherFilters,\n      ],\n      { skipPublish, forcePublish }\n    );\n\n    reportAppInteraction(\n      USER_EVENTS_PAGES.service_details,\n      USER_EVENTS_ACTIONS.service_details.search_string_in_variables_changed,\n      {\n        searchQueryLength: existingFilter.value.length,\n        containsLevel: existingFilter.value.toLowerCase().includes('level'),\n        operator: filterUpdate.operator,\n        caseSensitive: filterUpdate.key,\n      }\n    );\n  };\n\n  /**\n   * Debounce line-filter ad-hoc variable update\n   */\n  private updateVariableDebounced = debounce(\n    (\n      existingFilter: AdHocFilterWithLabels,\n      filterUpdate: AdHocFilterWithLabels,\n      skipPublish = false,\n      forcePublish = false\n    ) => {\n      this.updateVariableLineFilter(existingFilter, filterUpdate, skipPublish, forcePublish);\n    },\n    1000\n  );\n}\n\n/**\n * Sort line filters by keyLabel, i.e. the order the line filter was added\n */\nexport function sortLineFilters(filters: AdHocFilterWithLabels[]) {\n  filters.sort((a, b) => parseInt(a.keyLabel ?? '0', 10) - parseInt(b.keyLabel ?? '0', 10));\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    lineFiltersWrap: css({\n      label: 'lineFiltersWrap',\n      display: 'flex',\n      flexWrap: 'wrap',\n      gap: `${theme.spacing(0.25)} ${theme.spacing(2)}`,\n    }),\n    wrapper: css({\n      maxWidth: '300px',\n    }),\n    titleWrap: css({\n      display: 'flex',\n      fontSize: theme.typography.bodySmall.fontSize,\n      marginBottom: theme.spacing(0.5),\n      gap: theme.spacing(1),\n    }),\n  };\n}\n","import { SceneComponentProps, SceneObjectBase, SceneObjectState } from '@grafana/scenes';\nimport { Button, useStyles2 } from '@grafana/ui';\nimport React from 'react';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { css } from '@emotion/css';\nimport { navigateToInitialPageAfterServiceSelection } from '../../services/navigate';\nimport { getLabelsVariable } from '../../services/variableGetters';\nimport { FilterOp } from '../../services/filterTypes';\nimport { testIds } from '../../services/testIds';\n\nexport interface ShowLogsButtonSceneState extends SceneObjectState {\n  disabled?: boolean;\n  hidden?: boolean;\n}\nexport class ShowLogsButtonScene extends SceneObjectBase<ShowLogsButtonSceneState> {\n  constructor(state: Partial<ShowLogsButtonSceneState>) {\n    super({\n      ...state,\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  onActivate() {\n    const labelsVar = getLabelsVariable(this);\n    const hasPositiveFilter = labelsVar.state.filters.some((f) => f.operator === FilterOp.Equal);\n    this.setState({\n      disabled: !hasPositiveFilter,\n    });\n\n    labelsVar.subscribeToState((newState) => {\n      const hasPositiveFilter = newState.filters.some((f) => f.operator === FilterOp.Equal);\n      this.setState({\n        disabled: !hasPositiveFilter,\n      });\n    });\n  }\n\n  onClick = () => {\n    const labelsVar = getLabelsVariable(this);\n    const positiveFilter = labelsVar.state.filters.find((f) => f.operator === FilterOp.Equal);\n\n    if (positiveFilter) {\n      navigateToInitialPageAfterServiceSelection(positiveFilter.key, positiveFilter.value);\n    }\n  };\n\n  static Component = ({ model }: SceneComponentProps<ShowLogsButtonScene>) => {\n    const { disabled, hidden } = model.useState();\n    const styles = useStyles2(getStyles);\n\n    if (hidden === true) {\n      return null;\n    }\n\n    return (\n      <Button\n        data-testid={testIds.index.header.showLogsButton}\n        disabled={disabled}\n        fill={'outline'}\n        className={styles.button}\n        onClick={model.onClick}\n      >\n        Show logs\n      </Button>\n    );\n  };\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    button: css({\n      [theme.breakpoints.down('lg')]: {\n        alignSelf: 'flex-end',\n      },\n      [theme.breakpoints.down('md')]: {\n        marginTop: theme.spacing(1),\n        alignSelf: 'flex-start',\n      },\n\n      alignSelf: 'flex-start',\n      marginTop: '22px',\n    }),\n  };\n}\n","import { SceneComponentProps, SceneObjectBase, SceneObjectState } from '@grafana/scenes';\nimport { Dropdown, Switch, ToolbarButton, useStyles2 } from '@grafana/ui';\nimport React from 'react';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { css } from '@emotion/css';\nimport { config } from '@grafana/runtime';\nimport { reportAppInteraction, USER_EVENTS_ACTIONS, USER_EVENTS_PAGES } from '../../services/analytics';\nimport { AGGREGATED_METRIC_START_DATE } from '../ServiceSelectionScene/ServiceSelectionScene';\nimport pluginJson from '../../plugin.json';\nimport { testIds } from '../../services/testIds';\nconst AGGREGATED_METRICS_USER_OVERRIDE_LOCALSTORAGE_KEY = `${pluginJson.id}.serviceSelection.aggregatedMetrics`;\n\nexport interface ToolbarSceneState extends SceneObjectState {\n  isOpen: boolean;\n  options: {\n    aggregatedMetrics: {\n      active: boolean;\n      userOverride: boolean;\n      disabled: boolean;\n    };\n  };\n}\nexport class ToolbarScene extends SceneObjectBase<ToolbarSceneState> {\n  constructor(state: Partial<ToolbarSceneState>) {\n    const userOverride = localStorage.getItem(AGGREGATED_METRICS_USER_OVERRIDE_LOCALSTORAGE_KEY);\n    const active = config.featureToggles.exploreLogsAggregatedMetrics && userOverride !== 'false';\n\n    super({\n      isOpen: false,\n      options: {\n        aggregatedMetrics: {\n          active: active ?? false,\n          userOverride: userOverride === 'true' ?? false,\n          disabled: false,\n        },\n      },\n      ...state,\n    });\n  }\n\n  public toggleAggregatedMetricsOverride = () => {\n    const active = !this.state.options.aggregatedMetrics.active;\n\n    reportAppInteraction(\n      USER_EVENTS_PAGES.service_selection,\n      USER_EVENTS_ACTIONS.service_selection.aggregated_metrics_toggled,\n      {\n        enabled: active,\n      }\n    );\n\n    localStorage.setItem(AGGREGATED_METRICS_USER_OVERRIDE_LOCALSTORAGE_KEY, active.toString());\n\n    this.setState({\n      options: {\n        aggregatedMetrics: {\n          active,\n          disabled: this.state.options.aggregatedMetrics.disabled,\n          userOverride: active,\n        },\n      },\n    });\n  };\n\n  public onToggleOpen = (isOpen: boolean) => {\n    this.setState({ isOpen });\n  };\n\n  static Component = ({ model }: SceneComponentProps<ToolbarScene>) => {\n    const { isOpen, options } = model.useState();\n    const styles = useStyles2(getStyles);\n\n    const renderPopover = () => {\n      return (\n        <div className={styles.popover} onClick={(evt) => evt.stopPropagation()}>\n          <div className={styles.heading}>Query options</div>\n          <div className={styles.options}>\n            <div\n              title={\n                'Aggregated metrics will return service queries results much more quickly, but with lower resolution'\n              }\n            >\n              Aggregated metrics\n            </div>\n            <span\n              title={\n                options.aggregatedMetrics.disabled\n                  ? `Aggregated metrics can only be enabled for queries starting after ${AGGREGATED_METRIC_START_DATE.toLocaleString()}`\n                  : ''\n              }\n            >\n              <Switch\n                label={'Toggle aggregated metrics'}\n                data-testid={testIds.index.aggregatedMetricsToggle}\n                value={options.aggregatedMetrics.active}\n                disabled={options.aggregatedMetrics.disabled}\n                onChange={model.toggleAggregatedMetricsOverride}\n              />\n            </span>\n          </div>\n        </div>\n      );\n    };\n\n    if (options.aggregatedMetrics) {\n      return (\n        <Dropdown overlay={renderPopover} placement=\"bottom\" onVisibleChange={model.onToggleOpen}>\n          <ToolbarButton\n            icon=\"cog\"\n            variant=\"canvas\"\n            isOpen={isOpen}\n            data-testid={testIds.index.aggregatedMetricsMenu}\n          />\n        </Dropdown>\n      );\n    }\n\n    return <></>;\n  };\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    popover: css({\n      display: 'flex',\n      padding: theme.spacing(2),\n      flexDirection: 'column',\n      background: theme.colors.background.primary,\n      boxShadow: theme.shadows.z3,\n      borderRadius: theme.shape.radius.default,\n      border: `1px solid ${theme.colors.border.weak}`,\n      zIndex: 1,\n      marginRight: theme.spacing(2),\n    }),\n    heading: css({\n      fontWeight: theme.typography.fontWeightMedium,\n      paddingBottom: theme.spacing(2),\n    }),\n    options: css({\n      display: 'grid',\n      gridTemplateColumns: '1fr 50px',\n      rowGap: theme.spacing(1),\n      columnGap: theme.spacing(2),\n      alignItems: 'center',\n    }),\n  };\n}\n","import {\n  EmbeddedScene,\n  SceneAppPage,\n  SceneAppPageLike,\n  SceneFlexLayout,\n  SceneRouteMatch,\n  SceneTimeRange,\n} from '@grafana/scenes';\nimport {\n  CHILD_ROUTE_DEFINITIONS,\n  ChildDrilldownSlugs,\n  DRILLDOWN_URL_KEYS,\n  extractValuesFromRoute,\n  PageSlugs,\n  ParentDrilldownSlugs,\n  ROUTE_DEFINITIONS,\n  ROUTES,\n  SERVICE_URL_KEYS,\n  SUB_ROUTES,\n  ValueSlugs,\n} from '../services/routing';\nimport { PageLayoutType } from '@grafana/data';\nimport { IndexScene } from './IndexScene/IndexScene';\nimport { navigateToIndex } from '../services/navigate';\nimport { logger } from '../services/logger';\nimport { capitalizeFirstLetter } from '../services/text';\nimport { PLUGIN_BASE_URL, prefixRoute } from '../services/plugin';\n\nexport type RouteProps = { labelName: string; labelValue: string; breakdownLabel?: string };\nexport type RouteMatch = SceneRouteMatch<RouteProps>;\ntype Optional<T, K extends keyof T> = Pick<Partial<T>, K> & Omit<T, K>;\nexport type OptionalRouteProps = Optional<RouteProps, 'labelName' | 'labelValue'>;\nexport type OptionalRouteMatch = SceneRouteMatch<OptionalRouteProps>;\n\nexport const DEFAULT_TIME_RANGE = { from: 'now-15m', to: 'now' };\nfunction getServicesScene(routeMatch: OptionalRouteMatch) {\n  return new EmbeddedScene({\n    body: new IndexScene({\n      $timeRange: new SceneTimeRange(DEFAULT_TIME_RANGE),\n      routeMatch,\n    }),\n  });\n}\n\n// Index page\nexport function makeIndexPage() {\n  return new SceneAppPage({\n    // Top level breadcrumb\n    title: 'Logs',\n    url: prefixRoute(PageSlugs.explore),\n    layout: PageLayoutType.Custom,\n    preserveUrlKeys: SERVICE_URL_KEYS,\n    routePath: prefixRoute(PageSlugs.explore),\n    getScene: (routeMatch) => getServicesScene(routeMatch),\n    drilldowns: [\n      {\n        routePath: ROUTE_DEFINITIONS.logs,\n        getPage: (routeMatch, parent) => makeBreakdownPage(routeMatch, parent, PageSlugs.logs),\n        defaultRoute: true,\n      },\n      {\n        routePath: ROUTE_DEFINITIONS.labels,\n        getPage: (routeMatch, parent) => makeBreakdownPage(routeMatch, parent, PageSlugs.labels),\n      },\n      {\n        routePath: ROUTE_DEFINITIONS.patterns,\n        getPage: (routeMatch, parent) => makeBreakdownPage(routeMatch, parent, PageSlugs.patterns),\n      },\n      {\n        routePath: ROUTE_DEFINITIONS.fields,\n        getPage: (routeMatch, parent) => makeBreakdownPage(routeMatch, parent, PageSlugs.fields),\n      },\n      {\n        routePath: CHILD_ROUTE_DEFINITIONS.label,\n        getPage: (routeMatch, parent) => makeBreakdownValuePage(routeMatch, parent, ValueSlugs.label),\n      },\n      {\n        routePath: CHILD_ROUTE_DEFINITIONS.field,\n        getPage: (routeMatch: RouteMatch, parent) => makeBreakdownValuePage(routeMatch, parent, ValueSlugs.field),\n      },\n      {\n        routePath: '*',\n        getPage: () => makeRedirectPage(),\n      },\n    ],\n  });\n}\n\n// Redirect page back to index\nexport function makeRedirectPage() {\n  return new SceneAppPage({\n    title: '',\n    url: PLUGIN_BASE_URL,\n    getScene: makeEmptyScene(),\n    hideFromBreadcrumbs: true,\n    routePath: '*',\n    $behaviors: [\n      () => {\n        navigateToIndex();\n      },\n    ],\n  });\n}\n\nfunction makeEmptyScene(): (routeMatch: SceneRouteMatch) => EmbeddedScene {\n  return () =>\n    new EmbeddedScene({\n      body: new SceneFlexLayout({\n        direction: 'column',\n        children: [],\n      }),\n    });\n}\n\nexport function makeBreakdownPage(\n  routeMatch: RouteMatch,\n  parent: SceneAppPageLike,\n  slug: ParentDrilldownSlugs\n): SceneAppPage {\n  const { labelName, labelValue } = extractValuesFromRoute(routeMatch);\n  return new SceneAppPage({\n    title: capitalizeFirstLetter(slug),\n    layout: PageLayoutType.Custom,\n    url: ROUTES[slug](labelValue, labelName),\n    preserveUrlKeys: DRILLDOWN_URL_KEYS,\n    getParentPage: () => parent,\n    getScene: (routeMatch) => getServicesScene(routeMatch),\n  });\n}\n\nexport function makeBreakdownValuePage(\n  routeMatch: RouteMatch,\n  parent: SceneAppPageLike,\n  slug: ChildDrilldownSlugs\n): SceneAppPage {\n  const { labelName, labelValue, breakdownLabel } = extractValuesFromRoute(routeMatch);\n\n  if (!breakdownLabel) {\n    const e = new Error('Breakdown value missing!');\n    logger.error(e, {\n      msg: 'makeBreakdownValuePage: Breakdown value missing!',\n      labelName,\n      labelValue,\n      breakdownLabel: breakdownLabel ?? '',\n    });\n    throw e;\n  }\n\n  return new SceneAppPage({\n    title: capitalizeFirstLetter(breakdownLabel),\n    layout: PageLayoutType.Custom,\n    url: SUB_ROUTES[slug](labelValue, labelName, breakdownLabel),\n    preserveUrlKeys: DRILLDOWN_URL_KEYS,\n    getParentPage: () => parent,\n    getScene: (routeMatch) => getServicesScene(routeMatch),\n  });\n}\n","import { DataFrame, TimeRange } from '@grafana/data';\nimport { usePluginLinks } from '@grafana/runtime';\nimport { SceneComponentProps, sceneGraph, SceneObjectBase, SceneObjectState, SceneQueryRunner } from '@grafana/scenes';\nimport { DataSourceRef } from '@grafana/schema';\nimport { IconButton } from '@grafana/ui';\nimport React from 'react';\nimport { ExtensionPoints } from 'services/extensions/links';\nimport { findObjectOfType, getLokiDatasource } from 'services/scenes';\n\nimport LokiLogo from '../../../img/logo.svg';\nimport { LokiDatasource, LokiQuery } from '../../../services/lokiQuery';\n\nexport interface AddToExplorationButtonState extends SceneObjectState {\n  frame?: DataFrame;\n  labelName?: string;\n  fieldName?: string;\n  ds?: LokiDatasource;\n  context?: ExtensionContext;\n  queries: LokiQuery[];\n}\n\ntype ExtensionContext = {\n  timeRange: TimeRange;\n  queries: LokiQuery[];\n  datasource: DataSourceRef;\n  origin: string;\n  url: string;\n  type: string;\n  title: string;\n  id: string;\n  logoPath: string;\n  note?: string;\n  drillDownLabel?: string;\n};\n\nexport class AddToExplorationButton extends SceneObjectBase<AddToExplorationButtonState> {\n  constructor(state: Omit<AddToExplorationButtonState, 'queries'>) {\n    super({ ...state, queries: [] });\n    this.addActivationHandler(this.onActivate);\n  }\n\n  private onActivate = () => {\n    getLokiDatasource(this).then((ds) => {\n      this.setState({ ds });\n    });\n\n    this._subs.add(\n      this.subscribeToState((newState, prevState) => {\n        if (!this.state.queries.length) {\n          this.getQueries();\n        }\n        if (!this.state.context && this.state.queries.length) {\n          this.getContext();\n        }\n      })\n    );\n  };\n\n  private getQueries = () => {\n    const data = sceneGraph.getData(this);\n    const queryRunner = findObjectOfType(data, (o) => o instanceof SceneQueryRunner, SceneQueryRunner);\n    if (queryRunner) {\n      const filter = this.state.frame ? getFilter(this.state.frame) : null;\n      const queries = queryRunner.state.queries.map((q) => ({\n        ...q,\n        expr: sceneGraph.interpolate(queryRunner, q.expr),\n        legendFormat: filter?.name ? `{{ ${filter.name} }}` : sceneGraph.interpolate(queryRunner, q.legendFormat),\n        datasource: q.datasource ?? undefined,\n      }));\n      if (JSON.stringify(queries) !== JSON.stringify(this.state.queries)) {\n        this.setState({ queries });\n      }\n    }\n  };\n\n  private getContext = () => {\n    const { queries, ds, labelName, fieldName } = this.state;\n    const timeRange = sceneGraph.getTimeRange(this);\n\n    if (!timeRange || !queries || !ds?.uid) {\n      return;\n    }\n    const ctx = {\n      origin: 'Explore Logs',\n      type: 'timeseries',\n      queries,\n      timeRange: { ...timeRange.state.value },\n      datasource: { uid: ds.uid },\n      url: window.location.href,\n      id: `${JSON.stringify(queries)}${labelName}${fieldName}`,\n      title: `${labelName}${fieldName ? ` > ${fieldName}` : ''}`,\n      logoPath: LokiLogo,\n      drillDownLabel: fieldName,\n    };\n    if (JSON.stringify(ctx) !== JSON.stringify(this.state.context)) {\n      this.setState({ context: ctx });\n    }\n  };\n\n  public static Component = ({ model }: SceneComponentProps<AddToExplorationButton>) => {\n    const { context } = model.useState();\n    const { links } = usePluginLinks({ extensionPointId: ExtensionPoints.MetricExploration, context });\n\n    return (\n      <>\n        {links\n          .filter((link) => link.pluginId === 'grafana-explorations-app' && link.onClick)\n          .map((link) => (\n            <IconButton\n              tooltip={link.description}\n              aria-label=\"extension-link-to-open-exploration\"\n              key={link.id}\n              name={link.icon ?? 'panel-add'}\n              onClick={(e) => {\n                if (link.onClick) {\n                  link.onClick(e);\n                }\n              }}\n            />\n          ))}\n      </>\n    );\n  };\n}\n\nconst getFilter = (frame: DataFrame) => {\n  const filterNameAndValueObj = frame.fields[1]?.labels ?? {};\n  if (Object.keys(filterNameAndValueObj).length !== 1) {\n    return;\n  }\n  const name = Object.keys(filterNameAndValueObj)[0];\n  return { name, value: filterNameAndValueObj[name] };\n};\n","import { DataFrame, GrafanaTheme2, PanelMenuItem } from '@grafana/data';\nimport {\n  PanelBuilders,\n  SceneComponentProps,\n  SceneCSSGridItem,\n  SceneFlexLayout,\n  sceneGraph,\n  SceneObject,\n  SceneObjectBase,\n  SceneObjectState,\n  SceneQueryRunner,\n  VizPanel,\n  VizPanelMenu,\n} from '@grafana/scenes';\nimport React from 'react';\nimport { onExploreLinkClick } from '../ServiceScene/GoToExploreButton';\nimport { IndexScene } from '../IndexScene/IndexScene';\nimport { findObjectOfType, getQueryRunnerFromChildren } from '../../services/scenes';\nimport { reportAppInteraction, USER_EVENTS_ACTIONS, USER_EVENTS_PAGES } from '../../services/analytics';\nimport { logger } from '../../services/logger';\nimport { AddToExplorationButton } from '../ServiceScene/Breakdowns/AddToExplorationButton';\nimport { getPluginLinkExtensions } from '@grafana/runtime';\nimport { ExtensionPoints } from '../../services/extensions/links';\nimport { setLevelColorOverrides } from '../../services/panel';\nimport { setPanelOption } from '../../services/store';\nimport { FieldsAggregatedBreakdownScene } from '../ServiceScene/Breakdowns/FieldsAggregatedBreakdownScene';\nimport { setValueSummaryHeight } from '../ServiceScene/Breakdowns/Panels/ValueSummary';\nimport { FieldValuesBreakdownScene } from '../ServiceScene/Breakdowns/FieldValuesBreakdownScene';\nimport { LabelValuesBreakdownScene } from '../ServiceScene/Breakdowns/LabelValuesBreakdownScene';\nimport { css } from '@emotion/css';\n\nconst ADD_TO_INVESTIGATION_MENU_TEXT = 'Add to investigation';\nconst ADD_TO_INVESTIGATION_MENU_DIVIDER_TEXT = 'investigations_divider'; // Text won't be visible\nconst ADD_TO_INVESTIGATION_MENU_GROUP_TEXT = 'Investigations';\n\nexport enum AvgFieldPanelType {\n  'timeseries' = 'timeseries',\n  'histogram' = 'histogram',\n}\n\nexport enum CollapsablePanelText {\n  collapsed = 'Collapse',\n  expanded = 'Expand',\n}\n\ninterface PanelMenuState extends SceneObjectState {\n  body?: VizPanelMenu;\n  frame?: DataFrame;\n  labelName?: string;\n  fieldName?: string;\n  addExplorationsLink?: boolean;\n  explorationsButton?: AddToExplorationButton;\n  panelType?: AvgFieldPanelType;\n}\n\n/**\n * @todo the VizPanelMenu interface is overly restrictive, doesn't allow any member functions on this class, so everything is currently inlined\n */\nexport class PanelMenu extends SceneObjectBase<PanelMenuState> implements VizPanelMenu, SceneObject {\n  constructor(state: Partial<PanelMenuState>) {\n    super({ ...state, addExplorationsLink: state.addExplorationsLink ?? true });\n    this.addActivationHandler(() => {\n      // Navigation options (all panels)\n      const items: PanelMenuItem[] = [\n        {\n          text: 'Navigation',\n          type: 'group',\n        },\n        {\n          text: 'Explore',\n          iconClassName: 'compass',\n          href: getExploreLink(this),\n          onClick: () => onExploreLinkClickTracking(),\n          shortcut: 'p x',\n        },\n      ];\n\n      let viz;\n      try {\n        viz = sceneGraph.getAncestor(this, VizPanel);\n      } catch (e) {\n        // If we can't find the viz panel, we can't add the Explore item. Currently the case for logs table.\n        this.setState({\n          body: new VizPanelMenu({\n            items,\n          }),\n        });\n        return;\n      }\n\n      this.setState({\n        explorationsButton: new AddToExplorationButton({\n          labelName: this.state.labelName,\n          fieldName: this.state.fieldName,\n          frame: this.state.frame,\n        }),\n      });\n\n      if (this.state.addExplorationsLink) {\n        // @todo rewrite the AddToExplorationButton\n        // Manually activate scene\n        this.state.explorationsButton?.activate();\n      }\n\n      // Visualization options\n      if (this.state.panelType || viz?.state.collapsible) {\n        addVisualizationHeader(items, this);\n      }\n\n      if (viz?.state.collapsible) {\n        addCollapsableItem(items, this);\n      }\n\n      if (this.state.panelType) {\n        addHistogramItem(items, this);\n      }\n\n      this.setState({\n        body: new VizPanelMenu({\n          items,\n        }),\n      });\n\n      this._subs.add(\n        this.state.explorationsButton?.subscribeToState(() => {\n          subscribeToAddToExploration(this);\n        })\n      );\n    });\n  }\n\n  addItem(item: PanelMenuItem): void {\n    if (this.state.body) {\n      this.state.body.addItem(item);\n    }\n  }\n  setItems(items: PanelMenuItem[]): void {\n    if (this.state.body) {\n      this.state.body.setItems(items);\n    }\n  }\n\n  public static Component = ({ model }: SceneComponentProps<PanelMenu>) => {\n    const { body } = model.useState();\n\n    if (body) {\n      return <body.Component model={body} />;\n    }\n\n    return <></>;\n  };\n}\n\nfunction addVisualizationHeader(items: PanelMenuItem[], sceneRef: PanelMenu) {\n  items.push({\n    text: '',\n    type: 'divider',\n  });\n  items.push({\n    text: 'Visualization',\n    type: 'group',\n  });\n}\n\nfunction addCollapsableItem(items: PanelMenuItem[], menu: PanelMenu) {\n  const viz = sceneGraph.getAncestor(menu, VizPanel);\n  items.push({\n    text: viz.state.collapsed ? CollapsablePanelText.expanded : CollapsablePanelText.collapsed,\n    iconClassName: viz.state.collapsed ? 'table-collapse-all' : 'table-expand-all',\n    onClick: () => {\n      const newCollapsableState = viz.state.collapsed ? CollapsablePanelText.expanded : CollapsablePanelText.collapsed;\n\n      // Update the viz\n      const vizPanelFlexLayout = sceneGraph.getAncestor(menu, SceneFlexLayout);\n      setValueSummaryHeight(vizPanelFlexLayout, newCollapsableState);\n\n      // Set state and update local storage\n      viz.setState({\n        collapsed: !viz.state.collapsed,\n      });\n      setPanelOption('collapsed', newCollapsableState);\n    },\n  });\n}\n\nfunction addHistogramItem(items: PanelMenuItem[], sceneRef: PanelMenu) {\n  items.push({\n    text: sceneRef.state.panelType !== AvgFieldPanelType.histogram ? 'Histogram' : 'Time series',\n    iconClassName: sceneRef.state.panelType !== AvgFieldPanelType.histogram ? 'graph-bar' : 'chart-line',\n\n    onClick: () => {\n      const gridItem = sceneGraph.getAncestor(sceneRef, SceneCSSGridItem);\n      const viz = sceneGraph.getAncestor(sceneRef, VizPanel).clone();\n      const $data = sceneGraph.getData(sceneRef).clone();\n      const menu = sceneRef.clone();\n      const headerActions = Array.isArray(viz.state.headerActions)\n        ? viz.state.headerActions.map((o) => o.clone())\n        : viz.state.headerActions;\n      let body;\n\n      if (sceneRef.state.panelType !== AvgFieldPanelType.histogram) {\n        body = PanelBuilders.timeseries().setOverrides(setLevelColorOverrides);\n      } else {\n        body = PanelBuilders.histogram();\n      }\n\n      gridItem.setState({\n        body: body.setMenu(menu).setTitle(viz.state.title).setHeaderActions(headerActions).setData($data).build(),\n      });\n\n      const newPanelType =\n        sceneRef.state.panelType !== AvgFieldPanelType.timeseries\n          ? AvgFieldPanelType.timeseries\n          : AvgFieldPanelType.histogram;\n      setPanelOption('panelType', newPanelType);\n      menu.setState({ panelType: newPanelType });\n\n      const fieldsAggregatedBreakdownScene = findObjectOfType(\n        gridItem,\n        (o) => o instanceof FieldsAggregatedBreakdownScene,\n        FieldsAggregatedBreakdownScene\n      );\n      if (fieldsAggregatedBreakdownScene) {\n        fieldsAggregatedBreakdownScene.rebuildAvgFields();\n      }\n\n      onSwitchVizTypeTracking(newPanelType);\n    },\n  });\n}\n\nexport const getExploreLink = (sceneRef: SceneObject) => {\n  const indexScene = sceneGraph.getAncestor(sceneRef, IndexScene);\n  const $data = sceneGraph.getData(sceneRef);\n  let queryRunner = $data instanceof SceneQueryRunner ? $data : getQueryRunnerFromChildren($data)[0];\n\n  // If we don't have a query runner, then our panel is within a SceneCSSGridItem, we need to get the query runner from there\n  if (!queryRunner) {\n    const breakdownScene = sceneGraph.findObject(\n      sceneRef,\n      (o) => o instanceof FieldValuesBreakdownScene || o instanceof LabelValuesBreakdownScene\n    );\n    if (breakdownScene) {\n      const queryProvider = sceneGraph.getData(breakdownScene);\n\n      if (queryProvider instanceof SceneQueryRunner) {\n        queryRunner = queryProvider;\n      } else {\n        queryRunner = getQueryRunnerFromChildren(queryProvider)[0];\n      }\n    } else {\n      logger.error(new Error('Unable to locate query runner!'), {\n        msg: 'PanelMenu - getExploreLink: Unable to locate query runner!',\n      });\n    }\n  }\n  const uninterpolatedExpr: string | undefined = queryRunner.state.queries[0].expr;\n  const expr = sceneGraph.interpolate(sceneRef, uninterpolatedExpr);\n\n  return onExploreLinkClick(indexScene, expr);\n};\n\nconst onExploreLinkClickTracking = () => {\n  reportAppInteraction(USER_EVENTS_PAGES.all, USER_EVENTS_ACTIONS.all.open_in_explore_menu_clicked);\n};\n\nconst onSwitchVizTypeTracking = (newVizType: AvgFieldPanelType) => {\n  reportAppInteraction(USER_EVENTS_PAGES.service_details, USER_EVENTS_ACTIONS.service_details.change_viz_type, {\n    newVizType,\n  });\n};\n\nconst getInvestigationLink = (addToExplorations: AddToExplorationButton) => {\n  const links = getPluginLinkExtensions({\n    extensionPointId: ExtensionPoints.MetricExploration,\n    context: addToExplorations.state.context,\n  });\n\n  return links.extensions[0];\n};\n\nconst onAddToInvestigationClick = (event: React.MouseEvent, addToExplorations: AddToExplorationButton) => {\n  const link = getInvestigationLink(addToExplorations);\n  if (link && link.onClick) {\n    link.onClick(event);\n  }\n};\n\nfunction subscribeToAddToExploration(exploreLogsVizPanelMenu: PanelMenu) {\n  const addToExplorationButton = exploreLogsVizPanelMenu.state.explorationsButton;\n  if (addToExplorationButton) {\n    const link = getInvestigationLink(addToExplorationButton);\n\n    const existingMenuItems = exploreLogsVizPanelMenu.state.body?.state.items ?? [];\n\n    const existingAddToExplorationLink = existingMenuItems.find((item) => item.text === ADD_TO_INVESTIGATION_MENU_TEXT);\n\n    if (link) {\n      if (!existingAddToExplorationLink) {\n        exploreLogsVizPanelMenu.state.body?.addItem({\n          text: ADD_TO_INVESTIGATION_MENU_DIVIDER_TEXT,\n          type: 'divider',\n        });\n        exploreLogsVizPanelMenu.state.body?.addItem({\n          text: ADD_TO_INVESTIGATION_MENU_GROUP_TEXT,\n          type: 'group',\n        });\n        exploreLogsVizPanelMenu.state.body?.addItem({\n          text: ADD_TO_INVESTIGATION_MENU_TEXT,\n          iconClassName: 'plus-square',\n          onClick: (e) => onAddToInvestigationClick(e, addToExplorationButton),\n        });\n      } else {\n        if (existingAddToExplorationLink) {\n          exploreLogsVizPanelMenu.state.body?.setItems(\n            existingMenuItems.filter(\n              (item) =>\n                [\n                  ADD_TO_INVESTIGATION_MENU_DIVIDER_TEXT,\n                  ADD_TO_INVESTIGATION_MENU_GROUP_TEXT,\n                  ADD_TO_INVESTIGATION_MENU_TEXT,\n                ].includes(item.text) === false\n            )\n          );\n        }\n      }\n    }\n  }\n}\n\nexport const getPanelWrapperStyles = (theme: GrafanaTheme2) => {\n  return {\n    panelWrapper: css({\n      width: '100%',\n      height: '100%',\n      label: 'panel-wrapper',\n      position: 'absolute',\n      display: 'flex',\n\n      // @todo remove this wrapper and styles when core changes are introduced in 11.5\n      // Need more specificity to override core style\n      'button.show-on-hover': {\n        opacity: 1,\n        visibility: 'visible',\n        background: 'none',\n        '&:hover': {\n          background: theme.colors.secondary.shade,\n        },\n      },\n    }),\n  };\n};\n","import React from 'react';\n\nimport { toURLRange, urlUtil } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { sceneGraph } from '@grafana/scenes';\nimport { ToolbarButton } from '@grafana/ui';\n\nimport { getDataSource, getQueryExpr } from 'services/scenes';\nimport { testIds } from 'services/testIds';\nimport { IndexScene } from 'Components/IndexScene/IndexScene';\nimport { USER_EVENTS_ACTIONS, USER_EVENTS_PAGES, reportAppInteraction } from 'services/analytics';\nimport { getDisplayedFields, getLogsVisualizationType } from 'services/store';\nimport { unknownToStrings } from '../../services/narrowing';\ninterface GoToExploreButtonState {\n  exploration: IndexScene;\n}\n\nexport const GoToExploreButton = ({ exploration }: GoToExploreButtonState) => {\n  const onClick = () => {\n    reportAppInteraction(\n      USER_EVENTS_PAGES.service_details,\n      USER_EVENTS_ACTIONS.service_details.open_in_explore_clicked\n    );\n    onExploreLinkClick(exploration, undefined, true);\n  };\n\n  return (\n    <ToolbarButton\n      data-testid={testIds.exploreServiceDetails.openExplore}\n      variant={'canvas'}\n      icon={'compass'}\n      onClick={onClick}\n    >\n      Open in Explore\n    </ToolbarButton>\n  );\n};\n\nexport const onExploreLinkClick = (indexScene: IndexScene, expr?: string, open = false) => {\n  if (!expr) {\n    expr = getQueryExpr(indexScene);\n  }\n\n  expr = expr.replace(/\\s+/g, ' ').trimEnd();\n\n  const datasource = getDataSource(indexScene);\n  const timeRange = sceneGraph.getTimeRange(indexScene).state.value;\n  const displayedFields = getDisplayedFields(indexScene);\n  const visualisationType = getLogsVisualizationType();\n  const columns = getUrlColumns();\n  const exploreState = JSON.stringify({\n    ['loki-explore']: {\n      range: toURLRange(timeRange.raw),\n      queries: [{ refId: 'logs', expr, datasource }],\n      panelsState: { logs: { displayedFields, visualisationType, columns } },\n      datasource,\n    },\n  });\n  const subUrl = config.appSubUrl ?? '';\n  const link = urlUtil.renderUrl(`${subUrl}/explore`, { panes: exploreState, schemaVersion: 1 });\n  if (open) {\n    window.open(link, '_blank');\n  }\n\n  return link;\n};\n\nfunction getUrlColumns() {\n  const params = new URLSearchParams(window.location.search);\n  const urlColumns = params.get('urlColumns');\n  if (urlColumns) {\n    try {\n      const columns = unknownToStrings(JSON.parse(urlColumns));\n      let columnsParam: Record<number, string> = {};\n      for (const key in columns) {\n        columnsParam[key] = columns[key];\n      }\n      return columnsParam;\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  return undefined;\n}\n","import React from 'react';\n\nimport { AdHocVariableFilter, BusEventBase, DataFrame } from '@grafana/data';\nimport { SceneComponentProps, SceneObject, SceneObjectBase, SceneObjectState } from '@grafana/scenes';\nimport { VariableHide } from '@grafana/schema';\nimport { reportAppInteraction, USER_EVENTS_ACTIONS, USER_EVENTS_PAGES } from 'services/analytics';\nimport { LEVEL_VARIABLE_VALUE, VAR_FIELDS, VAR_LABELS, VAR_LEVELS, VAR_METADATA } from 'services/variables';\nimport { FilterButton } from 'Components/FilterButton';\nimport { getDetectedLabelsFrame } from '../ServiceScene';\nimport { getParserForField } from '../../../services/fields';\nimport { getAdHocFiltersVariable, getValueFromAdHocVariableFilter } from '../../../services/variableGetters';\nimport { FilterOp } from '../../../services/filterTypes';\n\nimport { addToFavorites } from '../../../services/favorites';\n\nexport interface AddToFiltersButtonState extends SceneObjectState {\n  frame: DataFrame;\n  variableName: VariableFilterType;\n}\n\nexport class AddFilterEvent extends BusEventBase {\n  constructor(public operator: FilterType | NumericFilterType, public key: string, public value: string) {\n    super();\n  }\n  public static type = 'add-filter';\n}\n\nexport class ClearFilterEvent extends BusEventBase {\n  constructor(public key: string, public value?: string, public operator?: FilterType) {\n    super();\n  }\n  public static type = 'add-filter';\n}\n\nexport type NumericFilterType = FilterOp.gt | FilterOp.gte | FilterOp.lt | FilterOp.lte;\n\n/**\n * Filter types:\n * - include/exclude: add a negative or positive filter\n * - clear: remove filter if exists\n * - toggle: if the filter does not exist, add as include; if exists, remove\n */\nexport type FilterType = 'include' | 'clear' | 'exclude' | 'toggle';\n\nexport function addAdHocFilter(filter: AdHocVariableFilter, scene: SceneObject, variableType?: VariableFilterType) {\n  const type: FilterType = filter.operator === '=' ? 'include' : 'exclude';\n  addToFilters(filter.key, filter.value, type, scene, variableType);\n}\n\nexport type VariableFilterType = typeof VAR_LABELS | typeof VAR_FIELDS | typeof VAR_LEVELS | typeof VAR_METADATA;\n\nexport function clearFilters(\n  key: string,\n  scene: SceneObject,\n  variableType?: VariableFilterType,\n  value?: string,\n  operator?: FilterType\n) {\n  if (!variableType) {\n    variableType = resolveVariableTypeForField(key, scene);\n  }\n  const variable = getAdHocFiltersVariable(validateVariableNameForField(key, variableType), scene);\n\n  let filters = variable.state.filters.filter((filter) => {\n    const fieldValue = getValueFromAdHocVariableFilter(variable, filter);\n    if (value && operator) {\n      return !(filter.key === key && fieldValue.value === value && filter.operator === operator);\n    }\n    if (value) {\n      return !(filter.key === key && fieldValue.value === value);\n    }\n    if (operator) {\n      return !(filter.key === key && filter.operator === operator);\n    }\n\n    return !(filter.key === key);\n  });\n\n  scene.publishEvent(new ClearFilterEvent(key, value, operator), true);\n\n  variable.setState({\n    filters,\n  });\n}\n\ntype OperatorType = 'greater' | 'lesser';\nconst getNumericOperatorType = (op: NumericFilterType | string): OperatorType | undefined => {\n  if (op === FilterOp.gt || op === FilterOp.gte) {\n    return 'greater';\n  }\n  if (op === FilterOp.lt || op === FilterOp.lte) {\n    return 'lesser';\n  }\n  return undefined;\n};\n\nexport function removeFilter(\n  key: string,\n  scene: SceneObject,\n  operator?: NumericFilterType,\n  variableType?: VariableFilterType\n) {\n  if (!variableType) {\n    variableType = resolveVariableTypeForField(key, scene);\n  }\n  const variable = getAdHocFiltersVariable(validateVariableNameForField(key, variableType), scene);\n  const operatorType = operator ? getNumericOperatorType(operator) : undefined;\n\n  let filters = variable.state.filters.filter((filter) => {\n    return !(\n      filter.key === key &&\n      (getNumericOperatorType(filter.operator) === operatorType || filter.operator === FilterOp.NotEqual)\n    );\n  });\n\n  variable.setState({\n    filters,\n  });\n}\n\nexport function addNumericFilter(\n  key: string,\n  value: string,\n  operator: NumericFilterType,\n  scene: SceneObject,\n  variableType?: VariableFilterType\n) {\n  const operatorType = getNumericOperatorType(operator);\n\n  if (!variableType) {\n    variableType = resolveVariableTypeForField(key, scene);\n  }\n  const variable = getAdHocFiltersVariable(validateVariableNameForField(key, variableType), scene);\n\n  let valueObject: string | undefined = undefined;\n  if (variableType === VAR_FIELDS) {\n    valueObject = JSON.stringify({\n      value,\n      parser: getParserForField(key, scene),\n    });\n  }\n\n  let filters = variable.state.filters.filter((filter) => {\n    return !(\n      filter.key === key &&\n      (getNumericOperatorType(filter.operator) === operatorType || filter.operator === FilterOp.NotEqual)\n    );\n  });\n\n  filters = [\n    ...filters,\n    {\n      key,\n      operator: operator,\n      value: valueObject ? valueObject : value,\n      valueLabels: [value],\n    },\n  ];\n\n  scene.publishEvent(new AddFilterEvent(operator, key, value), true);\n\n  variable.setState({\n    filters,\n  });\n}\n\nexport function addToFilters(\n  key: string,\n  value: string,\n  operator: FilterType,\n  scene: SceneObject,\n  variableType?: VariableFilterType\n) {\n  if (!variableType) {\n    variableType = resolveVariableTypeForField(key, scene);\n  }\n\n  if (variableType === VAR_LABELS) {\n    addToFavorites(key, value, scene);\n  }\n\n  const variable = getAdHocFiltersVariable(validateVariableNameForField(key, variableType), scene);\n\n  let valueObject: string | undefined = undefined;\n  if (variableType === VAR_FIELDS) {\n    valueObject = JSON.stringify({\n      value,\n      parser: getParserForField(key, scene),\n    });\n  }\n\n  // If the filter exists, filter it\n  let filters = variable.state.filters.filter((filter) => {\n    const fieldValue = getValueFromAdHocVariableFilter(variable, filter);\n\n    // if we're including, we want to remove all filters that have this key\n    if (operator === 'include') {\n      return !(filter.key === key && filter.operator !== FilterOp.Equal);\n    }\n\n    return !(filter.key === key && fieldValue.value === value);\n  });\n\n  const filterExists = filters.length !== variable.state.filters.length;\n\n  if (operator === 'include' || operator === 'exclude' || (!filterExists && operator === 'toggle')) {\n    filters = [\n      ...filters,\n      {\n        key,\n        operator: operator === 'exclude' ? FilterOp.NotEqual : FilterOp.Equal,\n        value: valueObject ? valueObject : value,\n        valueLabels: [value],\n      },\n    ];\n  }\n\n  scene.publishEvent(new AddFilterEvent(operator, key, value), true);\n\n  variable.setState({\n    filters,\n  });\n}\n\nexport function replaceFilter(\n  key: string,\n  value: string,\n  operator: Extract<FilterType, 'include' | 'exclude'>,\n  scene: SceneObject\n) {\n  const variable = getAdHocFiltersVariable(\n    validateVariableNameForField(key, resolveVariableTypeForField(key, scene)),\n    scene\n  );\n\n  variable.setState({\n    filters: [\n      {\n        key,\n        operator: operator === 'exclude' ? FilterOp.NotEqual : FilterOp.Equal,\n        value,\n      },\n    ],\n    hide: VariableHide.hideLabel,\n  });\n}\n\nexport function validateVariableNameForField(field: string, variableName: string) {\n  // Special case: If the key is LEVEL_VARIABLE_VALUE, we need to use the VAR_FIELDS.\n  if (field === LEVEL_VARIABLE_VALUE) {\n    return VAR_LEVELS;\n  }\n  return variableName;\n}\n\nfunction resolveVariableTypeForField(field: string, scene: SceneObject): VariableFilterType {\n  const indexedLabel = getDetectedLabelsFrame(scene)?.fields?.find((label) => label.name === field);\n  return indexedLabel ? VAR_LABELS : VAR_FIELDS;\n}\n\nexport class AddToFiltersButton extends SceneObjectBase<AddToFiltersButtonState> {\n  public onClick = (type: FilterType) => {\n    const filter = getFilter(this.state.frame);\n    if (!filter) {\n      return;\n    }\n\n    addToFilters(filter.name, filter.value, type, this, this.state.variableName);\n\n    const variable = getAdHocFiltersVariable(validateVariableNameForField(filter.name, this.state.variableName), this);\n    reportAppInteraction(\n      USER_EVENTS_PAGES.service_details,\n      USER_EVENTS_ACTIONS.service_details.add_to_filters_in_breakdown_clicked,\n      {\n        filterType: this.state.variableName,\n        key: filter.name,\n        action: type,\n        filtersLength: variable?.state.filters.length || 0,\n      }\n    );\n  };\n\n  isSelected = () => {\n    const filter = getFilter(this.state.frame);\n    if (!filter) {\n      return { isIncluded: false, isExcluded: false };\n    }\n\n    const variable = getAdHocFiltersVariable(validateVariableNameForField(filter.name, this.state.variableName), this);\n\n    // Check if the filter is already there\n    const filterInSelectedFilters = variable.state.filters.find((f) => {\n      const value = getValueFromAdHocVariableFilter(variable, f);\n      return f.key === filter.name && value.value === filter.value;\n    });\n\n    if (!filterInSelectedFilters) {\n      return { isIncluded: false, isExcluded: false };\n    }\n\n    return {\n      isIncluded: filterInSelectedFilters.operator === FilterOp.Equal,\n      isExcluded: filterInSelectedFilters.operator === FilterOp.NotEqual,\n    };\n  };\n\n  public static Component = ({ model }: SceneComponentProps<AddToFiltersButton>) => {\n    const { isIncluded, isExcluded } = model.isSelected();\n    return (\n      <FilterButton\n        buttonFill={'outline'}\n        isIncluded={isIncluded}\n        isExcluded={isExcluded}\n        onInclude={() => model.onClick('include')}\n        onClear={() => model.onClick('clear')}\n        onExclude={() => model.onClick('exclude')}\n      />\n    );\n  };\n}\n\nconst getFilter = (frame: DataFrame) => {\n  // current filter name and value is format {name: value}\n  const filterNameAndValueObj = frame.fields[1]?.labels ?? {};\n  // Sanity check - filter should have only one key-value pair\n  if (Object.keys(filterNameAndValueObj).length !== 1) {\n    return;\n  }\n  const name = Object.keys(filterNameAndValueObj)[0];\n  const value = filterNameAndValueObj[name];\n  return { name, value };\n};\n","import { SceneComponentProps, sceneGraph, SceneObjectBase, SceneObjectState } from '@grafana/scenes';\nimport React, { ChangeEvent } from 'react';\nimport { ByFrameRepeater } from './ByFrameRepeater';\nimport { SearchInput } from './SearchInput';\nimport { LabelBreakdownScene } from './LabelBreakdownScene';\nimport { FieldsBreakdownScene } from './FieldsBreakdownScene';\nimport { BusEventBase } from '@grafana/data';\nimport { logger } from '../../../services/logger';\n\nexport class BreakdownSearchReset extends BusEventBase {\n  public static type = 'breakdown-search-reset';\n}\n\nexport interface BreakdownSearchSceneState extends SceneObjectState {\n  filter?: string;\n}\n\nconst recentFilters: Record<string, string> = {};\n\nexport class BreakdownSearchScene extends SceneObjectBase<BreakdownSearchSceneState> {\n  private cacheKey: string;\n  constructor(cacheKey: string) {\n    super({\n      filter: recentFilters[cacheKey] ?? '',\n    });\n    this.cacheKey = cacheKey;\n  }\n\n  public static Component = ({ model }: SceneComponentProps<BreakdownSearchScene>) => {\n    const { filter } = model.useState();\n    return (\n      <SearchInput\n        value={filter}\n        onChange={model.onValueFilterChange}\n        onClear={model.clearValueFilter}\n        placeholder=\"Search for value\"\n      />\n    );\n  };\n\n  public onValueFilterChange = (event: ChangeEvent<HTMLInputElement>) => {\n    this.setState({ filter: event.target.value });\n    this.filterValues(event.target.value);\n  };\n\n  public clearValueFilter = () => {\n    this.setState({ filter: '' });\n    this.filterValues('');\n  };\n\n  public reset = () => {\n    this.setState({ filter: '' });\n    recentFilters[this.cacheKey] = '';\n  };\n\n  private filterValues(filter: string) {\n    const breakdownScene = sceneGraph.findObject(\n      this,\n      (o) => o instanceof LabelBreakdownScene || o instanceof FieldsBreakdownScene\n    );\n    if (breakdownScene instanceof LabelBreakdownScene || breakdownScene instanceof FieldsBreakdownScene) {\n      recentFilters[this.cacheKey] = filter;\n      const byFrameRepeater = sceneGraph.findDescendents(breakdownScene, ByFrameRepeater);\n      byFrameRepeater?.forEach((child) => {\n        if (child.state.body.isActive) {\n          child.filterByString(filter);\n        }\n      });\n    } else {\n      logger.warn('unable to find Breakdown scene', {\n        typeofBody: typeof breakdownScene,\n        filter,\n      });\n    }\n  }\n}\n","import React from 'react';\n\nimport { DataFrame, LoadingState, PanelData } from '@grafana/data';\nimport {\n  SceneByFrameRepeater,\n  SceneComponentProps,\n  SceneDataTransformer,\n  SceneFlexItem,\n  SceneFlexLayout,\n  sceneGraph,\n  SceneLayout,\n  SceneObjectBase,\n  SceneObjectState,\n  SceneReactObject,\n  VizPanel,\n} from '@grafana/scenes';\nimport { sortSeries } from 'services/sorting';\nimport { fuzzySearch } from '../../../services/search';\nimport { getLabelValue } from './SortByScene';\nimport { Alert, Button } from '@grafana/ui';\nimport { css } from '@emotion/css';\nimport { BreakdownSearchReset } from './BreakdownSearchScene';\nimport { map, Observable } from 'rxjs';\nimport { LayoutSwitcher } from './LayoutSwitcher';\nimport { VALUE_SUMMARY_PANEL_KEY } from './Panels/ValueSummary';\nimport { logger } from '../../../services/logger';\n\ninterface ByFrameRepeaterState extends SceneObjectState {\n  body: SceneLayout;\n  getLayoutChild(frame: DataFrame, frameIndex: number): SceneFlexItem;\n}\n\ntype FrameFilterCallback = (frame: DataFrame) => boolean;\ntype FrameIterateCallback = (frames: DataFrame[], seriesIndex: number) => void;\n\nexport class ByFrameRepeater extends SceneObjectBase<ByFrameRepeaterState> {\n  private unfilteredChildren: SceneFlexItem[] = [];\n  private sortBy: string;\n  private direction: string;\n  private sortedSeries: DataFrame[] = [];\n  private getFilter: () => string;\n  public constructor({\n    sortBy,\n    direction,\n    getFilter,\n    ...state\n  }: ByFrameRepeaterState & { sortBy: string; direction: string; getFilter: () => string }) {\n    super(state);\n\n    this.sortBy = sortBy;\n    this.direction = direction;\n    this.getFilter = getFilter;\n\n    this.addActivationHandler(() => {\n      const data = sceneGraph.getData(this);\n\n      this._subs.add(\n        data.subscribeToState((data, prevData) => {\n          if (\n            data.data?.state === LoadingState.Done ||\n            (data.data?.state === LoadingState.Streaming &&\n              data.data.series.length > (prevData.data?.series.length ?? 0))\n          ) {\n            this.performRepeat(data.data);\n          }\n        })\n      );\n\n      if (data.state.data) {\n        this.performRepeat(data.state.data);\n      }\n    });\n  }\n\n  public sort = (sortBy: string, direction: string) => {\n    const data = sceneGraph.getData(this);\n    this.sortBy = sortBy;\n    this.direction = direction;\n    if (data.state.data) {\n      this.performRepeat(data.state.data);\n    }\n  };\n\n  private performRepeat(data: PanelData) {\n    const newChildren: SceneFlexItem[] = [];\n    const sortedSeries = sortSeries(data.series, this.sortBy, this.direction);\n\n    for (let seriesIndex = 0; seriesIndex < sortedSeries.length; seriesIndex++) {\n      const layoutChild = this.state.getLayoutChild(sortedSeries[seriesIndex], seriesIndex);\n      newChildren.push(layoutChild);\n    }\n\n    this.sortedSeries = sortedSeries;\n    this.unfilteredChildren = newChildren;\n\n    if (this.getFilter()) {\n      this.state.body.setState({ children: [] });\n      this.filterByString(this.getFilter());\n    } else {\n      this.state.body.setState({ children: newChildren });\n    }\n  }\n\n  public iterateFrames = (callback: FrameIterateCallback) => {\n    const data = sceneGraph.getData(this).state.data;\n    if (!data) {\n      return;\n    }\n    for (let seriesIndex = 0; seriesIndex < this.sortedSeries.length; seriesIndex++) {\n      callback(this.sortedSeries, seriesIndex);\n    }\n  };\n\n  filterByString = (filter: string) => {\n    let haystack: string[] = [];\n\n    this.iterateFrames((frames, seriesIndex) => {\n      const labelValue = getLabelValue(frames[seriesIndex]);\n      haystack.push(labelValue);\n    });\n    fuzzySearch(haystack, filter, (data) => {\n      if (data && data[0]) {\n        // We got search results\n        this.filterFrames((frame: DataFrame) => {\n          const label = getLabelValue(frame);\n          return data[0].includes(label);\n        });\n      } else {\n        // reset search\n        this.filterFrames(() => true);\n      }\n\n      this.filterSummaryChart(data);\n    });\n  };\n\n  /**\n   * Filters the summary panel rendered above the breakdown panels by adding a transformation to the panel\n   * @param data\n   * @private\n   */\n  private filterSummaryChart(data: string[][]) {\n    const layoutSwitcher = sceneGraph.getAncestor(this, LayoutSwitcher);\n\n    if (layoutSwitcher) {\n      const singleGraphParent = sceneGraph.findAllObjects(\n        layoutSwitcher,\n        (obj) => obj.isActive && obj.state.key === VALUE_SUMMARY_PANEL_KEY\n      );\n      if (singleGraphParent[0] instanceof SceneFlexLayout) {\n        const panel = sceneGraph.findDescendents(singleGraphParent[0], VizPanel)[0];\n        if (panel instanceof VizPanel) {\n          panel.setState({\n            $data: new SceneDataTransformer({\n              transformations: [() => limitFramesByName(data[0])],\n            }),\n          });\n        } else {\n          logger.warn('filterSummaryChart: VizPanel not found', { typeofPanel: typeof panel });\n        }\n      } else {\n        logger.warn('filterSummaryChart: SceneFlexItem not found', { typeofGraphParent: typeof singleGraphParent });\n      }\n    }\n  }\n\n  public filterFrames = (filterFn: FrameFilterCallback) => {\n    const newChildren: SceneFlexItem[] = [];\n    this.iterateFrames((frames, seriesIndex) => {\n      if (filterFn(frames[seriesIndex])) {\n        newChildren.push(this.unfilteredChildren[seriesIndex]);\n      }\n    });\n\n    if (newChildren.length === 0) {\n      const filter = this.getFilter();\n      this.state.body.setState({ children: [buildNoResultsScene(filter, this.clearFilter)] });\n    } else {\n      this.state.body.setState({ children: newChildren });\n    }\n  };\n\n  public clearFilter = () => {\n    this.publishEvent(new BreakdownSearchReset(), true);\n  };\n\n  public static Component = ({ model }: SceneComponentProps<SceneByFrameRepeater>) => {\n    const { body } = model.useState();\n    return <body.Component model={body} />;\n  };\n}\n\nfunction buildNoResultsScene(filter: string, clearFilter: () => void) {\n  return new SceneFlexLayout({\n    direction: 'row',\n    children: [\n      new SceneFlexItem({\n        body: new SceneReactObject({\n          reactNode: (\n            <div className={styles.alertContainer}>\n              <Alert title=\"\" severity=\"info\" className={styles.noResultsAlert}>\n                No values found matching &ldquo;{filter}&rdquo;\n                <Button className={styles.clearButton} onClick={clearFilter}>\n                  Clear filter\n                </Button>\n              </Alert>\n            </div>\n          ),\n        }),\n      }),\n    ],\n  });\n}\n\nconst styles = {\n  alertContainer: css({\n    flexGrow: 1,\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  }),\n  noResultsAlert: css({\n    minWidth: '30vw',\n    flexGrow: 0,\n  }),\n  clearButton: css({\n    marginLeft: '1.5rem',\n  }),\n};\n\nexport function limitFramesByName(matches: string[]) {\n  return (source: Observable<DataFrame[]>) => {\n    return source.pipe(\n      map((frames) => {\n        if (!matches || !matches.length) {\n          return frames;\n        }\n        let newFrames: DataFrame[] = [];\n        frames.forEach((f) => {\n          const label = getLabelValue(f);\n          if (matches.includes(label)) {\n            newFrames.push(f);\n          }\n        });\n        return newFrames;\n      })\n    );\n  };\n}\n","import { SceneComponentProps, SceneObjectBase, SceneObjectState } from '@grafana/scenes';\nimport { GrotError } from '../../GrotError';\nimport { Alert } from '@grafana/ui';\nimport React from 'react';\nimport { emptyStateStyles } from './FieldsBreakdownScene';\n\nexport interface EmptyLayoutSceneState extends SceneObjectState {\n  type: 'fields' | 'labels';\n}\n\nexport class EmptyLayoutScene extends SceneObjectBase<EmptyLayoutSceneState> {\n  public static Component({ model }: SceneComponentProps<EmptyLayoutScene>) {\n    const { type } = model.useState();\n    return (\n      <GrotError>\n        <Alert title=\"\" severity=\"warning\">\n          We did not find any {type} for the given timerange. Please{' '}\n          <a\n            className={emptyStateStyles.link}\n            href=\"https://forms.gle/1sYWCTPvD72T1dPH9\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            let us know\n          </a>{' '}\n          if you think this is a mistake.\n        </Alert>\n      </GrotError>\n    );\n  }\n}\n","import { css } from '@emotion/css';\nimport React, { useState } from 'react';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { Select, useStyles2, InlineField, Icon, ActionMeta, InputActionMeta } from '@grafana/ui';\nimport { testIds } from '../../../services/testIds';\nimport { VariableValueOption } from '@grafana/scenes';\n\nimport { wrapWildcardSearch } from '../../../services/query';\n\ntype Props<T> = {\n  options: VariableValueOption[];\n  value?: T;\n  onChange: (label: T | undefined) => void;\n  label: string;\n};\n\nexport type AsyncFieldSelectorProps = {\n  selectOption: (value: string) => void;\n  isLoading: boolean;\n  initialFilter: SelectableValue<string>;\n} & Props<string>;\n\nexport function FieldSelector<T>({ options, value, onChange, label }: Props<T>) {\n  const styles = useStyles2(getStyles);\n  const [selected, setSelected] = useState(false);\n\n  const selectableOptions: SelectableValue[] = options.map((option) => {\n    return {\n      label: option.label,\n      value: option.value,\n    };\n  });\n  return (\n    <InlineField className={styles.selectWrapper} label={label}>\n      <Select\n        {...{ options: selectableOptions, value }}\n        onOpenMenu={() => setSelected(true)}\n        onCloseMenu={() => setSelected(false)}\n        onChange={(selected: SelectableValue<T>) => onChange(selected.value)}\n        className={styles.select}\n        prefix={selected ? undefined : <Icon name={'search'} />}\n      />\n    </InlineField>\n  );\n}\n\nexport function ServiceFieldSelector({\n  options,\n  value,\n  onChange,\n  label,\n  selectOption,\n  isLoading,\n  initialFilter,\n}: AsyncFieldSelectorProps) {\n  const styles = useStyles2(getStyles);\n  const [selected, setSelected] = useState(false);\n  const [customOption, setCustomOption] = useState<SelectableValue<string>>(initialFilter);\n\n  const selectableOptions: SelectableValue[] = options.map((option) => {\n    return {\n      label: option.label,\n      value: option.value,\n    };\n  });\n  const allOptions =\n    customOption && value && customOption.value?.includes(value)\n      ? [customOption, ...selectableOptions]\n      : selectableOptions;\n\n  const selectedOption = allOptions?.find((opt) => opt.value === value);\n\n  return (\n    <InlineField className={styles.serviceSceneSelectWrapper} label={label}>\n      <Select\n        isLoading={isLoading}\n        data-testid={testIds.exploreServiceSearch.search}\n        placeholder={`Search values`}\n        options={allOptions}\n        isClearable={true}\n        value={value}\n        onOpenMenu={() => setSelected(true)}\n        onCloseMenu={() => setSelected(false)}\n        allowCustomValue={true}\n        prefix={selected || selectedOption?.__isNew__ ? undefined : <Icon name={'search'} />}\n        onChange={(value: SelectableValue<string>, actionMeta: ActionMeta) => {\n          // Custom added value\n          if (value?.__isNew__ || value?.icon) {\n            setCustomOption({ ...value, icon: 'filter' });\n            return onChange(value.value);\n          }\n\n          // If the user clears the search\n          if (actionMeta.action === 'clear') {\n            return onChange('');\n          }\n\n          // Select the service is the value is not a custom filter\n          if (actionMeta.action === 'select-option' && value.value && !value.__isNew__) {\n            selectOption(value.value);\n          }\n        }}\n        onInputChange={(value: string | undefined, actionMeta: InputActionMeta) => {\n          // Grafana/grafana doesn't have types from react-select, but we need the prevInput to add custom value when user clicks off with active search string\n          const meta = actionMeta as InputActionMeta & { prevInputValue: string };\n\n          // The user is typing\n          if (meta.action === 'input-change') {\n            return onChange(value);\n          }\n\n          // the user closed the menu, with text in search box\n          if (meta.action === 'menu-close' && meta.prevInputValue) {\n            setCustomOption({\n              value: wrapWildcardSearch(meta.prevInputValue),\n              label: meta.prevInputValue,\n              icon: 'filter',\n              __isNew__: true,\n            });\n            return onChange(meta.prevInputValue);\n          }\n        }}\n      />\n    </InlineField>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    input: css({\n      marginBottom: 0,\n    }),\n    select: css({\n      maxWidth: theme.spacing(64),\n      minWidth: theme.spacing(20),\n    }),\n    selectWrapper: css({\n      label: 'field-selector-select-wrapper',\n      maxWidth: theme.spacing(62.5),\n      minWidth: theme.spacing(20),\n      marginRight: theme.spacing.x1,\n      marginBottom: 0,\n    }),\n    serviceSceneSelectWrapper: css({\n      label: 'service-select-wrapper',\n      maxWidth: theme.spacing(62.5),\n      minWidth: theme.spacing(20),\n      marginRight: theme.spacing.x1,\n      marginBottom: 0,\n    }),\n  };\n}\n","import {\n  PanelBuilders,\n  SceneComponentProps,\n  SceneCSSGridLayout,\n  SceneDataProvider,\n  SceneDataState,\n  SceneDataTransformer,\n  SceneFlexItem,\n  SceneFlexLayout,\n  sceneGraph,\n  SceneObject,\n  SceneObjectBase,\n  SceneObjectState,\n  SceneReactObject,\n} from '@grafana/scenes';\nimport { buildDataQuery } from '../../../services/query';\nimport { getSortByPreference } from '../../../services/store';\nimport { DataQueryError, LoadingState } from '@grafana/data';\nimport { LayoutSwitcher } from './LayoutSwitcher';\nimport { getQueryRunner } from '../../../services/panel';\nimport { ByFrameRepeater } from './ByFrameRepeater';\nimport { Alert, DrawStyle, LoadingPlaceholder, useStyles2 } from '@grafana/ui';\nimport { buildFieldsQueryString, getFilterBreakdownValueScene, getParserForField } from '../../../services/fields';\nimport { getLabelValue } from './SortByScene';\nimport { VAR_FIELDS, VAR_METADATA } from '../../../services/variables';\nimport React from 'react';\nimport { FIELDS_BREAKDOWN_GRID_TEMPLATE_COLUMNS, FieldsBreakdownScene } from './FieldsBreakdownScene';\nimport { AddFilterEvent } from './AddToFiltersButton';\nimport { navigateToDrilldownPage } from '../../../services/navigate';\nimport { PageSlugs } from '../../../services/routing';\nimport { getDetectedFieldsFrame, ServiceScene } from '../ServiceScene';\nimport { DEFAULT_SORT_BY } from '../../../services/sorting';\nimport { getFieldGroupByVariable, getFieldsVariable } from '../../../services/variableGetters';\nimport { LokiQuery } from '../../../services/lokiQuery';\nimport { getPanelWrapperStyles, PanelMenu } from '../../Panels/PanelMenu';\nimport { ValueSummaryPanelScene } from './Panels/ValueSummary';\n\nexport interface FieldValuesBreakdownSceneState extends SceneObjectState {\n  body?: (LayoutSwitcher & SceneObject) | (SceneReactObject & SceneObject);\n  $data?: SceneDataProvider;\n  lastFilterEvent?: AddFilterEvent;\n}\n\nexport class FieldValuesBreakdownScene extends SceneObjectBase<FieldValuesBreakdownSceneState> {\n  constructor(state: Partial<FieldValuesBreakdownSceneState>) {\n    super(state);\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  public static Selector({ model }: SceneComponentProps<FieldValuesBreakdownScene>) {\n    const { body } = model.useState();\n    if (body instanceof LayoutSwitcher) {\n      return <>{body && <LayoutSwitcher.Selector model={body} />}</>;\n    }\n\n    return <></>;\n  }\n\n  public static Component = ({ model }: SceneComponentProps<FieldValuesBreakdownScene>) => {\n    const { body } = model.useState();\n    const styles = useStyles2(getPanelWrapperStyles);\n    if (body) {\n      return <span className={styles.panelWrapper}>{body && <body.Component model={body} />}</span>;\n    }\n\n    return <LoadingPlaceholder text={'Loading...'} />;\n  };\n\n  onActivate() {\n    const groupByVariable = getFieldGroupByVariable(this);\n    const tagKey = String(groupByVariable.state.value);\n\n    const fieldsVariable = getFieldsVariable(this);\n    const detectedFieldsFrame = getDetectedFieldsFrame(this);\n    const queryString = buildFieldsQueryString(tagKey, fieldsVariable, detectedFieldsFrame);\n    const query = buildDataQuery(queryString, { legendFormat: `{{${tagKey}}}`, refId: tagKey });\n\n    this.setState({\n      body: this.build(query),\n      $data: new SceneDataTransformer({\n        $data: getQueryRunner([query]),\n        transformations: [],\n      }),\n    });\n\n    this._subs.add(\n      this.subscribeToEvent(AddFilterEvent, (event) => {\n        this.setState({\n          lastFilterEvent: event,\n        });\n      })\n    );\n\n    this._subs.add(\n      this.state.$data?.subscribeToState((newState) => {\n        this.onValuesDataQueryChange(newState, query);\n      })\n    );\n  }\n\n  private onValuesDataQueryChange(newState: SceneDataState, query: LokiQuery) {\n    if (newState.data?.state === LoadingState.Done) {\n      // No panels for the user to select, presumably because everything has been excluded\n      const event = this.state.lastFilterEvent;\n\n      // @todo discuss: Do we want to let users exclude all fields? Or should we redirect when excluding the penultimate panel?\n      if (newState.data?.state === LoadingState.Done && event) {\n        if (event.operator === 'exclude' && newState.data.series.length < 1) {\n          this.navigateToFields();\n        }\n\n        // @todo discuss: wouldn't include always return in 1 result? Do we need to wait for the query to run or should we navigate on receiving the include event and cancel the ongoing query?\n        if (event.operator === 'include' && newState.data.series.length <= 1) {\n          this.navigateToFields();\n        }\n      }\n\n      if (this.state.body instanceof SceneReactObject) {\n        this.setState({\n          body: this.build(query),\n        });\n      }\n    }\n    if (newState.data?.state === LoadingState.Error) {\n      this.setErrorState(newState.data.errors);\n    }\n  }\n\n  private setErrorState(errors: DataQueryError[] | undefined) {\n    this.setState({\n      body: new SceneReactObject({\n        reactNode: (\n          <Alert title={'Something went wrong with your request'} severity={'error'}>\n            {errors?.map((err, key) => (\n              <div key={key}>\n                {err.status && (\n                  <>\n                    <strong>Status</strong>: {err.status} <br />\n                  </>\n                )}\n                {err.message && (\n                  <>\n                    <strong>Message</strong>: {err.message} <br />\n                  </>\n                )}\n                {err.traceId && (\n                  <>\n                    <strong>TraceId</strong>: {err.traceId}\n                  </>\n                )}\n              </div>\n            ))}\n          </Alert>\n        ),\n      }),\n    });\n  }\n\n  private navigateToFields() {\n    this.setState({\n      lastFilterEvent: undefined,\n    });\n    navigateToDrilldownPage(PageSlugs.fields, sceneGraph.getAncestor(this, ServiceScene));\n  }\n\n  private build(query: LokiQuery) {\n    const groupByVariable = getFieldGroupByVariable(this);\n    const optionValue = String(groupByVariable.state.value);\n\n    const { sortBy, direction } = getSortByPreference('fields', DEFAULT_SORT_BY, 'desc');\n\n    const fieldsBreakdownScene = sceneGraph.getAncestor(this, FieldsBreakdownScene);\n    const getFilter = () => fieldsBreakdownScene.state.search.state.filter ?? '';\n\n    const parserForThisField = getParserForField(optionValue, this);\n\n    return new LayoutSwitcher({\n      options: [\n        { value: 'single', label: 'Single' },\n        { value: 'grid', label: 'Grid' },\n        { value: 'rows', label: 'Rows' },\n      ],\n      active: 'grid',\n      layouts: [\n        // Single\n        new SceneFlexLayout({\n          direction: 'column',\n          children: [\n            new SceneReactObject({\n              reactNode: <FieldsBreakdownScene.LabelsMenu model={fieldsBreakdownScene} />,\n            }),\n            new SceneFlexItem({\n              minHeight: 300,\n              body: PanelBuilders.timeseries()\n                .setTitle(optionValue)\n                // 11.5\n                // .setShowMenuAlways(true)\n                .setMenu(new PanelMenu({}))\n                .build(),\n            }),\n          ],\n        }),\n\n        // Grid\n        new SceneFlexLayout({\n          direction: 'column',\n          children: [\n            new SceneReactObject({\n              reactNode: <FieldsBreakdownScene.LabelsMenu model={fieldsBreakdownScene} />,\n            }),\n            new ValueSummaryPanelScene({ title: optionValue }),\n            new SceneReactObject({\n              reactNode: <FieldsBreakdownScene.ValuesMenu model={fieldsBreakdownScene} />,\n            }),\n            new ByFrameRepeater({\n              body: new SceneCSSGridLayout({\n                templateColumns: FIELDS_BREAKDOWN_GRID_TEMPLATE_COLUMNS,\n                autoRows: '200px',\n                children: [\n                  new SceneFlexItem({\n                    body: new SceneReactObject({\n                      reactNode: <LoadingPlaceholder text=\"Loading...\" />,\n                    }),\n                  }),\n                ],\n                isLazy: true,\n              }),\n              getLayoutChild: getFilterBreakdownValueScene(\n                getLabelValue,\n                query?.expr.includes('count_over_time') ? DrawStyle.Bars : DrawStyle.Line,\n                parserForThisField === 'structuredMetadata' ? VAR_METADATA : VAR_FIELDS,\n                sceneGraph.getAncestor(this, FieldsBreakdownScene).state.sort,\n                optionValue\n              ),\n              sortBy,\n              direction,\n              getFilter,\n            }),\n          ],\n        }),\n\n        // Rows\n        new SceneFlexLayout({\n          direction: 'column',\n          children: [\n            new SceneReactObject({\n              reactNode: <FieldsBreakdownScene.LabelsMenu model={fieldsBreakdownScene} />,\n            }),\n            new ValueSummaryPanelScene({ title: optionValue }),\n            new SceneReactObject({\n              reactNode: <FieldsBreakdownScene.ValuesMenu model={fieldsBreakdownScene} />,\n            }),\n            new ByFrameRepeater({\n              body: new SceneCSSGridLayout({\n                templateColumns: '1fr',\n                autoRows: '200px',\n                children: [\n                  new SceneFlexItem({\n                    body: new SceneReactObject({\n                      reactNode: <LoadingPlaceholder text=\"Loading...\" />,\n                    }),\n                  }),\n                ],\n                isLazy: true,\n              }),\n              getLayoutChild: getFilterBreakdownValueScene(\n                getLabelValue,\n                query?.expr.includes('count_over_time') ? DrawStyle.Bars : DrawStyle.Line,\n                parserForThisField === 'structuredMetadata' ? VAR_METADATA : VAR_FIELDS,\n                sceneGraph.getAncestor(this, FieldsBreakdownScene).state.sort,\n                optionValue\n              ),\n              sortBy,\n              direction,\n              getFilter,\n            }),\n          ],\n        }),\n      ],\n    });\n  }\n}\n","import {\n  PanelBuilders,\n  QueryRunnerState,\n  SceneComponentProps,\n  SceneCSSGridItem,\n  SceneCSSGridLayout,\n  sceneGraph,\n  SceneObjectBase,\n  SceneObjectState,\n  VizPanel,\n} from '@grafana/scenes';\nimport { ALL_VARIABLE_VALUE, DetectedFieldType, ParserType } from '../../../services/variables';\nimport { buildDataQuery } from '../../../services/query';\nimport { getQueryRunner, setLevelColorOverrides } from '../../../services/panel';\nimport { DrawStyle, LoadingPlaceholder, StackingMode, useStyles2 } from '@grafana/ui';\nimport { LayoutSwitcher } from './LayoutSwitcher';\nimport { FIELDS_BREAKDOWN_GRID_TEMPLATE_COLUMNS, FieldsBreakdownScene } from './FieldsBreakdownScene';\nimport {\n  getDetectedFieldsFrame,\n  getDetectedFieldsFrameFromQueryRunnerState,\n  getDetectedFieldsNamesFromQueryRunnerState,\n  getDetectedFieldsParsersFromQueryRunnerState,\n  ServiceScene,\n} from '../ServiceScene';\nimport React from 'react';\nimport { SelectLabelActionScene } from './SelectLabelActionScene';\nimport { ValueSlugs } from '../../../services/routing';\nimport { DataFrame, LoadingState } from '@grafana/data';\nimport {\n  buildFieldsQueryString,\n  extractParserFromArray,\n  getDetectedFieldType,\n  isAvgField,\n} from '../../../services/fields';\nimport {\n  getFieldGroupByVariable,\n  getFieldsVariable,\n  getValueFromFieldsFilter,\n} from '../../../services/variableGetters';\nimport { AvgFieldPanelType, getPanelWrapperStyles, PanelMenu } from '../../Panels/PanelMenu';\nimport { logger } from '../../../services/logger';\nimport { getPanelOption } from '../../../services/store';\nimport { MAX_NUMBER_OF_TIME_SERIES } from './TimeSeriesLimit';\n\nexport interface FieldsAggregatedBreakdownSceneState extends SceneObjectState {\n  body?: LayoutSwitcher;\n}\n\nexport class FieldsAggregatedBreakdownScene extends SceneObjectBase<FieldsAggregatedBreakdownSceneState> {\n  constructor(state: Partial<FieldsAggregatedBreakdownSceneState>) {\n    super(state);\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  private onDetectedFieldsChange = (newState: QueryRunnerState) => {\n    if (newState.data?.state === LoadingState.Done) {\n      //@todo cardinality looks wrong in API response\n      this.updateChildren(newState);\n    }\n  };\n\n  private updateChildren(newState: QueryRunnerState, newParser: ParserType | undefined = undefined) {\n    const detectedFieldsFrame = getDetectedFieldsFrameFromQueryRunnerState(newState);\n    const newNamesField = getDetectedFieldsNamesFromQueryRunnerState(newState);\n    const newParsersField = getDetectedFieldsParsersFromQueryRunnerState(newState);\n    const cardinalityMap = this.calculateCardinalityMap(newState);\n\n    // Iterate through all the layouts\n    this.state.body?.state.layouts.forEach((layout) => {\n      if (layout instanceof SceneCSSGridLayout) {\n        // populate set of new list of fields\n        const newFieldsSet = new Set<string>(newNamesField?.values);\n        const updatedChildren = layout.state.children as SceneCSSGridItem[];\n\n        // Iterate through all the existing panels\n        for (let i = 0; i < updatedChildren.length; i++) {\n          const gridItem = layout.state.children[i];\n          if (gridItem instanceof SceneCSSGridItem) {\n            const panel = gridItem.state.body;\n            if (panel instanceof VizPanel) {\n              if (newParser) {\n                const index = newNamesField?.values.indexOf(panel.state.title);\n                const existingParser = index && index !== -1 ? newParsersField?.values[index] : undefined;\n\n                // If a new field filter was added that updated the parsers, we'll need to rebuild the query\n                if (existingParser !== newParser) {\n                  const fieldType = getDetectedFieldType(panel.state.title, detectedFieldsFrame);\n                  const dataTransformer = this.getQueryRunnerForPanel(\n                    panel.state.title,\n                    detectedFieldsFrame,\n                    fieldType\n                  );\n                  panel.setState({\n                    $data: dataTransformer,\n                  });\n                }\n              }\n\n              if (newFieldsSet.has(panel.state.title)) {\n                // If the new response has this field, delete it from the set, but leave it in the layout\n                newFieldsSet.delete(panel.state.title);\n              } else {\n                // Otherwise if the panel doesn't exist in the response, delete it from the layout\n                updatedChildren.splice(i, 1);\n                // And make sure to update the index, or we'll skip the next one\n                i--;\n              }\n            } else {\n              logger.warn('panel is not VizPanel!');\n            }\n          } else {\n            logger.warn('gridItem is not SceneCSSGridItem');\n          }\n        }\n\n        const fieldsToAdd = Array.from(newFieldsSet);\n        const options = fieldsToAdd.map((fieldName) => fieldName);\n\n        updatedChildren.push(...this.buildChildren(options));\n        updatedChildren.sort(this.sortChildren(cardinalityMap));\n\n        updatedChildren.map((child) => {\n          this.subscribeToPanel(child);\n        });\n\n        layout.setState({\n          children: updatedChildren,\n        });\n      } else {\n        logger.warn('Layout is not SceneCSSGridLayout');\n      }\n    });\n  }\n\n  private sortChildren(cardinalityMap: Map<string, number>) {\n    return (a: SceneCSSGridItem, b: SceneCSSGridItem) => {\n      const aPanel = a.state.body as VizPanel;\n      const bPanel = b.state.body as VizPanel;\n      const aCardinality = cardinalityMap.get(aPanel.state.title) ?? 0;\n      const bCardinality = cardinalityMap.get(bPanel.state.title) ?? 0;\n      return bCardinality - aCardinality;\n    };\n  }\n\n  private calculateCardinalityMap(newState?: QueryRunnerState) {\n    const detectedFieldsFrame = getDetectedFieldsFrameFromQueryRunnerState(newState);\n    const cardinalityMap = new Map<string, number>();\n    if (detectedFieldsFrame?.length) {\n      for (let i = 0; i < detectedFieldsFrame?.length; i++) {\n        const name: string = detectedFieldsFrame.fields[0].values[i];\n        const cardinality: number = detectedFieldsFrame.fields[1].values[i];\n        cardinalityMap.set(name, cardinality);\n      }\n    }\n    return cardinalityMap;\n  }\n\n  onActivate() {\n    this.setState({\n      body: this.build(),\n    });\n\n    const serviceScene = sceneGraph.getAncestor(this, ServiceScene);\n    if (serviceScene.state.fieldsCount === undefined) {\n      this.updateFieldCount();\n    }\n\n    this._subs.add(serviceScene.state.$detectedFieldsData?.subscribeToState(this.onDetectedFieldsChange));\n    this._subs.add(this.subscribeToFieldsVar());\n  }\n\n  private subscribeToFieldsVar() {\n    const fieldsVar = getFieldsVariable(this);\n\n    return fieldsVar.subscribeToState((newState, prevState) => {\n      const serviceScene = sceneGraph.getAncestor(this, ServiceScene);\n      const newParsers = newState.filters.map((f) => getValueFromFieldsFilter(f).parser);\n      const oldParsers = prevState.filters.map((f) => getValueFromFieldsFilter(f).parser);\n\n      const newParser = extractParserFromArray(newParsers);\n      const oldParser = extractParserFromArray(oldParsers);\n\n      if (newParser !== oldParser) {\n        const detectedFieldsState = serviceScene.state.$detectedFieldsData?.state;\n        if (detectedFieldsState) {\n          this.updateChildren(detectedFieldsState, newParser);\n        }\n      }\n    });\n  }\n\n  public build() {\n    const groupByVariable = getFieldGroupByVariable(this);\n    const options = groupByVariable.state.options.map((opt) => String(opt.value));\n\n    const fieldsBreakdownScene = sceneGraph.getAncestor(this, FieldsBreakdownScene);\n    fieldsBreakdownScene.state.search.reset();\n\n    const children = this.buildChildren(options);\n\n    const serviceScene = sceneGraph.getAncestor(this, ServiceScene);\n    const cardinalityMap = this.calculateCardinalityMap(serviceScene.state.$detectedFieldsData?.state);\n    children.sort(this.sortChildren(cardinalityMap));\n    const childrenClones = children.map((child) => child.clone());\n\n    // We must subscribe to the data providers for all children after the clone, or we'll see bugs in the row layout\n    [...children, ...childrenClones].map((child) => {\n      this.subscribeToPanel(child);\n    });\n\n    return new LayoutSwitcher({\n      options: [\n        { value: 'grid', label: 'Grid' },\n        { value: 'rows', label: 'Rows' },\n      ],\n      active: 'grid',\n      layouts: [\n        new SceneCSSGridLayout({\n          templateColumns: FIELDS_BREAKDOWN_GRID_TEMPLATE_COLUMNS,\n          autoRows: '200px',\n          children: children,\n          isLazy: true,\n        }),\n        new SceneCSSGridLayout({\n          templateColumns: '1fr',\n          autoRows: '200px',\n          children: childrenClones,\n          isLazy: true,\n        }),\n      ],\n    });\n  }\n\n  private subscribeToPanel(child: SceneCSSGridItem) {\n    const panel = child.state.body as VizPanel | undefined;\n    if (panel) {\n      this._subs.add(\n        panel?.state.$data?.getResultsStream().subscribe((result) => {\n          if (result.data.errors && result.data.errors.length > 0) {\n            child.setState({ isHidden: true });\n            this.updateFieldCount();\n          }\n        })\n      );\n    }\n  }\n\n  public rebuildAvgFields() {\n    const detectedFieldsFrame = getDetectedFieldsFrame(this);\n    const activeLayout = this.getActiveGridLayouts();\n    const children: SceneCSSGridItem[] = [];\n    const panelType =\n      getPanelOption('panelType', [AvgFieldPanelType.histogram, AvgFieldPanelType.timeseries]) ??\n      AvgFieldPanelType.timeseries;\n\n    activeLayout?.state.children.forEach((child) => {\n      if (child instanceof SceneCSSGridItem && !child.state.isHidden) {\n        const panels = sceneGraph.findDescendents(child, VizPanel);\n        if (panels.length) {\n          // Will only be one panel as a child of CSSGridItem\n          const panel = panels[0];\n          const labelName = panel.state.title;\n          const fieldType = getDetectedFieldType(labelName, detectedFieldsFrame);\n          if (isAvgField(fieldType)) {\n            const newChild = this.buildChild(labelName, detectedFieldsFrame, panelType);\n            if (newChild) {\n              children.push(newChild);\n            }\n          } else {\n            children.push(child);\n          }\n        }\n      }\n    });\n\n    if (children.length) {\n      activeLayout?.setState({\n        children,\n      });\n    }\n  }\n\n  private buildChildren(options: string[]): SceneCSSGridItem[] {\n    const children: SceneCSSGridItem[] = [];\n    const detectedFieldsFrame = getDetectedFieldsFrame(this);\n    const panelType =\n      getPanelOption('panelType', [AvgFieldPanelType.timeseries, AvgFieldPanelType.histogram]) ??\n      AvgFieldPanelType.timeseries;\n    for (const option of options) {\n      if (option === ALL_VARIABLE_VALUE || !option) {\n        continue;\n      }\n\n      const child = this.buildChild(option, detectedFieldsFrame, panelType);\n      if (child) {\n        children.push(child);\n      }\n    }\n    return children;\n  }\n\n  private buildChild(labelName: string, detectedFieldsFrame: DataFrame | undefined, panelType?: AvgFieldPanelType) {\n    if (labelName === ALL_VARIABLE_VALUE || !labelName) {\n      return;\n    }\n\n    const fieldType = getDetectedFieldType(labelName, detectedFieldsFrame);\n    const dataTransformer = this.getQueryRunnerForPanel(labelName, detectedFieldsFrame, fieldType);\n    let body;\n\n    const headerActions = [];\n    if (!isAvgField(fieldType)) {\n      body = PanelBuilders.timeseries()\n        .setTitle(labelName)\n        .setData(dataTransformer)\n        .setMenu(new PanelMenu({ labelName: labelName }))\n        .setCustomFieldConfig('stacking', { mode: StackingMode.Normal })\n        .setCustomFieldConfig('fillOpacity', 100)\n        .setCustomFieldConfig('lineWidth', 0)\n        .setCustomFieldConfig('pointSize', 0)\n        .setCustomFieldConfig('drawStyle', DrawStyle.Bars)\n        .setOverrides(setLevelColorOverrides);\n      headerActions.push(new SelectLabelActionScene({ labelName: String(labelName), fieldType: ValueSlugs.field }));\n    } else {\n      if (panelType === 'histogram') {\n        body = PanelBuilders.histogram();\n      } else {\n        body = PanelBuilders.timeseries();\n      }\n      body\n        .setTitle(labelName)\n        .setData(dataTransformer)\n        .setMenu(new PanelMenu({ labelName: labelName, panelType }));\n      headerActions.push(\n        new SelectLabelActionScene({\n          labelName: String(labelName),\n          hideValueDrilldown: true,\n          fieldType: ValueSlugs.field,\n        })\n      );\n    }\n    body.setHeaderActions(headerActions);\n    body.setSeriesLimit(MAX_NUMBER_OF_TIME_SERIES);\n    // 11.5\n    // body.setShowMenuAlways(true);\n\n    const viz = body.build();\n    return new SceneCSSGridItem({\n      body: viz,\n    });\n  }\n\n  private getQueryRunnerForPanel(\n    optionValue: string,\n    detectedFieldsFrame: DataFrame | undefined,\n    fieldType?: DetectedFieldType\n  ) {\n    const fieldsVariable = getFieldsVariable(this);\n    const queryString = buildFieldsQueryString(optionValue, fieldsVariable, detectedFieldsFrame);\n    const query = buildDataQuery(queryString, {\n      legendFormat: isAvgField(fieldType) ? optionValue : `{{${optionValue}}}`,\n      refId: optionValue,\n    });\n\n    return getQueryRunner([query]);\n  }\n\n  private getActiveGridLayouts() {\n    return (this.state.body?.state.layouts.find((l) => l.isActive) ?? this.state.body?.state.layouts[0]) as\n      | SceneCSSGridLayout\n      | undefined;\n  }\n\n  private updateFieldCount() {\n    const activeLayout = this.getActiveGridLayouts();\n    const activeLayoutChildren = activeLayout?.state.children as SceneCSSGridItem[] | undefined;\n    const activePanels = activeLayoutChildren?.filter((child) => !child.state.isHidden);\n\n    const fieldsBreakdownScene = sceneGraph.getAncestor(this, FieldsBreakdownScene);\n    fieldsBreakdownScene.state.changeFieldCount?.(activePanels?.length ?? 0);\n  }\n\n  public static Selector({ model }: SceneComponentProps<FieldsAggregatedBreakdownScene>) {\n    const { body } = model.useState();\n    return <>{body && <LayoutSwitcher.Selector model={body} />}</>;\n  }\n\n  public static Component = ({ model }: SceneComponentProps<FieldsAggregatedBreakdownScene>) => {\n    const { body } = model.useState();\n    const styles = useStyles2(getPanelWrapperStyles);\n    if (body) {\n      return <span className={styles.panelWrapper}>{body && <body.Component model={body} />}</span>;\n    }\n\n    return <LoadingPlaceholder text={'Loading...'} />;\n  };\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { DataFrame, GrafanaTheme2, LoadingState } from '@grafana/data';\nimport {\n  QueryRunnerState,\n  SceneComponentProps,\n  sceneGraph,\n  SceneObject,\n  SceneObjectBase,\n  SceneObjectState,\n  SceneVariableSet,\n  VariableDependencyConfig,\n  VariableValueOption,\n} from '@grafana/scenes';\nimport { useStyles2 } from '@grafana/ui';\nimport { reportAppInteraction, USER_EVENTS_ACTIONS, USER_EVENTS_PAGES } from 'services/analytics';\nimport { getSortByPreference } from 'services/store';\nimport { ALL_VARIABLE_VALUE, VAR_FIELD_GROUP_BY, VAR_LABELS } from 'services/variables';\nimport { areArraysEqual } from '../../../services/comparison';\nimport { CustomConstantVariable, CustomConstantVariableState } from '../../../services/CustomConstantVariable';\nimport { navigateToValueBreakdown } from '../../../services/navigate';\nimport { checkPrimaryLabel, getPrimaryLabelFromUrl, ValueSlugs } from '../../../services/routing';\nimport { DEFAULT_SORT_BY } from '../../../services/sorting';\nimport { IndexScene } from '../../IndexScene/IndexScene';\nimport { getDetectedFieldsFrame, ServiceScene } from '../ServiceScene';\nimport { BreakdownSearchReset, BreakdownSearchScene } from './BreakdownSearchScene';\nimport { ByFrameRepeater } from './ByFrameRepeater';\nimport { FieldsAggregatedBreakdownScene } from './FieldsAggregatedBreakdownScene';\nimport { FieldSelector } from './FieldSelector';\nimport { FieldValuesBreakdownScene } from './FieldValuesBreakdownScene';\nimport { LayoutSwitcher } from './LayoutSwitcher';\nimport { SortByScene, SortCriteriaChanged } from './SortByScene';\nimport { StatusWrapper } from './StatusWrapper';\nimport { getFieldOptions } from 'services/filters';\nimport { EmptyLayoutScene } from './EmptyLayoutScene';\nimport { getFieldGroupByVariable, getLabelsVariable } from '../../../services/variableGetters';\nimport { NoMatchingLabelsScene } from './NoMatchingLabelsScene';\nimport { clearVariables, getVariablesThatCanBeCleared } from '../../../services/variableHelpers';\n\nexport const averageFields = ['duration', 'count', 'total', 'bytes'];\nexport const FIELDS_BREAKDOWN_GRID_TEMPLATE_COLUMNS = 'repeat(auto-fit, minmax(400px, 1fr))';\n\nexport interface FieldsBreakdownSceneState extends SceneObjectState {\n  body?:\n    | (NoMatchingLabelsScene & SceneObject)\n    | (FieldsAggregatedBreakdownScene & SceneObject)\n    | (FieldValuesBreakdownScene & SceneObject)\n    | (EmptyLayoutScene & SceneObject);\n  search: BreakdownSearchScene;\n  sort: SortByScene;\n  value?: string;\n  loading?: boolean;\n  error?: string;\n  blockingMessage?: string;\n  changeFieldCount?: (n: number) => void;\n}\n\nexport class FieldsBreakdownScene extends SceneObjectBase<FieldsBreakdownSceneState> {\n  protected _variableDependency = new VariableDependencyConfig(this, {\n    variableNames: [VAR_LABELS],\n  });\n\n  constructor(state: Partial<FieldsBreakdownSceneState> & { options?: VariableValueOption[]; value?: string }) {\n    super({\n      $variables:\n        state.$variables ??\n        new SceneVariableSet({\n          variables: [\n            new CustomConstantVariable({\n              name: VAR_FIELD_GROUP_BY,\n              defaultToAll: false,\n              includeAll: true,\n              value: state.value ?? ALL_VARIABLE_VALUE,\n              options: state.options ?? [],\n            }),\n          ],\n        }),\n      loading: true,\n      sort: new SortByScene({ target: 'fields' }),\n      search: new BreakdownSearchScene('fields'),\n      value: state.value ?? ALL_VARIABLE_VALUE,\n      ...state,\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  private onActivate() {\n    const groupByVariable = getFieldGroupByVariable(this);\n    const serviceScene = sceneGraph.getAncestor(this, ServiceScene);\n\n    this.setState({\n      loading: serviceScene.state.$detectedLabelsData?.state.data?.state !== LoadingState.Done,\n    });\n\n    // Subscriptions\n    this._subs.add(\n      this.subscribeToEvent(BreakdownSearchReset, () => {\n        this.state.search.clearValueFilter();\n      })\n    );\n    this._subs.add(this.subscribeToEvent(SortCriteriaChanged, this.handleSortByChange));\n    this._subs.add(groupByVariable.subscribeToState(this.variableChanged));\n\n    this._subs.add(\n      getLabelsVariable(this).subscribeToState((newState, prevState) => {\n        const variable = getFieldGroupByVariable(this);\n        let { labelName } = getPrimaryLabelFromUrl();\n\n        const newService = newState.filters.find((filter) => filter.key === labelName);\n        const prevService = prevState.filters.find((filter) => filter.key === labelName);\n\n        // If the user changes the primary label\n        if (variable.state.value === ALL_VARIABLE_VALUE && newService !== prevService) {\n          this.setState({\n            loading: true,\n            body: undefined,\n          });\n        }\n      })\n    );\n\n    this._subs.add(\n      serviceScene.state.$detectedFieldsData?.subscribeToState(\n        (newState: QueryRunnerState, oldState: QueryRunnerState) => {\n          if (newState.data?.state === LoadingState.Done) {\n            if (newState.data.series?.[0]) {\n              this.updateOptions(newState.data.series?.[0]);\n            }\n          }\n        }\n      )\n    );\n\n    const detectedFieldsFrame = getDetectedFieldsFrame(this);\n    // Need to update labels with current state\n    if (detectedFieldsFrame) {\n      this.updateOptions(detectedFieldsFrame);\n    }\n\n    checkPrimaryLabel(this);\n  }\n\n  private variableChanged = (newState: CustomConstantVariableState, oldState: CustomConstantVariableState) => {\n    if (\n      newState.value !== oldState.value ||\n      !areArraysEqual(newState.options, oldState.options) ||\n      this.state.body === undefined ||\n      this.state.body instanceof EmptyLayoutScene ||\n      this.state.body instanceof NoMatchingLabelsScene\n    ) {\n      this.updateBody(newState);\n    }\n  };\n\n  private updateOptions(dataFrame: DataFrame) {\n    if (!dataFrame || !dataFrame.length) {\n      const indexScene = sceneGraph.getAncestor(this, IndexScene);\n      const variablesToClear = getVariablesThatCanBeCleared(indexScene);\n\n      let body;\n      if (variablesToClear.length > 1) {\n        this.state.changeFieldCount?.(0);\n        body = new NoMatchingLabelsScene({ clearCallback: () => clearVariables(this) });\n      } else {\n        body = new EmptyLayoutScene({ type: 'fields' });\n      }\n      this.setState({\n        loading: false,\n        body,\n      });\n      return;\n    }\n\n    const serviceScene = sceneGraph.getAncestor(this, ServiceScene);\n    const variable = getFieldGroupByVariable(this);\n    variable.setState({\n      options: getFieldOptions(dataFrame.fields[0].values.map((v) => String(v))),\n      loading: false,\n      value: serviceScene.state.drillDownLabel ?? ALL_VARIABLE_VALUE,\n    });\n    this.setState({\n      loading: false,\n    });\n  }\n\n  private handleSortByChange = (event: SortCriteriaChanged) => {\n    if (event.target !== 'fields') {\n      return;\n    }\n\n    const body = this.state.body;\n    if (body instanceof FieldValuesBreakdownScene && body.state.body instanceof LayoutSwitcher) {\n      body.state.body?.state.layouts.forEach((layout) => {\n        const byFrameRepeater = sceneGraph.findDescendents(body, ByFrameRepeater);\n        byFrameRepeater.forEach((r) => r.sort(event.sortBy, event.direction));\n      });\n    }\n    reportAppInteraction(\n      USER_EVENTS_PAGES.service_details,\n      USER_EVENTS_ACTIONS.service_details.value_breakdown_sort_change,\n      {\n        target: 'fields',\n        criteria: event.sortBy,\n        direction: event.direction,\n      }\n    );\n  };\n\n  private updateBody(newState: CustomConstantVariableState) {\n    const fieldsVariable = getFieldGroupByVariable(this);\n\n    // We get the labels from the service scene, if we don't have them yet, assume we're loading\n    if (!fieldsVariable.state.options || !fieldsVariable.state.options.length) {\n      return;\n    }\n\n    const stateUpdate: Partial<FieldsBreakdownSceneState> = {};\n\n    if (fieldsVariable.state.options && fieldsVariable.state.options.length <= 1) {\n      // If there's 1 or fewer fields build the empty or clear layout UI\n      const indexScene = sceneGraph.getAncestor(this, IndexScene);\n      const variablesToClear = getVariablesThatCanBeCleared(indexScene);\n\n      if (variablesToClear.length > 1) {\n        this.state.changeFieldCount?.(0);\n        stateUpdate.body = new NoMatchingLabelsScene({ clearCallback: () => clearVariables(this) });\n      } else {\n        stateUpdate.body = new EmptyLayoutScene({ type: 'fields' });\n      }\n    } else {\n      // Otherwise update the body, but don't re-instantiate if it's already the right class\n      if (newState.value === ALL_VARIABLE_VALUE && this.state.body instanceof FieldValuesBreakdownScene) {\n        stateUpdate.body = new FieldsAggregatedBreakdownScene({});\n      } else if (newState.value !== ALL_VARIABLE_VALUE && this.state.body instanceof FieldsAggregatedBreakdownScene) {\n        stateUpdate.body = new FieldValuesBreakdownScene({});\n      } else if (\n        // If the body hasn't been created, or the no-data views are active, we want to replace and render the correct scene\n        this.state.body === undefined ||\n        this.state.body instanceof EmptyLayoutScene ||\n        this.state.body instanceof NoMatchingLabelsScene\n      ) {\n        stateUpdate.body =\n          newState.value === ALL_VARIABLE_VALUE\n            ? new FieldsAggregatedBreakdownScene({})\n            : new FieldValuesBreakdownScene({});\n      }\n    }\n\n    this.setState(stateUpdate);\n  }\n  public onFieldSelectorChange = (value?: string) => {\n    if (!value) {\n      return;\n    }\n\n    const variable = getFieldGroupByVariable(this);\n    const { sortBy, direction } = getSortByPreference('fields', DEFAULT_SORT_BY, 'desc');\n\n    reportAppInteraction(\n      USER_EVENTS_PAGES.service_details,\n      USER_EVENTS_ACTIONS.service_details.select_field_in_breakdown_clicked,\n      {\n        field: value,\n        previousField: variable.getValueText(),\n        view: 'fields',\n        sortBy,\n        sortByDirection: direction,\n      }\n    );\n\n    const serviceScene = sceneGraph.getAncestor(this, ServiceScene);\n    navigateToValueBreakdown(ValueSlugs.field, value, serviceScene);\n  };\n\n  public static LabelsMenu = ({ model }: SceneComponentProps<FieldsBreakdownScene>) => {\n    const { body, loading, search } = model.useState();\n    const styles = useStyles2(getStyles);\n    const variable = getFieldGroupByVariable(model);\n    const { options, value } = variable.useState();\n    return (\n      <div className={styles.labelsMenuWrapper}>\n        {body instanceof FieldsAggregatedBreakdownScene && <FieldsAggregatedBreakdownScene.Selector model={body} />}\n        {body instanceof FieldValuesBreakdownScene && <FieldValuesBreakdownScene.Selector model={body} />}\n        {body instanceof FieldValuesBreakdownScene && <search.Component model={search} />}\n        {!loading && options.length > 1 && (\n          <FieldSelector label=\"Field\" options={options} value={String(value)} onChange={model.onFieldSelectorChange} />\n        )}\n      </div>\n    );\n  };\n  public static ValuesMenu = ({ model }: SceneComponentProps<FieldsBreakdownScene>) => {\n    const { loading, sort } = model.useState();\n    const styles = useStyles2(getStyles);\n    const variable = getFieldGroupByVariable(model);\n    const { value } = variable.useState();\n    return (\n      <div className={styles.valuesMenuWrapper}>\n        {!loading && value !== ALL_VARIABLE_VALUE && (\n          <>\n            <sort.Component model={sort} />\n          </>\n        )}\n      </div>\n    );\n  };\n\n  public static Component = ({ model }: SceneComponentProps<FieldsBreakdownScene>) => {\n    const { body, loading, blockingMessage } = model.useState();\n    const styles = useStyles2(getStyles);\n\n    return (\n      <div className={styles.container}>\n        <StatusWrapper {...{ isLoading: loading, blockingMessage }}>\n          {body instanceof FieldsAggregatedBreakdownScene && model && <FieldsBreakdownScene.LabelsMenu model={model} />}\n          <div className={styles.content}>{body && <body.Component model={body} />}</div>\n        </StatusWrapper>\n      </div>\n    );\n  };\n}\n\nexport const emptyStateStyles = {\n  link: css({\n    textDecoration: 'underline',\n  }),\n  button: css({\n    marginLeft: '1.5rem',\n  }),\n};\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css({\n      flexGrow: 1,\n      display: 'flex',\n      minHeight: '100%',\n      flexDirection: 'column',\n      gap: theme.spacing(1),\n    }),\n    content: css({\n      flexGrow: 1,\n      display: 'flex',\n      paddingTop: theme.spacing(0),\n    }),\n    labelsMenuWrapper: css({\n      flexGrow: 0,\n      display: 'flex',\n      alignItems: 'top',\n      justifyContent: 'space-between',\n      flexDirection: 'row-reverse',\n      gap: theme.spacing(2),\n    }),\n    valuesMenuWrapper: css({\n      flexGrow: 0,\n      display: 'flex',\n      alignItems: 'top',\n      gap: theme.spacing(2),\n      flexDirection: 'row',\n    }),\n  };\n}\n","import {\n  PanelBuilders,\n  SceneComponentProps,\n  SceneCSSGridItem,\n  SceneCSSGridLayout,\n  SceneDataProvider,\n  sceneGraph,\n  SceneObjectBase,\n  SceneObjectState,\n  SceneQueryRunner,\n  VariableValueOption,\n  VizPanel,\n} from '@grafana/scenes';\nimport { LayoutSwitcher } from './LayoutSwitcher';\nimport { DrawStyle, LoadingPlaceholder, StackingMode, useStyles2 } from '@grafana/ui';\nimport { getQueryRunner, setLevelColorOverrides } from '../../../services/panel';\nimport { ALL_VARIABLE_VALUE, LEVEL_VARIABLE_VALUE } from '../../../services/variables';\nimport React from 'react';\nimport { LabelBreakdownScene } from './LabelBreakdownScene';\nimport { SelectLabelActionScene } from './SelectLabelActionScene';\nimport { ValueSlugs } from '../../../services/routing';\nimport { buildLabelsQuery, LABEL_BREAKDOWN_GRID_TEMPLATE_COLUMNS } from '../../../services/labels';\nimport { getFieldsVariable, getLabelGroupByVariable } from '../../../services/variableGetters';\nimport { ServiceScene } from '../ServiceScene';\nimport { DataFrame, LoadingState } from '@grafana/data';\nimport { getPanelWrapperStyles, PanelMenu } from '../../Panels/PanelMenu';\nimport { MAX_NUMBER_OF_TIME_SERIES } from './TimeSeriesLimit';\n\nexport interface LabelsAggregatedBreakdownSceneState extends SceneObjectState {\n  body?: LayoutSwitcher;\n}\n\nexport class LabelsAggregatedBreakdownScene extends SceneObjectBase<LabelsAggregatedBreakdownSceneState> {\n  constructor(state: Partial<LabelsAggregatedBreakdownSceneState>) {\n    super({\n      ...state,\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  onActivate() {\n    const fields = getFieldsVariable(this);\n    const serviceScene = sceneGraph.getAncestor(this, ServiceScene);\n    const $detectedLabels = serviceScene.state.$detectedLabelsData;\n\n    // If the body hasn't been built yet, build it\n    if (!this.state.body) {\n      this.setState({\n        body: this.build(),\n      });\n    }\n    // Otherwise if we have the detected labels done loading, update the body\n    else if ($detectedLabels?.state.data?.state === LoadingState.Done) {\n      this.update($detectedLabels?.state.data.series[0]);\n    }\n\n    this._subs.add(\n      $detectedLabels?.subscribeToState((newState, prevState) => {\n        if (newState.data?.state === LoadingState.Done) {\n          this.update(newState.data.series[0]);\n        }\n      })\n    );\n\n    this._subs.add(\n      fields.subscribeToState(() => {\n        this.updateQueriesOnFieldsVariableChange();\n      })\n    );\n  }\n\n  private updateQueriesOnFieldsVariableChange = () => {\n    this.state.body?.state.layouts.forEach((layoutObj) => {\n      const layout = layoutObj as SceneCSSGridLayout;\n      // Iterate through the existing panels\n      for (let i = 0; i < layout.state.children.length; i++) {\n        const { panel, title } = this.getPanelByIndex(layout, i);\n        const queryRunner: SceneDataProvider | SceneQueryRunner | undefined = panel.state.$data;\n        const query = buildLabelsQuery(this, title, title);\n\n        // Don't update if query didn't change\n        if (queryRunner instanceof SceneQueryRunner) {\n          if (query.expr === queryRunner?.state.queries?.[0]?.expr) {\n            break;\n          }\n        }\n\n        panel.setState({\n          $data: getQueryRunner([query]),\n        });\n      }\n    });\n  };\n\n  private getPanelByIndex(layout: SceneCSSGridLayout, i: number) {\n    const gridItem = layout.state.children[i] as SceneCSSGridItem;\n    const panel = gridItem.state.body as VizPanel;\n\n    const title = panel.state.title;\n    return { panel, title };\n  }\n\n  private update(detectedLabelsFrame: DataFrame) {\n    const variable = getLabelGroupByVariable(this);\n    const newLabels = variable.state.options.filter((opt) => opt.value !== ALL_VARIABLE_VALUE).map((opt) => opt.label);\n\n    this.state.body?.state.layouts.forEach((layoutObj) => {\n      let existingLabels = [];\n      const layout = layoutObj as SceneCSSGridLayout;\n      const newLabelsSet = new Set<string>(newLabels);\n      const updatedChildren = layout.state.children as SceneCSSGridItem[];\n\n      for (let i = 0; i < updatedChildren.length; i++) {\n        const { title } = this.getPanelByIndex(layout, i);\n\n        if (newLabelsSet.has(title)) {\n          // If the new response has this field, delete it from the set, but leave it in the layout\n          newLabelsSet.delete(title);\n        } else {\n          // Otherwise if the panel doesn't exist in the response, delete it from the layout\n          updatedChildren.splice(i, 1);\n          // And make sure to update the index, or we'll skip the next one\n          i--;\n        }\n        existingLabels.push(title);\n      }\n\n      const labelsToAdd = Array.from(newLabelsSet);\n\n      const options = labelsToAdd.map((fieldName) => {\n        return {\n          label: fieldName,\n          value: fieldName,\n        };\n      });\n\n      updatedChildren.push(...this.buildChildren(options));\n\n      const cardinalityMap = this.calculateCardinalityMap(detectedLabelsFrame);\n      updatedChildren.sort(this.sortChildren(cardinalityMap));\n\n      layout.setState({\n        children: updatedChildren,\n      });\n    });\n  }\n\n  private calculateCardinalityMap(detectedLabels?: DataFrame) {\n    const cardinalityMap = new Map<string, number>();\n    if (detectedLabels?.length) {\n      for (let i = 0; i < detectedLabels?.fields.length; i++) {\n        const name: string = detectedLabels.fields[i].name;\n        const cardinality: number = detectedLabels.fields[i].values[0];\n        cardinalityMap.set(name, cardinality);\n      }\n    }\n    return cardinalityMap;\n  }\n\n  private build(): LayoutSwitcher {\n    const variable = getLabelGroupByVariable(this);\n    const labelBreakdownScene = sceneGraph.getAncestor(this, LabelBreakdownScene);\n    labelBreakdownScene.state.search.reset();\n\n    const children = this.buildChildren(variable.state.options);\n\n    const serviceScene = sceneGraph.getAncestor(this, ServiceScene);\n    const $detectedLabels = serviceScene.state.$detectedLabelsData;\n    if ($detectedLabels?.state.data?.state === LoadingState.Done) {\n      const cardinalityMap = this.calculateCardinalityMap($detectedLabels?.state.data.series[0]);\n      children.sort(this.sortChildren(cardinalityMap));\n    }\n\n    const childrenClones = children.map((child) => child.clone());\n\n    return new LayoutSwitcher({\n      options: [\n        { value: 'grid', label: 'Grid' },\n        { value: 'rows', label: 'Rows' },\n      ],\n      active: 'grid',\n      layouts: [\n        new SceneCSSGridLayout({\n          isLazy: true,\n          templateColumns: LABEL_BREAKDOWN_GRID_TEMPLATE_COLUMNS,\n          autoRows: '200px',\n          children: children,\n        }),\n        new SceneCSSGridLayout({\n          isLazy: true,\n          templateColumns: '1fr',\n          autoRows: '200px',\n          children: childrenClones,\n        }),\n      ],\n    });\n  }\n\n  private buildChildren(options: VariableValueOption[]) {\n    const children: SceneCSSGridItem[] = [];\n    for (const option of options) {\n      const { value } = option;\n      const optionValue = String(value);\n      if (value === ALL_VARIABLE_VALUE || !value) {\n        continue;\n      }\n      const query = buildLabelsQuery(this, String(option.value), String(option.value));\n      const queryRunner = getQueryRunner([query]);\n\n      children.push(\n        new SceneCSSGridItem({\n          body: PanelBuilders.timeseries()\n            .setTitle(optionValue)\n            .setData(queryRunner)\n            .setHeaderActions([new SelectLabelActionScene({ labelName: optionValue, fieldType: ValueSlugs.label })])\n            .setCustomFieldConfig('stacking', { mode: StackingMode.Normal })\n            .setCustomFieldConfig('fillOpacity', 100)\n            .setCustomFieldConfig('lineWidth', 0)\n            .setCustomFieldConfig('pointSize', 0)\n            .setCustomFieldConfig('drawStyle', DrawStyle.Bars)\n            .setHoverHeader(false)\n            // 11.5\n            // .setShowMenuAlways(true)\n            .setOverrides(setLevelColorOverrides)\n            .setMenu(new PanelMenu({ labelName: optionValue }))\n            .setSeriesLimit(MAX_NUMBER_OF_TIME_SERIES)\n            .build(),\n        })\n      );\n    }\n    return children;\n  }\n\n  private sortChildren(cardinalityMap: Map<string, number>) {\n    return (a: SceneCSSGridItem, b: SceneCSSGridItem) => {\n      const aPanel = a.state.body as VizPanel;\n      const bPanel = b.state.body as VizPanel;\n      if (aPanel.state.title === LEVEL_VARIABLE_VALUE) {\n        return -1;\n      }\n      if (bPanel.state.title === LEVEL_VARIABLE_VALUE) {\n        return 1;\n      }\n      const aCardinality = cardinalityMap.get(aPanel.state.title) ?? 0;\n      const bCardinality = cardinalityMap.get(bPanel.state.title) ?? 0;\n      return bCardinality - aCardinality;\n    };\n  }\n\n  public static Selector({ model }: SceneComponentProps<LabelsAggregatedBreakdownScene>) {\n    const { body } = model.useState();\n    return <>{body && <LayoutSwitcher.Selector model={body} />}</>;\n  }\n\n  public static Component = ({ model }: SceneComponentProps<LabelsAggregatedBreakdownScene>) => {\n    const { body } = model.useState();\n    const styles = useStyles2(getPanelWrapperStyles);\n\n    if (body) {\n      return <span className={styles.panelWrapper}>{body && <body.Component model={body} />}</span>;\n    }\n\n    return <LoadingPlaceholder text={'Loading...'} />;\n  };\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { AdHocVariableFilter, DataFrame, GrafanaTheme2, LoadingState } from '@grafana/data';\nimport {\n  QueryRunnerState,\n  SceneComponentProps,\n  sceneGraph,\n  SceneObject,\n  SceneObjectBase,\n  SceneObjectState,\n  SceneVariableSet,\n  SceneVariableState,\n  VariableDependencyConfig,\n  VariableValueOption,\n} from '@grafana/scenes';\nimport { Alert, useStyles2 } from '@grafana/ui';\nimport { reportAppInteraction, USER_EVENTS_ACTIONS, USER_EVENTS_PAGES } from 'services/analytics';\nimport { checkPrimaryLabel, getPrimaryLabelFromUrl, ValueSlugs } from 'services/routing';\nimport { ALL_VARIABLE_VALUE, SERVICE_NAME, SERVICE_UI_LABEL, VAR_LABEL_GROUP_BY, VAR_LABELS } from 'services/variables';\nimport { ByFrameRepeater } from './ByFrameRepeater';\nimport { FieldSelector } from './FieldSelector';\nimport { StatusWrapper } from './StatusWrapper';\nimport { getLabelOptions } from 'services/filters';\nimport { BreakdownSearchReset, BreakdownSearchScene } from './BreakdownSearchScene';\nimport { getSortByPreference } from 'services/store';\nimport { SortByScene, SortCriteriaChanged } from './SortByScene';\nimport { getDetectedLabelsFrame, ServiceScene } from '../ServiceScene';\nimport { CustomConstantVariable, CustomConstantVariableState } from '../../../services/CustomConstantVariable';\nimport { navigateToValueBreakdown } from '../../../services/navigate';\nimport { areArraysEqual } from '../../../services/comparison';\nimport { LabelValuesBreakdownScene } from './LabelValuesBreakdownScene';\nimport { LabelsAggregatedBreakdownScene } from './LabelsAggregatedBreakdownScene';\nimport { DEFAULT_SORT_BY } from '../../../services/sorting';\nimport { EmptyLayoutScene } from './EmptyLayoutScene';\nimport { getLabelGroupByVariable, getLabelsVariable } from '../../../services/variableGetters';\n\nexport interface LabelBreakdownSceneState extends SceneObjectState {\n  body?: SceneObject;\n  search: BreakdownSearchScene;\n  sort: SortByScene;\n  loading?: boolean;\n  error?: boolean;\n  blockingMessage?: string;\n  // We have to store the value in state because scenes doesn't allow variables that don't have options. We need to hold on to this until the API call getting values is done, and then reset the state\n  value?: string;\n}\n\nexport class LabelBreakdownScene extends SceneObjectBase<LabelBreakdownSceneState> {\n  protected _variableDependency = new VariableDependencyConfig(this, {\n    variableNames: [VAR_LABELS],\n  });\n\n  // Labels/options can be passed in when instantiated, but should ONLY exist on the state of the variable\n  constructor(state: Partial<LabelBreakdownSceneState> & { options?: VariableValueOption[]; value?: string }) {\n    super({\n      ...state,\n      $variables:\n        state.$variables ??\n        new SceneVariableSet({\n          variables: [\n            new CustomConstantVariable({\n              name: VAR_LABEL_GROUP_BY,\n              defaultToAll: false,\n              includeAll: true,\n              value: state.value ?? ALL_VARIABLE_VALUE,\n              options: state.options ?? [],\n            }),\n          ],\n        }),\n      loading: true,\n      sort: new SortByScene({ target: 'labels' }),\n      search: new BreakdownSearchScene('labels'),\n      value: state.value,\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  private onActivate() {\n    const serviceScene = sceneGraph.getAncestor(this, ServiceScene);\n    const groupByVariable = getLabelGroupByVariable(this);\n\n    this.setState({\n      loading: serviceScene.state.$detectedLabelsData?.state.data?.state !== LoadingState.Done,\n      error: serviceScene.state.$detectedLabelsData?.state.data?.state === LoadingState.Error,\n    });\n\n    this._subs.add(\n      this.subscribeToEvent(BreakdownSearchReset, () => {\n        this.state.search.clearValueFilter();\n      })\n    );\n    this._subs.add(this.subscribeToEvent(SortCriteriaChanged, this.handleSortByChange));\n\n    this._subs.add(serviceScene.state.$detectedLabelsData?.subscribeToState(this.onDetectedLabelsDataChange));\n\n    this._subs.add(\n      getLabelsVariable(this).subscribeToState((newState, prevState) => {\n        this.onLabelsVariableChange(newState, prevState);\n      })\n    );\n\n    this._subs.add(\n      groupByVariable.subscribeToState((newState, prevState) => {\n        this.onGroupByVariableChange(newState, prevState);\n      })\n    );\n\n    const detectedLabelsFrame = getDetectedLabelsFrame(this);\n    // Need to update labels with current state\n    if (detectedLabelsFrame) {\n      this.updateOptions(detectedLabelsFrame);\n    }\n\n    checkPrimaryLabel(this);\n  }\n\n  private onGroupByVariableChange(newState: CustomConstantVariableState, prevState: CustomConstantVariableState) {\n    // If the aggregation value changed, or the body is not yet defined\n    if (\n      newState.value !== prevState.value ||\n      !areArraysEqual(newState.options, prevState.options) ||\n      this.state.body === undefined ||\n      this.state.body instanceof EmptyLayoutScene\n    ) {\n      this.updateBody();\n    }\n  }\n\n  private onLabelsVariableChange(\n    newState: SceneVariableState & { filters: AdHocVariableFilter[] },\n    prevState: SceneVariableState & { filters: AdHocVariableFilter[] }\n  ) {\n    let { labelName } = getPrimaryLabelFromUrl();\n    if (labelName === SERVICE_UI_LABEL) {\n      labelName = SERVICE_NAME;\n    }\n    const variable = getLabelGroupByVariable(this);\n    const newPrimaryLabel = newState.filters.find((filter) => filter.key === labelName);\n    const prevPrimaryLabel = prevState.filters.find((filter) => filter.key === labelName);\n\n    // If the user changes the service\n    if (variable.state.value === ALL_VARIABLE_VALUE && newPrimaryLabel !== prevPrimaryLabel) {\n      this.setState({\n        loading: true,\n        body: undefined,\n        error: undefined,\n      });\n    }\n  }\n\n  /**\n   * Pull the detected_labels from our service scene, update the variable when they change\n   * @param newState\n   * @param prevState\n   */\n  private onDetectedLabelsDataChange = (newState: QueryRunnerState, prevState: QueryRunnerState) => {\n    if (\n      newState.data?.state === LoadingState.Done &&\n      newState.data.series?.[0] &&\n      !areArraysEqual(newState.data.series?.[0]?.fields, prevState.data?.series?.[0]?.fields)\n    ) {\n      this.updateOptions(newState.data.series?.[0]);\n    } else if (newState.data?.state === LoadingState.Done) {\n      // we got a new response, but nothing changed, just need to clear loading\n      const variable = getLabelGroupByVariable(this);\n      variable.setState({\n        loading: false,\n      });\n    }\n  };\n\n  private handleSortByChange = (event: SortCriteriaChanged) => {\n    if (event.target !== 'labels') {\n      return;\n    }\n    const body = this.state.body;\n    if (body instanceof LabelValuesBreakdownScene) {\n      const byFrameRepeaters = sceneGraph.findDescendents(body, ByFrameRepeater);\n      byFrameRepeaters.forEach((layout) => {\n        layout.sort(event.sortBy, event.direction);\n      });\n    }\n    reportAppInteraction(\n      USER_EVENTS_PAGES.service_details,\n      USER_EVENTS_ACTIONS.service_details.value_breakdown_sort_change,\n      {\n        target: 'labels',\n        criteria: event.sortBy,\n        direction: event.direction,\n      }\n    );\n  };\n\n  private updateOptions(detectedLabels: DataFrame | undefined) {\n    if (!detectedLabels || !detectedLabels.length) {\n      this.setState({\n        loading: false,\n        body: new EmptyLayoutScene({ type: 'labels' }),\n      });\n      return;\n    }\n    const variable = getLabelGroupByVariable(this);\n    const options = getLabelOptions(detectedLabels.fields.map((label) => label.name));\n\n    variable.setState({\n      loading: false,\n      options,\n      value: this.state.value ?? ALL_VARIABLE_VALUE,\n    });\n  }\n\n  private updateBody() {\n    const variable = getLabelGroupByVariable(this);\n    // We get the labels from the service scene, if we don't have them yet, assume we're loading\n    if (!variable.state.options || !variable.state.options.length) {\n      return;\n    }\n\n    const stateUpdate: Partial<LabelBreakdownSceneState> = {\n      loading: false,\n      blockingMessage: undefined,\n      error: false,\n    };\n\n    if (variable.hasAllValue() && this.state.body instanceof LabelValuesBreakdownScene) {\n      stateUpdate.body = new LabelsAggregatedBreakdownScene({});\n    } else if (!variable.hasAllValue() && this.state.body instanceof LabelsAggregatedBreakdownScene) {\n      stateUpdate.body = new LabelValuesBreakdownScene({});\n    } else if (this.state.body === undefined) {\n      if (variable.state.options.length > 0) {\n        stateUpdate.body = variable.hasAllValue()\n          ? new LabelsAggregatedBreakdownScene({})\n          : new LabelValuesBreakdownScene({});\n      } else {\n        stateUpdate.body = new EmptyLayoutScene({ type: 'labels' });\n      }\n    } else if (this.state.body instanceof EmptyLayoutScene) {\n      if (variable.state.options.length > 0) {\n        stateUpdate.body = variable.hasAllValue()\n          ? new LabelsAggregatedBreakdownScene({})\n          : new LabelValuesBreakdownScene({});\n      }\n    }\n\n    this.setState({ ...stateUpdate });\n  }\n\n  public onChange = (value?: string) => {\n    if (!value) {\n      return;\n    }\n\n    const variable = getLabelGroupByVariable(this);\n    variable.changeValueTo(value);\n\n    const { sortBy, direction } = getSortByPreference('labels', DEFAULT_SORT_BY, 'desc');\n    reportAppInteraction(\n      USER_EVENTS_PAGES.service_details,\n      USER_EVENTS_ACTIONS.service_details.select_field_in_breakdown_clicked,\n      {\n        label: value,\n        previousLabel: variable.getValueText(),\n        view: 'labels',\n        sortBy,\n        sortByDirection: direction,\n      }\n    );\n\n    const serviceScene = sceneGraph.getAncestor(this, ServiceScene);\n    navigateToValueBreakdown(ValueSlugs.label, value, serviceScene);\n  };\n\n  public static LabelsMenu = ({ model }: SceneComponentProps<LabelBreakdownScene>) => {\n    const { body, loading, search } = model.useState();\n    const variable = getLabelGroupByVariable(model);\n    const { options, value } = variable.useState();\n    const styles = useStyles2(getStyles);\n\n    return (\n      <div className={styles.labelsMenuWrapper}>\n        {body instanceof LabelValuesBreakdownScene && <LabelValuesBreakdownScene.Selector model={body} />}\n        {body instanceof LabelsAggregatedBreakdownScene && <LabelsAggregatedBreakdownScene.Selector model={body} />}\n        {body instanceof LabelValuesBreakdownScene && <search.Component model={search} />}\n        {!loading && options.length > 0 && (\n          <FieldSelector label=\"Label\" options={options} value={String(value)} onChange={model.onChange} />\n        )}\n      </div>\n    );\n  };\n\n  public static ValuesMenu = ({ model }: SceneComponentProps<LabelBreakdownScene>) => {\n    const { loading, sort } = model.useState();\n    const variable = getLabelGroupByVariable(model);\n    const { value } = variable.useState();\n    const styles = useStyles2(getStyles);\n\n    return (\n      <div className={styles.valuesMenuWrapper}>\n        {!loading && value !== ALL_VARIABLE_VALUE && (\n          <>\n            <sort.Component model={sort} />\n          </>\n        )}\n      </div>\n    );\n  };\n\n  public static Component = ({ model }: SceneComponentProps<LabelBreakdownScene>) => {\n    const { body, loading, blockingMessage, error } = model.useState();\n    const styles = useStyles2(getStyles);\n\n    return (\n      <div className={styles.container}>\n        <StatusWrapper {...{ isLoading: loading, blockingMessage }}>\n          {error && (\n            <Alert title=\"\" severity=\"warning\">\n              The labels are not available at this moment. Try using a different time range or check again later.\n            </Alert>\n          )}\n\n          {body instanceof LabelsAggregatedBreakdownScene && model && <LabelBreakdownScene.LabelsMenu model={model} />}\n\n          <div className={styles.content}>{body && <body.Component model={body} />}</div>\n        </StatusWrapper>\n      </div>\n    );\n  };\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css({\n      flexGrow: 1,\n      display: 'flex',\n      minHeight: '100%',\n      flexDirection: 'column',\n      gap: theme.spacing(1),\n    }),\n    content: css({\n      flexGrow: 1,\n      display: 'flex',\n      paddingTop: theme.spacing(0),\n    }),\n    labelsMenuWrapper: css({\n      flexGrow: 0,\n      display: 'flex',\n      alignItems: 'top',\n      justifyContent: 'space-between',\n      flexDirection: 'row-reverse',\n      gap: theme.spacing(2),\n    }),\n    valuesMenuWrapper: css({\n      flexGrow: 0,\n      display: 'flex',\n      alignItems: 'top',\n      gap: theme.spacing(2),\n      flexDirection: 'row',\n    }),\n  };\n}\n","import {\n  PanelBuilders,\n  SceneComponentProps,\n  SceneCSSGridLayout,\n  SceneDataProvider,\n  SceneDataState,\n  SceneFlexItem,\n  SceneFlexLayout,\n  sceneGraph,\n  SceneObject,\n  SceneObjectBase,\n  SceneObjectState,\n  SceneReactObject,\n} from '@grafana/scenes';\nimport { LayoutSwitcher } from './LayoutSwitcher';\nimport { getLabelValue } from './SortByScene';\nimport { DrawStyle, LoadingPlaceholder, StackingMode, useStyles2 } from '@grafana/ui';\nimport { getQueryRunner, setLevelColorOverrides } from '../../../services/panel';\nimport { getSortByPreference } from '../../../services/store';\nimport { AppEvents, DataQueryError, LoadingState } from '@grafana/data';\nimport { ByFrameRepeater } from './ByFrameRepeater';\nimport { getFilterBreakdownValueScene } from '../../../services/fields';\nimport { ALL_VARIABLE_VALUE, VAR_LABEL_GROUP_BY_EXPR, VAR_LABELS } from '../../../services/variables';\nimport React from 'react';\nimport { LabelBreakdownScene } from './LabelBreakdownScene';\nimport { navigateToDrilldownPage } from '../../../services/navigate';\nimport { PageSlugs } from '../../../services/routing';\nimport { ServiceScene } from '../ServiceScene';\nimport { AddFilterEvent } from './AddToFiltersButton';\nimport { DEFAULT_SORT_BY } from '../../../services/sorting';\nimport { buildLabelsQuery, LABEL_BREAKDOWN_GRID_TEMPLATE_COLUMNS } from '../../../services/labels';\nimport { getAppEvents } from '@grafana/runtime';\nimport { getLabelGroupByVariable } from '../../../services/variableGetters';\nimport { getPanelWrapperStyles, PanelMenu } from '../../Panels/PanelMenu';\nimport { NoMatchingLabelsScene } from './NoMatchingLabelsScene';\nimport { EmptyLayoutScene } from './EmptyLayoutScene';\nimport { IndexScene } from '../../IndexScene/IndexScene';\nimport { clearVariables, getVariablesThatCanBeCleared } from '../../../services/variableHelpers';\nimport { ValueSummaryPanelScene } from './Panels/ValueSummary';\n\ntype DisplayError = DataQueryError & { displayed: boolean };\ntype DisplayErrors = Record<string, DisplayError>;\n\nexport interface LabelValueBreakdownSceneState extends SceneObjectState {\n  body?: (LayoutSwitcher & SceneObject) | (NoMatchingLabelsScene & SceneObject) | (EmptyLayoutScene & SceneObject);\n  $data?: SceneDataProvider;\n  lastFilterEvent?: AddFilterEvent;\n  errors: DisplayErrors;\n}\n\nexport class LabelValuesBreakdownScene extends SceneObjectBase<LabelValueBreakdownSceneState> {\n  constructor(state: Partial<LabelValueBreakdownSceneState>) {\n    super({\n      ...state,\n      errors: {},\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  onActivate() {\n    this.setState({\n      $data: getQueryRunner([\n        buildLabelsQuery(this, VAR_LABEL_GROUP_BY_EXPR, String(getLabelGroupByVariable(this).state.value)),\n      ]),\n      body: this.build(),\n    });\n    const groupByVariable = getLabelGroupByVariable(this);\n    this._subs.add(\n      groupByVariable.subscribeToState((newState) => {\n        if (newState.value === ALL_VARIABLE_VALUE) {\n          this.setState({\n            $data: undefined,\n            body: undefined,\n          });\n        }\n      })\n    );\n\n    this.subscribeToEvent(AddFilterEvent, (event) => {\n      this.setState({\n        lastFilterEvent: event,\n      });\n    });\n\n    this._subs.add(\n      this.state.$data?.subscribeToState((newState, prevState) => {\n        this.onValuesDataQueryChange(newState, prevState);\n      })\n    );\n  }\n\n  private onValuesDataQueryChange(newState: SceneDataState, prevState: SceneDataState) {\n    // Set empty states\n    this.setEmptyStates(newState);\n\n    // Set error states\n    this.setErrorStates(newState);\n\n    // Navigate back to main page if user reduced cardinality to 1\n    this.navigateOnLastFilter(newState);\n  }\n\n  private navigateOnLastFilter(newState: SceneDataState) {\n    if (newState.data?.state === LoadingState.Done || newState.data?.state === LoadingState.Streaming) {\n      // No panels for the user to select, presumably because everything has been excluded\n      const event = this.state.lastFilterEvent;\n\n      // @todo discuss: Do we want to let users exclude all labels? Or should we redirect when excluding the penultimate panel?\n      if (event) {\n        if (event.operator === 'exclude' && newState.data.series.length < 1) {\n          this.navigateToLabels();\n        }\n\n        // @todo discuss: wouldn't include always return in 1 result? Do we need to wait for the query to run or should we navigate on receiving the include event and cancel the ongoing query?\n        if (event.operator === 'include' && newState.data.series.length <= 1) {\n          this.navigateToLabels();\n        }\n      }\n    }\n  }\n\n  private setErrorStates(newState: SceneDataState) {\n    // If panels have errors\n    if (newState?.data?.errors && newState.data?.state !== LoadingState.Done) {\n      const errors: DisplayErrors = this.state.errors;\n      newState?.data?.errors.forEach((err) => {\n        const errorIndex = `${err.status}_${err.traceId}_${err.message}`;\n        if (errors[errorIndex] === undefined) {\n          errors[errorIndex] = { ...err, displayed: false };\n        }\n      });\n      this.setState({\n        errors,\n      });\n\n      this.showErrorToast(this.state.errors);\n    }\n  }\n\n  private setEmptyStates(newState: SceneDataState) {\n    if (newState.data?.state === LoadingState.Done) {\n      if (newState.data.series.length > 0 && !(this.state.body instanceof LayoutSwitcher)) {\n        this.setState({\n          body: this.build(),\n        });\n      } else if (newState.data.series.length === 0) {\n        const indexScene = sceneGraph.getAncestor(this, IndexScene);\n        const variablesToClear = getVariablesThatCanBeCleared(indexScene);\n\n        if (variablesToClear.length > 1) {\n          this.setState({\n            body: new NoMatchingLabelsScene({ clearCallback: () => clearVariables(this) }),\n          });\n        } else {\n          this.setState({\n            body: new EmptyLayoutScene({ type: 'fields' }),\n          });\n        }\n      }\n    }\n  }\n\n  private getActiveLayout(): SceneFlexLayout | undefined {\n    const layoutSwitcher = this.state.body;\n    if (layoutSwitcher instanceof LayoutSwitcher) {\n      const activeLayout = layoutSwitcher?.state.layouts.find((layout) => layout.isActive);\n      if (activeLayout instanceof SceneFlexLayout) {\n        return activeLayout;\n      }\n    }\n    return undefined;\n  }\n\n  private activeLayoutContainsNoPanels(): boolean {\n    const activeLayout = this.getActiveLayout();\n    if (activeLayout) {\n      const byFrameRepeaters = sceneGraph.findDescendents(activeLayout, ByFrameRepeater);\n      return byFrameRepeaters.some((repeater) => {\n        const child = repeater.state.body.state.children[0];\n        return child instanceof SceneFlexItem || child instanceof SceneReactObject;\n      });\n    }\n\n    return false;\n  }\n\n  private navigateToLabels() {\n    this.setState({\n      lastFilterEvent: undefined,\n    });\n    navigateToDrilldownPage(PageSlugs.labels, sceneGraph.getAncestor(this, ServiceScene));\n  }\n\n  private build(): LayoutSwitcher {\n    const variable = getLabelGroupByVariable(this);\n    const variableState = variable.state;\n    const labelBreakdownScene = sceneGraph.getAncestor(this, LabelBreakdownScene);\n    const tagKey = String(variableState?.value);\n\n    let bodyOpts = PanelBuilders.timeseries();\n    bodyOpts = bodyOpts\n      .setCustomFieldConfig('stacking', { mode: StackingMode.Normal })\n      .setCustomFieldConfig('fillOpacity', 100)\n      .setCustomFieldConfig('lineWidth', 0)\n      .setCustomFieldConfig('pointSize', 0)\n      .setCustomFieldConfig('drawStyle', DrawStyle.Bars)\n      // Waiting for 11.5\n      // .setShowMenuAlways(true)\n      .setOverrides(setLevelColorOverrides)\n      .setMenu(new PanelMenu({}))\n      .setTitle(tagKey);\n\n    const body = bodyOpts.build();\n    const { sortBy, direction } = getSortByPreference('labels', DEFAULT_SORT_BY, 'desc');\n\n    const getFilter = () => labelBreakdownScene.state.search.state.filter ?? '';\n\n    return new LayoutSwitcher({\n      options: [\n        { value: 'single', label: 'Single' },\n        { value: 'grid', label: 'Grid' },\n        { value: 'rows', label: 'Rows' },\n      ],\n      active: 'grid',\n      layouts: [\n        new SceneFlexLayout({\n          direction: 'column',\n          children: [\n            new SceneReactObject({ reactNode: <LabelBreakdownScene.LabelsMenu model={labelBreakdownScene} /> }),\n            new SceneFlexItem({\n              minHeight: 300,\n              body,\n            }),\n          ],\n        }),\n        new SceneFlexLayout({\n          direction: 'column',\n          children: [\n            new SceneReactObject({ reactNode: <LabelBreakdownScene.LabelsMenu model={labelBreakdownScene} /> }),\n            new ValueSummaryPanelScene({ title: tagKey, levelColor: true }),\n            new SceneReactObject({ reactNode: <LabelBreakdownScene.ValuesMenu model={labelBreakdownScene} /> }),\n            new ByFrameRepeater({\n              body: new SceneCSSGridLayout({\n                isLazy: true,\n                templateColumns: LABEL_BREAKDOWN_GRID_TEMPLATE_COLUMNS,\n                autoRows: '200px',\n                children: [\n                  new SceneFlexItem({\n                    body: new SceneReactObject({\n                      reactNode: <LoadingPlaceholder text=\"Loading...\" />,\n                    }),\n                  }),\n                ],\n              }),\n              getLayoutChild: getFilterBreakdownValueScene(\n                getLabelValue,\n                DrawStyle.Bars,\n                VAR_LABELS,\n                sceneGraph.getAncestor(this, LabelBreakdownScene).state.sort,\n                tagKey\n              ),\n              sortBy,\n              direction,\n              getFilter,\n            }),\n          ],\n        }),\n        new SceneFlexLayout({\n          direction: 'column',\n          children: [\n            new SceneReactObject({ reactNode: <LabelBreakdownScene.LabelsMenu model={labelBreakdownScene} /> }),\n            new ValueSummaryPanelScene({ title: tagKey, levelColor: true }),\n            new SceneReactObject({ reactNode: <LabelBreakdownScene.ValuesMenu model={labelBreakdownScene} /> }),\n            new ByFrameRepeater({\n              body: new SceneCSSGridLayout({\n                templateColumns: '1fr',\n                autoRows: '200px',\n                children: [\n                  new SceneFlexItem({\n                    body: new SceneReactObject({\n                      reactNode: <LoadingPlaceholder text=\"Loading...\" />,\n                    }),\n                  }),\n                ],\n              }),\n              getLayoutChild: getFilterBreakdownValueScene(\n                getLabelValue,\n                DrawStyle.Bars,\n                VAR_LABELS,\n                sceneGraph.getAncestor(this, LabelBreakdownScene).state.sort,\n                tagKey\n              ),\n              sortBy,\n              direction,\n              getFilter,\n            }),\n          ],\n        }),\n      ],\n    });\n  }\n\n  private showErrorToast(errors: DisplayErrors) {\n    const appEvents = getAppEvents();\n\n    // Make sure we only display each error once\n    let errorArray: DisplayError[] = [];\n    for (const err in errors) {\n      const displayError = errors[err];\n      if (!displayError.displayed) {\n        errorArray.push(displayError);\n        displayError.displayed = true;\n      }\n    }\n\n    if (errorArray.length) {\n      // If we don't have any panels the error message will replace the loading state, we want to set it as displayed but not render the toast\n      if (!this.activeLayoutContainsNoPanels()) {\n        appEvents.publish({\n          type: AppEvents.alertError.name,\n          payload: errorArray?.map((err, key) => this.renderError(key, err)),\n        });\n      }\n      this.setState({\n        errors,\n      });\n    }\n  }\n\n  private renderError(key: number, err: DataQueryError) {\n    return (\n      <div key={key}>\n        {err.status && (\n          <>\n            <strong>Status</strong>: {err.status} <br />\n          </>\n        )}\n        {err.message && (\n          <>\n            <strong>Message</strong>: {err.message} <br />\n          </>\n        )}\n        {err.traceId && (\n          <>\n            <strong>TraceId</strong>: {err.traceId}\n          </>\n        )}\n      </div>\n    );\n  }\n\n  public static Selector({ model }: SceneComponentProps<LabelValuesBreakdownScene>) {\n    const { body } = model.useState();\n    return <>{body && body instanceof LayoutSwitcher && <LayoutSwitcher.Selector model={body} />}</>;\n  }\n\n  public static Component = ({ model }: SceneComponentProps<LabelValuesBreakdownScene>) => {\n    const { body } = model.useState();\n    const styles = useStyles2(getPanelWrapperStyles);\n    if (body) {\n      return <span className={styles.panelWrapper}>{body && <body.Component model={body} />}</span>;\n    }\n\n    return <LoadingPlaceholder text={'Loading...'} />;\n  };\n}\n","import React from 'react';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { SceneComponentProps, SceneObject, SceneObjectBase, SceneObjectState } from '@grafana/scenes';\nimport { Field, RadioButtonGroup, useStyles2 } from '@grafana/ui';\nimport { reportAppInteraction, USER_EVENTS_ACTIONS, USER_EVENTS_PAGES } from 'services/analytics';\nimport { getDrilldownSlug } from '../../../services/routing';\nimport { css } from '@emotion/css';\n\nexport interface LayoutSwitcherState extends SceneObjectState {\n  active: LayoutType;\n  layouts: SceneObject[];\n  options: Array<SelectableValue<LayoutType>>;\n}\n\nexport type LayoutType = 'single' | 'grid' | 'rows';\n\nexport class LayoutSwitcher extends SceneObjectBase<LayoutSwitcherState> {\n  public static Selector = LayoutSwitcherComponent;\n\n  public onLayoutChange = (active: LayoutType) => {\n    reportAppInteraction(USER_EVENTS_PAGES.service_details, USER_EVENTS_ACTIONS.service_details.layout_type_changed, {\n      layout: active,\n      view: getDrilldownSlug(),\n    });\n    this.setState({ active });\n  };\n\n  public static Component = ({ model }: SceneComponentProps<LayoutSwitcher>) => {\n    const { layouts, options, active } = model.useState();\n\n    const index = options.findIndex((o) => o.value === active);\n    if (index === -1) {\n      return null;\n    }\n\n    const layout = layouts[index];\n\n    return <layout.Component model={layout} />;\n  };\n}\n\nfunction LayoutSwitcherComponent({ model }: { model: LayoutSwitcher }) {\n  const { active, options } = model.useState();\n  const styles = useStyles2(getStyles);\n\n  return (\n    <Field className={styles.field}>\n      <RadioButtonGroup options={options} value={active} onChange={model.onLayoutChange} />\n    </Field>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    field: css({\n      marginBottom: 0,\n    }),\n  };\n};\n","import { SceneComponentProps, SceneObjectBase, SceneObjectState } from '@grafana/scenes';\nimport { GrotError } from '../../GrotError';\nimport { Alert, Button } from '@grafana/ui';\nimport React from 'react';\nimport { emptyStateStyles } from './FieldsBreakdownScene';\n\nexport interface ClearFiltersLayoutSceneState extends SceneObjectState {\n  clearCallback: () => void;\n}\nexport class NoMatchingLabelsScene extends SceneObjectBase<ClearFiltersLayoutSceneState> {\n  public static Component = ({ model }: SceneComponentProps<NoMatchingLabelsScene>) => {\n    const { clearCallback } = model.useState();\n    return (\n      <GrotError>\n        <Alert title=\"\" severity=\"info\">\n          No labels match these filters.{' '}\n          <Button className={emptyStateStyles.button} onClick={() => clearCallback()}>\n            Clear filters\n          </Button>{' '}\n        </Alert>\n      </GrotError>\n    );\n  };\n}\n","import {\n  PanelBuilders,\n  SceneComponentProps,\n  SceneFlexItem,\n  SceneFlexLayout,\n  sceneGraph,\n  SceneObjectBase,\n  SceneObjectState,\n  VizPanel,\n} from '@grafana/scenes';\nimport { CollapsablePanelText, PanelMenu } from '../../../Panels/PanelMenu';\nimport { DrawStyle, StackingMode } from '@grafana/ui';\nimport { setLevelColorOverrides } from '../../../../services/panel';\nimport { getPanelOption, setPanelOption } from '../../../../services/store';\nimport React from 'react';\n\nconst SUMMARY_PANEL_SERIES_LIMIT = 100;\n\ninterface ValueSummaryPanelSceneState extends SceneObjectState {\n  body?: SceneFlexLayout;\n  title: string;\n  levelColor?: boolean;\n}\nexport class ValueSummaryPanelScene extends SceneObjectBase<ValueSummaryPanelSceneState> {\n  constructor(state: ValueSummaryPanelSceneState) {\n    super(state);\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  public static Component = ({ model }: SceneComponentProps<ValueSummaryPanelScene>) => {\n    const { body } = model.useState();\n    if (body) {\n      return (\n        <div>\n          <body.Component model={body} />\n        </div>\n      );\n    }\n\n    return null;\n  };\n\n  onActivate() {\n    const collapsed =\n      getPanelOption('collapsed', [CollapsablePanelText.collapsed, CollapsablePanelText.expanded]) ??\n      CollapsablePanelText.expanded;\n    const viz = buildValueSummaryPanel(this.state.title, { levelColor: this.state.levelColor });\n    const height = getValueSummaryHeight(collapsed);\n\n    this.setState({\n      body: new SceneFlexLayout({\n        key: VALUE_SUMMARY_PANEL_KEY,\n        minHeight: height,\n        height: height,\n        maxHeight: height,\n        wrap: 'nowrap',\n        children: [\n          new SceneFlexItem({\n            body: viz,\n          }),\n        ],\n      }),\n    });\n\n    this._subs.add(\n      viz.subscribeToState((newState, prevState) => {\n        if (newState.collapsed !== prevState.collapsed) {\n          const vizPanelFlexLayout = sceneGraph.getAncestor(viz, SceneFlexLayout);\n          setValueSummaryHeight(\n            vizPanelFlexLayout,\n            newState.collapsed ? CollapsablePanelText.collapsed : CollapsablePanelText.expanded\n          );\n          setPanelOption(\n            'collapsed',\n            newState.collapsed ? CollapsablePanelText.collapsed : CollapsablePanelText.expanded\n          );\n        }\n      })\n    );\n  }\n}\n\nexport function setValueSummaryHeight(vizPanelFlexLayout: SceneFlexLayout, collapsableState: CollapsablePanelText) {\n  const height = getValueSummaryHeight(collapsableState);\n  vizPanelFlexLayout.setState({\n    minHeight: height,\n    height: height,\n    maxHeight: height,\n  });\n}\n\nfunction getValueSummaryHeight(collapsableState: CollapsablePanelText) {\n  return collapsableState === CollapsablePanelText.collapsed ? 35 : 300;\n}\n\nfunction buildValueSummaryPanel(title: string, options?: { levelColor?: boolean }): VizPanel {\n  const collapsed =\n    getPanelOption('collapsed', [CollapsablePanelText.collapsed, CollapsablePanelText.expanded]) ??\n    CollapsablePanelText.expanded;\n\n  const body = PanelBuilders.timeseries()\n    .setTitle(title)\n    .setMenu(new PanelMenu({}))\n    .setCollapsible(true)\n    .setCollapsed(collapsed === CollapsablePanelText.collapsed)\n    .setCustomFieldConfig('stacking', { mode: StackingMode.Normal })\n    .setCustomFieldConfig('fillOpacity', 100)\n    .setCustomFieldConfig('lineWidth', 0)\n    .setCustomFieldConfig('pointSize', 0)\n    // 11.5\n    // .setShowMenuAlways(true)\n    .setSeriesLimit(SUMMARY_PANEL_SERIES_LIMIT)\n    .setCustomFieldConfig('drawStyle', DrawStyle.Bars);\n\n  if (options?.levelColor) {\n    body.setOverrides(setLevelColorOverrides);\n  }\n  return body.build();\n}\n\nexport const VALUE_SUMMARY_PANEL_KEY = 'value_summary_panel';\n","import { css } from '@emotion/css';\nimport { Icon, IconButton, Input, useStyles2 } from '@grafana/ui';\nimport React, { HTMLProps } from 'react';\nimport { GrafanaTheme2 } from '@grafana/data';\n\ninterface Props extends Omit<HTMLProps<HTMLInputElement>, 'width' | 'prefix'> {\n  onClear?: () => void;\n  suffix?: React.ReactNode;\n  prefix?: React.ReactNode;\n}\n\nexport const SearchInput = ({ value, onChange, placeholder, onClear, suffix, ...rest }: Props) => {\n  const styles = useStyles2(getStyles);\n  return (\n    <Input\n      value={value}\n      onChange={onChange}\n      suffix={\n        <span className={styles.suffixWrapper}>\n          {onClear && value ? (\n            <IconButton\n              aria-label={'Clear search'}\n              tooltip={'Clear search'}\n              onClick={onClear}\n              name=\"times\"\n              className={styles.clearIcon}\n            />\n          ) : undefined}\n          {suffix && suffix}\n        </span>\n      }\n      prefix={<Icon name=\"search\" />}\n      placeholder={placeholder}\n      {...rest}\n    />\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  suffixWrapper: css({\n    gap: theme.spacing(0.5),\n    display: 'inline-flex',\n  }),\n  clearIcon: css({\n    cursor: 'pointer',\n  }),\n});\n","import { SceneComponentProps, sceneGraph, SceneObjectBase, SceneObjectState } from '@grafana/scenes';\nimport { Button, ClickOutsideWrapper, Field, FieldSet, Input, Label, Select, Stack, useStyles2 } from '@grafana/ui';\nimport React from 'react';\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { css, cx } from '@emotion/css';\nimport { SelectLabelActionScene } from './SelectLabelActionScene';\nimport { addNumericFilter, removeFilter, validateVariableNameForField, VariableFilterType } from './AddToFiltersButton';\nimport { FilterOp } from '../../../services/filterTypes';\nimport { getAdHocFiltersVariable, getValueFromFieldsFilter } from '../../../services/variableGetters';\nimport { logger } from '../../../services/logger';\nimport { testIds } from '../../../services/testIds';\n\nexport interface NumericFilterPopoverSceneState extends SceneObjectState {\n  labelName: string;\n  variableType: VariableFilterType;\n  gt?: number;\n  gte?: boolean;\n  lt?: number;\n  lte?: boolean;\n  fieldType: 'float' | 'duration' | 'bytes';\n  hasExistingFilter?: boolean;\n}\n\nexport type NumericFilterPopoverSceneStateTotal =\n  | (NumericFilterPopoverSceneState & FloatTypes)\n  | (NumericFilterPopoverSceneState & DurationTypes)\n  | (NumericFilterPopoverSceneState & ByteTypes);\n\nenum durationUnitValues {\n  ns = 'ns',\n  us = 'µs',\n  ms = 'ms',\n  s = 's',\n  m = 'm',\n  h = 'h',\n}\n\nenum byteUnitValues {\n  B = 'B',\n  KB = 'KB',\n  MB = 'MB',\n  GB = 'GB',\n  TB = 'TB',\n\n  // Supported but potentially confusing values, commented out for now\n  // kB = 'kB',\n  // KiB = 'KiB',\n  // MiB = 'MiB',\n  // GiB = 'GiB',\n  // TiB = 'TiB',\n}\n\ninterface FloatUnitTypes {\n  ltu: '';\n  gtu: '';\n}\n\ninterface FloatTypes extends FloatUnitTypes {\n  fieldType: 'float';\n}\n\ninterface DurationUnitTypes {\n  ltu: durationUnitValues;\n  gtu: durationUnitValues;\n}\n\ninterface DurationTypes extends DurationUnitTypes {\n  fieldType: 'duration';\n}\n\ninterface ByteUnitTypes {\n  ltu: byteUnitValues;\n  gtu: byteUnitValues;\n}\n\ninterface ByteTypes extends ByteUnitTypes {\n  fieldType: 'bytes';\n}\n\nexport class NumericFilterPopoverScene extends SceneObjectBase<NumericFilterPopoverSceneStateTotal> {\n  constructor(state: Omit<NumericFilterPopoverSceneStateTotal, 'gtu' | 'ltu'>) {\n    let units: FloatUnitTypes | DurationUnitTypes | ByteUnitTypes;\n    const fieldType: 'float' | 'bytes' | 'duration' = state.fieldType;\n    if (fieldType === 'bytes') {\n      units = { ltu: byteUnitValues.B, gtu: byteUnitValues.B };\n    } else if (fieldType === 'duration') {\n      units = { ltu: durationUnitValues.s, gtu: durationUnitValues.s };\n    } else if (fieldType === 'float') {\n      units = { ltu: '', gtu: '' };\n    } else {\n      throw new Error(`field type incorrectly defined: ${fieldType}`);\n    }\n\n    // @todo - how to avoid type assertion?\n    super({ ...state, ...units } as NumericFilterPopoverSceneStateTotal);\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  onActivate() {\n    // get existing values if they exist\n    const variable = getAdHocFiltersVariable(\n      validateVariableNameForField(this.state.labelName, this.state.variableType),\n      this\n    );\n    const filters = variable.state.filters.filter((f) => f.key === this.state.labelName);\n    const gtFilter = filters.find((f) => f.operator === FilterOp.gte || f.operator === FilterOp.gt);\n    const ltFilter = filters.find((f) => f.operator === FilterOp.lte || f.operator === FilterOp.lt);\n    let stateUpdate: Partial<NumericFilterPopoverSceneStateTotal> = {};\n\n    if (this.state.fieldType === 'duration' || this.state.fieldType === 'bytes') {\n      if (gtFilter) {\n        const extractedValue = extractValueFromString(getValueFromFieldsFilter(gtFilter).value, this.state.fieldType);\n\n        if (extractedValue) {\n          stateUpdate.gt = extractedValue.value;\n          stateUpdate.gtu = extractedValue.unit;\n          stateUpdate.gte = gtFilter.operator === FilterOp.gte;\n        }\n      }\n\n      if (ltFilter) {\n        const extractedValue = extractValueFromString(getValueFromFieldsFilter(ltFilter).value, this.state.fieldType);\n\n        if (extractedValue) {\n          stateUpdate.lt = extractedValue.value;\n          stateUpdate.ltu = extractedValue.unit;\n          stateUpdate.lte = ltFilter.operator === FilterOp.lte;\n        }\n      }\n    } else {\n      // Floats have no unit\n      if (gtFilter) {\n        const extractedValue = getValueFromFieldsFilter(gtFilter).value;\n        stateUpdate.gt = Number(extractedValue);\n        stateUpdate.gtu = '';\n        stateUpdate.gte = gtFilter.operator === FilterOp.gte;\n      }\n      if (ltFilter) {\n        const extractedValue = getValueFromFieldsFilter(ltFilter).value;\n        stateUpdate.lt = Number(extractedValue);\n        stateUpdate.ltu = '';\n        stateUpdate.lte = ltFilter.operator === FilterOp.lte;\n      }\n    }\n\n    if (Object.keys(stateUpdate).length !== 0) {\n      stateUpdate.hasExistingFilter = true;\n    }\n\n    this.setState(stateUpdate);\n  }\n\n  onSubmit() {\n    // \"0\" values break byte queries see https://github.com/grafana/loki/issues/14993, for now we remove the filter when a 0 value is entered to prevent breakage\n    // numeric values can only be fields or metadata variable\n    if (this.state.gt) {\n      addNumericFilter(\n        this.state.labelName,\n        this.state.gt.toString() + this.state.gtu,\n        this.state.gte ? FilterOp.gte : FilterOp.gt,\n        this,\n        this.state.variableType\n      );\n    } else {\n      removeFilter(this.state.labelName, this, this.state.gte ? FilterOp.gte : FilterOp.gt, this.state.variableType);\n    }\n\n    if (this.state.lt) {\n      addNumericFilter(\n        this.state.labelName,\n        this.state.lt.toString() + this.state.ltu,\n        this.state.lte ? FilterOp.lte : FilterOp.lt,\n        this,\n        this.state.variableType\n      );\n    } else {\n      removeFilter(this.state.labelName, this, this.state.lte ? FilterOp.lte : FilterOp.lt, this.state.variableType);\n    }\n\n    const selectLabelActionScene = sceneGraph.getAncestor(this, SelectLabelActionScene);\n    selectLabelActionScene.togglePopover();\n  }\n  onInputKeydown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    const formDisabled = this.state.gt === undefined && this.state.lt === undefined;\n    if (e.key === 'Enter' && !formDisabled) {\n      this.onSubmit();\n    }\n  };\n\n  public static Component = ({ model }: SceneComponentProps<NumericFilterPopoverScene>) => {\n    const popoverStyles = useStyles2(getPopoverStyles);\n    const { labelName, gt, lt, gte, lte, gtu, ltu, fieldType, hasExistingFilter } = model.useState();\n    const subTitle = fieldType !== 'float' && fieldType !== labelName ? `(${fieldType})` : undefined;\n\n    const selectLabelActionScene = sceneGraph.getAncestor(model, SelectLabelActionScene);\n    const formDisabled = gt === undefined && lt === undefined;\n\n    return (\n      <ClickOutsideWrapper useCapture={true} onClick={() => selectLabelActionScene.togglePopover()}>\n        <Stack direction=\"column\" gap={0} role=\"tooltip\">\n          <div className={popoverStyles.card.body}>\n            <div className={popoverStyles.card.title}>\n              {labelName} {subTitle}\n            </div>\n\n            <div className={popoverStyles.card.fieldWrap}>\n              {/* greater than */}\n              <FieldSet className={popoverStyles.card.fieldset}>\n                <Field\n                  data-testid={testIds.breakdowns.common.filterNumericPopover.inputGreaterThanInclusive}\n                  horizontal={true}\n                  className={cx(popoverStyles.card.field, popoverStyles.card.inclusiveField)}\n                >\n                  <Select<string>\n                    className={popoverStyles.card.inclusiveInput}\n                    menuShouldPortal={false}\n                    value={gte !== undefined ? gte.toString() : 'false'}\n                    options={[\n                      { label: 'Greater than', value: 'false' },\n                      { label: 'Greater than or equal', value: 'true' },\n                    ]}\n                    onChange={(value) => model.setState({ gte: value.value === 'true' })}\n                  />\n                </Field>\n                <Field\n                  data-testid={testIds.breakdowns.common.filterNumericPopover.inputGreaterThan}\n                  horizontal={true}\n                  className={popoverStyles.card.field}\n                >\n                  <Input\n                    onKeyDownCapture={model.onInputKeydown}\n                    autoFocus={true}\n                    onChange={(e) => {\n                      model.setState({\n                        gt: e.currentTarget.value !== '' ? Number(e.currentTarget.value) : undefined,\n                      });\n                    }}\n                    className={popoverStyles.card.numberInput}\n                    value={gt}\n                    type={'number'}\n                  />\n                </Field>\n                {fieldType !== 'float' && (\n                  <Label>\n                    <Field\n                      data-testid={testIds.breakdowns.common.filterNumericPopover.inputGreaterThanUnit}\n                      horizontal={true}\n                      className={popoverStyles.card.field}\n                      label={<span className={popoverStyles.card.unitFieldLabel}>Unit</span>}\n                    >\n                      <Select\n                        onChange={(e) => {\n                          model.setState({\n                            gtu: e.value,\n                          });\n                        }}\n                        menuShouldPortal={false}\n                        options={getUnitOptions(fieldType)}\n                        className={popoverStyles.card.selectInput}\n                        value={gtu}\n                      />\n                    </Field>\n                  </Label>\n                )}\n              </FieldSet>\n\n              {/* less than */}\n              <FieldSet className={popoverStyles.card.fieldset}>\n                <Field\n                  data-testid={testIds.breakdowns.common.filterNumericPopover.inputLessThanInclusive}\n                  horizontal={true}\n                  className={cx(popoverStyles.card.field, popoverStyles.card.inclusiveField)}\n                >\n                  <Select<string>\n                    className={popoverStyles.card.inclusiveInput}\n                    menuShouldPortal={false}\n                    value={lte !== undefined ? lte.toString() : 'false'}\n                    options={[\n                      { label: 'Less than', value: 'false' },\n                      { label: 'Less than or equal', value: 'true' },\n                    ]}\n                    onChange={(value) => model.setState({ lte: value.value === 'true' })}\n                  />\n                </Field>\n                <Field\n                  data-testid={testIds.breakdowns.common.filterNumericPopover.inputLessThan}\n                  horizontal={true}\n                  className={popoverStyles.card.field}\n                >\n                  <Input\n                    onKeyDownCapture={model.onInputKeydown}\n                    onChange={(e) =>\n                      model.setState({ lt: e.currentTarget.value !== '' ? Number(e.currentTarget.value) : undefined })\n                    }\n                    className={popoverStyles.card.numberInput}\n                    value={lt}\n                    type={'number'}\n                  />\n                </Field>\n                {fieldType !== 'float' && (\n                  <Label>\n                    <Field\n                      data-testid={testIds.breakdowns.common.filterNumericPopover.inputLessThanUnit}\n                      horizontal={true}\n                      className={popoverStyles.card.field}\n                      label={<span className={popoverStyles.card.unitFieldLabel}>Unit</span>}\n                    >\n                      <Select\n                        onChange={(e) => {\n                          model.setState({\n                            ltu: e.value,\n                          });\n                        }}\n                        menuShouldPortal={false}\n                        options={getUnitOptions(fieldType)}\n                        className={popoverStyles.card.selectInput}\n                        value={ltu}\n                      />\n                    </Field>\n                  </Label>\n                )}\n              </FieldSet>\n            </div>\n\n            {/* buttons */}\n            <div className={popoverStyles.card.buttons}>\n              {hasExistingFilter && (\n                <Button\n                  data-testid={testIds.breakdowns.common.filterNumericPopover.removeButton}\n                  disabled={!hasExistingFilter}\n                  onClick={() => {\n                    model.setState({\n                      gt: undefined,\n                      lt: undefined,\n                    });\n                    model.onSubmit();\n                  }}\n                  size={'sm'}\n                  variant={'destructive'}\n                  fill={'outline'}\n                >\n                  Remove\n                </Button>\n              )}\n              <Button\n                data-testid={testIds.breakdowns.common.filterNumericPopover.submitButton}\n                disabled={formDisabled}\n                onClick={() => model.onSubmit()}\n                size={'sm'}\n                variant={'primary'}\n                fill={'outline'}\n                type={'submit'}\n              >\n                Add\n              </Button>\n\n              <Button\n                data-testid={testIds.breakdowns.common.filterNumericPopover.cancelButton}\n                onClick={() => selectLabelActionScene.togglePopover()}\n                size={'sm'}\n                variant={'secondary'}\n                fill={'outline'}\n              >\n                Cancel\n              </Button>\n            </div>\n          </div>\n        </Stack>\n      </ClickOutsideWrapper>\n    );\n  };\n}\n\nexport function extractValueFromString(\n  inputString: string,\n  inputType: 'bytes' | 'duration'\n): { value: number; unit: byteUnitValues | durationUnitValues } | undefined {\n  if (inputType === 'duration') {\n    const durationValues = Object.values(durationUnitValues);\n\n    // Check the end of the filter value for a unit that exactly matches\n    const durationValue = durationValues.find((durationValue) => {\n      const durationValueLength = durationValue.length;\n      return inputString.slice(durationValueLength * -1) === durationValue;\n    });\n\n    if (durationValue) {\n      const value = Number(inputString.replace(durationValue, ''));\n      if (!isNaN(value)) {\n        return {\n          unit: durationValue,\n          value: value,\n        };\n      }\n    }\n  }\n\n  if (inputType === 'bytes') {\n    const bytesValues = Object.values(byteUnitValues)\n      // must be sorted from longest to shortest\n      .sort((a, b) => b.length - a.length);\n\n    // Check the end of the filter value for a unit that exactly matches\n    const bytesValue = bytesValues.find((bytesValue) => {\n      const byteValueLength = bytesValue.length;\n      return inputString.slice(byteValueLength * -1) === bytesValue;\n    });\n\n    if (bytesValue) {\n      const value = Number(inputString.replace(bytesValue, ''));\n      if (!isNaN(value)) {\n        return {\n          unit: bytesValue,\n          value: value,\n        };\n      }\n    }\n  }\n\n  return undefined;\n}\n\nfunction getUnitOptions(fieldType: 'duration' | 'bytes'): Array<SelectableValue<durationUnitValues | byteUnitValues>> {\n  if (fieldType === 'duration') {\n    const keys = Object.keys(durationUnitValues) as Array<keyof typeof durationUnitValues>;\n    return keys.map((key) => {\n      return {\n        text: key,\n        value: durationUnitValues[key],\n        label: key,\n      };\n    });\n  }\n\n  if (fieldType === 'bytes') {\n    const keys = Object.keys(byteUnitValues) as Array<keyof typeof byteUnitValues>;\n    return keys.map((key) => {\n      return {\n        text: key,\n        value: byteUnitValues[key],\n        label: key,\n      };\n    });\n  }\n\n  const error = new Error(`invalid field type: ${fieldType}`);\n  logger.error(error, { msg: 'getUnitOptions, invalid field type' });\n  throw error;\n}\n\nconst getPopoverStyles = (theme: GrafanaTheme2) => ({\n  card: {\n    buttons: css({\n      display: 'flex',\n      flexWrap: 'wrap',\n      justifyContent: 'flex-end',\n      gap: theme.spacing(1.5),\n      marginTop: theme.spacing(1),\n    }),\n    inclusiveInput: css({\n      minWidth: '185px',\n    }),\n    selectInput: css({\n      minWidth: '65px',\n    }),\n    numberInput: css({\n      width: '75px',\n    }),\n    fieldWrap: css({\n      display: 'flex',\n      flexDirection: 'column',\n      paddingTop: theme.spacing(2),\n      paddingBottom: 0,\n    }),\n    field: css({\n      display: 'flex',\n      alignItems: 'center',\n      marginBottom: theme.spacing(1),\n    }),\n    inclusiveField: css({\n      marginRight: theme.spacing(1),\n    }),\n    unitFieldLabel: css({\n      marginLeft: theme.spacing(2),\n      marginRight: theme.spacing(1.5),\n    }),\n    numberFieldLabel: css({\n      width: '100px',\n    }),\n    switchFieldLabel: css({\n      marginLeft: theme.spacing(2),\n      marginRight: theme.spacing(1),\n    }),\n    fieldset: css({\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'space-between',\n      width: '100%',\n      marginBottom: 0,\n    }),\n    title: css({}),\n    body: css({\n      padding: theme.spacing(2),\n    }),\n    p: css({\n      maxWidth: 300,\n    }),\n  },\n});\n","import {\n  AdHocFiltersVariable,\n  SceneComponentProps,\n  sceneGraph,\n  SceneObjectBase,\n  SceneObjectState,\n  SceneQueryRunner,\n  VizPanel,\n} from '@grafana/scenes';\nimport { getDetectedFieldsFrame, getLogsPanelFrame, ServiceScene } from '../ServiceScene';\nimport { navigateToValueBreakdown } from '../../../services/navigate';\nimport { getPrimaryLabelFromUrl, ValueSlugs } from '../../../services/routing';\nimport { Button, ButtonGroup, ButtonSelect, IconButton, Popover, PopoverController, useStyles2 } from '@grafana/ui';\nimport React, { useRef } from 'react';\nimport { addToFilters, clearFilters, VariableFilterType } from './AddToFiltersButton';\nimport { EMPTY_VARIABLE_VALUE, LEVEL_VARIABLE_VALUE, VAR_FIELDS } from '../../../services/variables';\nimport { AdHocVariableFilter, Field, GrafanaTheme2, Labels, LoadingState, SelectableValue } from '@grafana/data';\nimport {\n  getFieldsVariable,\n  getLabelsVariable,\n  getLevelsVariable,\n  getValueFromAdHocVariableFilter,\n  getValueFromFieldsFilter,\n} from '../../../services/variableGetters';\nimport { FilterOp } from '../../../services/filterTypes';\nimport { LokiQuery } from '../../../services/lokiQuery';\nimport { css } from '@emotion/css';\nimport { rest } from 'lodash';\nimport { NumericFilterPopoverScene } from './NumericFilterPopoverScene';\nimport { getDetectedFieldType } from '../../../services/fields';\nimport { logger } from '../../../services/logger';\nimport { testIds } from '../../../services/testIds';\nimport { findObjectOfType } from '../../../services/scenes';\n\ninterface SelectLabelActionSceneState extends SceneObjectState {\n  labelName: string;\n  fieldType: ValueSlugs;\n  hideValueDrilldown?: boolean;\n  hasSparseFilters?: boolean;\n  hasNumericFilters?: boolean;\n  selectedValue?: SelectableValue<string>;\n  popover?: NumericFilterPopoverScene;\n  showPopover: boolean;\n}\n\nconst INCLUDE_VALUE = 'Include';\nconst EXCLUDE_VALUE = 'Exclude';\nconst NUMERIC_FILTER_VALUE = 'Add to filter';\n\nexport class SelectLabelActionScene extends SceneObjectBase<SelectLabelActionSceneState> {\n  constructor(state: Omit<SelectLabelActionSceneState, 'showPopover'>) {\n    super({ ...state, showPopover: false });\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  onChange(value: SelectableValue<string>) {\n    const variable = this.getVariable();\n    const variableName = variable.state.name as VariableFilterType;\n    const existingFilter = this.getExistingFilter(variable);\n    const fieldValue = getValueFromAdHocVariableFilter(variable, existingFilter);\n    const isIncluded = existingFilter?.operator === FilterOp.NotEqual && fieldValue.value === EMPTY_VARIABLE_VALUE;\n\n    if (isIncluded && value.value === INCLUDE_VALUE) {\n      this.clearFilter(variableName);\n    } else if (value.value === INCLUDE_VALUE) {\n      this.onClickExcludeEmpty(variableName);\n    } else if (value.value === EXCLUDE_VALUE) {\n      this.onClickIncludeEmpty(variableName);\n    } else if (value.value === NUMERIC_FILTER_VALUE) {\n      this.onClickNumericFilter(variableName);\n    }\n\n    this.setState({\n      selectedValue: value,\n    });\n  }\n\n  public static Component = ({ model }: SceneComponentProps<SelectLabelActionScene>) => {\n    const {\n      hideValueDrilldown,\n      labelName,\n      hasSparseFilters,\n      hasNumericFilters,\n      selectedValue,\n      popover,\n      showPopover,\n      fieldType,\n    } = model.useState();\n    const variable = model.getVariable();\n    const variableName = variable.useState().name as VariableFilterType;\n    const existingFilter = model.getExistingFilter(variable);\n    const fieldValue = getValueFromAdHocVariableFilter(variable, existingFilter);\n    const styles = useStyles2(getStyles);\n    const popoverRef = useRef<HTMLButtonElement>(null);\n    const filterButtonDisabled =\n      fieldType === ValueSlugs.label &&\n      variable.state.filters.filter((f) => f.key !== labelName && f.operator === FilterOp.Equal).length === 0;\n\n    const isIncluded = existingFilter?.operator === FilterOp.NotEqual && fieldValue.value === EMPTY_VARIABLE_VALUE;\n    const hasOtherFilter = !!existingFilter;\n\n    const selectedOptionValue =\n      selectedValue?.value ?? (isIncluded ? INCLUDE_VALUE : hasNumericFilters ? NUMERIC_FILTER_VALUE : INCLUDE_VALUE);\n\n    const hasExistingNumericFilter = existingFilter?.operator\n      ? [FilterOp.gte, FilterOp.gt, FilterOp.lte, FilterOp.lt].includes(existingFilter.operator as FilterOp)\n      : false;\n    const numericSelected = selectedOptionValue === NUMERIC_FILTER_VALUE || hasExistingNumericFilter;\n    const includeSelected = selectedOptionValue === INCLUDE_VALUE && !numericSelected;\n\n    const sparseIncludeOption: SelectableValue<string> = {\n      value: INCLUDE_VALUE,\n      component: () => (\n        <SelectableValueComponent selected={includeSelected} text={`Include all log lines with ${labelName}`} />\n      ),\n    };\n    const sparseExcludeOption: SelectableValue<string> = {\n      value: EXCLUDE_VALUE,\n      component: () => <SelectableValueComponent selected={false} text={`Exclude all log lines with ${labelName}`} />,\n    };\n    const numericFilterOption: SelectableValue<string> = {\n      value: NUMERIC_FILTER_VALUE,\n      component: () => (\n        <SelectableValueComponent selected={numericSelected} text={`Add an expression, i.e. ${labelName} > 30`} />\n      ),\n    };\n\n    const options: Array<SelectableValue<string>> = [];\n    if (hasNumericFilters) {\n      options.push(numericFilterOption);\n    }\n\n    if (hasSparseFilters) {\n      if (!hasExistingNumericFilter) {\n        options.push(sparseIncludeOption);\n      }\n\n      options.push(sparseExcludeOption);\n    }\n\n    const defaultOption = isIncluded\n      ? sparseIncludeOption\n      : hasNumericFilters\n      ? numericFilterOption\n      : sparseIncludeOption;\n\n    return (\n      <>\n        {hasOtherFilter && (\n          <IconButton\n            disabled={filterButtonDisabled}\n            name={'filter'}\n            tooltip={`Clear ${labelName} filters`}\n            onClick={() => model.clearFilters(variableName)}\n          />\n        )}\n        {(hasNumericFilters || hasSparseFilters) && (\n          <>\n            <ButtonGroup data-testid={testIds.breakdowns.common.filterButtonGroup}>\n              <Button\n                data-testid={testIds.breakdowns.common.filterButton}\n                ref={popoverRef}\n                onClick={() => model.onChange(selectedValue ?? defaultOption)}\n                size={'sm'}\n                fill={'outline'}\n                variant={'secondary'}\n              >\n                {selectedValue?.value ?? defaultOption.value}\n              </Button>\n              <ButtonSelect\n                data-testid={testIds.breakdowns.common.filterSelect}\n                className={styles.buttonSelect}\n                variant={'default'}\n                options={options}\n                onChange={(value) => {\n                  model.onChange(value);\n                }}\n              />\n            </ButtonGroup>\n          </>\n        )}\n        {hideValueDrilldown !== true && (\n          <Button\n            title={`View breakdown of values for ${labelName}`}\n            variant=\"primary\"\n            fill=\"outline\"\n            size=\"sm\"\n            onClick={model.onClickViewValues}\n            aria-label={`Select ${labelName}`}\n          >\n            Select\n          </Button>\n        )}\n\n        {popover && (\n          <PopoverController content={<popover.Component model={popover} />}>\n            {(showPopper, hidePopper, popperProps) => {\n              const blurFocusProps = {\n                onBlur: hidePopper,\n                onFocus: showPopper,\n              };\n\n              return (\n                <>\n                  {popoverRef.current && (\n                    <>\n                      {/* @ts-expect-error @todo upgrade typescript */}\n                      <Popover\n                        {...popperProps}\n                        {...rest}\n                        show={showPopover}\n                        wrapperClassName={styles.popover}\n                        referenceElement={popoverRef.current}\n                        renderArrow={true}\n                        {...blurFocusProps}\n                      />\n                    </>\n                  )}\n                </>\n              );\n            }}\n          </PopoverController>\n        )}\n      </>\n    );\n  };\n\n  private getExistingFilter(variable?: AdHocFiltersVariable): AdHocVariableFilter | undefined {\n    let { labelName } = getPrimaryLabelFromUrl();\n    if (this.state.labelName !== labelName) {\n      return variable?.state.filters.find((filter) => {\n        return filter.key === this.state.labelName;\n      });\n    }\n\n    return undefined;\n  }\n\n  public onActivate() {\n    const serviceScene = sceneGraph.getAncestor(this, ServiceScene);\n\n    if (serviceScene.state.$data?.state.data?.state === LoadingState.Done) {\n      this.calculateSparsity();\n    }\n\n    this._subs.add(\n      sceneGraph.getData(this).subscribeToState((newState) => {\n        if (newState.data?.state === LoadingState.Done) {\n          if (serviceScene.state.$data?.state.data?.state === LoadingState.Done) {\n            this.calculateSparsity();\n          }\n\n          this._subs.add(\n            serviceScene.state.$data?.subscribeToState((newLogsPanelState) => {\n              if (newLogsPanelState.data?.state === LoadingState.Done) {\n                this.calculateSparsity();\n              }\n            })\n          );\n        }\n      })\n    );\n  }\n\n  public onClickNumericFilter = (variableType: VariableFilterType) => {\n    const detectedFieldFrame = getDetectedFieldsFrame(this);\n    const fieldType = getDetectedFieldType(this.state.labelName, detectedFieldFrame);\n\n    if (!fieldType || fieldType === 'string' || fieldType === 'boolean' || fieldType === 'int') {\n      const error = new Error(`Incorrect field type: ${fieldType}`);\n      logger.error(error, { msg: `onClickNumericFilter invalid field type ${fieldType}` });\n      throw error;\n    }\n\n    this.setState({\n      popover: new NumericFilterPopoverScene({ labelName: this.state.labelName, variableType, fieldType }),\n    });\n    this.togglePopover();\n  };\n\n  public onClickViewValues = () => {\n    const serviceScene = sceneGraph.getAncestor(this, ServiceScene);\n    navigateToValueBreakdown(this.state.fieldType, this.state.labelName, serviceScene);\n  };\n\n  public onClickExcludeEmpty = (variableType: VariableFilterType) => {\n    addToFilters(this.state.labelName, EMPTY_VARIABLE_VALUE, 'exclude', this, variableType);\n  };\n\n  public onClickIncludeEmpty = (variableType: VariableFilterType) => {\n    // If json do we want != '{}'?\n    addToFilters(this.state.labelName, EMPTY_VARIABLE_VALUE, 'include', this, variableType);\n  };\n\n  public clearFilter = (variableType: VariableFilterType) => {\n    addToFilters(this.state.labelName, EMPTY_VARIABLE_VALUE, 'clear', this, variableType);\n  };\n\n  public clearFilters = (variableType: VariableFilterType) => {\n    clearFilters(this.state.labelName, this, variableType);\n  };\n\n  public togglePopover() {\n    this.setState({\n      showPopover: !this.state.showPopover,\n    });\n  }\n\n  private calculateSparsity() {\n    const serviceScene = sceneGraph.getAncestor(this, ServiceScene);\n    const logsPanelData = getLogsPanelFrame(serviceScene.state.$data?.state.data);\n    const labels: Field<Labels> | undefined = logsPanelData?.fields.find((field) => field.name === 'labels');\n\n    const data = sceneGraph.getData(this);\n    const queryRunner = findObjectOfType(data, (o) => o instanceof SceneQueryRunner, SceneQueryRunner);\n    if (queryRunner) {\n      const queries = queryRunner.state.queries;\n      const query = queries[0] as LokiQuery | undefined;\n      if (query?.expr.includes('avg_over_time')) {\n        this.setState({\n          hasNumericFilters: true,\n        });\n      }\n    }\n\n    if (!labels || !logsPanelData) {\n      this.setState({\n        hasSparseFilters: false,\n      });\n      return;\n    }\n    const variable = this.getVariable();\n    // iterate through all the labels on the log panel query result and count how many times this exists\n    const logLinesWithLabelCount = labels.values.reduce((acc, labels) => {\n      if (labels?.[this.state.labelName]) {\n        acc++;\n      }\n      return acc;\n    }, 0);\n\n    const panel = sceneGraph.getAncestor(this, VizPanel);\n    if (logLinesWithLabelCount !== undefined && logsPanelData.length > 0) {\n      const percentage = ((logLinesWithLabelCount / logsPanelData.length) * 100).toLocaleString();\n      const description = `${this.state.labelName} exists on ${percentage}% of ${logsPanelData.length} sampled log lines`;\n\n      // Update the desc\n      panel.setState({\n        description,\n      });\n    } else {\n      panel.setState({\n        description: undefined,\n      });\n    }\n\n    // Only show for sparse fields and existing include and exclude filters, which will match an empty string in the value\n    const existingFilter = this.getExistingFilter(variable);\n    const existingFilterValue =\n      existingFilter && variable.state.name === VAR_FIELDS ? getValueFromFieldsFilter(existingFilter) : undefined;\n\n    if (logLinesWithLabelCount < logsPanelData.length || existingFilterValue?.value === EMPTY_VARIABLE_VALUE) {\n      this.setState({\n        hasSparseFilters: true,\n      });\n    } else {\n      this.setState({\n        hasSparseFilters: false,\n      });\n    }\n  }\n\n  private getVariable() {\n    if (this.state.fieldType === ValueSlugs.field) {\n      return getFieldsVariable(this);\n    } else if (this.state.labelName === LEVEL_VARIABLE_VALUE) {\n      return getLevelsVariable(this);\n    } else {\n      return getLabelsVariable(this);\n    }\n  }\n}\n\nfunction SelectableValueComponent(props: { text: string; selected: boolean }) {\n  const styles = useStyles2(getSelectableValueComponentStyles);\n  return (\n    <span className={styles.description}>\n      {props.selected && <span className={styles.selected}></span>}\n      {props.text}\n    </span>\n  );\n}\n\nconst getSelectableValueComponentStyles = (theme: GrafanaTheme2) => {\n  return {\n    selected: css({\n      label: 'selectable-value-selected',\n      '&:before': {\n        content: '\"\"',\n        position: 'absolute',\n        left: 0,\n        top: '4px',\n        height: 'calc(100% - 8px)',\n        width: '2px',\n        backgroundColor: theme.colors.warning.main,\n      },\n    }),\n    description: css({\n      textAlign: 'left',\n      fontSize: theme.typography.pxToRem(12),\n    }),\n  };\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    popover: css({\n      borderRadius: theme.shape.radius.default,\n      boxShadow: theme.shadows.z3,\n      background: theme.colors.background.primary,\n      border: `1px solid ${theme.colors.border.weak}`,\n    }),\n    description: css({\n      textAlign: 'left',\n      fontSize: theme.typography.pxToRem(12),\n    }),\n    buttonSelect: css({\n      border: `1px solid ${theme.colors.border.strong}`,\n      borderLeft: 'none',\n      borderTopLeftRadius: 0,\n      borderBottomLeftRadius: 0,\n      padding: 1,\n      height: '24px',\n    }),\n  };\n};\n","import { SceneComponentProps, SceneObjectBase, SceneObjectState } from '@grafana/scenes';\nimport React from 'react';\nimport { BusEventBase, DataFrame, FieldReducerInfo, ReducerID, SelectableValue, fieldReducers } from '@grafana/data';\nimport { getLabelValueFromDataFrame } from 'services/levels';\nimport { InlineField, Select } from '@grafana/ui';\nimport { getSortByPreference, setSortByPreference } from 'services/store';\nimport { testIds } from '../../../services/testIds';\nimport { DEFAULT_SORT_BY } from '../../../services/sorting';\n\nexport type SortBy = 'changepoint' | 'outliers' | ReducerID | '';\nexport type SortDirection = 'asc' | 'desc';\nexport interface SortBySceneState extends SceneObjectState {\n  target: 'fields' | 'labels';\n  sortBy: SortBy;\n  direction: SortDirection;\n}\n\nexport class SortCriteriaChanged extends BusEventBase {\n  constructor(public target: 'fields' | 'labels', public sortBy: string, public direction: string) {\n    super();\n  }\n  public static type = 'sort-criteria-changed';\n}\n\nexport class SortByScene extends SceneObjectBase<SortBySceneState> {\n  public sortingOptions: Array<{ label: string; options: SelectableValue<SortBy> }> = [\n    {\n      label: '',\n      options: [\n        {\n          value: 'changepoint',\n          label: 'Most relevant',\n          description: 'Smart ordering of graphs based on the most significant spikes in the data',\n        },\n        {\n          value: 'outliers',\n          label: 'Outlying values',\n          description: 'Order by the amount of outlying values in the data',\n        },\n        {\n          value: ReducerID.stdDev,\n          label: 'Widest spread',\n          description: 'Sort graphs by deviation from the average value',\n        },\n        {\n          value: 'alphabetical',\n          label: 'Name',\n          description: 'Alphabetical order',\n        },\n        {\n          value: ReducerID.sum,\n          label: 'Count',\n          description: 'Sort graphs by total number of logs',\n        },\n        {\n          value: ReducerID.max,\n          label: 'Highest spike',\n          description: 'Sort graphs by the highest values (max)',\n        },\n        {\n          value: ReducerID.min,\n          label: 'Lowest dip',\n          description: 'Sort graphs by the smallest values (min)',\n        },\n      ],\n    },\n    {\n      label: 'Percentiles',\n      options: [...fieldReducers.selectOptions([], filterReducerOptions).options],\n    },\n  ];\n\n  constructor(state: Pick<SortBySceneState, 'target'>) {\n    const { sortBy, direction } = getSortByPreference(state.target, DEFAULT_SORT_BY, 'desc');\n    super({\n      target: state.target,\n      sortBy,\n      direction,\n    });\n  }\n\n  public onCriteriaChange = (criteria: SelectableValue<SortBy>) => {\n    if (!criteria.value) {\n      return;\n    }\n    this.setState({ sortBy: criteria.value });\n    setSortByPreference(this.state.target, criteria.value, this.state.direction);\n    this.publishEvent(new SortCriteriaChanged(this.state.target, criteria.value, this.state.direction), true);\n  };\n\n  public onDirectionChange = (direction: SelectableValue<SortDirection>) => {\n    if (!direction.value) {\n      return;\n    }\n    this.setState({ direction: direction.value });\n    setSortByPreference(this.state.target, this.state.sortBy, direction.value);\n    this.publishEvent(new SortCriteriaChanged(this.state.target, this.state.sortBy, direction.value), true);\n  };\n\n  public static Component = ({ model }: SceneComponentProps<SortByScene>) => {\n    const { sortBy, direction } = model.useState();\n    const group = model.sortingOptions.find((group) =>\n      group.options.find((option: SelectableValue<SortBy>) => option.value === sortBy)\n    );\n    const sortByValue: SelectableValue<SortBy> | undefined = group?.options.find(\n      (option: SelectableValue<SortBy>) => option.value === sortBy\n    );\n    return (\n      <>\n        <InlineField\n          label=\"Sort by\"\n          htmlFor=\"sort-by-criteria\"\n          tooltip=\"Calculate a derived quantity from the values in your time series and sort by this criteria. Defaults to standard deviation.\"\n        >\n          <Select\n            data-testid={testIds.breakdowns.common.sortByFunction}\n            value={sortByValue}\n            width={20}\n            isSearchable={true}\n            options={model.sortingOptions}\n            placeholder={'Choose criteria'}\n            onChange={model.onCriteriaChange}\n            inputId=\"sort-by-criteria\"\n          />\n        </InlineField>\n        <InlineField>\n          <Select\n            data-testid={testIds.breakdowns.common.sortByDirection}\n            onChange={model.onDirectionChange}\n            aria-label=\"Sort direction\"\n            placeholder=\"\"\n            value={direction}\n            options={[\n              {\n                label: 'Asc',\n                value: 'asc',\n              },\n              {\n                label: 'Desc',\n                value: 'desc',\n              },\n            ]}\n          ></Select>\n        </InlineField>\n      </>\n    );\n  };\n}\n\nconst ENABLED_PERCENTILES = ['p10', 'p25', 'p75', 'p90', 'p99'];\nfunction filterReducerOptions(ext: FieldReducerInfo) {\n  if (ext.id >= 'p1' && ext.id <= 'p99') {\n    return ENABLED_PERCENTILES.includes(ext.id);\n  }\n  return false;\n}\n\nexport function getLabelValue(frame: DataFrame) {\n  return getLabelValueFromDataFrame(frame) ?? 'No labels';\n}\n","import { css } from '@emotion/css';\nimport React, { ReactNode } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { LoadingPlaceholder, useStyles2 } from '@grafana/ui';\n\ntype Props = {\n  blockingMessage?: string;\n  isLoading?: boolean;\n  children?: ReactNode;\n};\n\nexport function StatusWrapper({ blockingMessage, isLoading, children }: Props) {\n  const styles = useStyles2(getStyles);\n\n  if (isLoading && !blockingMessage) {\n    blockingMessage = 'Loading...';\n  }\n\n  if (isLoading) {\n    return <LoadingPlaceholder className={styles.statusMessage} text={blockingMessage} />;\n  }\n\n  if (!blockingMessage) {\n    return <>{children}</>;\n  }\n\n  return <div className={styles.statusMessage}>{blockingMessage}</div>;\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    statusMessage: css({\n      fontStyle: 'italic',\n      marginTop: theme.spacing(7),\n      textAlign: 'center',\n    }),\n  };\n}\n","export const MAX_NUMBER_OF_TIME_SERIES = 20;\n","import { GrafanaTheme2 } from '@grafana/data';\n\n// from /grafana/grafana/packages/grafana-ui/src/themes/mixins.ts\nexport function getFocusStyles(theme: GrafanaTheme2) {\n  return {\n    outline: '2px dotted transparent',\n    outlineOffset: '2px',\n    boxShadow: `0 0 0 2px ${theme.colors.background.canvas}, 0 0 0px 4px ${theme.colors.primary.main}`,\n    transitionTimingFunction: `cubic-bezier(0.19, 1, 0.22, 1)`,\n    transitionDuration: '0.2s',\n    transitionProperty: 'outline, outline-offset, box-shadow',\n  };\n}\n\nexport function getMouseFocusStyles(theme: GrafanaTheme2) {\n  return {\n    outline: 'none',\n    boxShadow: `none`,\n  };\n}\n\nexport function getIconButtonBefore(hoverSize: number, theme: GrafanaTheme2) {\n  return {\n    zIndex: '-1',\n    position: 'absolute',\n    opacity: '0',\n    width: `${hoverSize}px`,\n    height: `${hoverSize}px`,\n    borderRadius: theme.shape.radius.default,\n    content: '\"\"',\n    [theme.transitions.handleMotion('no-preference', 'reduce')]: {\n      transitionDuration: '0.2s',\n      transitionTimingFunction: 'cubic-bezier(0.4, 0, 0.2, 1)',\n      transitionProperty: 'opacity',\n    },\n  };\n}\n","import { IconButtonVariant, Tooltip, useTheme2 } from '@grafana/ui';\nimport React from 'react';\nimport { colorManipulator, GrafanaTheme2 } from '@grafana/data';\nimport { css, cx } from '@emotion/css';\nimport { getFocusStyles, getIconButtonBefore, getMouseFocusStyles } from '../../../services/mixins';\n\nexport type RegexInputValue = 'regex' | 'match';\ninterface Props {\n  onRegexToggle: (state: RegexInputValue) => void;\n  regex: boolean;\n}\n\nexport const RegexIconButton = (props: Props) => {\n  const theme = useTheme2();\n  const fill = props.regex ? theme.colors.text.maxContrast : theme.colors.text.disabled;\n  const styles = getStyles(theme);\n  const description = `${props.regex ? 'Disable' : 'Enable'} regex`;\n\n  return (\n    <Tooltip content={description}>\n      <button\n        onClick={() => props.onRegexToggle(props.regex ? 'match' : 'regex')}\n        className={cx(styles.button, props.regex ? styles.active : null)}\n        aria-label={description}\n      >\n        <svg fill={fill} width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" xmlns=\"http://www.w3.org/2000/svg\">\n          <text fontSize=\"13\" width=\"16\" height=\"16\" x=\"50%\" y=\"50%\" dominantBaseline=\"central\" textAnchor=\"middle\">\n            .*\n          </text>\n        </svg>\n      </button>\n    </Tooltip>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2, variant: IconButtonVariant = 'secondary') => {\n  const hoverSize = 16 + theme.spacing.gridSize;\n\n  return {\n    button: css({\n      zIndex: 0,\n      position: 'relative',\n      margin: `0 ${theme.spacing.x0_5} 0 ${theme.spacing.x0_5}`,\n      boxShadow: 'none',\n      border: 'none',\n      display: 'inline-flex',\n      background: 'transparent',\n      justifyContent: 'center',\n      alignItems: 'center',\n      padding: 0,\n      color: theme.colors.text.primary,\n\n      '&:before': {\n        ...getIconButtonBefore(hoverSize, theme),\n        position: 'absolute',\n      },\n\n      '&:hover': {\n        '&:before': {\n          backgroundColor:\n            variant === 'secondary'\n              ? theme.colors.action.hover\n              : colorManipulator.alpha(theme.colors.text.primary, 0.12),\n          opacity: 1,\n        },\n      },\n\n      '&:focus, &:focus-visible': getFocusStyles(theme),\n      '&:focus:not(:focus-visible)': getMouseFocusStyles(theme),\n    }),\n    active: css({\n      '&:before': {\n        backgroundColor:\n          variant === 'secondary' ? theme.colors.action.hover : colorManipulator.alpha(theme.colors.text.primary, 0.12),\n        opacity: 1,\n      },\n      '&:hover': {\n        '&:before': {\n          backgroundColor: 'none',\n          opacity: 0,\n        },\n      },\n    }),\n  };\n};\n","import { IconButtonVariant, Tooltip, useTheme2 } from '@grafana/ui';\nimport React from 'react';\nimport { colorManipulator, GrafanaTheme2 } from '@grafana/data';\nimport { css, cx } from '@emotion/css';\nimport { LineFilterCaseSensitive } from './LineFilterScene';\nimport { getFocusStyles, getIconButtonBefore, getMouseFocusStyles } from '../../../services/mixins';\n\ninterface Props {\n  onCaseSensitiveToggle: (state: LineFilterCaseSensitive) => void;\n  caseSensitive: boolean;\n}\n\nexport const LineFilterCaseSensitivityButton = (props: Props) => {\n  const theme = useTheme2();\n  const fill = props.caseSensitive ? theme.colors.text.maxContrast : theme.colors.text.disabled;\n  const styles = getStyles(theme);\n  const description = `${props.caseSensitive ? 'Disable' : 'Enable'} case match`;\n\n  return (\n    <Tooltip content={description}>\n      <button\n        onClick={() =>\n          props.onCaseSensitiveToggle(\n            props.caseSensitive ? LineFilterCaseSensitive.caseInsensitive : LineFilterCaseSensitive.caseSensitive\n          )\n        }\n        className={cx(styles.button, props.caseSensitive ? styles.active : null)}\n        aria-label={description}\n      >\n        <svg fill={fill} width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" xmlns=\"http://www.w3.org/2000/svg\">\n          <text fontSize=\"13\" width=\"16\" height=\"16\" x=\"50%\" y=\"50%\" dominantBaseline=\"central\" textAnchor=\"middle\">\n            Aa\n          </text>\n        </svg>\n      </button>\n    </Tooltip>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2, variant: IconButtonVariant = 'secondary') => {\n  const hoverSize = 16 + theme.spacing.gridSize;\n\n  return {\n    button: css({\n      zIndex: 0,\n      position: 'relative',\n      margin: `0 ${theme.spacing.x0_5} 0 ${theme.spacing.x0_5}`,\n      boxShadow: 'none',\n      border: 'none',\n      display: 'inline-flex',\n      background: 'transparent',\n      justifyContent: 'center',\n      alignItems: 'center',\n      padding: 0,\n      color: theme.colors.text.primary,\n\n      '&:before': {\n        ...getIconButtonBefore(hoverSize, theme),\n        position: 'absolute',\n      },\n\n      '&:hover': {\n        '&:before': {\n          backgroundColor:\n            variant === 'secondary'\n              ? theme.colors.action.hover\n              : colorManipulator.alpha(theme.colors.text.primary, 0.12),\n          opacity: 1,\n        },\n      },\n\n      '&:focus, &:focus-visible': getFocusStyles(theme),\n      '&:focus:not(:focus-visible)': getMouseFocusStyles(theme),\n    }),\n    active: css({\n      '&:before': {\n        backgroundColor:\n          variant === 'secondary' ? theme.colors.action.hover : colorManipulator.alpha(theme.colors.text.primary, 0.12),\n        opacity: 1,\n      },\n      '&:hover': {\n        '&:before': {\n          backgroundColor: 'none',\n          opacity: 0,\n        },\n      },\n    }),\n  };\n};\n","import React, { ChangeEvent, KeyboardEvent } from 'react';\nimport { RegexIconButton, RegexInputValue } from './RegexIconButton';\nimport { Button, Field, Select, useStyles2 } from '@grafana/ui';\nimport { SearchInput } from '../Breakdowns/SearchInput';\nimport { testIds } from '../../../services/testIds';\nimport { css, cx } from '@emotion/css';\nimport { LineFilterCaseSensitivityButton } from './LineFilterCaseSensitivityButton';\nimport { LineFilterCaseSensitive } from './LineFilterScene';\nimport { GrafanaTheme2 } from '@grafana/data';\n\nexport interface LineFilterEditorProps {\n  exclusive: boolean;\n  lineFilter: string;\n  caseSensitive: boolean;\n  regex: boolean;\n  setExclusive: (exclusive: boolean) => void;\n  onInputChange: (e: ChangeEvent<HTMLInputElement>) => void;\n  onCaseSensitiveToggle: (caseSensitive: LineFilterCaseSensitive) => void;\n  onRegexToggle: (regex: RegexInputValue) => void;\n  updateFilter: (lineFilter: string, debounced: boolean) => void;\n  handleEnter: (e: KeyboardEvent<HTMLInputElement>, lineFilter: string) => void;\n  onSubmitLineFilter?: () => void;\n  onClearLineFilter?: () => void;\n}\n\nexport function LineFilterEditor({\n  exclusive,\n  lineFilter,\n  caseSensitive,\n  setExclusive,\n  regex,\n  onInputChange,\n  onCaseSensitiveToggle,\n  onRegexToggle,\n  handleEnter,\n  onSubmitLineFilter,\n  onClearLineFilter,\n}: LineFilterEditorProps) {\n  const styles = useStyles2(getStyles);\n  return (\n    <div className={styles.wrapper}>\n      {!onSubmitLineFilter && (\n        <Select\n          prefix={null}\n          className={styles.select}\n          value={exclusive ? 'exclusive' : 'inclusive'}\n          options={[\n            {\n              value: 'exclusive',\n              label: 'Exclude',\n            },\n            {\n              value: 'inclusive',\n              label: 'Include',\n            },\n          ]}\n          onChange={() => setExclusive(!exclusive)}\n        />\n      )}\n      <Field className={styles.field}>\n        <SearchInput\n          data-testid={testIds.exploreServiceDetails.searchLogs}\n          value={lineFilter}\n          className={cx(onSubmitLineFilter ? styles.inputNoBorderRight : undefined, styles.input)}\n          onChange={onInputChange}\n          suffix={\n            <span className={`${styles.suffix} input-suffix`}>\n              <LineFilterCaseSensitivityButton\n                caseSensitive={caseSensitive}\n                onCaseSensitiveToggle={onCaseSensitiveToggle}\n              />\n              <RegexIconButton regex={regex} onRegexToggle={onRegexToggle} />\n            </span>\n          }\n          prefix={null}\n          placeholder=\"Search in log lines\"\n          onClear={onClearLineFilter}\n          onKeyUp={(e) => handleEnter(e, lineFilter)}\n        />\n      </Field>\n      {onSubmitLineFilter && (\n        <span className={styles.buttonWrap}>\n          <Button\n            onClick={() => {\n              setExclusive(false);\n              onSubmitLineFilter();\n            }}\n            className={styles.includeButton}\n            variant={'secondary'}\n            fill={'outline'}\n            disabled={!lineFilter}\n          >\n            Include\n          </Button>\n          <Button\n            onClick={() => {\n              setExclusive(true);\n              onSubmitLineFilter();\n            }}\n            className={styles.excludeButton}\n            variant={'secondary'}\n            fill={'outline'}\n            disabled={!lineFilter}\n          >\n            Exclude\n          </Button>\n        </span>\n      )}\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  inputNoBorderRight: css({\n    input: {\n      borderTopRightRadius: 0,\n      borderBottomRightRadius: 0,\n    },\n  }),\n  suffix: css({\n    display: 'inline-flex',\n    gap: theme.spacing(0.5),\n  }),\n  removeBtn: css({\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0,\n  }),\n  buttonWrap: css({\n    display: 'flex',\n    justifyContent: 'center',\n  }),\n  includeButton: css({\n    borderLeft: 'none',\n    borderRadius: 0,\n    borderRight: 'none',\n    '&[disabled]': {\n      borderRight: 'none',\n    },\n  }),\n  excludeButton: css({\n    borderRadius: `0 ${theme.shape.radius.default} ${theme.shape.radius.default} 0`,\n    borderLeft: 'none',\n    '&[disabled]': {\n      borderLeft: 'none',\n    },\n  }),\n  submit: css({\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0,\n  }),\n  select: css({\n    label: 'line-filter-exclusion',\n    marginLeft: 0,\n    paddingLeft: 0,\n    height: 'auto',\n    borderBottomRightRadius: '0',\n    borderTopRightRadius: '0',\n    borderRight: 'none',\n    minHeight: '30px',\n    width: '100px',\n    maxWidth: '95px',\n    outline: 'none',\n  }),\n  wrapper: css({\n    display: 'flex',\n    width: '100%',\n    maxWidth: '600px',\n  }),\n  input: css({\n    label: 'line-filter-input-wrapper',\n    width: '100%',\n    input: {\n      borderTopLeftRadius: 0,\n      borderBottomLeftRadius: 0,\n    },\n  }),\n  exclusiveBtn: css({\n    marginRight: '1rem',\n  }),\n  field: css({\n    label: 'field',\n    flex: '0 1 auto',\n    width: '100%',\n    marginBottom: 0,\n  }),\n});\n","import { SceneComponentProps, SceneObjectBase, SceneObjectState } from '@grafana/scenes';\nimport debounce from 'lodash/debounce';\nimport { ChangeEvent, KeyboardEvent } from 'react';\nimport { reportAppInteraction, USER_EVENTS_ACTIONS, USER_EVENTS_PAGES } from 'services/analytics';\nimport { getLineFiltersVariable, getLineFilterVariable } from '../../../services/variableGetters';\nimport {\n  getLineFilterCase,\n  getLineFilterExclusive,\n  getLineFilterRegex,\n  setLineFilterCase,\n  setLineFilterExclusive,\n  setLineFilterRegex,\n} from '../../../services/store';\nimport { RegexInputValue } from './RegexIconButton';\nimport { LineFilterOp } from '../../../services/filterTypes';\nimport { LineFilterEditor } from './LineFilterEditor';\n\ninterface LineFilterState extends SceneObjectState {\n  lineFilter: string;\n  caseSensitive: boolean;\n  regex: boolean;\n  exclusive: boolean;\n}\n\nexport enum LineFilterCaseSensitive {\n  caseSensitive = 'caseSensitive',\n  caseInsensitive = 'caseInsensitive',\n}\n\n/**\n * The line filter scene used in the logs tab\n */\nexport class LineFilterScene extends SceneObjectBase<LineFilterState> {\n  static Component = LineFilterComponent;\n\n  /**\n   * Sets default regex/sensitivity/exclusivity state from local storage\n   */\n  constructor(state?: Partial<LineFilterState>) {\n    super({\n      lineFilter: state?.lineFilter || '',\n      caseSensitive: state?.caseSensitive ?? getLineFilterCase(false),\n      regex: state?.regex ?? getLineFilterRegex(false),\n      exclusive: state?.exclusive ?? getLineFilterExclusive(false),\n      ...state,\n    });\n    this.addActivationHandler(this.onActivate);\n  }\n\n  /**\n   * Set initial state on activation\n   */\n  private onActivate = () => {\n    const filter = this.getFilter();\n\n    if (!filter) {\n      return;\n    }\n\n    this.setState({\n      lineFilter: filter.value,\n      regex: filter.operator === LineFilterOp.regex || filter.operator === LineFilterOp.negativeRegex,\n      caseSensitive: filter.key === LineFilterCaseSensitive.caseSensitive,\n      exclusive: filter.operator === LineFilterOp.negativeMatch || filter.operator === LineFilterOp.negativeRegex,\n    });\n\n    return () => {\n      // This won't clear the variable as the URL won't have time to sync, but it does prevent changes to the variable that haven't yet been synced with this scene state\n      this.clearFilter();\n    };\n  };\n\n  /**\n   * Clear filter variable\n   */\n  private clearVariable() {\n    const variable = getLineFilterVariable(this);\n    variable.updateFilters([], {\n      skipPublish: true,\n    });\n    this.setState({\n      lineFilter: '',\n    });\n  }\n  /**\n   * Returns operator from current state\n   */\n  private getOperator(): LineFilterOp {\n    if (this.state.regex && this.state.exclusive) {\n      return LineFilterOp.negativeRegex;\n    }\n    if (this.state.regex && !this.state.exclusive) {\n      return LineFilterOp.regex;\n    }\n    if (!this.state.regex && this.state.exclusive) {\n      return LineFilterOp.negativeMatch;\n    }\n    if (!this.state.regex && !this.state.exclusive) {\n      return LineFilterOp.match;\n    }\n\n    throw new Error('getOperator: failed to determine operation');\n  }\n\n  /**\n   * Since there is no \"key\" for line-filters in logQL that will map to the key of the ad-hoc filter, we currently use the key to store the case sensitivity state\n   * Note: This is technically a non-standard implementation (hack) of the ad-hoc variable, we should look into adding metadata to the ad-hoc variables in scenes\n   * However the behavior of the ad-hoc variable lines up well with our use-case, we want case sensitivity state to be saved in the URL and to trigger query updates.\n   * Since we use a custom renderer, this should be fine, but a source of tech-debt nonetheless.\n   */\n  private getFilterKey() {\n    return this.state.caseSensitive ? LineFilterCaseSensitive.caseSensitive : LineFilterCaseSensitive.caseInsensitive;\n  }\n\n  /**\n   * Returns the current ad-hoc variable filter\n   */\n  private getFilter() {\n    const lineFilterVariable = getLineFilterVariable(this);\n    return lineFilterVariable.state.filters[0];\n  }\n\n  /**\n   * Clears filter input and clears debounce queue\n   */\n  clearFilter = () => {\n    this.updateVariableDebounced.cancel();\n    this.updateFilter('', false);\n  };\n\n  /**\n   * Updates line filter state\n   * Note: Updating/debouncing the queries onChange was removed to prevent people from accidentally hammering loki while writing line filters (particularly regex)\n   * The code has been left in for now as we discussed adding an \"edit\" mode with a dedicated logs panel with a smaller line limit to let users debug the results as they type\n   */\n  updateFilter(lineFilter: string, debounced = true) {\n    this.updateInputState(lineFilter);\n    if (debounced) {\n      this.updateVariableDebounced(lineFilter);\n    } else {\n      this.updateVariable(lineFilter);\n    }\n  }\n\n  updateInputState(lineFilter: string) {\n    this.setState({\n      lineFilter,\n    });\n  }\n\n  /**\n   * Update exclusive state, triggers re-query without debounce\n   */\n  onToggleExclusive = (exclusive: boolean) => {\n    setLineFilterExclusive(exclusive);\n    this.setState({\n      exclusive,\n    });\n\n    this.updateFilter(this.state.lineFilter, false);\n  };\n\n  /**\n   * Moves the filter to the \"global\" line-filter ad-hoc variable after flushing the debounce queue.\n   * Clears the state of the local ad-hoc variable.\n   */\n  onSubmitLineFilter = () => {\n    this.updateFilter(this.state.lineFilter, false);\n    // Flush any debounced updates before grabbing the filter. Important that this happens before getFilter is called!\n    this.updateVariableDebounced.flush();\n\n    const lineFiltersVariable = getLineFiltersVariable(this);\n    const existingFilters = lineFiltersVariable.state.filters;\n    const thisFilter = this.getFilter();\n\n    lineFiltersVariable.updateFilters([...existingFilters, thisFilter]);\n    this.clearVariable();\n  };\n\n  /**\n   * Passes the input value to the updateFilter method\n   */\n  handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    this.updateInputState(e.target.value);\n  };\n\n  /**\n   * Submits on enter\n   */\n  handleEnter = (e: KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter' && this.state.lineFilter) {\n      this.onSubmitLineFilter();\n    }\n  };\n\n  /**\n   * Sets local state and triggers query on case sensitivity toggle\n   */\n  onCaseSensitiveToggle = (newState: LineFilterCaseSensitive) => {\n    const caseSensitive = newState === LineFilterCaseSensitive.caseSensitive;\n\n    // Set value to scene state\n    this.setState({\n      caseSensitive,\n    });\n\n    // Set value in local storage\n    setLineFilterCase(caseSensitive);\n\n    this.updateFilter(this.state.lineFilter, false);\n  };\n\n  /**\n   * Sets local state and triggers query on regex toggle\n   */\n  onRegexToggle = (newState: RegexInputValue) => {\n    const regex = newState === 'regex';\n\n    // Set value to scene state\n    this.setState({\n      regex,\n    });\n\n    // Set value in local storage\n    setLineFilterRegex(regex);\n\n    this.updateFilter(this.state.lineFilter, false);\n  };\n\n  /**\n   * Instance variable reference to debounced update method\n   */\n  updateVariableDebounced = debounce((search: string) => {\n    this.updateVariable(search);\n  }, 1000);\n\n  /**\n   * Updates the ad-hoc variable from local state and triggers a query.\n   * Sends analytics event.\n   */\n  updateVariable = (search: string) => {\n    this.updateVariableDebounced.flush();\n    const variable = getLineFilterVariable(this);\n    const variables = getLineFiltersVariable(this);\n    const filter = {\n      key: this.getFilterKey(),\n      // The keyLabel is used to sort line filters by order added.\n      keyLabel: variables.state.filters.length.toString(),\n      operator: this.getOperator(),\n      value: search,\n    };\n\n    variable.updateFilters([filter]);\n\n    reportAppInteraction(\n      USER_EVENTS_PAGES.service_details,\n      USER_EVENTS_ACTIONS.service_details.search_string_in_logs_changed,\n      {\n        searchQueryLength: search.length,\n        containsLevel: search.toLowerCase().includes('level'),\n        operator: filter.operator,\n        caseSensitive: filter.key,\n      }\n    );\n  };\n}\n\nfunction LineFilterComponent({ model }: SceneComponentProps<LineFilterScene>) {\n  const { lineFilter, caseSensitive, regex, exclusive } = model.useState();\n  return LineFilterEditor({\n    exclusive,\n    lineFilter,\n    caseSensitive,\n    regex,\n    onSubmitLineFilter: model.onSubmitLineFilter,\n    handleEnter: model.handleEnter,\n    onInputChange: model.handleChange,\n    updateFilter: model.updateFilter,\n    onCaseSensitiveToggle: model.onCaseSensitiveToggle,\n    onRegexToggle: model.onRegexToggle,\n    setExclusive: model.onToggleExclusive,\n    onClearLineFilter: model.clearFilter,\n  });\n}\n","import { css } from '@emotion/css';\nimport { SceneComponentProps, sceneGraph, SceneObjectBase, SceneObjectState } from '@grafana/scenes';\nimport { Button, InlineField, RadioButtonGroup, Tooltip, useStyles2 } from '@grafana/ui';\nimport React from 'react';\nimport { getLogOption, LogsVisualizationType, setLogOption } from 'services/store';\nimport { LogsListScene } from './LogsListScene';\nimport { reportAppInteraction, USER_EVENTS_ACTIONS, USER_EVENTS_PAGES } from 'services/analytics';\nimport { LogsPanelHeaderActions } from '../Table/LogsHeaderActions';\nimport { GrafanaTheme2, LogsSortOrder } from '@grafana/data';\nimport { LogsPanelScene } from './LogsPanelScene';\nimport { locationService } from '@grafana/runtime';\nimport { narrowLogsSortOrder } from '../../services/narrowing';\nimport { logger } from '../../services/logger';\n\ninterface LogOptionsState extends SceneObjectState {\n  visualizationType: LogsVisualizationType;\n  onChangeVisualizationType: (type: LogsVisualizationType) => void;\n}\n\n/**\n * The options rendered in the logs panel header\n */\nexport class LogOptionsScene extends SceneObjectBase<LogOptionsState> {\n  static Component = LogOptionsRenderer;\n\n  constructor(state: LogOptionsState) {\n    super({\n      ...state,\n    });\n  }\n\n  handleWrapLinesChange = (type: boolean) => {\n    this.getLogsPanelScene().setState({ wrapLogMessage: type });\n    setLogOption('wrapLogMessage', type);\n    this.getLogsListScene().setLogsVizOption({ wrapLogMessage: type });\n    this.getLogsListScene().setLogsVizOption({ prettifyLogMessage: type });\n  };\n\n  onChangeLogsSortOrder = (sortOrder: LogsSortOrder) => {\n    this.getLogsPanelScene().setState({ sortOrder: sortOrder });\n    setLogOption('sortOrder', sortOrder);\n    this.getLogsListScene().setLogsVizOption({ sortOrder: sortOrder });\n  };\n\n  getLogsListScene = () => {\n    return sceneGraph.getAncestor(this, LogsListScene);\n  };\n\n  getLogsPanelScene = () => {\n    return sceneGraph.getAncestor(this, LogsPanelScene);\n  };\n\n  clearDisplayedFields = () => {\n    const parentScene = this.getLogsListScene();\n    parentScene.clearDisplayedFields();\n    reportAppInteraction(\n      USER_EVENTS_PAGES.service_details,\n      USER_EVENTS_ACTIONS.service_details.logs_clear_displayed_fields\n    );\n  };\n}\n\nfunction LogOptionsRenderer({ model }: SceneComponentProps<LogOptionsScene>) {\n  const { onChangeVisualizationType, visualizationType } = model.useState();\n  const { wrapLogMessage, sortOrder } = model.getLogsPanelScene().useState();\n  const { displayedFields } = model.getLogsListScene().useState();\n  const styles = useStyles2(getStyles);\n  const wrapLines = wrapLogMessage ?? false;\n\n  return (\n    <div className={styles.container}>\n      {displayedFields.length > 0 && (\n        <Tooltip content={`Clear displayed fields: ${displayedFields.join(', ')}`}>\n          <Button size={'sm'} variant=\"secondary\" fill=\"outline\" onClick={model.clearDisplayedFields}>\n            Show original log line\n          </Button>\n        </Tooltip>\n      )}\n      <InlineField className={styles.buttonGroupWrapper} transparent>\n        <RadioButtonGroup\n          size=\"sm\"\n          options={[\n            {\n              label: 'Newest first',\n              value: LogsSortOrder.Descending,\n              description: 'Show results newest to oldest',\n            },\n            {\n              label: 'Oldest first',\n              value: LogsSortOrder.Ascending,\n              description: 'Show results oldest to newest',\n            },\n          ]}\n          value={sortOrder}\n          onChange={model.onChangeLogsSortOrder}\n        />\n      </InlineField>\n\n      <InlineField className={styles.buttonGroupWrapper} transparent>\n        <RadioButtonGroup\n          size=\"sm\"\n          value={wrapLines}\n          onChange={model.handleWrapLinesChange}\n          options={[\n            {\n              label: 'Wrap',\n              value: true,\n              description: 'Enable wrapping of long log lines',\n            },\n            {\n              label: 'No wrap',\n              value: false,\n              description: 'Disable wrapping of long log lines',\n            },\n          ]}\n        />\n      </InlineField>\n      <LogsPanelHeaderActions vizType={visualizationType} onChange={onChangeVisualizationType} />\n    </div>\n  );\n}\n\nexport function getLogsPanelSortOrderFromStore() {\n  return getLogOption<LogsSortOrder>('sortOrder', LogsSortOrder.Descending) as LogsSortOrder;\n}\n\nexport function getLogsPanelSortOrderFromURL() {\n  // Since sort order is used to execute queries before the logs panel is instantiated, the scene url state will never influence the query\n  // Hacking this for now to manually check the URL search params to override local storage state if set\n  const location = locationService.getLocation();\n  const search = new URLSearchParams(location.search);\n  const sortOrder = search.get('sortOrder');\n\n  try {\n    if (typeof sortOrder === 'string') {\n      const decodedSortOrder = narrowLogsSortOrder(JSON.parse(sortOrder));\n      if (decodedSortOrder) {\n        return decodedSortOrder;\n      }\n    }\n  } catch (e) {\n    // URL Params can be manually changed and it will make JSON.parse() fail.\n    logger.error(e, { msg: 'LogOptionsScene(getLogsPanelSortOrderFromURL): unable to parse sortOrder' });\n  }\n\n  return false;\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css({\n    display: 'flex',\n    alignItems: 'center',\n    gap: theme.spacing(1),\n    marginTop: theme.spacing(0.5),\n  }),\n  buttonGroupWrapper: css({\n    margin: 0,\n    alignItems: 'center',\n  }),\n});\n","import React, { createContext, ReactNode, useCallback, useContext, useEffect, useState } from 'react';\nimport { ActiveFieldMeta, FieldNameMetaStore } from 'Components/Table/TableTypes';\nimport { getBodyName, getTimeName, LogsFrame } from '../../../services/logsFrame';\nimport { logger } from '../../../services/logger';\n\nimport { PLUGIN_ID } from '../../../services/plugin';\nimport { NarrowingError, narrowRecordStringNumber } from '../../../services/narrowing';\n\nconst tableColumnCustomWidths = `${PLUGIN_ID}.tableColumnWidths`;\n\ntype TableColumnsContextType = {\n  // the current list of labels from the dataframe combined with UI metadata\n  columns: FieldNameMetaStore;\n  // The active search results\n  filteredColumns?: FieldNameMetaStore;\n  // Update the column state\n  setColumns(newColumns: FieldNameMetaStore): void;\n  // Update search state\n  setFilteredColumns(newColumns?: FieldNameMetaStore): void;\n  // WIP - sets the visibility of the drawer right now\n  visible: boolean;\n  setVisible: (v: boolean) => void;\n  bodyState: LogLineState;\n  setBodyState: (s: LogLineState) => void;\n  clearSelectedLine: () => void;\n  setColumnWidthMap(map: Record<string, number>): void;\n  columnWidthMap: Record<string, number>;\n};\n\nexport enum LogLineState {\n  text = 'text',\n  labels = 'labels',\n  auto = 'auto',\n}\n\nconst TableColumnsContext = createContext<TableColumnsContextType>({\n  columnWidthMap: {},\n  setColumnWidthMap: () => {},\n  columns: {},\n  filteredColumns: {},\n  setColumns: () => {},\n  setFilteredColumns: () => {},\n  setVisible: () => false,\n  visible: false,\n  bodyState: LogLineState.auto,\n  setBodyState: () => {},\n  clearSelectedLine: () => {},\n});\n\nfunction setDefaultColumns(\n  columns: FieldNameMetaStore,\n  handleSetColumns: (newColumns: FieldNameMetaStore) => void,\n  logsFrame: LogsFrame\n) {\n  const pendingColumns = { ...columns };\n\n  pendingColumns[getTimeName(logsFrame)] = {\n    index: 0,\n    active: true,\n    type: 'TIME_FIELD',\n    percentOfLinesWithLabel: 100,\n    cardinality: Infinity,\n  };\n  pendingColumns[getBodyName(logsFrame)] = {\n    index: 1,\n    active: true,\n    type: 'BODY_FIELD',\n    percentOfLinesWithLabel: 100,\n    cardinality: Infinity,\n  };\n  handleSetColumns(pendingColumns);\n}\n\nfunction getColumnWidthsFromLocalStorage(): Record<string, number> {\n  let initialColumnWidths = {};\n  const existingWidths = localStorage.getItem(tableColumnCustomWidths);\n  if (existingWidths) {\n    try {\n      initialColumnWidths = narrowRecordStringNumber(JSON.parse(existingWidths));\n      if (initialColumnWidths === false) {\n        logger.error(\n          new NarrowingError('getColumnWidthsFromLocalStorage: unable to validate values in local storage'),\n          { msg: 'NarrowingError: error parsing table column widths from local storage' }\n        );\n      }\n      return initialColumnWidths;\n    } catch (e) {\n      logger.error(e, { msg: 'error parsing table column widths from local storage' });\n    }\n  }\n  return initialColumnWidths;\n}\n\nexport const TableColumnContextProvider = ({\n  children,\n  initialColumns,\n  logsFrame,\n  setUrlColumns,\n  clearSelectedLine,\n  setUrlTableBodyState,\n  urlTableBodyState,\n}: {\n  children: ReactNode;\n  initialColumns: FieldNameMetaStore;\n  logsFrame: LogsFrame;\n  setUrlColumns: (columns: string[]) => void;\n  clearSelectedLine: () => void;\n  setUrlTableBodyState: (logLineState: LogLineState) => void;\n  urlTableBodyState?: LogLineState;\n}) => {\n  const [columns, setColumns] = useState<FieldNameMetaStore>(removeExtraColumns(initialColumns));\n  const [bodyState, setBodyState] = useState<LogLineState>(urlTableBodyState ?? LogLineState.auto);\n  const [filteredColumns, setFilteredColumns] = useState<FieldNameMetaStore | undefined>(undefined);\n  const [visible, setVisible] = useState(false);\n  const initialColumnWidths = getColumnWidthsFromLocalStorage();\n  const [columnWidthMap, setColumnWidthMapState] = useState<Record<string, number>>(initialColumnWidths);\n  const setColumnWidthMap = (map: Record<string, number>) => {\n    localStorage.setItem(tableColumnCustomWidths, JSON.stringify(map));\n    setColumnWidthMapState(map);\n  };\n\n  const getActiveColumns = (columns: FieldNameMetaStore): string[] => {\n    let activeColumns: string[] = [];\n    Object.keys(columns).forEach((fieldName) => {\n      if (columns[fieldName].active && columns[fieldName].index !== undefined) {\n        activeColumns.push(fieldName);\n      }\n    });\n    activeColumns.sort((a, b) => {\n      // Typescript doesn't seem to know that the indicies we picked in the loop above are only for ActiveFieldMeta, so we're forced to assert\n      const colA: ActiveFieldMeta = columns[a] as ActiveFieldMeta;\n      const colB: ActiveFieldMeta = columns[b] as ActiveFieldMeta;\n      return colA.index - colB.index;\n    });\n    return activeColumns;\n  };\n\n  const handleSetColumns = useCallback(\n    (newColumns: FieldNameMetaStore) => {\n      if (newColumns) {\n        const columns = removeExtraColumns(newColumns);\n\n        setColumns(columns);\n\n        // Sync react state update with scenes url management\n        setUrlColumns(getActiveColumns(columns));\n      }\n    },\n    [setUrlColumns]\n  );\n\n  const handleSetBodyState = useCallback(\n    (logLineState: LogLineState) => {\n      setBodyState(logLineState);\n\n      // Sync change with url state\n      setUrlTableBodyState(logLineState);\n    },\n    [setUrlTableBodyState]\n  );\n\n  const handleClearSelectedLine = () => {\n    clearSelectedLine();\n  };\n\n  const handleSetVisible = useCallback((isVisible: boolean) => {\n    setVisible(isVisible);\n  }, []);\n\n  // When the parent component recalculates new columns on dataframe change, we need to update or the column UI will be stale!\n  useEffect(() => {\n    if (initialColumns) {\n      handleSetColumns(initialColumns);\n    }\n  }, [initialColumns, handleSetColumns]);\n\n  // When the columns are updated, we need to check if nothing is selected so we can set the default\n  useEffect(() => {\n    const activeColumns = getDefaultColumns(columns, logsFrame);\n    if (activeColumns?.length) {\n      const activeFields = Object.keys(columns).filter((col) => columns[col].active);\n\n      // If we're missing all fields, the user must have removed the last column, let's revert back to the default state\n      if (activeFields.length === 0) {\n        setDefaultColumns(columns, handleSetColumns, logsFrame);\n      }\n\n      // Reset any local search state\n      setFilteredColumns(undefined);\n    }\n  }, [columns, logsFrame, setFilteredColumns, handleSetColumns]);\n\n  return (\n    <TableColumnsContext.Provider\n      value={{\n        setColumnWidthMap,\n        columnWidthMap,\n        bodyState,\n        setBodyState: handleSetBodyState,\n        setFilteredColumns,\n        filteredColumns,\n        columns,\n        setColumns: handleSetColumns,\n        visible: visible,\n        setVisible: handleSetVisible,\n        clearSelectedLine: handleClearSelectedLine,\n      }}\n    >\n      {children}\n    </TableColumnsContext.Provider>\n  );\n};\n/**\n * Filter out fields that shouldn't be exposed in the UI\n * @param columns\n */\nconst removeExtraColumns = (columns: FieldNameMetaStore): FieldNameMetaStore => {\n  // Remove label Types\n  if ('labelTypes' in columns) {\n    const { labelTypes, ...columnsToSet }: FieldNameMetaStore = {\n      ...columns,\n    };\n    return columnsToSet;\n  }\n  return columns;\n};\n\nfunction getDefaultColumns(pendingLabelState: FieldNameMetaStore, logsFrame: LogsFrame) {\n  if (!logsFrame) {\n    logger.warn('missing dataframe, cannot set url state');\n    return;\n  }\n  // Get all active columns and sort by index\n  const newColumnsArray = Object.keys(pendingLabelState)\n    // Only include active filters\n    .filter((key) => pendingLabelState[key]?.active)\n    .sort((a, b) => {\n      const pa = pendingLabelState[a];\n      const pb = pendingLabelState[b];\n      if (pa.index !== undefined && pb.index !== undefined) {\n        return pa.index - pb.index; // sort by index\n      }\n      return 0;\n    });\n\n  const timeField = logsFrame.timeField;\n  const bodyField = logsFrame.bodyField;\n\n  if ((timeField && bodyField) || newColumnsArray.length) {\n    const defaultColumns = [];\n    if (timeField?.name) {\n      defaultColumns.push(timeField.name);\n    }\n    if (bodyField?.name) {\n      defaultColumns.push(bodyField.name);\n    }\n\n    // Update url state\n    return newColumnsArray.length ? newColumnsArray : defaultColumns;\n  }\n\n  return [];\n}\n\nexport const useTableColumnContext = () => {\n  return useContext(TableColumnsContext);\n};\n","import React, { createContext, ReactNode, useCallback, useContext, useState } from 'react';\n\nexport type CellIndex = {\n  fieldName?: string;\n  // If the field contains labels (like log line), we need to know which field (line) and which label (e.g. level)\n  subFieldName?: string;\n  index: number | null;\n  numberOfMenuItems?: number;\n};\n\ntype TableCellContextType = {\n  cellIndex: CellIndex;\n  setActiveCellIndex(cellIndex: CellIndex): void;\n};\n\nconst TableCellContext = createContext<TableCellContextType>({\n  cellIndex: { index: null, numberOfMenuItems: 3 },\n  setActiveCellIndex: (cellIndex: CellIndex) => false,\n});\n\nexport const TableCellContextProvider = ({ children }: { children: ReactNode }) => {\n  const [cellActive, setCellActive] = useState<CellIndex>({ index: null });\n\n  const handleCellActive = useCallback((cellIndex: CellIndex) => {\n    setCellActive(cellIndex);\n  }, []);\n\n  return (\n    <TableCellContext.Provider value={{ cellIndex: cellActive, setActiveCellIndex: handleCellActive }}>\n      {children}\n    </TableCellContext.Provider>\n  );\n};\n\nexport const useTableCellContext = () => {\n  return useContext(TableCellContext);\n};\n","import React, { createContext, ReactNode, useCallback, useContext, useState } from 'react';\n\ntype TableHeaderContextType = {\n  isHeaderMenuActive: boolean;\n  setHeaderMenuActive: (isHeaderMenuActive: boolean) => void;\n};\n\nconst TableHeaderContext = createContext<TableHeaderContextType>({\n  isHeaderMenuActive: false,\n  setHeaderMenuActive: (isHeaderMenuActive: boolean) => false,\n});\n\nexport const TableHeaderContextProvider = ({ children }: { children: ReactNode }) => {\n  const [isHeaderMenuActive, setHeaderMenuActive] = useState<boolean>(false);\n\n  const handleisHeaderMenuActive = useCallback((isHeaderMenuActive: boolean) => {\n    setHeaderMenuActive(isHeaderMenuActive);\n  }, []);\n\n  return (\n    <TableHeaderContext.Provider value={{ isHeaderMenuActive, setHeaderMenuActive: handleisHeaderMenuActive }}>\n      {children}\n    </TableHeaderContext.Provider>\n  );\n};\n\nexport const useTableHeaderContext = () => {\n  return useContext(TableHeaderContext);\n};\n","import React from 'react';\nimport { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Field, Input, useTheme2 } from '@grafana/ui';\n\nimport { useTableColumnContext } from 'Components/Table/Context/TableColumnsContext';\nimport { FieldNameMetaStore } from 'Components/Table/TableTypes';\nimport { reportInteraction } from '@grafana/runtime';\nimport { debouncedFuzzySearch } from '../../../services/search';\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    searchWrap: css({\n      padding: `${theme.spacing(0.4)} 0 ${theme.spacing(0.4)} ${theme.spacing(0.4)}`,\n    }),\n  };\n}\n\ninterface LogsColumnSearchProps {\n  searchValue: string;\n  setSearchValue: (value: string) => void;\n}\nexport function LogsColumnSearch({ searchValue, setSearchValue }: LogsColumnSearchProps) {\n  const { columns, setFilteredColumns } = useTableColumnContext();\n\n  // uFuzzy search dispatcher, adds any matches to the local state\n  const dispatcher = (data: string[][]) => {\n    const matches = data[0];\n    let newColumnsWithMeta: FieldNameMetaStore = {};\n    let numberOfResults = 0;\n    matches.forEach((match) => {\n      if (match in columns) {\n        newColumnsWithMeta[match] = columns[match];\n        numberOfResults++;\n      }\n    });\n    setFilteredColumns(newColumnsWithMeta);\n    searchFilterEvent(numberOfResults);\n  };\n\n  // uFuzzy search\n  const search = (needle: string) => {\n    debouncedFuzzySearch(Object.keys(columns), needle, dispatcher);\n  };\n\n  // onChange handler for search input\n  const onSearchInputChange = (e: React.FormEvent<HTMLInputElement>) => {\n    const value = e.currentTarget?.value;\n    setSearchValue(value);\n    if (value) {\n      search(value);\n    } else {\n      // If the search input is empty, reset the local search state.\n      setFilteredColumns(undefined);\n    }\n  };\n\n  const theme = useTheme2();\n  const styles = getStyles(theme);\n  return (\n    <Field className={styles.searchWrap}>\n      <Input value={searchValue} type={'text'} placeholder={'Search fields by name'} onChange={onSearchInputChange} />\n    </Field>\n  );\n}\n\nfunction searchFilterEvent(searchResultCount: number) {\n  reportInteraction('grafana_logs_app_table_text_search_result_count', {\n    resultCount: searchResultCount,\n  });\n}\n","import React from 'react';\nimport { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useTheme2 } from '@grafana/ui';\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    empty: css({\n      marginBottom: theme.spacing(2),\n      marginLeft: theme.spacing(1.75),\n      fontSize: theme.typography.fontSize,\n    }),\n  };\n}\n\nexport function LogsTableEmptyFields() {\n  const theme = useTheme2();\n  const styles = getStyles(theme);\n  return <div className={styles.empty}>No fields</div>;\n}\n","import React from 'react';\nimport { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Checkbox, Icon, useTheme2 } from '@grafana/ui';\n\nimport { FieldNameMeta } from '../TableTypes';\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    dragIcon: css({\n      cursor: 'drag',\n      marginLeft: theme.spacing(1),\n      opacity: 0.4,\n    }),\n    labelCount: css({\n      marginLeft: theme.spacing(0.5),\n      marginRight: theme.spacing(0.5),\n      appearance: 'none',\n      background: 'none',\n      border: 'none',\n      fontSize: theme.typography.pxToRem(11),\n      opacity: 0.6,\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'self-end',\n    }),\n    contentWrap: css({\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'space-between',\n      width: '100%',\n    }),\n    customWidthWrap: css({\n      fontSize: theme.typography.bodySmall.fontSize,\n      cursor: 'pointer',\n    }),\n    // Hide text that overflows, had to select elements within the Checkbox component, so this is a bit fragile\n    checkboxLabel: css({\n      '> span': {\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap',\n        display: 'block',\n        maxWidth: '100%',\n      },\n    }),\n  };\n}\n\nexport function LogsTableNavField(props: {\n  label: string;\n  onChange: () => void;\n  labels: Record<string, FieldNameMeta>;\n  draggable?: boolean;\n  showCount?: boolean;\n  setColumnWidthMap?: (map: Record<string, number>) => void;\n  columnWidthMap?: Record<string, number>;\n}): React.JSX.Element | null {\n  const theme = useTheme2();\n  const styles = getStyles(theme);\n\n  if (props.labels[props.label]) {\n    return (\n      <>\n        <div className={styles.contentWrap}>\n          <Checkbox\n            className={styles.checkboxLabel}\n            label={props.label}\n            onChange={props.onChange}\n            checked={props.labels[props.label]?.active ?? false}\n          />\n          {props.showCount && (\n            <div className={styles.labelCount}>\n              <div>{props.labels[props.label]?.percentOfLinesWithLabel}%</div>\n              <div>\n                {props.labels[props.label]?.cardinality}{' '}\n                {props.labels[props.label]?.cardinality === 1 ? 'value' : 'values'}\n              </div>\n            </div>\n          )}\n          {props.columnWidthMap && props.setColumnWidthMap && props.columnWidthMap?.[props.label] !== undefined && (\n            <div\n              onClick={() => {\n                const { [props.label]: omit, ...map } = { ...props.columnWidthMap };\n                props.setColumnWidthMap?.(map);\n              }}\n              title={'Clear column width override'}\n              className={styles.customWidthWrap}\n            >\n              Width: {props.columnWidthMap?.[props.label]}\n              <Icon name={'x'} />\n            </div>\n          )}\n        </div>\n        {props.draggable && (\n          <Icon\n            aria-label=\"Drag and drop icon\"\n            title=\"Drag and drop to reorder\"\n            name=\"draggabledots\"\n            size=\"lg\"\n            className={styles.dragIcon}\n          />\n        )}\n      </>\n    );\n  }\n\n  return null;\n}\n","import React, { ReactElement } from 'react';\nimport { DragDropContext, Draggable, DraggableProvided, Droppable, DropResult } from '@hello-pangea/dnd';\nimport { css, cx } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data/';\nimport { useTheme2 } from '@grafana/ui/';\n\nimport { FieldNameMeta, FieldNameMetaStore } from '../TableTypes';\n\nimport { LogsTableEmptyFields } from './LogsTableEmptyFields';\nimport { LogsTableNavField } from './LogsTableNavField';\nimport { useTableColumnContext } from 'Components/Table/Context/TableColumnsContext';\n\nexport function getLogsFieldsStyles(theme: GrafanaTheme2) {\n  return {\n    wrap: css({\n      marginTop: theme.spacing(1),\n      marginBottom: theme.spacing(1),\n      display: 'flex',\n      background: theme.colors.background.primary,\n    }),\n    dragging: css({\n      background: theme.colors.background.secondary,\n    }),\n    columnWrapper: css({\n      marginBottom: theme.spacing(1.5),\n      // need some space or the outline of the checkbox is cut off\n      paddingLeft: theme.spacing(0.5),\n    }),\n  };\n}\n\nfunction sortLabels(labels: Record<string, FieldNameMeta>) {\n  return (a: string, b: string) => {\n    const la = labels[a];\n    const lb = labels[b];\n\n    // Sort by index\n    if (la.index != null && lb.index != null) {\n      return la.index - lb.index;\n    }\n\n    // otherwise do not sort\n    return 0;\n  };\n}\n\nexport const LogsTableActiveFields = (props: {\n  labels: Record<string, FieldNameMeta>;\n  valueFilter: (value: string) => boolean;\n  toggleColumn: (columnName: string) => void;\n  reorderColumn: (cols: FieldNameMetaStore, sourceIndex: number, destinationIndex: number) => void;\n  id: string;\n}): ReactElement => {\n  const { columnWidthMap, setColumnWidthMap } = useTableColumnContext();\n  const { reorderColumn, labels, valueFilter, toggleColumn } = props;\n  const theme = useTheme2();\n  const { columns } = useTableColumnContext();\n  const styles = getLogsFieldsStyles(theme);\n  const labelKeys = Object.keys(labels).filter((labelName) => valueFilter(labelName));\n\n  const onDragEnd = (result: DropResult) => {\n    if (!result.destination) {\n      return;\n    }\n    reorderColumn(columns, result.source.index, result.destination.index);\n  };\n\n  const renderTitle = (labelName: string) => {\n    const label = labels[labelName];\n    if (label) {\n      return `${labelName} appears in ${label?.percentOfLinesWithLabel}% of log lines`;\n    }\n\n    return undefined;\n  };\n\n  if (labelKeys.length) {\n    return (\n      <DragDropContext onDragEnd={onDragEnd}>\n        <Droppable droppableId=\"order-fields\" direction=\"vertical\">\n          {(provided) => (\n            <div className={styles.columnWrapper} {...provided.droppableProps} ref={provided.innerRef}>\n              {labelKeys.sort(sortLabels(labels)).map((labelName, index) => (\n                <Draggable draggableId={labelName} key={labelName} index={index}>\n                  {(provided: DraggableProvided, snapshot) => (\n                    <div\n                      className={cx(styles.wrap, snapshot.isDragging ? styles.dragging : undefined)}\n                      ref={provided.innerRef}\n                      {...provided.draggableProps}\n                      {...provided.dragHandleProps}\n                      title={renderTitle(labelName)}\n                    >\n                      <LogsTableNavField\n                        setColumnWidthMap={setColumnWidthMap}\n                        columnWidthMap={columnWidthMap}\n                        label={labelName}\n                        onChange={() => toggleColumn(labelName)}\n                        labels={labels}\n                        draggable={true}\n                      />\n                    </div>\n                  )}\n                </Draggable>\n              ))}\n              {provided.placeholder}\n            </div>\n          )}\n        </Droppable>\n      </DragDropContext>\n    );\n  }\n\n  return <LogsTableEmptyFields />;\n};\n","import React from 'react';\nimport { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useTheme2 } from '@grafana/ui';\n\nimport { FieldNameMeta } from '../TableTypes';\n\nimport { LogsTableEmptyFields } from './LogsTableEmptyFields';\nimport { LogsTableNavField } from './LogsTableNavField';\n\nconst collator = new Intl.Collator(undefined, { sensitivity: 'base' });\n\nfunction getLogsFieldsStyles(theme: GrafanaTheme2) {\n  return {\n    wrap: css({\n      marginTop: theme.spacing(0.25),\n      marginBottom: theme.spacing(0.25),\n      display: 'flex',\n      background: theme.colors.background.primary,\n      borderBottom: `1px solid ${theme.colors.background.canvas}`,\n    }),\n    dragging: css({\n      background: theme.colors.background.secondary,\n    }),\n    columnWrapper: css({\n      marginBottom: theme.spacing(1.5),\n      // need some space or the outline of the checkbox is cut off\n      paddingLeft: theme.spacing(0.5),\n    }),\n  };\n}\n\nfunction sortLabels(labels: Record<string, FieldNameMeta>) {\n  return (a: string, b: string) => {\n    const la = labels[a];\n    const lb = labels[b];\n\n    // ...sort by type and alphabetically\n    if (la != null && lb != null) {\n      return (\n        Number(lb.type === 'TIME_FIELD') - Number(la.type === 'TIME_FIELD') ||\n        Number(lb.type === 'BODY_FIELD') - Number(la.type === 'BODY_FIELD') ||\n        collator.compare(a, b)\n      );\n    }\n\n    // otherwise do not sort\n    return 0;\n  };\n}\n\nexport const LogsTableAvailableFields = (props: {\n  labels: Record<string, FieldNameMeta>;\n  valueFilter: (value: string) => boolean;\n  toggleColumn: (columnName: string) => void;\n}): React.ReactElement => {\n  const { labels, valueFilter, toggleColumn } = props;\n  const theme = useTheme2();\n  const styles = getLogsFieldsStyles(theme);\n  const labelKeys = Object.keys(labels).filter((labelName) => valueFilter(labelName));\n  if (labelKeys.length) {\n    // Otherwise show list with a hardcoded order\n    return (\n      <div className={styles.columnWrapper}>\n        {labelKeys.sort(sortLabels(labels)).map((labelName) => (\n          <div\n            key={labelName}\n            className={styles.wrap}\n            title={`${labelName} appears in ${labels[labelName]?.percentOfLinesWithLabel}% of log lines`}\n          >\n            <LogsTableNavField\n              showCount={true}\n              label={labelName}\n              onChange={() => toggleColumn(labelName)}\n              labels={labels}\n            />\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  return <LogsTableEmptyFields />;\n};\n","import React from 'react';\nimport { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useTheme2 } from '@grafana/ui';\n\nimport { LogsTableActiveFields } from 'Components/Table/ColumnSelection/LogsTableActiveFields';\nimport { LogsTableAvailableFields } from 'Components/Table/ColumnSelection/LogsTableAvailableFields';\n\nimport { FieldNameMeta, FieldNameMetaStore } from '../TableTypes';\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    sidebarWrap: css({\n      overflowY: 'scroll',\n      height: 'calc(100% - 50px)',\n      /* Hide scrollbar for Chrome, Safari, and Opera */\n      '&::-webkit-scrollbar': {\n        display: 'none',\n      },\n      /* Hide scrollbar for Firefox */\n      scrollbarWidth: 'none',\n    }),\n    columnHeaderButton: css({\n      appearance: 'none',\n      background: 'none',\n      border: 'none',\n      fontSize: theme.typography.pxToRem(11),\n    }),\n    columnHeader: css({\n      display: 'flex',\n      justifyContent: 'space-between',\n      fontSize: theme.typography.h6.fontSize,\n      background: theme.colors.background.secondary,\n      position: 'sticky',\n      top: 0,\n      left: 0,\n      paddingTop: theme.spacing(0.75),\n      paddingRight: theme.spacing(0.75),\n      paddingBottom: theme.spacing(0.75),\n      paddingLeft: theme.spacing(1.5),\n      zIndex: 3,\n      marginBottom: theme.spacing(2),\n    }),\n  };\n}\n\nexport const LogsTableMultiSelect = (props: {\n  toggleColumn: (columnName: string) => void;\n  filteredColumnsWithMeta: Record<string, FieldNameMeta> | undefined;\n  columnsWithMeta: Record<string, FieldNameMeta>;\n  clear: () => void;\n  reorderColumn: (cols: FieldNameMetaStore, oldIndex: number, newIndex: number) => void;\n}) => {\n  const theme = useTheme2();\n  const styles = getStyles(theme);\n\n  return (\n    <div className={styles.sidebarWrap}>\n      {/* Sidebar columns */}\n      <>\n        <div className={styles.columnHeader}>\n          Selected fields\n          <button onClick={props.clear} className={styles.columnHeaderButton}>\n            Reset\n          </button>\n        </div>\n        <LogsTableActiveFields\n          reorderColumn={props.reorderColumn}\n          toggleColumn={props.toggleColumn}\n          labels={props.filteredColumnsWithMeta ?? props.columnsWithMeta}\n          valueFilter={(value) => props.columnsWithMeta[value]?.active ?? false}\n          id={'selected-fields'}\n        />\n\n        <div className={styles.columnHeader}>Fields</div>\n        <LogsTableAvailableFields\n          toggleColumn={props.toggleColumn}\n          labels={props.filteredColumnsWithMeta ?? props.columnsWithMeta}\n          valueFilter={(value) => !props.columnsWithMeta[value]?.active}\n        />\n      </>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\n\nimport { ClickOutsideWrapper } from '@grafana/ui';\n\nimport { useTableColumnContext } from 'Components/Table/Context/TableColumnsContext';\nimport { LogsColumnSearch } from 'Components/Table/ColumnSelection/LogsColumnSearch';\nimport { LogsTableMultiSelect } from 'Components/Table/ColumnSelection/LogsTableMultiSelect';\n\nimport { FieldNameMetaStore } from '../TableTypes';\nimport { reportInteraction } from '@grafana/runtime';\nimport { logger } from '../../../services/logger';\n\nexport function getReorderColumn(setColumns: (cols: FieldNameMetaStore) => void) {\n  return (columns: FieldNameMetaStore, sourceIndex: number, destinationIndex: number) => {\n    if (sourceIndex === destinationIndex) {\n      return;\n    }\n\n    const pendingLabelState = { ...columns };\n    const keys = Object.keys(pendingLabelState)\n      .filter((key) => pendingLabelState[key].active)\n      .map((key) => ({\n        fieldName: key,\n        index: pendingLabelState[key].index ?? 0,\n      }))\n      .sort((a, b) => a.index - b.index);\n\n    const [source] = keys.splice(sourceIndex, 1);\n    keys.splice(destinationIndex, 0, source);\n\n    keys\n      .filter((key) => key !== undefined)\n      .forEach((key, index) => {\n        pendingLabelState[key.fieldName].index = index;\n      });\n\n    // Set local state\n    setColumns(pendingLabelState);\n  };\n}\n\nfunction logError(columnName: string, columns: FieldNameMetaStore) {\n  let logContext;\n  try {\n    logContext = {\n      columns: JSON.stringify(columns),\n      columnName: columnName,\n    };\n  } catch (e) {\n    logContext = {\n      msg: 'Table: ColumnSelectionDrawerWrap failed to encode context',\n      columnName: columnName,\n    };\n  }\n  logger.warn('failed to get column', logContext);\n}\n\nexport function ColumnSelectionDrawerWrap() {\n  const { columns, setColumns, setVisible, filteredColumns, setFilteredColumns } = useTableColumnContext();\n  const [searchValue, setSearchValue] = useState<string>('');\n  const toggleColumn = (columnName: string) => {\n    if (!columns || !(columnName in columns)) {\n      logError(columnName, columns);\n      return;\n    }\n\n    const length = Object.keys(columns).filter((c) => columns[c].active).length;\n    const isActive = !columns[columnName].active ? true : undefined;\n\n    let pendingLabelState: FieldNameMetaStore;\n    if (isActive) {\n      pendingLabelState = {\n        ...columns,\n        [columnName]: {\n          ...columns[columnName],\n          active: isActive,\n          index: length,\n        },\n      };\n    } else {\n      pendingLabelState = {\n        ...columns,\n        [columnName]: {\n          ...columns[columnName],\n          active: false,\n          index: undefined,\n        },\n      };\n    }\n\n    // Analytics\n    columnFilterEvent(columnName);\n\n    // Set local state\n    setColumns(pendingLabelState);\n\n    // If user is currently filtering, update filtered state\n    if (filteredColumns) {\n      const active = !filteredColumns[columnName]?.active;\n      let pendingFilteredLabelState: FieldNameMetaStore;\n      if (active) {\n        pendingFilteredLabelState = {\n          ...filteredColumns,\n          [columnName]: {\n            ...filteredColumns[columnName],\n            active: active,\n            index: length,\n          },\n        };\n      } else {\n        pendingFilteredLabelState = {\n          ...filteredColumns,\n          [columnName]: {\n            ...filteredColumns[columnName],\n            active: false,\n            index: undefined,\n          },\n        };\n      }\n\n      setFilteredColumns(pendingFilteredLabelState);\n      setSearchValue('');\n    }\n  };\n\n  const reorderColumn = getReorderColumn(setColumns);\n\n  const clearSelection = () => {\n    const pendingLabelState = { ...columns };\n    let index = 0;\n    Object.keys(pendingLabelState).forEach((key) => {\n      const isDefaultField =\n        pendingLabelState[key].type === 'BODY_FIELD' || pendingLabelState[key].type === 'TIME_FIELD';\n      // after reset the only active fields are the special time and body fields\n      pendingLabelState[key].active = isDefaultField;\n      // reset the index\n      pendingLabelState[key].index = isDefaultField ? index++ : undefined;\n    });\n\n    setColumns(pendingLabelState);\n    setFilteredColumns(pendingLabelState);\n    setSearchValue('');\n  };\n\n  // Tracking event for filtering columns\n  function columnFilterEvent(columnName: string) {\n    if (columns) {\n      const newState = !columns[columnName]?.active;\n      const priorActiveCount = Object.keys(columns).filter((column) => columns[column]?.active)?.length;\n      const event = {\n        columnAction: newState ? 'add' : 'remove',\n        columnCount: newState ? priorActiveCount + 1 : priorActiveCount - 1,\n      };\n      reportInteraction('grafana_logs_app_table_column_filter_clicked', event);\n    }\n  }\n\n  return (\n    <ClickOutsideWrapper\n      onClick={() => {\n        setVisible(false);\n        setFilteredColumns(columns);\n        setSearchValue('');\n      }}\n      useCapture={true}\n    >\n      <LogsColumnSearch searchValue={searchValue} setSearchValue={setSearchValue} />\n      <LogsTableMultiSelect\n        toggleColumn={toggleColumn}\n        filteredColumnsWithMeta={filteredColumns}\n        columnsWithMeta={columns}\n        clear={clearSelection}\n        reorderColumn={reorderColumn}\n      />\n    </ClickOutsideWrapper>\n  );\n}\n","import React, { PropsWithChildren } from 'react';\nimport { css, cx } from '@emotion/css';\n\nimport { Field, GrafanaTheme2 } from '@grafana/data';\nimport { useTheme2 } from '@grafana/ui';\n\nimport { useTableCellContext } from 'Components/Table/Context/TableCellContext';\n\ninterface DefaultCellWrapComponentProps {}\n\ninterface Props extends PropsWithChildren<DefaultCellWrapComponentProps> {\n  rowIndex: number;\n  field: Field;\n  onClick?: () => void;\n  onMouseIn?: () => void;\n  onMouseOut?: () => void;\n}\n\nconst getStyles = (theme: GrafanaTheme2, bgColor?: string, numberOfMenuItems?: number) => ({\n  active: css({\n    // Save 20px for context menu\n    height: `calc(${100}% + 36px)`,\n    zIndex: theme.zIndex.tooltip,\n    background: 'transparent',\n  }),\n  wrap: css({\n    position: 'absolute',\n    overflowX: 'hidden',\n    whiteSpace: 'nowrap',\n    width: '100%',\n    height: '100%',\n    left: 0,\n    top: 0,\n    margin: 'auto',\n    background: bgColor ?? 'transparent',\n  }),\n});\n\nexport const DefaultCellWrapComponent = (props: Props) => {\n  return (\n    <CellWrapInnerComponent\n      onMouseOut={props.onMouseOut}\n      onMouseIn={props.onMouseIn}\n      onClick={props.onClick}\n      field={props.field}\n      rowIndex={props.rowIndex}\n    >\n      {props.children}\n    </CellWrapInnerComponent>\n  );\n};\n\nconst CellWrapInnerComponent = (props: Props) => {\n  const theme = useTheme2();\n  const cellState = useTableCellContext();\n  const styles = getStyles(theme, undefined, cellState.cellIndex?.numberOfMenuItems);\n\n  return (\n    <div\n      onMouseLeave={props.onMouseOut}\n      onMouseEnter={props.onMouseIn}\n      onClick={props.onClick}\n      className={\n        cellState.cellIndex.index === props.rowIndex && cellState.cellIndex.fieldName === props.field.name\n          ? cx(styles.wrap, styles.active)\n          : styles.wrap\n      }\n    >\n      {props.children}\n    </div>\n  );\n};\n","import React, { createContext, ReactNode, useContext } from 'react';\nimport { LogsFrame } from '../../../services/logsFrame';\nimport { AdHocVariableFilter, TimeRange } from '@grafana/data';\nimport { SelectedTableRow } from '../LogLineCellComponent';\n\nexport type Label = { name: string; values: string[]; indexed: boolean };\n\nexport type QueryContextType = {\n  logsFrame: LogsFrame | null;\n  addFilter: (filter: AdHocVariableFilter) => void;\n  selectedLine?: SelectedTableRow;\n  timeRange?: TimeRange;\n};\n\nexport const initialState = {\n  logsFrame: null,\n  addFilter: (filter: AdHocVariableFilter) => {},\n  timeRange: undefined,\n  selectedLine: undefined,\n};\n\nexport const QueryContext = createContext<QueryContextType>(initialState);\n\nexport const QueryContextProvider = ({\n  children,\n  logsFrame,\n  addFilter,\n  selectedLine,\n  timeRange,\n}: {\n  children: ReactNode;\n  logsFrame: LogsFrame;\n  addFilter: (filter: AdHocVariableFilter) => void;\n  selectedLine?: SelectedTableRow;\n  timeRange?: TimeRange;\n}) => {\n  return (\n    <QueryContext.Provider\n      value={{\n        logsFrame,\n        addFilter,\n        selectedLine,\n        timeRange,\n      }}\n    >\n      {children}\n    </QueryContext.Provider>\n  );\n};\n\nexport const useQueryContext = () => {\n  return useContext(QueryContext);\n};\n","import React from 'react';\nimport { css } from '@emotion/css';\n\nimport { GrafanaTheme2, LinkModel } from '@grafana/data';\nimport { Icon, useTheme2 } from '@grafana/ui';\nimport { useQueryContext } from './Context/QueryContext';\n\nimport { FilterOp } from '../../services/filterTypes';\n\ninterface Props {\n  fieldType?: 'derived';\n  label: string;\n  value: string;\n  showColumn?: () => void;\n  links?: LinkModel[];\n  pillType: 'logPill' | 'column';\n}\n\nconst getStyles = (theme: GrafanaTheme2, pillType: 'logPill' | 'column') => ({\n  menu: css({\n    position: 'relative',\n    paddingRight: '5px',\n    display: 'flex',\n    minWidth: '60px',\n    justifyContent: 'flex-start',\n  }),\n  menuItemsWrap: css({\n    boxShadow: theme.shadows.z3,\n    display: 'flex',\n    background: theme.colors.background.secondary,\n    padding: '5px 0',\n    marginLeft: pillType === 'column' ? '5px' : undefined,\n  }),\n  menuItem: css({\n    overflow: 'auto',\n    textOverflow: 'ellipsis',\n    cursor: 'pointer',\n    paddingLeft: '5px',\n    paddingRight: '5px',\n    display: 'flex',\n    alignItems: 'center',\n  }),\n});\n\nexport const CellContextMenu = (props: Props) => {\n  const theme = useTheme2();\n  const styles = getStyles(theme, props.pillType);\n  const { addFilter } = useQueryContext();\n\n  return (\n    <span className={styles.menu}>\n      <span className={styles.menuItemsWrap}>\n        {props.fieldType !== 'derived' && (\n          <>\n            <div\n              className={styles.menuItem}\n              onClick={() => {\n                addFilter({\n                  key: props.label,\n                  value: props.value,\n                  operator: FilterOp.Equal,\n                });\n              }}\n            >\n              <Icon title={'Add to search'} size={'md'} name={'plus-circle'} />\n            </div>\n            <div\n              className={styles.menuItem}\n              onClick={() => {\n                addFilter({\n                  key: props.label,\n                  value: props.value,\n                  operator: FilterOp.NotEqual,\n                });\n              }}\n            >\n              <Icon title={'Exclude from search'} size={'md'} name={'minus-circle'} />\n            </div>\n          </>\n        )}\n\n        {props.showColumn && (\n          <div title={'Add column'} onClick={props.showColumn} className={styles.menuItem}>\n            <svg width=\"18\" height=\"16\" viewBox=\"0 0 18 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n              <path\n                fillRule=\"evenodd\"\n                clipRule=\"evenodd\"\n                d=\"M1.38725 1.33301H13.3872C13.5641 1.33301 13.7336 1.40325 13.8587 1.52827C13.9837 1.65329 14.0539 1.82286 14.0539 1.99967V2.33333C14.0539 2.70152 13.7554 3 13.3872 3H13.0542C12.87 3 12.7206 2.85062 12.7206 2.66634H8.05391V13.333H12.7206C12.7206 13.1491 12.8697 13 13.0536 13H13.3872C13.7554 13 14.0539 13.2985 14.0539 13.6667V13.9997C14.0539 14.1765 13.9837 14.3461 13.8587 14.4711C13.7336 14.5961 13.5641 14.6663 13.3872 14.6663H1.38725C1.21044 14.6663 1.04087 14.5961 0.915843 14.4711C0.790819 14.3461 0.720581 14.1765 0.720581 13.9997V1.99967C0.720581 1.82286 0.790819 1.65329 0.915843 1.52827C1.04087 1.40325 1.21044 1.33301 1.38725 1.33301ZM2.05391 13.333H6.72058V2.66634H2.05391V13.333Z\"\n                fill=\"#CCCCDC\"\n                fillOpacity=\"1\"\n              />\n              <path\n                d=\"M13.8538 7.19999H16.2538C16.466 7.19999 16.6695 7.28429 16.8195 7.4343C16.9696 7.58432 17.0538 7.78783 17.0538 7.99999C17.0538 8.21214 16.9696 8.41566 16.8195 8.56567C16.6695 8.71569 16.466 8.79999 16.2538 8.79999H13.8538V11.2C13.8538 11.4121 13.7696 11.6156 13.6195 11.7657C13.4695 11.9157 13.266 12 13.0538 12C12.8416 12 12.6382 11.9157 12.4881 11.7657C12.3381 11.6156 12.2538 11.4121 12.2538 11.2V8.79999H9.85384C9.64165 8.79999 9.43819 8.71569 9.28815 8.56567C9.13811 8.41566 9.05383 8.21214 9.05383 7.99999C9.05383 7.78783 9.13811 7.58432 9.28815 7.4343C9.43819 7.28429 9.64165 7.19999 9.85384 7.19999H12.2538V4.8C12.2538 4.58784 12.3381 4.38433 12.4881 4.23431C12.6382 4.0843 12.8416 4 13.0538 4C13.266 4 13.4695 4.0843 13.6195 4.23431C13.7696 4.38433 13.8538 4.58784 13.8538 4.8V7.19999Z\"\n                fill=\"#CCCCDC\"\n                fillOpacity=\"1\"\n              />\n            </svg>\n          </div>\n        )}\n\n        {props.links &&\n          props.links.map((link) => {\n            return (\n              <div\n                className={styles.menuItem}\n                onClick={() => {\n                  window.open(link.href, '_blank');\n                }}\n                key={link.href}\n              >\n                <Icon title={link.title ?? 'Link'} key={link.href} size={'md'} name={'link'} />\n              </div>\n            );\n          })}\n      </span>\n    </span>\n  );\n};\n","export const LEVEL_NAME = 'detected_level';\n","import React, { ReactElement } from 'react';\nimport { css, cx } from '@emotion/css';\n\nimport { Field, FieldType, GrafanaTheme2 } from '@grafana/data';\nimport { useTheme2 } from '@grafana/ui';\n\nimport { useTableCellContext } from 'Components/Table/Context/TableCellContext';\nimport { CellContextMenu } from 'Components/Table/CellContextMenu';\nimport { getFieldMappings } from 'Components/Table/Table';\nimport { LEVEL_NAME } from './constants';\n\ninterface DefaultPillProps {\n  label: string;\n  showColumns?: () => void;\n  value: string | unknown | ReactElement;\n  rowIndex: number;\n  field: Field;\n}\n\nconst getStyles = (theme: GrafanaTheme2, levelColor?: string) => ({\n  activePillWrap: css({}),\n  pillWrap: css({\n    width: '100%',\n  }),\n  pill: css({\n    border: `1px solid ${theme.colors.border.weak}`,\n    '&:hover': {\n      border: `1px solid ${theme.colors.border.strong}`,\n    },\n    marginRight: '5px',\n    marginTop: '4px',\n    marginLeft: '5px',\n    padding: '2px 5px',\n    position: 'relative',\n    display: 'inline-flex',\n    flexDirection: 'row-reverse',\n    backgroundColor: 'transparent',\n\n    paddingLeft: levelColor ? `${theme.spacing(0.75)}` : `2px`,\n\n    '&:before': {\n      content: '\"\"',\n      position: 'absolute',\n      left: 0,\n      top: 0,\n      height: '100%',\n      width: `${theme.spacing(0.25)}`,\n      backgroundColor: levelColor,\n    },\n  }),\n  menu: css({\n    width: '100%',\n  }),\n  menuItem: css({\n    overflow: 'auto',\n    textOverflow: 'ellipsis',\n  }),\n  menuItemText: css({\n    width: '65px',\n    display: 'inline-block',\n  }),\n});\nexport const DefaultPill = (props: DefaultPillProps) => {\n  const { label, value } = props;\n  const theme = useTheme2();\n  const { cellIndex } = useTableCellContext();\n  let levelColor;\n\n  if (label === LEVEL_NAME) {\n    const mappings = getFieldMappings().options;\n    if (typeof value === 'string' && value in mappings) {\n      levelColor = mappings[value].color;\n    }\n  }\n\n  const isPillActive = cellIndex.index === props.rowIndex && props.field.name === cellIndex.fieldName;\n\n  const styles = getStyles(theme, levelColor);\n  return (\n    <div className={cx(styles.pillWrap, isPillActive ? styles.activePillWrap : undefined)}>\n      {!!value && (\n        <>\n          <span className={styles.pill}>\n            <>{value}</>\n          </span>\n          {isPillActive && typeof value === 'string' && props.field.type !== FieldType.time && (\n            <CellContextMenu label={props.label} value={value} pillType={'column'} />\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n","import { ClipboardButton, IconButton, Modal, useTheme2 } from '@grafana/ui';\nimport React, { useCallback, useState } from 'react';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { css } from '@emotion/css';\nimport { useQueryContext } from 'Components/Table/Context/QueryContext';\nimport { testIds } from '../../services/testIds';\nimport { generateLogShortlink } from 'services/text';\n\nexport const getStyles = (theme: GrafanaTheme2, bgColor?: string) => ({\n  clipboardButton: css({\n    padding: 0,\n    height: '100%',\n    lineHeight: '1',\n    width: '20px',\n  }),\n  inspectButton: css({\n    display: 'inline-flex',\n    verticalAlign: 'middle',\n    margin: 0,\n    overflow: 'hidden',\n    borderRadius: '5px',\n  }),\n  iconWrapper: css({\n    height: '35px',\n    position: 'sticky',\n    left: 0,\n    display: 'flex',\n    background: theme.colors.background.secondary,\n    padding: `0 ${theme.spacing(0.5)}`,\n    zIndex: 1,\n    boxShadow: theme.shadows.z2,\n  }),\n  inspect: css({\n    padding: '5px 3px',\n\n    '&:hover': {\n      color: theme.colors.text.link,\n      cursor: 'pointer',\n    },\n  }),\n});\nexport function LineActionIcons(props: { rowIndex: number; value: unknown }) {\n  const theme = useTheme2();\n  const styles = getStyles(theme);\n  const { logsFrame, timeRange } = useQueryContext();\n  const logId = logsFrame?.idField?.values[props.rowIndex];\n  const lineValue = logsFrame?.bodyField.values[props.rowIndex];\n  const [isInspecting, setIsInspecting] = useState(false);\n  const getText = useCallback(() => {\n    if (timeRange) {\n      return generateLogShortlink('selectedLine', { id: logId, row: props.rowIndex }, timeRange);\n    }\n    return '';\n  }, [logId, props.rowIndex, timeRange]);\n  return (\n    <>\n      <div className={styles.iconWrapper}>\n        <div className={styles.inspect}>\n          <IconButton\n            data-testid={testIds.table.inspectLine}\n            className={styles.inspectButton}\n            tooltip=\"View log line\"\n            variant=\"secondary\"\n            aria-label=\"View log line\"\n            tooltipPlacement=\"top\"\n            size=\"md\"\n            name=\"eye\"\n            onClick={() => setIsInspecting(true)}\n            tabIndex={0}\n          />\n        </div>\n        <div className={styles.inspect}>\n          <ClipboardButton\n            className={styles.clipboardButton}\n            icon=\"share-alt\"\n            variant=\"secondary\"\n            fill=\"text\"\n            size=\"md\"\n            tooltip=\"Copy link to log line\"\n            tooltipPlacement=\"top\"\n            tabIndex={0}\n            getText={getText}\n          />\n        </div>\n      </div>\n      <>\n        {isInspecting && (\n          <Modal onDismiss={() => setIsInspecting(false)} isOpen={true} title=\"Inspect value\">\n            <pre>{lineValue}</pre>\n            <Modal.ButtonRow>\n              <ClipboardButton icon=\"copy\" getText={() => props.value as string}>\n                Copy to Clipboard\n              </ClipboardButton>\n            </Modal.ButtonRow>\n          </Modal>\n        )}\n      </>\n    </>\n  );\n}\n","import React, { ReactElement } from 'react';\nimport { Row } from 'react-table';\nimport { css } from '@emotion/css';\n\nimport { FieldType, formattedValueToString, GrafanaTheme2 } from '@grafana/data';\nimport { CustomCellRendererProps, DataLinksContextMenu, getCellLinks, useTheme2 } from '@grafana/ui';\n\nimport { useTableCellContext } from 'Components/Table/Context/TableCellContext';\nimport { useTableColumnContext } from 'Components/Table/Context/TableColumnsContext';\nimport { DefaultCellWrapComponent } from 'Components/Table/DefaultCellWrapComponent';\nimport { DefaultPill } from 'Components/Table/DefaultPill';\nimport { LineActionIcons } from 'Components/Table/LineActionIcons';\n\nconst getStyles = (theme: GrafanaTheme2, fieldType?: FieldType) => ({\n  flexWrap: css({\n    display: 'flex',\n    alignItems: 'flex-start',\n    flexDirection: fieldType === FieldType.number ? 'row-reverse' : 'row',\n    textAlign: fieldType === FieldType.number ? 'right' : 'left',\n  }),\n  content: css({\n    position: 'relative',\n    overflow: 'hidden',\n    display: 'flex',\n    height: '100%',\n  }),\n  linkWrapper: css({\n    color: theme.colors.text.link,\n    marginTop: '7px',\n    marginLeft: '7px',\n    '&:hover': {\n      textDecoration: 'underline',\n    },\n  }),\n});\n\ninterface DefaultCellComponentCustomProps {\n  fieldIndex: number;\n}\nexport const DefaultCellComponent = (props: CustomCellRendererProps & DefaultCellComponentCustomProps) => {\n  let value = props.value;\n  const field = props.field;\n  const displayValue = field.display!(value);\n  const theme = useTheme2();\n  const styles = getStyles(theme, props.field.type);\n  const { setVisible } = useTableColumnContext();\n  const { cellIndex, setActiveCellIndex } = useTableCellContext();\n\n  // We don't get back the full react.table row here, but the calling function only uses the index, which are in `CustomCellRendererProps`\n  const row = { index: props.rowIndex } as Row;\n  const hasLinks = Boolean(getCellLinks(props.field, row)?.length);\n\n  if (value === null) {\n    return <></>;\n  }\n\n  if (React.isValidElement(props.value)) {\n    value = props.value;\n  } else if (typeof value === 'object') {\n    value = JSON.stringify(props.value);\n  } else {\n    value = formattedValueToString(displayValue);\n  }\n\n  const renderValue = (value: string | unknown | ReactElement, label: string) => {\n    return (\n      <DefaultPill\n        field={props.field}\n        rowIndex={props.rowIndex}\n        showColumns={() => setVisible(true)}\n        label={label}\n        value={value}\n      />\n    );\n  };\n\n  return (\n    <DefaultCellWrapComponent\n      onClick={() => {\n        if (props.rowIndex === cellIndex.index && props.field.name === cellIndex.fieldName) {\n          return setActiveCellIndex({ index: null });\n        }\n        return setActiveCellIndex({ index: props.rowIndex, fieldName: props.field.name, numberOfMenuItems: 3 });\n      }}\n      field={props.field}\n      rowIndex={props.rowIndex}\n    >\n      <div className={styles.content}>\n        {props.fieldIndex === 0 && <LineActionIcons value={value} rowIndex={props.rowIndex} />}\n        <div className={styles.flexWrap}></div>\n\n        {!hasLinks && renderValue(value, field.name)}\n\n        {hasLinks && field.getLinks && (\n          <DataLinksContextMenu links={() => getCellLinks(field, row) ?? []}>\n            {(api) => {\n              if (api.openMenu) {\n                return (\n                  <div className={styles.linkWrapper} onClick={api.openMenu}>\n                    <>{value}</>\n                  </div>\n                );\n              } else {\n                return (\n                  <div className={styles.linkWrapper}>\n                    <>{value}</>\n                  </div>\n                );\n              }\n            }}\n          </DataLinksContextMenu>\n        )}\n      </div>\n    </DefaultCellWrapComponent>\n  );\n};\n","import React, { useMemo } from 'react';\nimport { Row } from 'react-table';\nimport { css, cx } from '@emotion/css';\n\nimport { DataFrame, Field, FieldType, getLinksSupplier, GrafanaTheme2, LinkModel } from '@grafana/data';\nimport { getCellLinks, useTheme2 } from '@grafana/ui';\n\nimport { useTableCellContext } from 'Components/Table/Context/TableCellContext';\nimport { CellContextMenu } from 'Components/Table/CellContextMenu';\nimport { getFieldMappings } from 'Components/Table/Table';\nimport { FieldNameMetaStore } from 'Components/Table/TableTypes';\nimport { useTableColumnContext } from 'Components/Table/Context/TableColumnsContext';\nimport { getTemplateSrv } from '@grafana/runtime';\nimport { LEVEL_NAME } from './constants';\n\ninterface LogLinePillProps {\n  originalField?: Field;\n  field?: Field;\n  columns: FieldNameMetaStore;\n  label: string;\n  showColumns: () => void;\n  rowIndex: number;\n  frame: DataFrame;\n  originalFrame: DataFrame | undefined;\n  isDerivedField: boolean;\n  value: string;\n}\n\nconst getStyles = (theme: GrafanaTheme2, levelColor?: string) => ({\n  pill: css({\n    flex: '0 1 auto',\n    marginLeft: theme.spacing(0.5),\n    marginRight: theme.spacing(0.5),\n    padding: `${theme.spacing(0.25)} ${theme.spacing(0.25)}`,\n    position: 'relative',\n    display: 'inline-flex',\n    flexDirection: 'column',\n    marginTop: theme.spacing(0.5),\n  }),\n  activePill: css({}),\n  valueWrap: css({\n    border: `1px solid ${theme.colors.background.secondary}`,\n    boxShadow: `-2px 2px 5px 0px ${theme.colors.background.secondary}`,\n    backgroundColor: 'transparent',\n    cursor: 'pointer',\n    position: 'relative',\n\n    paddingRight: `${theme.spacing(0.5)}`,\n    paddingLeft: levelColor ? `${theme.spacing(0.75)}` : `${theme.spacing(0.5)}`,\n\n    '&:before': {\n      content: '\"\"',\n      position: 'absolute',\n      left: 0,\n      top: 0,\n      height: '100%',\n      width: `${theme.spacing(0.25)}`,\n      backgroundColor: levelColor,\n    },\n\n    '&:hover': {\n      border: `1px solid ${theme.colors.border.strong}`,\n    },\n  }),\n});\n\nfunction LogLinePillValue(props: {\n  fieldType?: 'derived';\n  onClick: () => void;\n  label: string;\n  value: string;\n  menuActive: boolean;\n  onClickAdd: () => void;\n  links?: LinkModel[];\n}) {\n  const theme = useTheme2();\n\n  let levelColor;\n  if (props.label === LEVEL_NAME) {\n    const mappings = getFieldMappings().options;\n    if (props.value in mappings) {\n      levelColor = mappings[props.value].color;\n    }\n  }\n\n  const styles = getStyles(theme, levelColor);\n\n  return (\n    <span className={cx(styles.pill, props.menuActive ? styles.activePill : undefined)} onClick={props.onClick}>\n      <span className={styles.valueWrap}>\n        {props.label}={props.value}\n      </span>\n      {props.menuActive && (\n        <CellContextMenu\n          pillType={'logPill'}\n          fieldType={props.fieldType}\n          links={props.links}\n          label={props.label}\n          value={props.value}\n          showColumn={props.onClickAdd}\n        />\n      )}\n    </span>\n  );\n}\n\nexport const LogLinePill = (props: LogLinePillProps) => {\n  const { label } = props;\n  const { cellIndex, setActiveCellIndex } = useTableCellContext();\n  const { columns, setColumns } = useTableColumnContext();\n  const value = props.value;\n  const templateSrv = getTemplateSrv();\n  const replace = useMemo(() => templateSrv.replace.bind(templateSrv), [templateSrv]);\n\n  // Need untransformed frame for links?\n  const field = props.field;\n\n  if (!field || field?.type === FieldType.other) {\n    return null;\n  }\n  const row = { index: props.rowIndex } as Row;\n\n  if (props.originalField && props.isDerivedField && props.originalFrame) {\n    props.originalField.getLinks = getLinksSupplier(props.originalFrame, props.originalField, {}, replace);\n  }\n\n  const links = props.originalField && getCellLinks(props.originalField, row);\n\n  /**\n   * This Could be moved?\n   * Callback called by the pill context menu\n   * @param fieldName\n   */\n  const addFieldToColumns = (fieldName: string) => {\n    const pendingColumns = { ...columns };\n\n    const length = Object.keys(columns).filter((c) => columns[c].active).length;\n    if (pendingColumns[fieldName].active) {\n      pendingColumns[fieldName].active = false;\n      pendingColumns[fieldName].index = undefined;\n    } else {\n      pendingColumns[fieldName].active = true;\n      pendingColumns[fieldName].index = length;\n    }\n\n    setColumns(pendingColumns);\n  };\n\n  return (\n    <LogLinePillValue\n      onClick={() => {\n        if (\n          props.rowIndex === cellIndex.index &&\n          field.name === cellIndex.fieldName &&\n          label === cellIndex.subFieldName\n        ) {\n          return setActiveCellIndex({ index: null });\n        }\n\n        return setActiveCellIndex({\n          index: props.rowIndex,\n          fieldName: field.name,\n          subFieldName: label,\n          numberOfMenuItems: props.isDerivedField ? 2 : 3,\n        });\n      }}\n      menuActive={\n        cellIndex.index === props.rowIndex && cellIndex.fieldName === field.name && cellIndex.subFieldName === label\n      }\n      fieldType={props.isDerivedField ? 'derived' : undefined}\n      label={label}\n      value={value}\n      onClickAdd={() => addFieldToColumns(label)}\n      links={links}\n    />\n  );\n};\n","import { Icon, useTheme2 } from '@grafana/ui';\nimport React from 'react';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { css } from '@emotion/css';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  scroller: css`\n    position: absolute;\n    right: 0;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 40px;\n    height: 20px;\n    top: 32px;\n    margin-top: -24px;\n    // For some reason clicking on this button causes text to be selected in the following row\n    user-select: none;\n  `,\n  scrollLeft: css`\n    cursor: pointer;\n    background: ${theme.colors.background.primary};\n\n    &:hover {\n      background: ${theme.colors.background.secondary};\n    }\n  `,\n  scrollRight: css`\n    cursor: pointer;\n    background: ${theme.colors.background.primary};\n\n    &:hover {\n      background: ${theme.colors.background.secondary};\n    }\n  `,\n});\n\nconst stopScroll = (id: React.MutableRefObject<HTMLDivElement | null>) => {\n  id?.current?.scrollTo({\n    left: id.current?.scrollLeft,\n  });\n};\n\nconst goLeft = (id: React.MutableRefObject<HTMLDivElement | null>) => {\n  id?.current?.scrollTo({\n    top: 0,\n    left: 0,\n    behavior: 'smooth',\n  });\n};\n\nconst goRight = (id: React.MutableRefObject<HTMLDivElement | null>) => {\n  id?.current?.scrollTo({\n    top: 0,\n    left: id.current.scrollWidth,\n    behavior: 'smooth',\n  });\n};\n\nexport function Scroller({ scrollerRef: ref }: { scrollerRef: React.MutableRefObject<HTMLDivElement | null> }) {\n  const theme = useTheme2();\n  const styles = getStyles(theme);\n  return (\n    <div className={styles.scroller}>\n      <span onPointerDown={() => goLeft(ref)} onPointerUp={() => stopScroll(ref)} className={styles.scrollLeft}>\n        <Icon name={'arrow-left'} />\n      </span>\n      <span onPointerDown={() => goRight(ref)} onPointerUp={() => stopScroll(ref)} className={styles.scrollRight}>\n        <Icon name={'arrow-right'} />\n      </span>\n    </div>\n  );\n}\n","import React from 'react';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { css } from '@emotion/css';\nimport { useTheme2 } from '@grafana/ui';\nimport { testIds } from '../../services/testIds';\n\nexport function RawLogLineText(props: { value: unknown }) {\n  const theme = useTheme2();\n  const styles = getStyles(theme);\n  return (\n    <div data-testid={testIds.table.rawLogLine} className={styles.rawLogLine}>\n      <>{props.value}</>\n    </div>\n  );\n}\n\nexport const getStyles = (theme: GrafanaTheme2, bgColor?: string) => ({\n  rawLogLine: css({\n    fontFamily: theme.typography.fontFamilyMonospace,\n    height: '35px',\n    lineHeight: '35px',\n    paddingRight: theme.spacing(1.5),\n    paddingLeft: theme.spacing(1),\n    fontSize: theme.typography.bodySmall.fontSize,\n  }),\n});\n","import React, { useRef, useState } from 'react';\nimport { ScrollSyncPane } from 'react-scroll-sync';\n\nimport { FieldType, formattedValueToString, GrafanaTheme2, Labels } from '@grafana/data';\nimport { CustomCellRendererProps, useTheme2 } from '@grafana/ui';\n\nimport { useQueryContext } from 'Components/Table/Context/QueryContext';\nimport { LogLineState, useTableColumnContext } from 'Components/Table/Context/TableColumnsContext';\nimport { DefaultCellWrapComponent } from 'Components/Table/DefaultCellWrapComponent';\nimport { LogLinePill } from 'Components/Table/LogLinePill';\nimport { Scroller } from 'Components/Table/Scroller';\nimport { css } from '@emotion/css';\nimport { LineActionIcons } from 'Components/Table/LineActionIcons';\nimport { RawLogLineText } from 'Components/Table/RawLogLineText';\nimport { getBodyName } from '../../services/logsFrame';\nimport { LEVEL_NAME } from './constants';\n\nexport type SelectedTableRow = {\n  row: number;\n  id: string;\n};\n\ninterface Props extends CustomCellRendererProps {\n  labels: Labels;\n  fieldIndex: number;\n}\nexport const LogLineCellComponent = (props: Props) => {\n  let value = props.value;\n  const field = props.field;\n  const displayValue = field.display!(value);\n  const theme = useTheme2();\n  const styles = getStyles(theme);\n  const { columns, setVisible, bodyState } = useTableColumnContext();\n  const { logsFrame } = useQueryContext();\n  const [isHover, setIsHover] = useState(false);\n  const ref = useRef<HTMLDivElement | null>(null);\n\n  if (React.isValidElement(props.value)) {\n    value = props.value;\n  } else if (typeof value === 'object') {\n    value = JSON.stringify(props.value);\n  } else {\n    value = formattedValueToString(displayValue);\n  }\n\n  /**\n   * Render labels as log line pills\n   * @param labels Label[]\n   */\n  const renderLabels = (labels: Labels) => {\n    const columnLabelNames = Object.keys(columns);\n    const labelNames = columnLabelNames\n      .filter((name) => name !== getBodyName(logsFrame))\n      .sort((a, b) => {\n        // Sort level first\n        if (a === LEVEL_NAME) {\n          return -1;\n        }\n        if (b === LEVEL_NAME) {\n          return 1;\n        }\n        // Then sort links\n        if (columns[a].type === 'LINK_FIELD') {\n          return -1;\n        }\n        if (columns[b].type === 'LINK_FIELD') {\n          return 1;\n        }\n\n        // Finally sort fields by cardinality descending\n        return columns[a].cardinality > columns[b].cardinality ? -1 : 1;\n      });\n\n    const filteredLabels = labelNames.filter(\n      (label) =>\n        // Not already visible in another column\n        !columns[label].active &&\n        // And the cardinality is greater than 1\n        columns[label].cardinality > 1\n    );\n\n    return filteredLabels\n      .map((label) => {\n        const labelValue = labels[label];\n        const untransformedField = logsFrame?.raw?.fields.find((field) => field.name === label);\n        const rawValue = field?.values[props.rowIndex];\n        const isDerived = !labelValue && !!rawValue;\n\n        // If we have a label value, the field is not derived\n        if (labelValue) {\n          return (\n            <LogLinePill\n              originalFrame={undefined}\n              field={field}\n              columns={columns}\n              rowIndex={props.rowIndex}\n              frame={props.frame}\n              showColumns={() => setVisible(true)}\n              key={label}\n              label={label}\n              isDerivedField={false}\n              value={labelValue}\n            />\n          );\n        }\n\n        // Otherwise, the field might be derived\n        if (isDerived && untransformedField?.name) {\n          const untransformedValue = untransformedField?.values[props.rowIndex];\n          if (untransformedField?.type === FieldType.string && untransformedValue) {\n            return (\n              <LogLinePill\n                originalFrame={logsFrame?.raw}\n                originalField={untransformedField}\n                field={field}\n                value={untransformedValue}\n                columns={columns}\n                rowIndex={props.rowIndex}\n                frame={props.frame}\n                showColumns={() => setVisible(true)}\n                key={untransformedField.name}\n                label={untransformedField.name}\n                isDerivedField={true}\n              />\n            );\n          }\n        }\n\n        return null;\n      })\n      .filter((v) => v);\n  };\n\n  const labels = renderLabels(props.labels);\n  const isAuto = bodyState === LogLineState.auto;\n  const hasLabels = labels.length > 0;\n\n  return (\n    <DefaultCellWrapComponent\n      onMouseIn={() => {\n        setIsHover(true);\n      }}\n      onMouseOut={() => {\n        setIsHover(false);\n      }}\n      rowIndex={props.rowIndex}\n      field={props.field}\n    >\n      <ScrollSyncPane innerRef={ref} group=\"horizontal\">\n        <div className={styles.content}>\n          {/* First Field gets the icons */}\n          {props.fieldIndex === 0 && <LineActionIcons rowIndex={props.rowIndex} value={value} />}\n          {/* Labels */}\n          {isAuto && hasLabels && <>{labels}</>}\n          {bodyState === LogLineState.labels && hasLabels && <>{labels}</>}\n          {bodyState === LogLineState.labels && !hasLabels && <RawLogLineText value={value} />}\n\n          {/* Raw log line*/}\n          {isAuto && !hasLabels && <RawLogLineText value={value} />}\n          {bodyState === LogLineState.text && <RawLogLineText value={value} />}\n\n          {isHover && <Scroller scrollerRef={ref} />}\n        </div>\n      </ScrollSyncPane>\n    </DefaultCellWrapComponent>\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  content: css`\n    white-space: nowrap;\n    overflow-x: auto;\n    -ms-overflow-style: none; /* IE and Edge */\n    scrollbar-width: none; /* Firefox */\n    padding-right: 30px;\n    display: flex;\n    align-items: flex-start;\n    height: 100%;\n    &::-webkit-scrollbar {\n      display: none; /* Chrome, Safari and Opera */\n    }\n\n    &:after {\n      pointer-events: none;\n      content: '';\n      width: 100%;\n      height: 100%;\n      position: absolute;\n      left: 0;\n      top: 0;\n      // Fade out text in last 10px to background color to add affordance to horiziontal scroll\n      background: linear-gradient(to right, transparent calc(100% - 10px), ${theme.colors.background.primary});\n    }\n  `,\n});\n","import React, { PropsWithChildren, useRef } from 'react';\nimport { css } from '@emotion/css';\n\nimport { Field, GrafanaTheme2 } from '@grafana/data';\nimport { ClickOutsideWrapper, Icon, Popover, useTheme2 } from '@grafana/ui';\n\nimport { useTableHeaderContext } from 'Components/Table/Context/TableHeaderContext';\nimport { useQueryContext } from './Context/QueryContext';\nimport { getBodyName } from '../../services/logsFrame';\n\nexport interface LogsTableHeaderProps extends PropsWithChildren<CustomHeaderRendererProps> {\n  fieldIndex: number;\n}\n//@todo delete when released in Grafana core\nexport interface CustomHeaderRendererProps {\n  field: Field;\n  defaultContent: React.ReactNode;\n}\n\nconst getStyles = (theme: GrafanaTheme2, isFirstColumn: boolean, isLine: boolean) => ({\n  tableHeaderMenu: css({\n    label: 'tableHeaderMenu',\n    width: '100%',\n    minWidth: '250px',\n    height: '100%',\n    maxHeight: '400px',\n    backgroundColor: theme.colors.background.primary,\n    border: `1px solid ${theme.colors.border.weak}`,\n    padding: theme.spacing(2),\n    margin: theme.spacing(1, 0),\n    boxShadow: theme.shadows.z3,\n    borderRadius: theme.shape.radius.default,\n  }),\n  button: css({\n    appearance: 'none',\n    right: '5px',\n    background: 'none',\n    border: 'none',\n    padding: 0,\n  }),\n  wrapper: css({\n    display: 'flex',\n    marginLeft: isFirstColumn ? '56px' : '6px',\n    // Body has extra padding then other columns\n    width: isLine ? 'calc(100% + 6px)' : '100%',\n\n    // Hack to show a visible resize indicator, despite 6px of padding on the header in grafana/table\n    borderRight: `1px solid ${theme.colors.border.weak}`,\n    marginRight: '-6px',\n  }),\n  defaultContentWrapper: css({\n    borderLeft: isFirstColumn ? `1px solid ${theme.colors.border.weak}` : 'none',\n    marginLeft: isFirstColumn ? '-6px' : 0,\n    paddingLeft: isFirstColumn ? '12px' : 0,\n    display: 'flex',\n  }),\n});\n\nexport const LogsTableHeader = (props: LogsTableHeaderProps) => {\n  const { setHeaderMenuActive, isHeaderMenuActive } = useTableHeaderContext();\n  const { logsFrame } = useQueryContext();\n  const referenceElement = useRef<HTMLButtonElement | null>(null);\n  const theme = useTheme2();\n  const styles = getStyles(theme, props.fieldIndex === 0, props.field.name === getBodyName(logsFrame));\n\n  return (\n    <span className={styles.wrapper}>\n      <span className={styles.defaultContentWrapper}>{props.defaultContent}</span>\n      <button\n        className={styles.button}\n        ref={referenceElement}\n        onClick={(e) => {\n          setHeaderMenuActive(!isHeaderMenuActive);\n        }}\n      >\n        <Icon title={'Show menu'} name={'ellipsis-v'} />\n      </button>\n      {referenceElement.current && (\n        //@ts-ignore\n        <Popover\n          show={isHeaderMenuActive}\n          content={\n            <ClickOutsideWrapper onClick={() => setHeaderMenuActive(false)} useCapture={true}>\n              <div className={styles.tableHeaderMenu}>{props.children}</div>\n            </ClickOutsideWrapper>\n          }\n          referenceElement={referenceElement.current}\n        />\n      )}\n    </span>\n  );\n};\n","import { LogsTableHeader, LogsTableHeaderProps } from 'Components/Table/LogsTableHeader';\nimport { FieldNameMetaStore } from 'Components/Table/TableTypes';\nimport { useTableHeaderContext } from 'Components/Table/Context/TableHeaderContext';\nimport { LogLineState, useTableColumnContext } from 'Components/Table/Context/TableColumnsContext';\nimport { Icon } from '@grafana/ui';\nimport React, { useCallback } from 'react';\nimport { Field } from '@grafana/data';\nimport { getBodyName } from '../../services/logsFrame';\nimport { css, cx } from '@emotion/css';\nimport { useQueryContext } from './Context/QueryContext';\n\nexport function LogsTableHeaderWrap(props: {\n  headerProps: LogsTableHeaderProps;\n  openColumnManagementDrawer: () => void;\n\n  // Moves the current column forward or backward one index\n  slideLeft?: (cols: FieldNameMetaStore) => void;\n  slideRight?: (cols: FieldNameMetaStore) => void;\n\n  autoColumnWidths?: () => void;\n}) {\n  const { setHeaderMenuActive } = useTableHeaderContext();\n  const { columns, setColumns, bodyState, setBodyState } = useTableColumnContext();\n  const { logsFrame } = useQueryContext();\n  const styles = getStyles();\n\n  const hideColumn = useCallback(\n    (field: Field) => {\n      const pendingColumnState = { ...columns };\n\n      const columnsThatNeedIndexUpdate = Object.keys(pendingColumnState)\n        .filter((col) => {\n          const columnIndex = pendingColumnState[col].index;\n          const fieldIndex = pendingColumnState[field.name].index;\n          return pendingColumnState[col].active && fieldIndex && columnIndex && columnIndex > fieldIndex;\n        })\n        .map((cols) => pendingColumnState[cols]);\n\n      columnsThatNeedIndexUpdate.forEach((col) => {\n        if (col.index !== undefined) {\n          col.index--;\n        }\n      });\n\n      pendingColumnState[field.name].active = false;\n      pendingColumnState[field.name].index = undefined;\n      setColumns(pendingColumnState);\n    },\n    [columns, setColumns]\n  );\n\n  const isBodyField = props.headerProps.field.name === getBodyName(logsFrame);\n\n  return (\n    <LogsTableHeader {...props.headerProps}>\n      <div className={styles.linkWrap}>\n        <a\n          className={styles.link}\n          onClick={() => {\n            props.openColumnManagementDrawer();\n            setHeaderMenuActive(false);\n          }}\n        >\n          <Icon className={styles.icon} name={'columns'} size={'md'} />\n          Manage columns\n        </a>\n      </div>\n      <div className={styles.linkWrap}>\n        <a className={styles.link} onClick={() => hideColumn(props.headerProps.field)}>\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 17 16\"\n            width=\"17\"\n            height=\"16\"\n            className=\"css-q2u0ig-Icon\"\n          >\n            <path\n              fillRule=\"evenodd\"\n              clipRule=\"evenodd\"\n              d=\"M1.73446 1.33301H12.2345C12.3892 1.33301 12.5375 1.40325 12.6469 1.52827C12.7563 1.65329 12.8178 1.82286 12.8178 1.99967V4.74967C12.8178 5.07184 12.5566 5.33301 12.2345 5.33301C11.9123 5.33301 11.6511 5.07184 11.6511 4.74967V2.66634H7.56779V13.333H11.6511V10.9163C11.6511 10.5942 11.9123 10.333 12.2345 10.333C12.5566 10.333 12.8178 10.5942 12.8178 10.9163V13.9997C12.8178 14.1765 12.7563 14.3461 12.6469 14.4711C12.5375 14.5961 12.3892 14.6663 12.2345 14.6663H1.73446C1.57975 14.6663 1.43137 14.5961 1.32198 14.4711C1.21258 14.3461 1.15112 14.1765 1.15112 13.9997V1.99967C1.15112 1.82286 1.21258 1.65329 1.32198 1.52827C1.43137 1.40325 1.57975 1.33301 1.73446 1.33301ZM2.31779 13.333H6.40112V2.66634H2.31779V13.333Z\"\n              fill=\"#CCCCDC\"\n              fillOpacity=\"1\"\n            />\n            <path\n              d=\"M15.9893 10.6315C15.9498 10.7263 15.8919 10.8123 15.819 10.8846C15.7467 10.9575 15.6607 11.0154 15.5659 11.0549C15.4712 11.0943 15.3695 11.1147 15.2668 11.1147C15.1641 11.1147 15.0625 11.0943 14.9677 11.0549C14.8729 11.0154 14.7869 10.9575 14.7146 10.8846L12.9335 9.09573L11.1524 10.8846C11.0801 10.9575 10.9941 11.0154 10.8993 11.0549C10.8045 11.0943 10.7028 11.1147 10.6002 11.1147C10.4975 11.1147 10.3958 11.0943 10.301 11.0549C10.2063 11.0154 10.1202 10.9575 10.0479 10.8846C9.97504 10.8123 9.91717 10.7263 9.87769 10.6315C9.8382 10.5367 9.81787 10.4351 9.81787 10.3324C9.81787 10.2297 9.8382 10.1281 9.87769 10.0333C9.91717 9.9385 9.97504 9.85248 10.0479 9.78017L11.8368 7.99906L10.0479 6.21795C9.90148 6.07149 9.8192 5.87285 9.8192 5.66573C9.8192 5.4586 9.90148 5.25996 10.0479 5.1135C10.1944 4.96705 10.393 4.88477 10.6002 4.88477C10.8073 4.88477 11.0059 4.96705 11.1524 5.1135L12.9335 6.90239L14.7146 5.1135C14.8611 4.96705 15.0597 4.88477 15.2668 4.88477C15.4739 4.88477 15.6726 4.96705 15.819 5.1135C15.9655 5.25996 16.0478 5.4586 16.0478 5.66573C16.0478 5.87285 15.9655 6.07149 15.819 6.21795L14.0302 7.99906L15.819 9.78017C15.8919 9.85248 15.9498 9.9385 15.9893 10.0333C16.0288 10.1281 16.0491 10.2297 16.0491 10.3324C16.0491 10.4351 16.0288 10.5367 15.9893 10.6315Z\"\n              fill=\"#CCCCDC\"\n              fillOpacity=\"1\"\n            />\n          </svg>\n          Remove column\n        </a>\n      </div>\n      {props.slideLeft && (\n        <div className={styles.linkWrap}>\n          <a className={styles.link} onClick={() => props.slideLeft?.(columns)}>\n            <Icon className={cx(styles.icon, styles.reverse)} name={'arrow-from-right'} size={'md'} />\n            Move left\n          </a>\n        </div>\n      )}\n      {props.slideRight && (\n        <div className={styles.linkWrap}>\n          <a className={styles.link} onClick={() => props.slideRight?.(columns)}>\n            <Icon className={styles.icon} name={'arrow-from-right'} size={'md'} />\n            Move right\n          </a>\n        </div>\n      )}\n      {isBodyField && (\n        <div className={styles.linkWrap}>\n          <a\n            className={styles.link}\n            onClick={() => {\n              if (bodyState === LogLineState.text) {\n                setBodyState(LogLineState.labels);\n              } else {\n                setBodyState(LogLineState.text);\n              }\n            }}\n          >\n            {bodyState === LogLineState.text ? (\n              <Icon className={styles.icon} name={'brackets-curly'} size={'md'} />\n            ) : (\n              <Icon className={styles.icon} name={'text-fields'} size={'md'} />\n            )}\n\n            {bodyState === LogLineState.text ? 'Show labels' : 'Show log text'}\n          </a>\n        </div>\n      )}\n\n      {props.autoColumnWidths && (\n        <div className={styles.linkWrap}>\n          <a className={styles.link} onClick={() => props.autoColumnWidths?.()}>\n            <Icon className={styles.icon} name={'arrows-h'} size={'md'} />\n            Reset column widths\n          </a>\n        </div>\n      )}\n    </LogsTableHeader>\n  );\n}\n\nconst getStyles = () => {\n  return {\n    reverse: css({\n      transform: 'scaleX(-1)',\n    }),\n    link: css({\n      paddingTop: '5px',\n      paddingBottom: '5px',\n    }),\n    icon: css({\n      marginRight: '10px',\n    }),\n    linkWrap: css({}),\n  };\n};\n","import React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { ScrollSync } from 'react-scroll-sync';\nimport { css } from '@emotion/css';\nimport { lastValueFrom } from 'rxjs';\n\nimport {\n  applyFieldOverrides,\n  CustomTransformOperator,\n  DataFrame,\n  DataFrameType,\n  DataTransformerConfig,\n  Field,\n  FieldType,\n  FieldWithIndex,\n  Labels,\n  MappingType,\n  transformDataFrame,\n  ValueMap,\n} from '@grafana/data';\nimport { getTemplateSrv } from '@grafana/runtime';\nimport { TableCellHeight, TableColoredBackgroundCellOptions } from '@grafana/schema';\nimport { Drawer, Table as GrafanaTable, TableCellDisplayMode, TableCustomCellOptions, useTheme2 } from '@grafana/ui';\n\nimport { TableCellContextProvider } from 'Components/Table/Context/TableCellContext';\nimport { useTableColumnContext } from 'Components/Table/Context/TableColumnsContext';\nimport { TableHeaderContextProvider } from 'Components/Table/Context/TableHeaderContext';\nimport {\n  ColumnSelectionDrawerWrap,\n  getReorderColumn,\n} from 'Components/Table/ColumnSelection/ColumnSelectionDrawerWrap';\nimport { DefaultCellComponent } from 'Components/Table/DefaultCellComponent';\nimport { LogLineCellComponent } from 'Components/Table/LogLineCellComponent';\nimport { CustomHeaderRendererProps } from 'Components/Table/LogsTableHeader';\nimport { FieldName, FieldNameMeta, FieldNameMetaStore } from 'Components/Table/TableTypes';\nimport { guessLogsFieldTypeForValue } from 'Components/Table/TableWrap';\nimport { LogsTableHeaderWrap } from 'Components/Table/LogsTableHeaderWrap';\nimport { getBodyName, getIdName, getTimeName, LogsFrame } from '../../services/logsFrame';\nimport { useQueryContext } from './Context/QueryContext';\nimport { testIds } from '../../services/testIds';\nimport { debounce } from 'lodash';\n\ninterface Props {\n  height: number;\n  timeZone: string;\n  logsFrame: LogsFrame;\n  width: number;\n  labels: Labels[];\n}\n\nconst getStyles = () => ({\n  section: css({\n    position: 'relative',\n  }),\n  tableWrap: css({\n    '.cellActions': {\n      // Hacky but without inspect turned on the table will change the width of the row on hover, but we don't want the default icons to show\n      display: 'none !important',\n    },\n  }),\n});\n\nfunction TableAndContext(props: {\n  data: DataFrame;\n  height: number;\n  width: number;\n  selectedLine?: number;\n  logsFrame: LogsFrame;\n  onResize: (fieldDisplayName: string, width: number) => void;\n}) {\n  return (\n    <GrafanaTable\n      onColumnResize={props.onResize}\n      initialSortBy={[{ displayName: getTimeName(props.logsFrame), desc: true }]}\n      initialRowIndex={props.selectedLine}\n      cellHeight={TableCellHeight.Sm}\n      data={props.data}\n      height={props.height}\n      width={props.width}\n      footerOptions={{ show: true, reducer: ['count'], countRows: true }}\n    />\n  );\n}\n\nexport const Table = (props: Props) => {\n  const { height, timeZone, logsFrame, width, labels } = props;\n  const theme = useTheme2();\n  const styles = getStyles();\n\n  const [tableFrame, setTableFrame] = useState<DataFrame | undefined>(undefined);\n  const {\n    columns,\n    visible,\n    setVisible,\n    setFilteredColumns,\n    setColumns,\n    clearSelectedLine,\n    columnWidthMap,\n    setColumnWidthMap,\n  } = useTableColumnContext();\n\n  const { selectedLine } = useQueryContext();\n\n  // Create a local state for selected line so we can clear the state tied to the URL\n  const [localSelectedLine] = useState(selectedLine);\n\n  const reorderColumn = getReorderColumn(setColumns);\n\n  const templateSrv = getTemplateSrv();\n  const replace = useMemo(() => templateSrv.replace.bind(templateSrv), [templateSrv]);\n\n  const prepareTableFrame = useCallback(\n    (frame: DataFrame): DataFrame => {\n      if (!frame.length) {\n        return frame;\n      }\n\n      const [frameWithOverrides] = applyFieldOverrides({\n        data: [frame],\n        timeZone: timeZone,\n        theme: theme,\n        replaceVariables: replace,\n        fieldConfig: {\n          defaults: {\n            custom: {},\n          },\n          overrides: [],\n        },\n      });\n\n      // `getLinks` and `applyFieldOverrides` are taken from TableContainer.tsx\n      for (const [index, field] of frameWithOverrides.fields.entries()) {\n        // If it's a string, then try to guess for a better type for numeric support in viz\n        field.type =\n          field.type === FieldType.string ? guessLogsFieldTypeForField(field) ?? FieldType.string : field.type;\n\n        field.config = {\n          ...field.config,\n\n          custom: {\n            inspect: true,\n            filterable: true, // This sets the columns to be filterable\n            headerComponent: (props: CustomHeaderRendererProps) => (\n              <TableHeaderContextProvider>\n                <LogsTableHeaderWrap\n                  headerProps={{ ...props, fieldIndex: index }}\n                  openColumnManagementDrawer={() => setVisible(true)}\n                  slideLeft={\n                    index !== 0 ? (cols: FieldNameMetaStore) => reorderColumn(cols, index, index - 1) : undefined\n                  }\n                  slideRight={\n                    index !== frame.fields.length - 1\n                      ? (cols: FieldNameMetaStore) => reorderColumn(cols, index, index + 1)\n                      : undefined\n                  }\n                  autoColumnWidths={\n                    Object.keys(columnWidthMap).length > 0\n                      ? () => {\n                          setColumnWidthMap({});\n                        }\n                      : undefined\n                  }\n                />\n              </TableHeaderContextProvider>\n            ),\n            width:\n              columnWidthMap[field.name] ??\n              getInitialFieldWidth(field, index, columns, width, frameWithOverrides.fields.length, logsFrame),\n            cellOptions: getTableCellOptions(field, index, labels, logsFrame),\n            ...field.config.custom,\n          },\n          // This sets the individual field value as filterable\n          // filterable: isFieldFilterable(field, logsFrame?.bodyField.name ?? '', logsFrame?.timeField.name ?? ''),\n          filterable: true,\n        };\n      }\n\n      return frameWithOverrides;\n    },\n    // This function is building the table dataframe that will be transformed, even though the components within the dataframe (cells, headers) can mutate the dataframe!\n    // If we try to update the dataframe whenever the columns are changed (which are rebuilt using this dataframe after being transformed), react will infinitely update frame -> columns -> frame -> ...\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [timeZone, theme, labels, width, replace, setVisible, columnWidthMap]\n  );\n\n  // prepare dataFrame\n  useEffect(() => {\n    const prepare = async () => {\n      const transformations: Array<DataTransformerConfig | CustomTransformOperator> = getExtractFieldsTransform(\n        logsFrame.raw\n      );\n\n      let labelFilters = buildColumnsWithMeta(columns);\n\n      const labelFiltersTransform = getOrganizeFieldsTransform(labelFilters);\n      if (labelFiltersTransform) {\n        transformations.push(labelFiltersTransform);\n      } else {\n        const specialFields = {\n          time: logsFrame.timeField,\n          body: logsFrame.bodyField,\n          extraFields: logsFrame.extraFields,\n        };\n        if (specialFields && specialFields.body !== undefined && specialFields.time !== undefined) {\n          transformations.push(\n            getDefaultStateOrganizeFieldsTransform(\n              specialFields as {\n                time: FieldWithIndex;\n                body: FieldWithIndex;\n              }\n            )\n          );\n        }\n      }\n\n      if (transformations.length > 0) {\n        const transformedDataFrame: DataFrame[] = await lastValueFrom(\n          // @ts-ignore\n          transformDataFrame(transformations, [logsFrame.raw])\n        );\n        const tableFrame = prepareTableFrame(transformedDataFrame[0]);\n        setTableFrame(tableFrame);\n      } else {\n        setTableFrame(prepareTableFrame(logsFrame.raw));\n      }\n    };\n    prepare();\n  }, [logsFrame.raw, logsFrame.bodyField, logsFrame.timeField, logsFrame.extraFields, prepareTableFrame, columns]);\n\n  // Clear selected line from URL so it doesn't pollute future queries\n  useEffect(() => {\n    if (localSelectedLine && selectedLine) {\n      clearSelectedLine();\n      return;\n    }\n  }, [localSelectedLine, clearSelectedLine, selectedLine]);\n\n  const idField = logsFrame.raw.fields.find((field) => field.name === getIdName(logsFrame));\n  const lineIndex = idField?.values.findIndex((v) => v === localSelectedLine?.id);\n  const cleanLineIndex = lineIndex && lineIndex !== -1 ? lineIndex : undefined;\n\n  if (!tableFrame) {\n    return <></>;\n  }\n\n  const onResize = (fieldDisplayName: string, width: number) => {\n    const key = Object.keys(columns)\n      .filter((key) => columns[key].active)\n      .find((key) => key === fieldDisplayName);\n\n    if (key && width > 0) {\n      const map = { ...columnWidthMap };\n      map[key] = width;\n      setColumnWidthMap(map);\n    }\n  };\n\n  return (\n    <div data-testid={testIds.table.wrapper} className={styles.section}>\n      {visible && (\n        <Drawer\n          size={'sm'}\n          onClose={() => {\n            setVisible(false);\n            setFilteredColumns(columns);\n          }}\n        >\n          <ColumnSelectionDrawerWrap />\n        </Drawer>\n      )}\n\n      <div className={styles.tableWrap}>\n        <TableCellContextProvider>\n          <ScrollSync horizontal={true} vertical={false} proportional={false}>\n            <TableAndContext\n              logsFrame={logsFrame}\n              selectedLine={cleanLineIndex}\n              data={tableFrame}\n              height={height}\n              width={width}\n              onResize={debounce(onResize, 100)}\n            />\n          </ScrollSync>\n        </TableCellContextProvider>\n      </div>\n    </div>\n  );\n};\n\nfunction getDefaultStateOrganizeFieldsTransform(specialFields: { time: FieldWithIndex; body: FieldWithIndex }) {\n  return {\n    id: 'organize',\n    options: {\n      indexByName: {\n        [specialFields.time.name]: 0,\n        [specialFields.body.name]: 1,\n      },\n      includeByName: {\n        [specialFields.body.name]: true,\n        [specialFields.time.name]: true,\n      },\n    },\n  };\n}\n\nfunction guessLogsFieldTypeForField(field: Field): FieldType | undefined {\n  // 1. Use the column name to guess\n  if (field.name) {\n    const name = field.name.toLowerCase();\n    if (name === 'date' || name === 'time') {\n      return FieldType.time;\n    }\n  }\n\n  // 2. Check the first non-null value\n  for (let i = 0; i < field.values.length; i++) {\n    const v = field.values[i];\n    if (v != null) {\n      return guessLogsFieldTypeForValue(v);\n    }\n  }\n\n  // Could not find anything\n  return undefined;\n}\n\nexport const getFieldMappings = (): ValueMap => {\n  return {\n    options: {\n      critical: {\n        color: '#705da0',\n        index: 0,\n      },\n      crit: {\n        color: '#705da0',\n        index: 1,\n      },\n      error: {\n        color: '#e24d42',\n        index: 2,\n      },\n      err: {\n        color: '#e24d42',\n        index: 3,\n      },\n      eror: {\n        color: '#e24d42',\n        index: 4,\n      },\n      warning: {\n        color: '#FF9900',\n        index: 5,\n      },\n      warn: {\n        color: '#FF9900',\n        index: 6,\n      },\n      info: {\n        color: '#7eb26d',\n        index: 7,\n      },\n      debug: {\n        color: '#1f78c1',\n        index: 8,\n      },\n      trace: {\n        color: '#6ed0e0',\n        index: 9,\n      },\n    },\n    type: MappingType.ValueToText,\n  };\n};\n\nfunction buildColumnsWithMeta(columnsWithMeta: Record<FieldName, FieldNameMeta>) {\n  // Create object of label filters to include columns selected by the user\n  let labelFilters: Record<FieldName, number> = {};\n  Object.keys(columnsWithMeta)\n    .filter((key) => columnsWithMeta[key].active)\n    .forEach((key) => {\n      const index = columnsWithMeta[key].index;\n      // Index should always be defined for any active column\n      if (index !== undefined) {\n        labelFilters[key] = index;\n      }\n    });\n\n  return labelFilters;\n}\n\nfunction getOrganizeFieldsTransform(labelFilters: Record<FieldName, number>) {\n  let labelFiltersInclude: Record<FieldName, boolean> = {};\n\n  for (const key in labelFilters) {\n    labelFiltersInclude[key] = true;\n  }\n\n  if (Object.keys(labelFilters).length > 0) {\n    return {\n      id: 'organize',\n      options: {\n        indexByName: labelFilters,\n        includeByName: labelFiltersInclude,\n      },\n    };\n  }\n  return null;\n}\n\nexport function getExtractFieldsTransform(dataFrame: DataFrame) {\n  return dataFrame.fields\n    .filter((field: Field & { typeInfo?: { frame: string } }) => {\n      const isFieldLokiLabels =\n        field.typeInfo?.frame === 'json.RawMessage' &&\n        field.name === 'labels' &&\n        dataFrame?.meta?.type !== DataFrameType.LogLines;\n      const isFieldDataplaneLabels =\n        field.name === 'labels' && field.type === FieldType.other && dataFrame?.meta?.type === DataFrameType.LogLines;\n      return isFieldLokiLabels || isFieldDataplaneLabels;\n    })\n    .flatMap((field: Field) => {\n      return [\n        {\n          id: 'extractFields',\n          options: {\n            format: 'json',\n            keepTime: false,\n            replace: false,\n            source: field.name,\n          },\n        },\n      ];\n    });\n}\n\nfunction getTableCellOptions(\n  field: Field,\n  fieldIndex: number,\n  labels: Labels[],\n  logsFrame: LogsFrame\n): TableCustomCellOptions | TableColoredBackgroundCellOptions {\n  if (field.name === getBodyName(logsFrame)) {\n    return {\n      cellComponent: (props) => (\n        <LogLineCellComponent {...props} fieldIndex={fieldIndex} labels={labels[props.rowIndex]} />\n      ),\n      type: TableCellDisplayMode.Custom,\n    };\n  }\n\n  return {\n    cellComponent: (props) => <DefaultCellComponent {...props} fieldIndex={fieldIndex} />,\n    type: TableCellDisplayMode.Custom,\n  };\n}\n\nfunction getInitialFieldWidth(\n  field: Field,\n  fieldIndex: number,\n  columns: FieldNameMetaStore,\n  tableWidth: number,\n  numberOfFields: number,\n  logsFrame: LogsFrame\n): number | undefined {\n  const minWidth = 90;\n\n  // Columns shouldn't take more than half the available space, unless there are only 2 columns\n  const maxWidth = numberOfFields <= 2 ? tableWidth : Math.min(tableWidth / 2);\n\n  // First field gets icons, and a little extra width\n  const extraPadding = fieldIndex === 0 ? 50 : 0;\n\n  // Time fields have consistent widths\n  if (field.type === FieldType.time) {\n    return 200 + extraPadding;\n  }\n\n  const columnMeta = columns[field.name];\n\n  if (columnMeta === undefined) {\n    return undefined;\n  }\n\n  const maxLength = Math.max(columnMeta.maxLength ?? 0, field.name.length);\n\n  if (columnMeta.maxLength) {\n    // Super rough estimate, about 6.5px per char, and 95px for some space for the header icons (remember when sorted a new icon is added to the table header).\n    // I guess to be a little tighter we could only add the extra padding IF the field name is longer then the longest value\n    return Math.min(Math.max(maxLength * 6.5 + 95 + extraPadding, minWidth + extraPadding), maxWidth);\n  }\n\n  if (field.name === getBodyName(logsFrame)) {\n    return undefined;\n  }\n\n  // Just derived fields, which should have uniform length\n  return Math.min(\n    Math.max((field.values?.[0]?.length ?? 80) * 6.5 + 95 + extraPadding, minWidth + extraPadding),\n    maxWidth\n  );\n}\n","import React, { useCallback, useState } from 'react';\nimport { css } from '@emotion/css';\n\nimport { DataFrame, FieldType, FieldWithIndex, getTimeZone, guessFieldTypeFromValue, Labels } from '@grafana/data';\n\nimport { LogLineState, TableColumnContextProvider } from 'Components/Table/Context/TableColumnsContext';\nimport { Table } from 'Components/Table/Table';\nimport { FieldNameMeta, FieldNameMetaStore } from 'Components/Table/TableTypes';\nimport { useQueryContext } from 'Components/Table/Context/QueryContext';\nimport { useResizeObserver } from '@react-aria/utils';\n\nexport type SpecialFieldsType = {\n  time: FieldWithIndex;\n  body: FieldWithIndex;\n  extraFields: FieldWithIndex[];\n};\n\n// matches common ISO 8601\nconst iso8601Regex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d{3,})?(?:Z|[-+]\\d{2}:?\\d{2})$/;\n\ninterface TableWrapProps {\n  urlColumns: string[];\n  urlTableBodyState?: LogLineState;\n  setUrlColumns: (columns: string[]) => void;\n  panelWrap: React.RefObject<HTMLDivElement | null>;\n  clearSelectedLine: () => void;\n  setUrlTableBodyState: (logLineState: LogLineState) => void;\n}\n\nconst getStyles = () => ({\n  section: css({\n    position: 'relative',\n  }),\n});\n\nexport const TableWrap = (props: TableWrapProps) => {\n  const { logsFrame } = useQueryContext();\n\n  const [panelWrapSize, setPanelWrapSize] = useState({ width: 0, height: 0 });\n\n  // Table needs to be positioned absolutely, passing in reference wrapping panelChrome from parent\n  useResizeObserver({\n    ref: props.panelWrap,\n    onResize: () => {\n      const element = props.panelWrap.current;\n      if (element) {\n        if (panelWrapSize.width !== element.clientWidth || panelWrapSize.height !== element.clientHeight) {\n          setPanelWrapSize({\n            width: element.clientWidth,\n            height: element.clientHeight,\n          });\n        }\n      }\n    },\n  });\n\n  const styles = getStyles();\n  const timeZone = getTimeZone();\n\n  // This function is called when we want to grab the column names that are currently stored in the URL.\n  // So instead we have to grab the current columns directly from the URL.\n  const getColumnsFromProps = useCallback(\n    (fieldNames: FieldNameMetaStore) => {\n      const previouslySelected = props.urlColumns;\n      if (previouslySelected?.length) {\n        Object.values(previouslySelected).forEach((key, index) => {\n          if (fieldNames[key]) {\n            fieldNames[key].active = true;\n            fieldNames[key].index = index;\n          }\n        });\n      }\n\n      return fieldNames;\n    },\n    [props.urlColumns]\n  );\n\n  // If the data frame is empty, there's nothing to viz, it could mean the user has unselected all columns\n  if (!logsFrame || !logsFrame.raw.length) {\n    return null;\n  }\n\n  const labels = logsFrame.getLogFrameLabelsAsLabels() ?? [];\n  const numberOfLogLines = logsFrame ? logsFrame.raw.length : 0;\n\n  // If we have labels and log lines\n  let pendingLabelState = mapLabelsToInitialState(logsFrame.raw, labels);\n  const specialFields = {\n    time: logsFrame.timeField,\n    body: logsFrame.bodyField,\n    extraFields: logsFrame.extraFields,\n  };\n\n  // Normalize the other fields\n  if (specialFields) {\n    addSpecialLabelsState(\n      [specialFields.time, specialFields.body, ...specialFields.extraFields],\n      pendingLabelState,\n      numberOfLogLines\n    );\n\n    pendingLabelState = getColumnsFromProps(pendingLabelState);\n\n    // Get all active columns\n    const active = Object.keys(pendingLabelState).filter((key) => pendingLabelState[key].active);\n\n    // If nothing is selected, then select the default columns\n    setSpecialFieldMeta(active, specialFields, pendingLabelState);\n  }\n\n  return (\n    <section className={styles.section}>\n      <TableColumnContextProvider\n        setUrlTableBodyState={props.setUrlTableBodyState}\n        logsFrame={logsFrame}\n        initialColumns={pendingLabelState}\n        setUrlColumns={props.setUrlColumns}\n        clearSelectedLine={props.clearSelectedLine}\n        urlTableBodyState={props.urlTableBodyState}\n      >\n        <Table\n          logsFrame={logsFrame}\n          timeZone={timeZone}\n          height={panelWrapSize.height - 50}\n          width={panelWrapSize.width - 25}\n          labels={labels}\n        />\n      </TableColumnContextProvider>\n    </section>\n  );\n};\n\nconst normalize = (value: number, total: number): number => {\n  return Math.ceil((100 * value) / total);\n};\n\ntype labelName = string;\ntype labelValue = string;\n\nexport function getCardinalityMapFromLabels(labels: Labels[]) {\n  const cardinalityMap = new Map<labelName, { valueSet: Set<labelValue>; maxLength: number }>();\n  labels.forEach((fieldLabels) => {\n    const labelNames = Object.keys(fieldLabels);\n    labelNames.forEach((labelName) => {\n      if (cardinalityMap.has(labelName)) {\n        const setObj = cardinalityMap.get(labelName);\n        const values = setObj?.valueSet;\n        const maxLength = setObj?.maxLength;\n\n        if (values && !values?.has(fieldLabels[labelName])) {\n          values?.add(fieldLabels[labelName]);\n          if (maxLength && fieldLabels[labelName].length > maxLength) {\n            cardinalityMap.set(labelName, { maxLength: fieldLabels[labelName].length, valueSet: values });\n          }\n        }\n      } else {\n        cardinalityMap.set(labelName, {\n          maxLength: fieldLabels[labelName].length,\n          valueSet: new Set([fieldLabels[labelName]]),\n        });\n      }\n    });\n  });\n\n  return cardinalityMap;\n}\n\n/**\n * Guess the field type of the value\n * @param value\n */\nexport function guessLogsFieldTypeForValue(value: string) {\n  let fieldType = guessFieldTypeFromValue(value);\n  const isISO8601 = fieldType === 'string' && iso8601Regex.test(value);\n  if (isISO8601) {\n    fieldType = FieldType.time;\n  }\n  return fieldType;\n}\n\nfunction mapLabelsToInitialState(dataFrame: DataFrame, labels: Labels[]) {\n  let pendingLabelState: FieldNameMetaStore = {};\n\n  // Use a map to dedupe labels and count their occurrences in the logs\n  const labelMap = new Map<string, FieldNameMeta>();\n  const cardinality = getCardinalityMapFromLabels(labels);\n  const numberOfLogLines = dataFrame ? dataFrame.length : 0;\n\n  if (labels?.length && numberOfLogLines) {\n    // Iterate through all of Labels\n    labels.forEach((labels: Labels) => {\n      const labelsArray = Object.keys(labels);\n      // Iterate through the label values\n      labelsArray.forEach((label) => {\n        const cardinalityMap = cardinality.get(label);\n        const cardinalityCount = cardinalityMap?.valueSet?.size ?? 0;\n        // If it's already in our map, increment the count\n        if (labelMap.has(label)) {\n          const value = labelMap.get(label);\n\n          if (value) {\n            if (value?.active) {\n              labelMap.set(label, {\n                percentOfLinesWithLabel: value.percentOfLinesWithLabel + 1,\n                active: true,\n                index: value.index,\n                cardinality: cardinalityCount,\n                maxLength: cardinalityMap?.maxLength,\n              });\n            } else {\n              labelMap.set(label, {\n                percentOfLinesWithLabel: value.percentOfLinesWithLabel + 1,\n                active: false,\n                index: undefined,\n                cardinality: cardinalityCount,\n                maxLength: cardinalityMap?.maxLength,\n              });\n            }\n          }\n          // Otherwise add it\n        } else {\n          labelMap.set(label, {\n            percentOfLinesWithLabel: 1,\n            active: false,\n            index: undefined,\n            cardinality: cardinalityCount,\n            maxLength: cardinalityMap?.maxLength,\n          });\n        }\n      });\n    });\n\n    // Converting the map to an object\n    pendingLabelState = Object.fromEntries(labelMap);\n\n    // Convert count to percent of log lines\n    Object.keys(pendingLabelState).forEach((key) => {\n      pendingLabelState[key].percentOfLinesWithLabel = normalize(\n        pendingLabelState[key].percentOfLinesWithLabel,\n        numberOfLogLines\n      );\n    });\n  }\n  return pendingLabelState;\n}\n\n/**\n * Add special fields like time and body\n * @param specialFieldArray\n * @param pendingLabelState\n * @param numberOfLogLines\n */\nfunction addSpecialLabelsState(\n  specialFieldArray: Array<FieldWithIndex | undefined>,\n  pendingLabelState: FieldNameMetaStore,\n  numberOfLogLines: number\n) {\n  specialFieldArray.forEach((field) => {\n    if (!field) {\n      return;\n    }\n    const isActive = pendingLabelState[field.name]?.active;\n    const index = pendingLabelState[field.name]?.index;\n    if (isActive && index !== undefined) {\n      pendingLabelState[field.name] = {\n        percentOfLinesWithLabel: normalize(\n          field.values.filter((value) => value !== null && value !== undefined).length,\n          numberOfLogLines\n        ),\n        active: true,\n        index: index,\n        cardinality: numberOfLogLines,\n      };\n    } else {\n      pendingLabelState[field.name] = {\n        percentOfLinesWithLabel: normalize(\n          field.values.filter((value) => value !== null && value !== undefined).length,\n          numberOfLogLines\n        ),\n        active: false,\n        index: undefined,\n        cardinality: numberOfLogLines,\n      };\n    }\n  });\n\n  return pendingLabelState;\n}\n\nfunction setSpecialFieldMeta(\n  active: string[],\n  specialFields: SpecialFieldsType,\n  pendingLabelState: FieldNameMetaStore\n) {\n  // If no fields are visible, set defaults\n  if (active.length === 0) {\n    if (specialFields.body?.name) {\n      pendingLabelState[specialFields.body?.name].active = true;\n      pendingLabelState[specialFields.body?.name].index = 1;\n    }\n    if (specialFields.time?.name) {\n      pendingLabelState[specialFields.time?.name].active = true;\n      pendingLabelState[specialFields.time?.name].index = 0;\n    }\n  }\n\n  if (specialFields.time?.name && specialFields.body?.name) {\n    pendingLabelState[specialFields.body?.name].type = 'BODY_FIELD';\n    pendingLabelState[specialFields.time?.name].type = 'TIME_FIELD';\n  }\n\n  if (specialFields.extraFields.length) {\n    specialFields.extraFields.forEach((field) => {\n      const hasLinks = field.config.links?.length;\n      if (hasLinks) {\n        pendingLabelState[field.name].type = 'LINK_FIELD';\n      }\n    });\n  }\n}\n","import React from 'react';\n\nimport { TableWrap } from 'Components/Table/TableWrap';\nimport { AdHocVariableFilter, DataFrame, TimeRange } from '@grafana/data';\nimport { QueryContextProvider } from 'Components/Table/Context/QueryContext';\nimport { parseLogsFrame } from '../../services/logsFrame';\nimport { SelectedTableRow } from './LogLineCellComponent';\nimport { LogLineState } from './Context/TableColumnsContext';\n\ninterface TableProviderProps {\n  dataFrame: DataFrame;\n  setUrlColumns: (columns: string[]) => void;\n  urlColumns: string[];\n  addFilter: (filter: AdHocVariableFilter) => void;\n  selectedLine?: SelectedTableRow;\n  timeRange?: TimeRange;\n  panelWrap: React.RefObject<HTMLDivElement | null>;\n  clearSelectedLine: () => void;\n  setUrlTableBodyState: (logLineState: LogLineState) => void;\n  urlTableBodyState?: LogLineState;\n}\n\nexport const TableProvider = ({\n  dataFrame,\n  setUrlColumns,\n  urlColumns,\n  addFilter,\n  selectedLine,\n  timeRange,\n  panelWrap,\n  clearSelectedLine,\n  setUrlTableBodyState,\n  urlTableBodyState,\n}: TableProviderProps) => {\n  if (!dataFrame) {\n    return null;\n  }\n\n  const logsFrame = parseLogsFrame(dataFrame);\n  if (!logsFrame) {\n    return null;\n  }\n\n  return (\n    <QueryContextProvider addFilter={addFilter} selectedLine={selectedLine} timeRange={timeRange} logsFrame={logsFrame}>\n      <TableWrap\n        urlTableBodyState={urlTableBodyState}\n        setUrlColumns={setUrlColumns}\n        setUrlTableBodyState={setUrlTableBodyState}\n        urlColumns={urlColumns}\n        panelWrap={panelWrap}\n        clearSelectedLine={clearSelectedLine}\n      />\n    </QueryContextProvider>\n  );\n};\n","import { SceneComponentProps, sceneGraph, SceneObjectBase, SceneObjectState } from '@grafana/scenes';\nimport { LogsListScene } from './LogsListScene';\nimport { AdHocVariableFilter, GrafanaTheme2 } from '@grafana/data';\nimport { TableProvider } from '../Table/TableProvider';\nimport React, { useRef } from 'react';\nimport { PanelChrome, useStyles2 } from '@grafana/ui';\nimport { LogsPanelHeaderActions } from '../Table/LogsHeaderActions';\nimport { css } from '@emotion/css';\nimport { addAdHocFilter } from './Breakdowns/AddToFiltersButton';\nimport { areArraysStrictlyEqual } from '../../services/comparison';\nimport { getLogsPanelFrame } from './ServiceScene';\nimport { getVariableForLabel } from '../../services/fields';\nimport { PanelMenu } from '../Panels/PanelMenu';\nimport { LogLineState } from '../Table/Context/TableColumnsContext';\n\ninterface LogsTableSceneState extends SceneObjectState {\n  menu?: PanelMenu;\n}\nexport class LogsTableScene extends SceneObjectBase<LogsTableSceneState> {\n  constructor(state: Partial<LogsTableSceneState>) {\n    super(state);\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  public onActivate() {\n    this.setState({\n      menu: new PanelMenu({ addExplorationsLink: false }),\n    });\n  }\n  public static Component = ({ model }: SceneComponentProps<LogsTableScene>) => {\n    const styles = useStyles2(getStyles);\n    // Get state from parent model\n    const parentModel = sceneGraph.getAncestor(model, LogsListScene);\n    const { data } = sceneGraph.getData(model).useState();\n    const { selectedLine, urlColumns, visualizationType, tableLogLineState } = parentModel.useState();\n    const { menu } = model.useState();\n\n    // Get time range\n    const timeRange = sceneGraph.getTimeRange(model);\n    const { value: timeRangeValue } = timeRange.useState();\n\n    const dataFrame = getLogsPanelFrame(data);\n\n    // Define callback function to update filters in react\n    const addFilter = (filter: AdHocVariableFilter) => {\n      const variableType = getVariableForLabel(dataFrame, filter.key, model);\n      addAdHocFilter(filter, parentModel, variableType);\n    };\n\n    // Get reference to panel wrapper so table knows how much space it can use to render\n    const panelWrap = useRef<HTMLDivElement>(null);\n\n    // Define callback function to update url columns in react\n    const setUrlColumns = (urlColumns: string[]) => {\n      if (!areArraysStrictlyEqual(urlColumns, parentModel.state.urlColumns)) {\n        parentModel.setState({ urlColumns });\n      }\n    };\n\n    const setUrlTableBodyState = (logLineState: LogLineState) => {\n      parentModel.setState({ tableLogLineState: logLineState });\n    };\n\n    const clearSelectedLine = () => {\n      if (parentModel.state.selectedLine) {\n        parentModel.clearSelectedLine();\n      }\n    };\n\n    return (\n      <div className={styles.panelWrapper} ref={panelWrap}>\n        <PanelChrome\n          loadingState={data?.state}\n          title={'Logs'}\n          menu={menu ? <menu.Component model={menu} /> : undefined}\n          actions={<LogsPanelHeaderActions vizType={visualizationType} onChange={parentModel.setVisualizationType} />}\n        >\n          {dataFrame && (\n            <TableProvider\n              panelWrap={panelWrap}\n              addFilter={addFilter}\n              timeRange={timeRangeValue}\n              selectedLine={selectedLine}\n              urlColumns={urlColumns ?? []}\n              setUrlColumns={setUrlColumns}\n              dataFrame={dataFrame}\n              clearSelectedLine={clearSelectedLine}\n              setUrlTableBodyState={setUrlTableBodyState}\n              urlTableBodyState={tableLogLineState}\n            />\n          )}\n        </PanelChrome>\n      </div>\n    );\n  };\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  panelWrapper: css({\n    width: '100%',\n    height: '100%',\n    label: 'panel-wrapper-table',\n\n    // @todo remove this wrapper and styles when core changes are introduced in 11.5\n    // Need more specificity to override core style\n    'button.show-on-hover': {\n      opacity: 1,\n      visibility: 'visible',\n      background: 'none',\n      '&:hover': {\n        background: theme.colors.secondary.shade,\n      },\n    },\n  }),\n});\n","import React from 'react';\n\nimport {\n  SceneComponentProps,\n  SceneFlexItem,\n  SceneFlexLayout,\n  sceneGraph,\n  SceneObjectBase,\n  SceneObjectState,\n  SceneObjectUrlSyncConfig,\n  SceneObjectUrlValues,\n  SceneTimeRangeLike,\n} from '@grafana/scenes';\nimport { SelectedTableRow } from '../Table/LogLineCellComponent';\nimport { LogsTableScene } from './LogsTableScene';\nimport { css } from '@emotion/css';\nimport { reportAppInteraction, USER_EVENTS_ACTIONS, USER_EVENTS_PAGES } from '../../services/analytics';\nimport { locationService } from '@grafana/runtime';\nimport { LogsPanelScene } from './LogsPanelScene';\nimport {\n  getDisplayedFields,\n  getLogsVisualizationType,\n  LogsVisualizationType,\n  setLogsVisualizationType,\n} from 'services/store';\nimport { logger } from '../../services/logger';\nimport { Options } from '@grafana/schema/dist/esm/raw/composable/logs/panelcfg/x/LogsPanelCfg_types.gen';\nimport { narrowLogsVisualizationType, narrowSelectedTableRow, unknownToStrings } from '../../services/narrowing';\nimport { LogLineState } from '../Table/Context/TableColumnsContext';\nimport { LineFilterScene } from './LineFilter/LineFilterScene';\n\nexport interface LogsListSceneState extends SceneObjectState {\n  loading?: boolean;\n  panel?: SceneFlexLayout;\n  visualizationType: LogsVisualizationType;\n  urlColumns?: string[];\n  tableLogLineState?: LogLineState;\n  selectedLine?: SelectedTableRow;\n  $timeRange?: SceneTimeRangeLike;\n  displayedFields: string[];\n  lineFilter?: string;\n}\n\nexport class LogsListScene extends SceneObjectBase<LogsListSceneState> {\n  protected _urlSync = new SceneObjectUrlSyncConfig(this, {\n    keys: ['urlColumns', 'selectedLine', 'visualizationType', 'displayedFields', 'tableLogLineState'],\n  });\n  private logsPanelScene?: LogsPanelScene = undefined;\n  constructor(state: Partial<LogsListSceneState>) {\n    super({\n      ...state,\n      visualizationType: getLogsVisualizationType(),\n      displayedFields: [],\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  getUrlState() {\n    const urlColumns = this.state.urlColumns ?? [];\n    const selectedLine = this.state.selectedLine;\n    const visualizationType = this.state.visualizationType;\n    const displayedFields = this.state.displayedFields ?? getDisplayedFields(this) ?? [];\n    return {\n      urlColumns: JSON.stringify(urlColumns),\n      selectedLine: JSON.stringify(selectedLine),\n      visualizationType: JSON.stringify(visualizationType),\n      displayedFields: JSON.stringify(displayedFields),\n      tableLogLineState: JSON.stringify(this.state.tableLogLineState),\n    };\n  }\n\n  updateFromUrl(values: SceneObjectUrlValues) {\n    const stateUpdate: Partial<LogsListSceneState> = {};\n    try {\n      if (typeof values.urlColumns === 'string') {\n        const decodedUrlColumns: string[] = unknownToStrings(JSON.parse(values.urlColumns));\n        if (decodedUrlColumns !== this.state.urlColumns) {\n          stateUpdate.urlColumns = decodedUrlColumns;\n        }\n      }\n      if (typeof values.selectedLine === 'string') {\n        const unknownTableRow = narrowSelectedTableRow(JSON.parse(values.selectedLine));\n        if (unknownTableRow) {\n          const decodedSelectedTableRow: SelectedTableRow = unknownTableRow;\n          if (decodedSelectedTableRow !== this.state.selectedLine) {\n            stateUpdate.selectedLine = decodedSelectedTableRow;\n          }\n        }\n      }\n      if (typeof values.visualizationType === 'string') {\n        const decodedVisualizationType = narrowLogsVisualizationType(JSON.parse(values.visualizationType));\n        if (decodedVisualizationType && decodedVisualizationType !== this.state.visualizationType) {\n          stateUpdate.visualizationType = decodedVisualizationType;\n        }\n      }\n      if (typeof values.displayedFields === 'string') {\n        const displayedFields = unknownToStrings(JSON.parse(values.displayedFields));\n        if (displayedFields && displayedFields.length) {\n          stateUpdate.displayedFields = displayedFields;\n        }\n      }\n      if (typeof values.tableLogLineState === 'string') {\n        const tableLogLineState = JSON.parse(values.tableLogLineState);\n        if (tableLogLineState === LogLineState.labels || tableLogLineState === LogLineState.text) {\n          stateUpdate.tableLogLineState = tableLogLineState;\n        }\n      }\n    } catch (e) {\n      // URL Params can be manually changed and it will make JSON.parse() fail.\n      logger.error(e, { msg: 'LogsListScene: updateFromUrl unexpected error' });\n    }\n\n    if (Object.keys(stateUpdate).length) {\n      this.setState(stateUpdate);\n    }\n  }\n\n  clearSelectedLine() {\n    this.setState({\n      selectedLine: undefined,\n    });\n  }\n\n  clearDisplayedFields = () => {\n    this.setState({ displayedFields: [] });\n    if (this.logsPanelScene) {\n      this.logsPanelScene.clearDisplayedFields();\n    }\n  };\n\n  public onActivate() {\n    const searchParams = new URLSearchParams(locationService.getLocation().search);\n    this.setStateFromUrl(searchParams);\n\n    if (!this.state.panel) {\n      this.updateLogsPanel();\n    }\n\n    this._subs.add(\n      this.subscribeToState((newState, prevState) => {\n        if (newState.visualizationType !== prevState.visualizationType) {\n          this.updateLogsPanel();\n        }\n      })\n    );\n  }\n\n  private setStateFromUrl(searchParams: URLSearchParams) {\n    const selectedLineUrl = searchParams.get('selectedLine');\n    const urlColumnsUrl = searchParams.get('urlColumns');\n    const vizTypeUrl = searchParams.get('visualizationType');\n    const displayedFieldsUrl = searchParams.get('displayedFields') ?? JSON.stringify(getDisplayedFields(this));\n    const tableLogLineState = searchParams.get('tableLogLineState');\n\n    this.updateFromUrl({\n      selectedLine: selectedLineUrl,\n      urlColumns: urlColumnsUrl,\n      vizType: vizTypeUrl,\n      displayedFields: displayedFieldsUrl,\n      tableLogLineState,\n    });\n  }\n\n  public setLogsVizOption = (options: Partial<Options> = {}) => {\n    if (this.logsPanelScene) {\n      this.logsPanelScene.setLogsVizOption(options);\n    }\n  };\n\n  public updateLogsPanel = () => {\n    this.setState({\n      panel: this.getVizPanel(),\n    });\n\n    // Subscribe to line filter state so we can pass the current filter between different viz\n    if (this.state.panel) {\n      const lineFilterScenes = sceneGraph.findDescendents(this.state.panel, LineFilterScene);\n      if (lineFilterScenes.length) {\n        const lineFilterScene = lineFilterScenes[0];\n        this._subs.add(\n          lineFilterScene.subscribeToState((newState, prevState) => {\n            if (newState.lineFilter !== prevState.lineFilter) {\n              this.setState({\n                lineFilter: newState.lineFilter,\n              });\n            }\n          })\n        );\n      }\n    }\n  };\n\n  public setVisualizationType = (type: LogsVisualizationType) => {\n    this.setState({\n      visualizationType: type,\n    });\n\n    reportAppInteraction(\n      USER_EVENTS_PAGES.service_details,\n      USER_EVENTS_ACTIONS.service_details.logs_visualization_toggle,\n      {\n        visualisationType: type,\n      }\n    );\n    setLogsVisualizationType(type);\n  };\n\n  private getVizPanel() {\n    this.logsPanelScene = new LogsPanelScene({});\n\n    return new SceneFlexLayout({\n      direction: 'column',\n      children:\n        this.state.visualizationType === 'logs'\n          ? [\n              new SceneFlexLayout({\n                children: [\n                  new SceneFlexItem({\n                    body: new LineFilterScene({ lineFilter: this.state.lineFilter }),\n                    xSizing: 'fill',\n                  }),\n                ],\n              }),\n              new SceneFlexItem({\n                height: 'calc(100vh - 220px)',\n                body: this.logsPanelScene,\n              }),\n            ]\n          : [\n              new SceneFlexItem({\n                body: new LineFilterScene({ lineFilter: this.state.lineFilter }),\n                xSizing: 'fill',\n              }),\n              new SceneFlexItem({\n                height: 'calc(100vh - 220px)',\n                body: new LogsTableScene({}),\n              }),\n            ],\n    });\n  }\n\n  public static Component = ({ model }: SceneComponentProps<LogsListScene>) => {\n    const { panel } = model.useState();\n\n    if (!panel) {\n      return;\n    }\n\n    return (\n      <div className={styles.panelWrapper}>\n        <panel.Component model={panel} />\n      </div>\n    );\n  };\n}\n\nconst styles = {\n  panelWrapper: css({\n    // Hack to select internal div\n    'section > div[class$=\"panel-content\"]': css({\n      // A components withing the Logs viz sets contain, which creates a new containing block that is not body which breaks the popover menu\n      contain: 'none',\n      // Prevent overflow from spilling out of parent container\n      overflow: 'auto',\n    }),\n  }),\n};\n","import { LogRowModel } from '@grafana/data';\nimport { IconButton } from '@grafana/ui';\nimport React, { MouseEvent, useCallback, useEffect, useState } from 'react';\n\ninterface Props {\n  onClick(event: MouseEvent<HTMLElement>, row?: LogRowModel): void;\n}\n\nexport const CopyLinkButton = ({ onClick }: Props) => {\n  const [copied, setCopied] = useState(false);\n\n  useEffect(() => {\n    let timeoutId: ReturnType<typeof setTimeout>;\n\n    if (copied) {\n      timeoutId = setTimeout(() => {\n        setCopied(false);\n      }, 2000);\n    }\n\n    return () => {\n      clearTimeout(timeoutId);\n    };\n  }, [copied]);\n\n  const handleClick = useCallback(\n    (event: MouseEvent<HTMLElement>, row?: LogRowModel) => {\n      onClick(event, row);\n      setCopied(true);\n    },\n    [onClick]\n  );\n\n  return (\n    <IconButton\n      aria-label={copied ? 'Copied' : 'Copy link to log line'}\n      tooltip={copied ? 'Copied' : 'Copy link to log line'}\n      tooltipPlacement=\"top\"\n      variant={copied ? 'primary' : 'secondary'}\n      size=\"md\"\n      name={copied ? 'check' : 'share-alt'}\n      onClick={handleClick}\n    />\n  );\n};\n","import {\n  AdHocFiltersVariable,\n  PanelBuilders,\n  SceneComponentProps,\n  sceneGraph,\n  SceneObjectBase,\n  SceneObjectState,\n  SceneObjectUrlSyncConfig,\n  SceneObjectUrlValues,\n  SceneQueryRunner,\n  VizPanel,\n} from '@grafana/scenes';\nimport { DataFrame, getValueFormat, LogRowModel } from '@grafana/data';\nimport { getLogOption, setDisplayedFields } from '../../services/store';\nimport React, { MouseEvent } from 'react';\nimport { LogsListScene } from './LogsListScene';\nimport { LoadingPlaceholder, useStyles2 } from '@grafana/ui';\nimport { addToFilters, FilterType } from './Breakdowns/AddToFiltersButton';\nimport { getVariableForLabel } from '../../services/fields';\nimport { VAR_FIELDS, VAR_LABELS, VAR_LEVELS, VAR_METADATA } from '../../services/variables';\nimport { reportAppInteraction, USER_EVENTS_ACTIONS, USER_EVENTS_PAGES } from '../../services/analytics';\nimport {\n  getAdHocFiltersVariable,\n  getLineFiltersVariable,\n  getValueFromFieldsFilter,\n} from '../../services/variableGetters';\nimport { copyText, generateLogShortlink, resolveRowTimeRangeForSharing } from 'services/text';\nimport { CopyLinkButton } from './CopyLinkButton';\nimport { getLogsPanelSortOrderFromStore, LogOptionsScene } from './LogOptionsScene';\nimport { LogsVolumePanel, logsVolumePanelKey } from './LogsVolumePanel';\nimport { getPanelWrapperStyles, PanelMenu } from '../Panels/PanelMenu';\nimport { ServiceScene } from './ServiceScene';\nimport { LineFilterOp } from '../../services/filterTypes';\nimport { LineFilterCaseSensitive } from './LineFilter/LineFilterScene';\nimport { Options } from '@grafana/schema/dist/esm/raw/composable/logs/panelcfg/x/LogsPanelCfg_types.gen';\nimport { locationService } from '@grafana/runtime';\nimport { narrowLogsSortOrder } from '../../services/narrowing';\nimport { logger } from '../../services/logger';\nimport { LogsSortOrder } from '@grafana/schema';\n\ninterface LogsPanelSceneState extends SceneObjectState {\n  body?: VizPanel<Options>;\n  sortOrder?: LogsSortOrder;\n  wrapLogMessage?: boolean;\n}\n\nexport class LogsPanelScene extends SceneObjectBase<LogsPanelSceneState> {\n  protected _urlSync = new SceneObjectUrlSyncConfig(this, {\n    keys: ['sortOrder', 'wrapLogMessage'],\n  });\n\n  constructor(state: Partial<LogsPanelSceneState>) {\n    super({\n      sortOrder: getLogsPanelSortOrderFromStore(),\n      wrapLogMessage: Boolean(getLogOption<boolean>('wrapLogMessage', false)),\n      ...state,\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  private setStateFromUrl() {\n    const searchParams = new URLSearchParams(locationService.getLocation().search);\n\n    this.updateFromUrl({\n      sortOrder: searchParams.get('sortOrder'),\n      wrapLogMessage: searchParams.get('wrapLogMessage'),\n    });\n  }\n\n  getUrlState() {\n    return {\n      sortOrder: JSON.stringify(this.state.sortOrder),\n      wrapLogMessage: JSON.stringify(this.state.wrapLogMessage),\n    };\n  }\n\n  updateFromUrl(values: SceneObjectUrlValues) {\n    const stateUpdate: Partial<LogsPanelSceneState> = {};\n    try {\n      if (typeof values.sortOrder === 'string' && values.sortOrder) {\n        const decodedSortOrder = narrowLogsSortOrder(JSON.parse(values.sortOrder));\n        if (decodedSortOrder) {\n          stateUpdate.sortOrder = decodedSortOrder;\n          this.setLogsVizOption({ sortOrder: decodedSortOrder });\n        }\n      }\n\n      if (typeof values.wrapLogMessage === 'string' && values.wrapLogMessage) {\n        const decodedWrapLogMessage = JSON.parse(values.wrapLogMessage);\n        if (typeof decodedWrapLogMessage === 'boolean') {\n          stateUpdate.wrapLogMessage = decodedWrapLogMessage;\n          this.setLogsVizOption({ wrapLogMessage: decodedWrapLogMessage });\n          this.setLogsVizOption({ prettifyLogMessage: decodedWrapLogMessage });\n        }\n      }\n    } catch (e) {\n      // URL Params can be manually changed and it will make JSON.parse() fail.\n      logger.error(e, { msg: 'LogOptionsScene: updateFromUrl unexpected error' });\n    }\n\n    if (Object.keys(stateUpdate).length) {\n      this.setState({ ...stateUpdate });\n    }\n  }\n\n  public onActivate() {\n    // Need viz to set options, but setting options will trigger query\n    this.setStateFromUrl();\n\n    if (!this.state.body) {\n      this.setState({\n        body: this.getLogsPanel({\n          wrapLogMessage: this.state.wrapLogMessage,\n          prettifyLogMessage: this.state.wrapLogMessage,\n          sortOrder: this.state.sortOrder,\n        }),\n      });\n    }\n\n    const serviceScene = sceneGraph.getAncestor(this, ServiceScene);\n    this._subs.add(\n      serviceScene.subscribeToState((newState, prevState) => {\n        if (newState.logsCount !== prevState.logsCount) {\n          if (!this.state.body) {\n            this.setState({\n              body: this.getLogsPanel({\n                wrapLogMessage: this.state.wrapLogMessage,\n                prettifyLogMessage: this.state.wrapLogMessage,\n                sortOrder: this.state.sortOrder,\n              }),\n            });\n          } else {\n            this.state.body.setState({\n              title: this.getTitle(newState.logsCount),\n            });\n          }\n        }\n      })\n    );\n  }\n\n  onClickShowField = (field: string) => {\n    const parent = this.getParentScene();\n    const index = parent.state.displayedFields.indexOf(field);\n\n    if (index === -1 && this.state.body) {\n      const displayedFields = [...parent.state.displayedFields, field];\n      this.setLogsVizOption({\n        displayedFields,\n      });\n      parent.setState({ displayedFields });\n      setDisplayedFields(this, parent.state.displayedFields);\n\n      reportAppInteraction(\n        USER_EVENTS_PAGES.service_details,\n        USER_EVENTS_ACTIONS.service_details.logs_toggle_displayed_field\n      );\n    }\n  };\n\n  onClickHideField = (field: string) => {\n    const parent = this.getParentScene();\n    const index = parent.state.displayedFields.indexOf(field);\n\n    if (index >= 0 && this.state.body) {\n      const displayedFields = parent.state.displayedFields.filter((displayedField) => field !== displayedField);\n      this.setLogsVizOption({\n        displayedFields,\n      });\n      parent.setState({ displayedFields });\n      setDisplayedFields(this, parent.state.displayedFields);\n\n      reportAppInteraction(\n        USER_EVENTS_PAGES.service_details,\n        USER_EVENTS_ACTIONS.service_details.logs_toggle_displayed_field\n      );\n    }\n  };\n\n  setLogsVizOption(options: Partial<Options> = {}) {\n    if (!this.state.body) {\n      return;\n    }\n    if ('sortOrder' in options && options.sortOrder !== this.state.body.state.options.sortOrder) {\n      const $data = sceneGraph.getData(this);\n      const queryRunner =\n        $data instanceof SceneQueryRunner ? $data : sceneGraph.findDescendents($data, SceneQueryRunner)[0];\n      if (queryRunner) {\n        queryRunner.runQueries();\n      }\n    }\n    this.state.body.onOptionsChange(options);\n  }\n\n  clearDisplayedFields = () => {\n    if (!this.state.body) {\n      return;\n    }\n    this.setLogsVizOption({\n      displayedFields: [],\n    });\n    setDisplayedFields(this, []);\n  };\n\n  private getParentScene() {\n    return sceneGraph.getAncestor(this, LogsListScene);\n  }\n\n  private getTitle(logsCount: number | undefined) {\n    const valueFormatter = getValueFormat('short');\n    const formattedCount = logsCount !== undefined ? valueFormatter(logsCount, 0) : undefined;\n    return formattedCount !== undefined ? `Logs (${formattedCount.text}${formattedCount.suffix?.trim()})` : 'Logs';\n  }\n\n  private getLogsPanel(options: Partial<Options>) {\n    const parentModel = this.getParentScene();\n    const visualizationType = parentModel.state.visualizationType;\n    const serviceScene = sceneGraph.getAncestor(this, ServiceScene);\n    return (\n      PanelBuilders.logs()\n        .setTitle(this.getTitle(serviceScene.state.logsCount))\n        .setOption('showTime', true)\n        .setOption('onClickFilterLabel', this.handleLabelFilterClick)\n        .setOption('onClickFilterOutLabel', this.handleLabelFilterOutClick)\n        .setOption('isFilterLabelActive', this.handleIsFilterLabelActive)\n        .setOption('onClickFilterString', this.handleFilterStringClick)\n        .setOption('onClickFilterOutString', this.handleFilterOutStringClick)\n        .setOption('onClickShowField', this.onClickShowField)\n        .setOption('onClickHideField', this.onClickHideField)\n        .setOption('displayedFields', parentModel.state.displayedFields)\n        .setOption('sortOrder', options.sortOrder ?? getLogsPanelSortOrderFromStore())\n        .setOption('wrapLogMessage', options.wrapLogMessage ?? Boolean(getLogOption<boolean>('wrapLogMessage', false)))\n        .setOption(\n          'prettifyLogMessage',\n          options.prettifyLogMessage ?? Boolean(getLogOption<boolean>('wrapLogMessage', false))\n        )\n        .setMenu(new PanelMenu({ addExplorationsLink: false }))\n        .setOption('showLogContextToggle', true)\n        // @ts-expect-error Requires Grafana 11.5\n        .setOption('enableInfiniteScrolling', true)\n        // @ts-expect-error Grafana 11.5\n        .setOption('onNewLogsReceived', this.updateVisibleRange)\n        // @ts-expect-error Grafana 11.5\n        .setOption('logRowMenuIconsAfter', [<CopyLinkButton onClick={this.handleShareLogLineClick} key={0} />])\n\n        .setHeaderActions(\n          new LogOptionsScene({ visualizationType, onChangeVisualizationType: parentModel.setVisualizationType })\n        )\n        .build()\n    );\n  }\n\n  private updateVisibleRange = (newLogs: DataFrame[]) => {\n    // Update logs count\n    const serviceScene = sceneGraph.getAncestor(this, ServiceScene);\n    serviceScene.setState({\n      logsCount: newLogs[0].length,\n    });\n\n    if (serviceScene.state.$data?.state.data?.series) {\n      // We need to update the state with the new data without triggering state-dependent changes.\n      serviceScene.state.$data.setState({\n        ...serviceScene.state.$data.state,\n        data: {\n          ...serviceScene.state.$data.state.data,\n          series: newLogs,\n        },\n      });\n    }\n\n    const logsVolumeScene = sceneGraph.findByKeyAndType(this, logsVolumePanelKey, LogsVolumePanel);\n    logsVolumeScene.updateVisibleRange(newLogs);\n  };\n\n  private handleShareLogLineClick = (event: MouseEvent<HTMLElement>, row?: LogRowModel) => {\n    if (row?.rowId && this.state.body) {\n      const parent = this.getParentScene();\n      const timeRange = resolveRowTimeRangeForSharing(row);\n      copyText(\n        generateLogShortlink(\n          'panelState',\n          {\n            logs: { id: row.uid, displayedFields: parent.state.displayedFields },\n          },\n          timeRange\n        )\n      );\n    }\n  };\n\n  private handleLabelFilterClick = (key: string, value: string, frame?: DataFrame) => {\n    this.handleLabelFilter(key, value, frame, 'toggle');\n  };\n\n  private handleLabelFilterOutClick = (key: string, value: string, frame?: DataFrame) => {\n    this.handleLabelFilter(key, value, frame, 'exclude');\n  };\n\n  private handleIsFilterLabelActive = (key: string, value: string) => {\n    const labels = getAdHocFiltersVariable(VAR_LABELS, this);\n    const fields = getAdHocFiltersVariable(VAR_FIELDS, this);\n    const levels = getAdHocFiltersVariable(VAR_LEVELS, this);\n    const metadata = getAdHocFiltersVariable(VAR_METADATA, this);\n\n    const hasKeyValueFilter = (filter: AdHocFiltersVariable | null) => {\n      return (\n        filter &&\n        filter.state.filters.findIndex(\n          (filter) => filter.operator === '=' && filter.key === key && filter.value === value\n        ) >= 0\n      );\n    };\n\n    // Fields have json encoded values unlike the other variables, get the value for the matching filter and parse it before comparing\n    const hasKeyValueFilterField = (filter: AdHocFiltersVariable | null) => {\n      if (filter) {\n        const fieldFilter = filter.state.filters.find((filter) => filter.operator === '=' && filter.key === key);\n\n        if (fieldFilter) {\n          const fieldValue = getValueFromFieldsFilter(fieldFilter, key);\n          return fieldValue.value === value;\n        }\n      }\n      return false;\n    };\n\n    return (\n      hasKeyValueFilter(labels) ||\n      hasKeyValueFilterField(fields) ||\n      hasKeyValueFilter(levels) ||\n      hasKeyValueFilter(metadata)\n    );\n  };\n\n  private handleFilterOutStringClick = (value: string) => {\n    const lineFiltersVar = getLineFiltersVariable(this);\n    if (lineFiltersVar) {\n      lineFiltersVar.setState({\n        filters: [\n          ...lineFiltersVar.state.filters,\n          {\n            operator: LineFilterOp.negativeMatch,\n            value,\n            key: LineFilterCaseSensitive.caseSensitive,\n            keyLabel: lineFiltersVar.state.filters.length.toString(),\n          },\n        ],\n      });\n      reportAppInteraction(\n        USER_EVENTS_PAGES.service_details,\n        USER_EVENTS_ACTIONS.service_details.logs_popover_line_filter,\n        {\n          selectionLength: value.length,\n        }\n      );\n    }\n  };\n\n  private handleFilterStringClick = (value: string) => {\n    const lineFiltersVar = getLineFiltersVariable(this);\n    if (lineFiltersVar) {\n      lineFiltersVar.setState({\n        filters: [\n          ...lineFiltersVar.state.filters,\n          {\n            operator: LineFilterOp.match,\n            value,\n            key: LineFilterCaseSensitive.caseSensitive,\n            keyLabel: lineFiltersVar.state.filters.length.toString(),\n          },\n        ],\n      });\n      reportAppInteraction(\n        USER_EVENTS_PAGES.service_details,\n        USER_EVENTS_ACTIONS.service_details.logs_popover_line_filter,\n        {\n          selectionLength: value.length,\n        }\n      );\n    }\n  };\n\n  private handleLabelFilter(key: string, value: string, frame: DataFrame | undefined, operator: FilterType) {\n    const variableType = getVariableForLabel(frame, key, this);\n\n    addToFilters(key, value, operator, this, variableType);\n\n    reportAppInteraction(\n      USER_EVENTS_PAGES.service_details,\n      USER_EVENTS_ACTIONS.service_details.logs_detail_filter_applied,\n      {\n        filterType: variableType,\n        key,\n        action: operator,\n      }\n    );\n  }\n\n  public static Component = ({ model }: SceneComponentProps<LogsPanelScene>) => {\n    const { body } = model.useState();\n    const styles = useStyles2(getPanelWrapperStyles);\n    if (body) {\n      return (\n        <span className={styles.panelWrapper}>\n          <body.Component model={body} />\n        </span>\n      );\n    }\n    return <LoadingPlaceholder text={'Loading...'} />;\n  };\n}\n","import {\n  JSON_FORMAT_EXPR,\n  LEVEL_VARIABLE_VALUE,\n  LOGS_FORMAT_EXPR,\n  MIXED_FORMAT_EXPR,\n  VAR_FIELDS_EXPR,\n  VAR_LABELS_EXPR,\n  VAR_LINE_FILTERS_EXPR,\n  VAR_METADATA_EXPR,\n  VAR_PATTERNS_EXPR,\n} from './variables';\nimport { SceneObject } from '@grafana/scenes';\nimport { getParserFromFieldsFilters } from './fields';\nimport { getFieldsVariable } from './variableGetters';\n\n/**\n * Crafts count over time query that excludes empty values for stream selector name\n * Will only add parsers if there are filters that require them.\n * @param sceneRef\n * @param streamSelectorName - the name of the stream selector we are aggregating by\n * @param excludeEmpty - if true, the query will exclude empty values for the given streamSelectorName\n */\nexport function getTimeSeriesExpr(sceneRef: SceneObject, streamSelectorName: string, excludeEmpty = true): string {\n  const fieldsVariable = getFieldsVariable(sceneRef);\n\n  let metadataExpressionToAdd = '';\n  if (excludeEmpty) {\n    // `LEVEL_VARIABLE_VALUE` is a special case where we don't want to add this to the stream selector\n    if (streamSelectorName === LEVEL_VARIABLE_VALUE) {\n      metadataExpressionToAdd = `| ${LEVEL_VARIABLE_VALUE} != \"\"`;\n    }\n  }\n\n  const fieldFilters = fieldsVariable.state.filters;\n  const parser = getParserFromFieldsFilters(fieldsVariable);\n\n  // if we have fields, we also need to add parsers\n  if (fieldFilters.length) {\n    if (parser === 'mixed') {\n      return `sum(count_over_time({${VAR_LABELS_EXPR}} ${metadataExpressionToAdd} ${VAR_METADATA_EXPR} ${VAR_PATTERNS_EXPR} ${VAR_LINE_FILTERS_EXPR} ${MIXED_FORMAT_EXPR} ${VAR_FIELDS_EXPR} [$__auto])) by (${streamSelectorName})`;\n    }\n    if (parser === 'json') {\n      return `sum(count_over_time({${VAR_LABELS_EXPR}} ${metadataExpressionToAdd} ${VAR_METADATA_EXPR} ${VAR_PATTERNS_EXPR} ${VAR_LINE_FILTERS_EXPR} ${JSON_FORMAT_EXPR} ${VAR_FIELDS_EXPR} [$__auto])) by (${streamSelectorName})`;\n    }\n    if (parser === 'logfmt') {\n      return `sum(count_over_time({${VAR_LABELS_EXPR}} ${metadataExpressionToAdd} ${VAR_METADATA_EXPR} ${VAR_PATTERNS_EXPR} ${VAR_LINE_FILTERS_EXPR} ${LOGS_FORMAT_EXPR} ${VAR_FIELDS_EXPR} [$__auto])) by (${streamSelectorName})`;\n    }\n  }\n  return `sum(count_over_time({${VAR_LABELS_EXPR}} ${metadataExpressionToAdd} ${VAR_METADATA_EXPR} ${VAR_PATTERNS_EXPR} ${VAR_LINE_FILTERS_EXPR} ${VAR_FIELDS_EXPR} [$__auto])) by (${streamSelectorName})`;\n}\n","import React from 'react';\n\nimport {\n  PanelBuilders,\n  SceneComponentProps,\n  SceneFlexLayout,\n  sceneGraph,\n  SceneObjectBase,\n  SceneObjectState,\n  VizPanel,\n} from '@grafana/scenes';\nimport { LegendDisplayMode, PanelContext, SeriesVisibilityChangeMode, useStyles2 } from '@grafana/ui';\nimport { getQueryRunner, setLogsVolumeFieldConfigs, syncLogsPanelVisibleSeries } from 'services/panel';\nimport { buildDataQuery, LINE_LIMIT } from 'services/query';\nimport { LEVEL_VARIABLE_VALUE } from 'services/variables';\nimport { reportAppInteraction, USER_EVENTS_ACTIONS, USER_EVENTS_PAGES } from 'services/analytics';\nimport { getTimeSeriesExpr } from '../../services/expressions';\nimport { toggleLevelFromFilter } from 'services/levels';\nimport { DataFrame, getValueFormat, LoadingState } from '@grafana/data';\nimport { getFieldsVariable, getLabelsVariable, getLevelsVariable } from '../../services/variableGetters';\nimport { areArraysEqual } from '../../services/comparison';\nimport { getPanelWrapperStyles, PanelMenu } from '../Panels/PanelMenu';\nimport { ServiceScene } from './ServiceScene';\nimport { getSeriesVisibleRange, getVisibleRangeFrame } from 'services/logsFrame';\nimport { getLogsVolumeOption, setLogsVolumeOption } from 'services/store';\nimport { IndexScene } from '../IndexScene/IndexScene';\n\nexport interface LogsVolumePanelState extends SceneObjectState {\n  panel?: VizPanel;\n}\n\nexport const logsVolumePanelKey = 'logs-volume-panel';\nexport class LogsVolumePanel extends SceneObjectBase<LogsVolumePanelState> {\n  private updatedLogSeries: DataFrame[] | null = null;\n  constructor(state: LogsVolumePanelState) {\n    super({\n      ...state,\n      key: logsVolumePanelKey,\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  private onActivate() {\n    if (!this.state.panel) {\n      const panel = this.getVizPanel();\n      this.setState({\n        panel,\n      });\n      this.updateContainerHeight(panel);\n    }\n\n    const labels = getLabelsVariable(this);\n    const fields = getFieldsVariable(this);\n\n    labels.subscribeToState((newState, prevState) => {\n      if (!areArraysEqual(newState.filters, prevState.filters)) {\n        this.setState({\n          panel: this.getVizPanel(),\n        });\n      }\n    });\n\n    fields.subscribeToState((newState, prevState) => {\n      if (!areArraysEqual(newState.filters, prevState.filters)) {\n        this.setState({\n          panel: this.getVizPanel(),\n        });\n      }\n    });\n  }\n\n  private getTitle(totalLogsCount: number | undefined, logsCount: number | undefined) {\n    const indexScene = sceneGraph.getAncestor(this, IndexScene);\n    const maxLines = indexScene.state.ds?.maxLines ?? LINE_LIMIT;\n    const valueFormatter = getValueFormat('short');\n    const formattedTotalCount = totalLogsCount !== undefined ? valueFormatter(totalLogsCount, 0) : undefined;\n    // The instant query (totalLogsCount) doesn't return good results for small result sets, if we're below the max number of lines, use the logs query result instead.\n    if (totalLogsCount === undefined && logsCount !== undefined && logsCount < maxLines) {\n      const formattedCount = valueFormatter(logsCount, 0);\n      return formattedCount !== undefined\n        ? `Log volume (${formattedCount.text}${formattedCount.suffix?.trim()})`\n        : 'Log volume';\n    }\n    return formattedTotalCount !== undefined\n      ? `Log volume (${formattedTotalCount.text}${formattedTotalCount.suffix?.trim()})`\n      : 'Log volume';\n  }\n\n  private getVizPanel() {\n    const serviceScene = sceneGraph.getAncestor(this, ServiceScene);\n    const viz = PanelBuilders.timeseries()\n      .setTitle(this.getTitle(serviceScene.state.totalLogsCount, serviceScene.state.logsCount))\n      .setOption('legend', { showLegend: true, calcs: ['sum'], displayMode: LegendDisplayMode.List })\n      .setUnit('short')\n      .setMenu(new PanelMenu({}))\n      .setCollapsible(true)\n      .setCollapsed(Boolean(getLogsVolumeOption('collapsed')))\n      // 11.5\n      // .setShowMenuAlways(true)\n      .setData(\n        getQueryRunner([\n          buildDataQuery(getTimeSeriesExpr(this, LEVEL_VARIABLE_VALUE, false), {\n            legendFormat: `{{${LEVEL_VARIABLE_VALUE}}}`,\n          }),\n        ])\n      );\n\n    setLogsVolumeFieldConfigs(viz);\n\n    const panel = viz.build();\n    panel.setState({\n      extendPanelContext: (_, context) => this.extendTimeSeriesLegendBus(context),\n    });\n\n    this._subs.add(\n      panel.subscribeToState((newState, prevState) => {\n        if (newState.collapsed !== prevState.collapsed) {\n          this.updateContainerHeight(panel);\n          setLogsVolumeOption('collapsed', newState.collapsed ? 'true' : undefined);\n        }\n      })\n    );\n\n    this._subs.add(\n      panel.state.$data?.subscribeToState((newState) => {\n        if (newState.data?.state !== LoadingState.Done) {\n          return;\n        }\n        if (serviceScene.state.$data?.state.data?.state === LoadingState.Done && !newState.data.annotations?.length) {\n          this.updateVisibleRange(serviceScene.state.$data?.state.data?.series);\n        } else {\n          this.displayVisibleRange();\n        }\n        syncLogsPanelVisibleSeries(panel, newState.data.series, this);\n      })\n    );\n\n    this._subs.add(\n      serviceScene.state.$data?.subscribeToState((newState) => {\n        if (newState.data?.state === LoadingState.Done) {\n          this.updateVisibleRange(newState.data.series);\n        }\n      })\n    );\n\n    this._subs.add(\n      serviceScene.subscribeToState((newState, prevState) => {\n        if (newState.totalLogsCount !== prevState.totalLogsCount || newState.logsCount !== undefined) {\n          if (!this.state.panel) {\n            this.setState({\n              panel: this.getVizPanel(),\n            });\n          } else {\n            this.state.panel.setState({\n              title: this.getTitle(newState.totalLogsCount, newState.logsCount),\n            });\n          }\n        }\n      })\n    );\n\n    return panel;\n  }\n\n  public updateContainerHeight(panel: VizPanel) {\n    const containerLayout = sceneGraph.getAncestor(panel, SceneFlexLayout);\n    const height = panel.state.collapsed ? 35 : Math.max(Math.round(window.innerHeight * 0.2), 100);\n    containerLayout.setState({\n      minHeight: height,\n      height: height,\n      maxHeight: height,\n    });\n  }\n\n  public updateVisibleRange(data: DataFrame[] = []) {\n    this.updatedLogSeries = data;\n    this.displayVisibleRange();\n  }\n\n  private displayVisibleRange() {\n    const panel = this.state.panel;\n    if (\n      !panel ||\n      !panel.state.$data?.state.data ||\n      panel.state.$data?.state.data.state !== LoadingState.Done ||\n      !this.updatedLogSeries\n    ) {\n      return;\n    }\n    const visibleRange = getSeriesVisibleRange(this.updatedLogSeries);\n    this.updatedLogSeries = null;\n    panel.state.$data.setState({\n      data: {\n        ...panel.state.$data.state.data,\n        annotations: [getVisibleRangeFrame(visibleRange.start, visibleRange.end)],\n      },\n    });\n  }\n\n  private extendTimeSeriesLegendBus = (context: PanelContext) => {\n    const levelFilter = getLevelsVariable(this);\n    this._subs.add(\n      levelFilter?.subscribeToState(() => {\n        const panel = this.state.panel;\n        if (!panel?.state.$data?.state.data?.series) {\n          return;\n        }\n\n        syncLogsPanelVisibleSeries(panel, panel?.state.$data?.state.data?.series, this);\n      })\n    );\n\n    context.onToggleSeriesVisibility = (level: string, mode: SeriesVisibilityChangeMode) => {\n      // @TODO. We don't yet support filters with multiple values.\n      if (mode === SeriesVisibilityChangeMode.AppendToSelection) {\n        return;\n      }\n\n      const action = toggleLevelFromFilter(level, this);\n\n      reportAppInteraction(\n        USER_EVENTS_PAGES.service_details,\n        USER_EVENTS_ACTIONS.service_details.level_in_logs_volume_clicked,\n        {\n          level,\n          action,\n        }\n      );\n    };\n  };\n\n  public static Component = ({ model }: SceneComponentProps<LogsVolumePanel>) => {\n    const { panel } = model.useState();\n    if (!panel) {\n      return;\n    }\n    const styles = useStyles2(getPanelWrapperStyles);\n\n    return (\n      <span className={styles.panelWrapper}>\n        <panel.Component model={panel} />\n      </span>\n    );\n  };\n}\n","import { sceneGraph, SceneObjectState } from '@grafana/scenes';\nimport { IndexScene } from '../../../IndexScene/IndexScene';\nimport { reportAppInteraction, USER_EVENTS_ACTIONS, USER_EVENTS_PAGES } from 'services/analytics';\nimport { logger } from '../../../../services/logger';\n\nexport interface FilterByPatternsButtonState extends SceneObjectState {\n  pattern: string;\n  type: 'exclude' | 'include' | 'undo';\n}\n\nexport interface FilterByPatternsState extends FilterByPatternsButtonState {\n  indexScene: IndexScene;\n}\n\nexport function onPatternClick(props: FilterByPatternsState) {\n  const { indexScene: staleIndex, pattern, type } = { ...props };\n\n  const indexScene = sceneGraph.getAncestor(staleIndex, IndexScene);\n\n  if (!indexScene) {\n    logger.warn('logs exploration scene not found');\n    return;\n  }\n\n  const { patterns = [] } = indexScene.state;\n\n  // Remove the pattern if it's already there\n  const filteredPatterns = patterns.filter((pat) => pat.pattern !== pattern);\n  // Analytics\n  const includePatternsLength = filteredPatterns.filter((p) => p.type === 'include')?.length ?? 0;\n  const excludePatternsLength = filteredPatterns.filter((p) => p.type === 'exclude')?.length ?? 0;\n  reportAppInteraction(USER_EVENTS_PAGES.service_details, USER_EVENTS_ACTIONS.service_details.pattern_selected, {\n    type: type,\n    includePatternsLength: includePatternsLength + (type === 'include' ? 1 : 0),\n    excludePatternsLength: excludePatternsLength + (type === 'exclude' ? 1 : 0),\n  });\n\n  // If we have type undo, then we don't need to add the pattern\n  if (type === 'undo') {\n    indexScene.setState({\n      patterns: filteredPatterns,\n    });\n  } else {\n    // Otherwise, add the pattern\n    indexScene.setState({\n      patterns: [...filteredPatterns, { pattern: pattern, type: type }],\n    });\n  }\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  logsStatsRow: css({\n    margin: `${theme.spacing(1.15)}px 0`,\n  }),\n  logsStatsRowActive: css({\n    color: theme.colors.primary.text,\n    position: 'relative',\n  }),\n  logsStatsRowLabel: css({\n    display: 'flex',\n    marginBottom: '1px',\n  }),\n  logsStatsRowValue: css({\n    flex: 1,\n    textOverflow: 'ellipsis',\n    overflow: 'hidden',\n  }),\n  logsStatsRowCount: css({\n    textAlign: 'right',\n    marginLeft: theme.spacing(0.75),\n  }),\n  logsStatsRowPercent: css({\n    textAlign: 'right',\n    marginLeft: theme.spacing(0.75),\n    width: theme.spacing(4.5),\n  }),\n  logsStatsRowBar: css({\n    height: theme.spacing(0.5),\n    overflow: 'hidden',\n    background: theme.colors.text.disabled,\n  }),\n  logsStatsRowInnerBar: css({\n    height: theme.spacing(0.5),\n    overflow: 'hidden',\n    background: theme.colors.primary.main,\n  }),\n});\n\nexport interface Props {\n  active?: boolean;\n  count: number;\n  proportion: number;\n  value?: string;\n}\n\nexport const PatternFieldLabelStatsRow = ({ active, count, proportion, value }: Props) => {\n  const style = useStyles2(getStyles);\n  const percent = `${Math.round(proportion * 100)}%`;\n  const barStyle = { width: percent };\n\n  return (\n    <div className={active ? `${style.logsStatsRow} ${style.logsStatsRowActive}` : style.logsStatsRow}>\n      <div className={style.logsStatsRowLabel}>\n        <div className={style.logsStatsRowValue} title={value}>\n          {value}\n        </div>\n        <div className={style.logsStatsRowCount}>{count}</div>\n        <div className={style.logsStatsRowPercent}>{percent}</div>\n      </div>\n      <div className={style.logsStatsRowBar}>\n        <div className={style.logsStatsRowInnerBar} style={barStyle} />\n      </div>\n    </div>\n  );\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { LogLabelStatsModel, GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\n//Components\nimport { PatternFieldLabelStatsRow } from './PatternFieldLabelStatsRow';\n\nconst STATS_ROW_LIMIT = 10;\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  logsStats: css({\n    background: 'inherit',\n    color: theme.colors.text.primary,\n    wordBreak: 'break-all',\n    width: 'fit-content',\n    maxHeight: '40vh',\n    overflowY: 'auto',\n    marginTop: theme.spacing(1),\n  }),\n  logsStatsHeader: css({\n    borderBottom: `1px solid ${theme.colors.border.medium}`,\n    display: 'flex',\n  }),\n  logsStatsTitle: css({\n    fontWeight: theme.typography.fontWeightMedium,\n    paddingRight: theme.spacing(2),\n    display: 'inline-block',\n    whiteSpace: 'nowrap',\n    textOverflow: 'ellipsis',\n    flexGrow: 1,\n  }),\n  logsStatsClose: css({\n    cursor: 'pointer',\n  }),\n  logsStatsBody: css({\n    padding: '5px 0px',\n  }),\n});\n\ninterface PatternFieldLabelStatsProps {\n  stats: LogLabelStatsModel[];\n  value: string;\n}\n\nexport const PatternFieldLabelStats = (props: PatternFieldLabelStatsProps) => {\n  const style = useStyles2(getStyles);\n\n  const { stats, value } = props;\n\n  const topRows = stats.slice(0, STATS_ROW_LIMIT);\n  let activeRow = topRows.find((row) => row.value === value);\n  let otherRows = stats.slice(STATS_ROW_LIMIT);\n  const insertActiveRow = !activeRow;\n\n  // Remove active row from other to show extra\n  if (insertActiveRow) {\n    activeRow = otherRows.find((row) => row.value === value);\n    otherRows = otherRows.filter((row) => row.value !== value);\n  }\n\n  const otherCount = otherRows.reduce((sum, row) => sum + row.count, 0);\n  const topCount = topRows.reduce((sum, row) => sum + row.count, 0);\n  const total = topCount + otherCount;\n\n  // Combine topRows and otherRows\n  let combinedRows = [...topRows];\n\n  // If there's an \"Other\" category, add it to combinedRows\n  if (otherCount > 0) {\n    combinedRows.push({ value: 'Other', count: otherCount, proportion: otherCount / total });\n  }\n\n  // Sort combinedRows by count in descending order\n  combinedRows.sort((a, b) => b.count - a.count);\n\n  return (\n    <div className={style.logsStats}>\n      <div className={style.logsStatsHeader}>\n        <div className={style.logsStatsTitle}>From a sample of {total} rows found</div>\n      </div>\n      <div className={style.logsStatsBody}>\n        {combinedRows.map((stat) => (\n          <PatternFieldLabelStatsRow key={stat.value} {...stat} active={stat.value === value} />\n        ))}\n      </div>\n    </div>\n  );\n};\n","import React, { useMemo, useRef, useState } from 'react';\nimport { AdHocFiltersVariable, sceneGraph } from '@grafana/scenes';\nimport { Spinner, Toggletip, useStyles2 } from '@grafana/ui';\nimport { getLokiDatasource } from 'services/scenes';\nimport { IndexScene } from 'Components/IndexScene/IndexScene';\nimport { buildDataQuery } from 'services/query';\nimport { PatternFieldLabelStats } from './PatternFieldLabelStats';\nimport { GrafanaTheme2, LoadingState, LogLabelStatsModel, TimeRange } from '@grafana/data';\nimport { reportAppInteraction, USER_EVENTS_ACTIONS, USER_EVENTS_PAGES } from 'services/analytics';\nimport { css } from '@emotion/css';\nimport { getLabelsVariable } from '../../../../services/variableGetters';\n\ninterface PatternNameLabelProps {\n  exploration: IndexScene;\n  pattern: string;\n  maxLines: number;\n}\n\nexport const PatternNameLabel = ({ exploration, pattern, maxLines }: PatternNameLabelProps) => {\n  const patternIndices = extractPatternIndices(pattern);\n  const [stats, setStats] = useState<LogLabelStatsModel[][] | undefined>(undefined);\n  const [statsError, setStatsError] = useState(false);\n  const styles = useStyles2(getStyles);\n\n  // Refs to store the previous values of query and timeRange\n  const previousQueryRef = useRef<string | null>(null);\n  const previousTimeRangeRef = useRef<TimeRange | null>(null);\n\n  const handlePatternClick = async () => {\n    reportAppInteraction(USER_EVENTS_PAGES.service_details, USER_EVENTS_ACTIONS.service_details.pattern_field_clicked);\n    const query = constructQuery(pattern, patternIndices, getLabelsVariable(exploration));\n    const datasource = await getLokiDatasource(exploration);\n    const currentTimeRange = sceneGraph.getTimeRange(exploration).state.value;\n\n    // If the query and timeRange are the same as the previous ones, do not re-query\n    if (stats && query === previousQueryRef.current && currentTimeRange === previousTimeRangeRef.current) {\n      return;\n    }\n\n    // Update the refs with the new values\n    previousQueryRef.current = query;\n    previousTimeRangeRef.current = currentTimeRange;\n\n    datasource\n      ?.query({\n        requestId: '1',\n        interval: '',\n        intervalMs: 0,\n        scopedVars: {},\n        range: currentTimeRange,\n        targets: [buildDataQuery(query, { maxLines })],\n        timezone: '',\n        app: '',\n        startTime: 0,\n      })\n      .forEach((result) => {\n        if (result.state === LoadingState.Done && !result.errors?.length) {\n          setStats(convertResultToStats(result, patternIndices.length, maxLines));\n          setStatsError(false);\n        } else if (result.state === LoadingState.Error || result.errors?.length) {\n          setStats(undefined);\n          setStatsError(true);\n        }\n      });\n  };\n\n  const parts = useMemo(() => pattern.split('<_>'), [pattern]);\n\n  return (\n    <div>\n      {parts.map((part, index) => (\n        <span key={index}>\n          {part}\n          {index !== patternIndices.length && (\n            <Toggletip\n              onOpen={handlePatternClick}\n              content={\n                <>\n                  {stats && stats[index].length > 0 && <PatternFieldLabelStats stats={stats[index]} value=\"\" />}\n                  {stats && stats[index].length === 0 && (\n                    <div>No available stats for this field in the current timestamp.</div>\n                  )}\n                  {!stats && statsError && <div>Could not load stats for this pattern.</div>}\n                  {!stats && !statsError && (\n                    <div style={{ padding: '10px' }}>\n                      <Spinner size=\"xl\" />\n                    </div>\n                  )}\n                </>\n              }\n            >\n              <span className={styles.pattern}>&lt;_&gt;</span>\n            </Toggletip>\n          )}\n        </span>\n      ))}\n    </div>\n  );\n};\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    pattern: css({\n      cursor: 'pointer',\n      backgroundColor: theme.colors.emphasize(theme.colors.background.primary, 0.1),\n      margin: '0 2px',\n\n      '&:hover': {\n        backgroundColor: theme.colors.emphasize(theme.colors.background.primary, 0.2),\n      },\n    }),\n  };\n}\n\n// Convert the result to statistics data structure\nfunction convertResultToStats(result: any, fieldCount: number, maxLines: number): LogLabelStatsModel[][] {\n  const fieldStatsMap = new Map<string, Map<string, number>>();\n\n  // Populate the fieldStatsMap with values from the result\n  result.data[0].fields[0].values.toArray().forEach((value: Record<string, any>) => {\n    Object.keys(value).forEach((key) => {\n      if (!fieldStatsMap.has(key)) {\n        fieldStatsMap.set(key, new Map<string, number>());\n      }\n      fieldStatsMap.get(key)?.set(value[key], (fieldStatsMap.get(key)?.get(value[key]) || 0) + 1);\n    });\n  });\n\n  const stats: LogLabelStatsModel[][] = [];\n\n  // Construct stats array from fieldStatsMap\n  for (let i = 0; i <= fieldCount; i++) {\n    const fieldStats: LogLabelStatsModel[] = [];\n    fieldStatsMap.get(`field_${i + 1}`)?.forEach((count, key) => {\n      fieldStats.push({ value: key, count, proportion: count / maxLines });\n    });\n    fieldStats.sort((a, b) => b.count - a.count);\n    stats.push(fieldStats);\n  }\n\n  return stats;\n}\n\n// Extract indices of the pattern '<_>' in the given string\nfunction extractPatternIndices(pattern: string): number[] {\n  const indices: number[] = [];\n  let currentIndex = pattern.indexOf('<_>');\n\n  while (currentIndex !== -1) {\n    indices.push(currentIndex);\n    currentIndex = pattern.indexOf('<_>', currentIndex + 1);\n  }\n  return indices;\n}\n\n// Construct the query string based on pattern and other conditions\nfunction constructQuery(pattern: string, patternIndices: number[], filters: AdHocFiltersVariable): string {\n  let fieldIndex = 1;\n  const patternExtractor = pattern.replace(/<_>/g, () => `<field_${fieldIndex++}>`);\n  const filterExpression = filters.state.filterExpression;\n  const fields = patternIndices.map((_value, index) => `field_${index + 1}`).join(' ,');\n  return `{${filterExpression}} |> \\`${pattern}\\` | pattern \\`${patternExtractor}\\` | keep ${fields} | line_format \"\"`;\n}\n","import {\n  PanelBuilders,\n  SceneComponentProps,\n  SceneDataProviderResult,\n  SceneFlexItem,\n  SceneFlexLayout,\n  sceneGraph,\n  SceneObjectBase,\n  SceneObjectState,\n  SceneReactObject,\n  VizPanel,\n} from '@grafana/scenes';\nimport React from 'react';\n\nimport { LoadingState } from '@grafana/data';\nimport { Alert, Button } from '@grafana/ui';\nimport {\n  LOG_STREAM_SELECTOR_EXPR,\n  PATTERNS_SAMPLE_SELECTOR_EXPR,\n  VAR_PATTERNS_EXPR,\n} from '../../../../services/variables';\nimport { buildDataQuery, renderPatternFilters } from '../../../../services/query';\nimport { getQueryRunner } from '../../../../services/panel';\nimport { AppliedPattern } from '../../../IndexScene/IndexScene';\nimport { PatternsViewTableScene } from './PatternsViewTableScene';\nimport { emptyStateStyles } from '../FieldsBreakdownScene';\nimport { getFieldsVariable, getLevelsVariable, getLineFiltersVariable } from '../../../../services/variableGetters';\nimport { LokiQuery } from '../../../../services/lokiQuery';\nimport { logger } from '../../../../services/logger';\n\ninterface PatternsLogsSampleSceneState extends SceneObjectState {\n  pattern: string;\n  body?: SceneFlexLayout;\n}\nexport class PatternsLogsSampleScene extends SceneObjectBase<PatternsLogsSampleSceneState> {\n  constructor(state: PatternsLogsSampleSceneState) {\n    super(state);\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  private onActivate() {\n    if (this.state.body) {\n      return;\n    }\n\n    // We start by querying with the users current query context\n    const queryWithFilters = buildDataQuery(LOG_STREAM_SELECTOR_EXPR);\n    this.replacePatternsInQuery(queryWithFilters);\n\n    // but if that fails to return results, we fire the query without the filters, instead of showing no-data in the viz\n    const queryRunnerWithFilters = getQueryRunner([queryWithFilters]);\n    queryRunnerWithFilters.getResultsStream().subscribe((value) => {\n      this.onQueryWithFiltersResult(value);\n    });\n\n    this.setState({\n      body: new SceneFlexLayout({\n        direction: 'column',\n        children: [\n          new SceneFlexItem({\n            body: undefined,\n            width: '100%',\n            height: 0,\n          }),\n          new SceneFlexItem({\n            height: 300,\n            width: '100%',\n            body: PanelBuilders.logs()\n              .setHoverHeader(true)\n              .setOption('showLogContextToggle', true)\n              .setOption('showTime', true)\n              .setData(queryRunnerWithFilters)\n              .build(),\n          }),\n        ],\n      }),\n    });\n  }\n\n  private replacePatternsInQuery(queryWithFilters: LokiQuery) {\n    const pendingPattern: AppliedPattern = {\n      pattern: this.state.pattern,\n      type: 'include',\n    };\n    const patternsLine = renderPatternFilters([pendingPattern]);\n    queryWithFilters.expr = queryWithFilters.expr.replace(VAR_PATTERNS_EXPR, patternsLine);\n  }\n\n  private clearFilters = () => {\n    const filterVariable = getFieldsVariable(this);\n    const lineFiltersVariable = getLineFiltersVariable(this);\n    const levelsVariable = getLevelsVariable(this);\n    filterVariable.setState({\n      filters: [],\n    });\n    levelsVariable.setState({\n      filters: [],\n    });\n    if (lineFiltersVariable.state.filters.length) {\n      lineFiltersVariable.setState({\n        filters: [],\n      });\n\n      const noticeFlexItem = this.getNoticeFlexItem();\n\n      // The query we just fired is already correct after we clear the filters, we just need to hide the warning, and allow filtering\n      noticeFlexItem?.setState({\n        isHidden: true,\n      });\n\n      this.removePatternFromFilterExclusion();\n    }\n  };\n\n  private removePatternFromFilterExclusion() {\n    const patternsViewTableScene = sceneGraph.getAncestor(this, PatternsViewTableScene);\n    const patternsNotMatchingFilters = patternsViewTableScene.state.patternsNotMatchingFilters ?? [];\n\n    const index = patternsNotMatchingFilters.findIndex((pattern) => pattern === this.state.pattern);\n\n    if (index !== -1) {\n      patternsNotMatchingFilters.splice(index, 1);\n      // remove this pattern, as they can filter by this pattern again\n      patternsViewTableScene.setState({\n        patternsNotMatchingFilters: patternsNotMatchingFilters,\n      });\n    }\n  }\n\n  /**\n   * If the first query with the users filters applied fails, we run another one after removing the filters\n   * @param value\n   */\n  private onQueryError = (value: SceneDataProviderResult) => {\n    if (\n      (value.data.state === LoadingState.Done &&\n        (value.data.series.length === 0 || value.data.series.every((frame) => frame.length === 0))) ||\n      value.data.state === LoadingState.Error\n    ) {\n      // Logging an error so loki folks can debug why some patterns returned from the API seem to fail.\n      let logContext;\n      try {\n        logContext = {\n          pattern: this.state.pattern,\n          traceIds: JSON.stringify(value.data.traceIds),\n          request: JSON.stringify(value.data.request),\n          msg: 'onQueryError',\n        };\n      } catch (e) {\n        logContext = {\n          pattern: this.state.pattern,\n          msg: 'Failed to encode context',\n        };\n      }\n\n      // Logging an error so loki folks can debug why some patterns returned from the API seem to fail.\n      logger.error(new Error('Pattern sample query returns no results'), logContext);\n\n      this.setWarningMessage(\n        <Alert severity={'error'} title={''}>\n          This pattern returns no logs.\n        </Alert>\n      );\n\n      const panelFlexItem = this.getVizFlexItem();\n\n      // Run another query without the filters so we can still show log lines of what the pattern looks like.\n      if (panelFlexItem instanceof SceneFlexItem) {\n        panelFlexItem.setState({\n          isHidden: true,\n        });\n      }\n    }\n  };\n\n  private setWarningMessage(reactNode: React.ReactNode) {\n    const noticeFlexItem = this.getNoticeFlexItem();\n    const vizFlexItem = this.getVizFlexItem();\n\n    if (noticeFlexItem instanceof SceneFlexItem) {\n      noticeFlexItem.setState({\n        isHidden: false,\n        height: 'auto',\n        body: new SceneReactObject({\n          reactNode: reactNode,\n        }),\n      });\n    }\n    return vizFlexItem;\n  }\n\n  private getNoticeFlexItem() {\n    const children = this.getFlexItemChildren();\n    return children?.[0];\n  }\n  private getVizFlexItem() {\n    const children = this.getFlexItemChildren();\n    return children?.[1];\n  }\n\n  private getFlexItemChildren() {\n    return this.state.body?.state.children;\n  }\n\n  /**\n   * Callback to subscription of pattern sample query with all of the current query filters applied.\n   * If this query fails to return data, we show a warning, and attempt the pattern sample query again without applying the existing filters.\n   * We also add the pattern to the state of the PatternsTableViewScene so we can hide the filter buttons for this pattern, as including it would break the query\n   * @param value\n   */\n  private onQueryWithFiltersResult = (value: SceneDataProviderResult) => {\n    const queryWithoutFilters = buildDataQuery(PATTERNS_SAMPLE_SELECTOR_EXPR);\n    this.replacePatternsInQuery(queryWithoutFilters);\n\n    const queryRunnerWithoutFilters = getQueryRunner([queryWithoutFilters]);\n\n    // Subscribe to the secondary query, so we can log errors and update the UI\n    queryRunnerWithoutFilters.getResultsStream().subscribe(this.onQueryError);\n\n    if (\n      value.data.state === LoadingState.Done &&\n      (value.data.series.length === 0 || value.data.series.every((frame) => frame.length === 0))\n    ) {\n      const noticeFlexItem = this.getNoticeFlexItem();\n      const panelFlexItem = this.getVizFlexItem();\n\n      // Add a warning notice that the patterns shown will not show up in their current log results due to their existing filters.\n      if (noticeFlexItem instanceof SceneFlexItem) {\n        noticeFlexItem.setState({\n          isHidden: false,\n          height: 'auto',\n          body: new SceneReactObject({\n            reactNode: (\n              <Alert severity={'warning'} title={''}>\n                The logs returned by this pattern do not match the current query filters.\n                <Button className={emptyStateStyles.button} onClick={() => this.clearFilters()}>\n                  Clear filters\n                </Button>\n              </Alert>\n            ),\n          }),\n        });\n      }\n\n      // Run another query without the filters so we can still show log lines of what the pattern looks like.\n      if (panelFlexItem instanceof SceneFlexItem) {\n        const panel = panelFlexItem.state.body;\n        if (panel instanceof VizPanel) {\n          panel?.setState({\n            $data: queryRunnerWithoutFilters,\n          });\n        }\n      }\n      this.excludeThisPatternFromFiltering();\n    }\n\n    if (value.data.state === LoadingState.Error) {\n      this.onQueryError(value);\n    }\n  };\n\n  private excludeThisPatternFromFiltering() {\n    const patternsViewTableScene = sceneGraph.getAncestor(this, PatternsViewTableScene);\n    const patternsThatDontMatchCurrentFilters = patternsViewTableScene.state.patternsNotMatchingFilters ?? [];\n\n    // Add this pattern to the array of patterns that don't match current filters\n    patternsViewTableScene.setState({\n      patternsNotMatchingFilters: [...patternsThatDontMatchCurrentFilters, this.state.pattern],\n    });\n  }\n\n  public static Component({ model }: SceneComponentProps<PatternsLogsSampleScene>) {\n    const { body } = model.useState();\n    if (body) {\n      return <body.Component model={body} />;\n    }\n    return null;\n  }\n}\n","import React, { useEffect } from 'react';\nimport { PatternsLogsSampleScene } from './PatternsLogsSampleScene';\nimport { PatternsTableCellData, PatternsViewTableScene } from './PatternsViewTableScene';\n\ninterface ExpandedRowProps {\n  tableViz: PatternsViewTableScene;\n  row: PatternsTableCellData;\n}\n\nexport function PatternsTableExpandedRow({ tableViz, row }: ExpandedRowProps) {\n  const { expandedRows } = tableViz.useState();\n\n  const rowScene = expandedRows?.find((scene) => scene.state.key === row.pattern);\n\n  useEffect(() => {\n    if (!rowScene) {\n      const newRowScene = buildExpandedRowScene(row.pattern);\n      tableViz.setState({ expandedRows: [...(tableViz.state.expandedRows ?? []), newRowScene] });\n    }\n  }, [row, tableViz, rowScene]);\n\n  return rowScene ? <rowScene.Component model={rowScene} /> : null;\n}\n\nfunction buildExpandedRowScene(pattern: string) {\n  return new PatternsLogsSampleScene({\n    pattern: pattern,\n    key: pattern,\n  });\n}\n","import {\n  PanelBuilders,\n  SceneComponentProps,\n  SceneDataNode,\n  sceneGraph,\n  SceneObject,\n  SceneObjectBase,\n  SceneObjectState,\n} from '@grafana/scenes';\nimport { PatternFrame } from './PatternsBreakdownScene';\nimport React from 'react';\nimport { AppliedPattern, IndexScene } from '../../../IndexScene/IndexScene';\nimport { DataFrame, GrafanaTheme2, LoadingState, PanelData, scaledUnits } from '@grafana/data';\nimport { AxisPlacement, Column, InteractiveTable, TooltipDisplayMode, useTheme2 } from '@grafana/ui';\nimport { CellProps } from 'react-table';\nimport { css, cx } from '@emotion/css';\nimport { onPatternClick } from './FilterByPatternsButton';\nimport { FilterButton } from '../../../FilterButton';\nimport { config } from '@grafana/runtime';\nimport { testIds } from '../../../../services/testIds';\nimport { PatternsFrameScene } from './PatternsFrameScene';\nimport { PatternNameLabel } from './PatternNameLabel';\nimport { getExplorationFor } from 'services/scenes';\nimport { PatternsTableExpandedRow } from './PatternsTableExpandedRow';\nimport { LINE_LIMIT } from '../../../../services/query';\n\n// copied from from grafana repository packages/grafana-data/src/valueFormats/categories.ts\n// that is used in Grafana codebase for \"short\" units\nconst SCALED_UNITS = ['', ' K', ' Mil', ' Bil', ' Tri', ' Quadr', ' Quint', ' Sext', ' Sept'];\nexport interface SingleViewTableSceneState extends SceneObjectState {\n  // The local copy of the pattern frames, the parent breakdown scene decides if we get the filtered subset or not, in this scene we just present the data\n  patternFrames: PatternFrame[] | undefined;\n  expandedRows?: SceneObject[];\n\n  // An array of patterns to exclude links\n  patternsNotMatchingFilters?: string[];\n  maxLines?: number;\n}\n\nexport interface PatternsTableCellData {\n  pattern: string;\n  dataFrame: DataFrame;\n  sum: number;\n  includeLink: () => void;\n  excludeLink: () => void;\n  undoLink: () => void;\n}\n\nexport class PatternsViewTableScene extends SceneObjectBase<SingleViewTableSceneState> {\n  constructor(state: SingleViewTableSceneState) {\n    super(state);\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n  onActivate() {\n    const indexScene = sceneGraph.getAncestor(this, IndexScene);\n    const maxLines = indexScene.state.ds?.maxLines;\n    this.setState({ maxLines });\n  }\n\n  public static Component = PatternTableViewSceneComponent;\n\n  /**\n   * Build columns for interactive table (wrapper for react-table v7)\n   * @param total\n   * @param appliedPatterns\n   * @param theme\n   * @param patternsNotMatchingFilters\n   * @protected\n   */\n  public buildColumns(\n    total: number,\n    appliedPatterns: AppliedPattern[] | undefined,\n    theme: GrafanaTheme2,\n    maxLines: number,\n    patternsNotMatchingFilters?: string[]\n  ) {\n    const styles = getColumnStyles(theme);\n    const timeRange = sceneGraph.getTimeRange(this).state.value;\n    const columns: Array<Column<PatternsTableCellData>> = [\n      {\n        id: 'volume-samples',\n        header: '',\n        cell: (props: CellProps<PatternsTableCellData>) => {\n          const panelData: PanelData = {\n            timeRange: timeRange,\n            series: [props.cell.row.original.dataFrame],\n            state: LoadingState.Done,\n          };\n          const dataNode = new SceneDataNode({\n            data: panelData,\n          });\n\n          const timeSeries = PanelBuilders.timeseries()\n            .setData(dataNode)\n            .setHoverHeader(true)\n            .setOption('tooltip', {\n              mode: TooltipDisplayMode.None,\n            })\n            .setCustomFieldConfig('hideFrom', {\n              legend: true,\n              tooltip: true,\n            })\n            .setCustomFieldConfig('axisPlacement', AxisPlacement.Hidden)\n            .setDisplayMode('transparent')\n            .build();\n\n          return (\n            <div className={styles.tableTimeSeriesWrap}>\n              <div className={styles.tableTimeSeries}>\n                <timeSeries.Component model={timeSeries} />\n              </div>\n            </div>\n          );\n        },\n      },\n      {\n        id: 'count',\n        header: 'Count',\n        sortType: 'number',\n        cell: (props) => {\n          const value = scaledUnits(1000, SCALED_UNITS)(props.cell.row.original.sum);\n          return (\n            <div className={styles.countTextWrap}>\n              <div>\n                {value.prefix ?? ''}\n                {value.text}\n                {value.suffix ?? ''}\n              </div>\n            </div>\n          );\n        },\n      },\n      {\n        id: 'percent',\n        header: '%',\n        sortType: 'number',\n        cell: (props) => (\n          <div className={styles.countTextWrap}>\n            <div>{((100 * props.cell.row.original.sum) / total).toFixed(0)}%</div>\n          </div>\n        ),\n      },\n      {\n        id: 'pattern',\n        header: 'Pattern',\n        cell: (props: CellProps<PatternsTableCellData>) => {\n          return (\n            <div className={cx(getTablePatternTextStyles(), styles.tablePatternTextDefault)}>\n              <PatternNameLabel\n                exploration={getExplorationFor(this)}\n                pattern={props.cell.row.original.pattern}\n                maxLines={maxLines}\n              />\n            </div>\n          );\n        },\n      },\n      {\n        id: 'include',\n        header: undefined,\n        disableGrow: true,\n        cell: (props: CellProps<PatternsTableCellData>) => {\n          if (patternsNotMatchingFilters?.includes(props.cell.row.original.pattern)) {\n            return undefined;\n          }\n\n          const existingPattern = appliedPatterns?.find(\n            (appliedPattern) => appliedPattern.pattern === props.cell.row.original.pattern\n          );\n          const isIncluded = existingPattern?.type === 'include';\n          const isExcluded = existingPattern?.type === 'exclude';\n          return (\n            <FilterButton\n              isExcluded={isExcluded}\n              isIncluded={isIncluded}\n              onInclude={() => props.cell.row.original.includeLink()}\n              onExclude={() => props.cell.row.original.excludeLink()}\n              onClear={() => props.cell.row.original.undoLink()}\n              buttonFill={'outline'}\n            />\n          );\n        },\n      },\n    ];\n    return columns;\n  }\n\n  /**\n   * Filter visible patterns in table, and return cell data for InteractiveTable\n   * @param patternFrames\n   * @param legendSyncPatterns\n   * @private\n   */\n  public buildTableData(patternFrames: PatternFrame[], legendSyncPatterns: Set<string>): PatternsTableCellData[] {\n    const logExploration = sceneGraph.getAncestor(this, IndexScene);\n    return patternFrames\n      .filter((patternFrame) => {\n        return legendSyncPatterns.size ? legendSyncPatterns.has(patternFrame.pattern) : true;\n      })\n      .map((pattern: PatternFrame) => {\n        return {\n          dataFrame: pattern.dataFrame,\n          pattern: pattern.pattern,\n          sum: pattern.sum,\n          includeLink: () =>\n            onPatternClick({\n              pattern: pattern.pattern,\n              type: 'include',\n              indexScene: logExploration,\n            }),\n          excludeLink: () =>\n            onPatternClick({\n              pattern: pattern.pattern,\n              type: 'exclude',\n              indexScene: logExploration,\n            }),\n          undoLink: () =>\n            onPatternClick({\n              pattern: pattern.pattern,\n              type: 'undo',\n              indexScene: logExploration,\n            }),\n        };\n      });\n  }\n}\n\nconst theme = config.theme2;\n\nconst getTablePatternTextStyles = () => {\n  return css({\n    minWidth: '200px',\n    fontFamily: theme.typography.fontFamilyMonospace,\n    overflow: 'hidden',\n    overflowWrap: 'break-word',\n  });\n};\n\nconst getTableStyles = (theme: GrafanaTheme2) => {\n  return {\n    link: css({\n      textDecoration: 'underline',\n    }),\n    tableWrap: css({\n      // Override interactive table style\n      '> div': {\n        // Need to define explicit height for overflowX\n        height: 'calc(100vh - 450px)',\n        minHeight: '470px',\n      },\n      // Make table headers sticky\n      th: {\n        top: 0,\n        position: 'sticky',\n        backgroundColor: theme.colors.background.canvas,\n        zIndex: theme.zIndex.navbarFixed,\n      },\n    }),\n  };\n};\nconst getColumnStyles = (theme: GrafanaTheme2) => {\n  return {\n    tablePatternTextDefault: css({\n      fontFamily: theme.typography.fontFamilyMonospace,\n      minWidth: '200px',\n      maxWidth: '100%',\n      overflow: 'hidden',\n      overflowWrap: 'break-word',\n      fontSize: theme.typography.bodySmall.fontSize,\n      wordBreak: 'break-word',\n    }),\n    countTextWrap: css({\n      textAlign: 'right',\n      fontSize: theme.typography.bodySmall.fontSize,\n    }),\n    tableTimeSeriesWrap: css({\n      width: '230px',\n      pointerEvents: 'none',\n    }),\n    tableTimeSeries: css({\n      height: '30px',\n      overflow: 'hidden',\n    }),\n  };\n};\n\nexport function PatternTableViewSceneComponent({ model }: SceneComponentProps<PatternsViewTableScene>) {\n  const indexScene = sceneGraph.getAncestor(model, IndexScene);\n  const { patterns: appliedPatterns } = indexScene.useState();\n  const theme = useTheme2();\n  const styles = getTableStyles(theme);\n\n  // Get state from parent\n  const patternsFrameScene = sceneGraph.getAncestor(model, PatternsFrameScene);\n  const { legendSyncPatterns } = patternsFrameScene.useState();\n\n  // Must use local patternFrames as the parent decides if we get the filtered or not\n  const { patternFrames: patternFramesRaw, patternsNotMatchingFilters } = model.useState();\n  const patternFrames = patternFramesRaw ?? [];\n\n  // Calculate total for percentages\n  const total = patternFrames.reduce((previousValue, frame) => {\n    return previousValue + frame.sum;\n  }, 0);\n\n  const tableData = model.buildTableData(patternFrames, legendSyncPatterns);\n  const columns = model.buildColumns(\n    total,\n    appliedPatterns,\n    theme,\n    model.state.maxLines ?? LINE_LIMIT,\n    patternsNotMatchingFilters\n  );\n\n  return (\n    <div data-testid={testIds.patterns.tableWrapper} className={styles.tableWrap}>\n      <InteractiveTable\n        columns={columns}\n        data={tableData}\n        getRowId={(r: PatternsTableCellData) => r.pattern}\n        renderExpandedRow={(row) => <PatternsTableExpandedRow tableViz={model} row={row} />}\n      />\n    </div>\n  );\n}\n","import React from 'react';\n\nimport { ConfigOverrideRule, FieldColor, LoadingState } from '@grafana/data';\nimport {\n  PanelBuilders,\n  SceneComponentProps,\n  SceneCSSGridLayout,\n  SceneDataNode,\n  sceneGraph,\n  SceneObjectBase,\n  SceneObjectState,\n  VizPanel,\n} from '@grafana/scenes';\nimport { LegendDisplayMode, PanelContext, SeriesVisibilityChangeMode } from '@grafana/ui';\nimport { ServiceScene } from '../../ServiceScene';\nimport { onPatternClick } from './FilterByPatternsButton';\nimport { IndexScene } from '../../../IndexScene/IndexScene';\nimport { PatternsViewTableScene } from './PatternsViewTableScene';\nimport { config } from '@grafana/runtime';\nimport { css } from '@emotion/css';\nimport { PatternFrame, PatternsBreakdownScene } from './PatternsBreakdownScene';\nimport { areArraysEqual } from '../../../../services/comparison';\nimport { logger } from '../../../../services/logger';\n\nconst palette = config.theme2.visualization.palette;\n\nexport interface PatternsFrameSceneState extends SceneObjectState {\n  body?: SceneCSSGridLayout;\n  loading?: boolean;\n  legendSyncPatterns: Set<string>;\n}\n\nexport class PatternsFrameScene extends SceneObjectBase<PatternsFrameSceneState> {\n  constructor(state?: Partial<PatternsFrameSceneState>) {\n    super({\n      loading: true,\n      ...state,\n      legendSyncPatterns: new Set(),\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  // parent render\n  public static Component = ({ model }: SceneComponentProps<PatternsFrameScene>) => {\n    const { body, loading } = model.useState();\n    const logsByServiceScene = sceneGraph.getAncestor(model, ServiceScene);\n    const { $patternsData } = logsByServiceScene.useState();\n    const patterns = $patternsData?.state.data?.series;\n\n    return (\n      <div className={styles.container}>\n        {!loading && patterns && patterns.length > 0 && <>{body && <body.Component model={body} />}</>}\n      </div>\n    );\n  };\n\n  private onActivate() {\n    this.updateBody();\n\n    // If the patterns have changed, recalculate the dataframes\n    this._subs.add(\n      sceneGraph.getAncestor(this, ServiceScene).subscribeToState((newState, prevState) => {\n        const newFrame = newState?.$patternsData?.state?.data?.series;\n        const prevFrame = prevState?.$patternsData?.state?.data?.series;\n\n        if (!areArraysEqual(newFrame, prevFrame)) {\n          const patternsBreakdownScene = sceneGraph.getAncestor(this, PatternsBreakdownScene);\n          this.updatePatterns(patternsBreakdownScene.state.patternFrames);\n\n          // In order to keep the search state from clearing, we need to clear the filtered state\n          patternsBreakdownScene.setState({\n            filteredPatterns: undefined,\n          });\n        }\n      })\n    );\n\n    // If the text search results have changed, update the components to use the filtered dataframe\n    this._subs.add(\n      sceneGraph.getAncestor(this, PatternsBreakdownScene).subscribeToState((newState, prevState) => {\n        const patternsBreakdownScene = sceneGraph.getAncestor(this, PatternsBreakdownScene);\n        if (newState.filteredPatterns && !areArraysEqual(newState.filteredPatterns, prevState.filteredPatterns)) {\n          this.updatePatterns(patternsBreakdownScene.state.filteredPatterns);\n        } else {\n          // If there is no search string, clear the state\n          if (!patternsBreakdownScene.state.patternFilter) {\n            this.updatePatterns(patternsBreakdownScene.state.patternFrames);\n          }\n        }\n      })\n    );\n  }\n\n  private async updatePatterns(patternFrames: PatternFrame[] = []) {\n    // CSS Grid doesn't need rebuilding, just the children need the updated dataframe\n    this.state.body?.forEachChild((child) => {\n      if (child instanceof VizPanel) {\n        child.setState({\n          $data: this.getTimeseriesDataNode(patternFrames),\n        });\n      }\n      if (child instanceof PatternsViewTableScene) {\n        child.setState({\n          patternFrames,\n        });\n      }\n    });\n  }\n\n  private async updateBody() {\n    const patternsBreakdownScene = sceneGraph.getAncestor(this, PatternsBreakdownScene);\n    const patternFrames = patternsBreakdownScene.state.patternFrames;\n\n    const serviceScene = sceneGraph.getAncestor(this, ServiceScene);\n\n    const lokiPatterns = serviceScene.state.$patternsData?.state.data?.series;\n    if (!lokiPatterns || !patternFrames) {\n      logger.warn('Failed to update PatternsFrameScene body');\n      return;\n    }\n\n    this.setState({\n      body: this.getSingleViewLayout(),\n      legendSyncPatterns: new Set(),\n      loading: false,\n    });\n  }\n\n  private extendTimeSeriesLegendBus(vizPanel: VizPanel, context: PanelContext) {\n    const originalOnToggleSeriesVisibility = context.onToggleSeriesVisibility;\n\n    context.onToggleSeriesVisibility = (label: string, mode: SeriesVisibilityChangeMode) => {\n      originalOnToggleSeriesVisibility?.(label, mode);\n\n      const override: ConfigOverrideRule | undefined = vizPanel.state.fieldConfig.overrides?.[0];\n      const patternsToShow: string[] = override?.matcher.options.names;\n      const legendSyncPatterns = new Set<string>();\n\n      if (patternsToShow) {\n        patternsToShow.forEach(legendSyncPatterns.add, legendSyncPatterns);\n      }\n\n      this.setState({\n        legendSyncPatterns,\n      });\n    };\n  }\n\n  private getSingleViewLayout() {\n    const patternsBreakdownScene = sceneGraph.getAncestor(this, PatternsBreakdownScene);\n    const patternFrames = patternsBreakdownScene.state.patternFrames;\n\n    if (!patternFrames) {\n      logger.warn('Failed to set getSingleViewLayout');\n      return;\n    }\n\n    const timeSeries = this.getTimeSeries(patternFrames);\n\n    return new SceneCSSGridLayout({\n      templateColumns: '100%',\n      autoRows: '200px',\n      isLazy: true,\n\n      children: [\n        timeSeries,\n        new PatternsViewTableScene({\n          patternFrames,\n        }),\n      ],\n    });\n  }\n\n  private getTimeSeries(patternFrames: PatternFrame[]) {\n    const logExploration = sceneGraph.getAncestor(this, IndexScene);\n\n    const timeSeries = PanelBuilders.timeseries()\n      .setData(this.getTimeseriesDataNode(patternFrames))\n      .setOption('legend', {\n        asTable: true,\n        showLegend: true,\n        displayMode: LegendDisplayMode.Table,\n        placement: 'right',\n        width: 200,\n      })\n      .setHoverHeader(true)\n      .setUnit('short')\n      .setLinks([\n        {\n          url: '#',\n          targetBlank: false,\n          onClick: (event) => {\n            onPatternClick({\n              pattern: event.origin.labels.name,\n              type: 'include',\n              indexScene: logExploration,\n            });\n          },\n          title: 'Include',\n        },\n        {\n          url: '#',\n          targetBlank: false,\n          onClick: (event) => {\n            onPatternClick({\n              pattern: event.origin.labels.name,\n              type: 'exclude',\n              indexScene: logExploration,\n            });\n          },\n          title: 'Exclude',\n        },\n      ])\n      .build();\n\n    timeSeries.setState({\n      extendPanelContext: (vizPanel, context) => this.extendTimeSeriesLegendBus(vizPanel, context),\n    });\n\n    return timeSeries;\n  }\n\n  private getTimeseriesDataNode(patternFrames: PatternFrame[]) {\n    const timeRange = sceneGraph.getTimeRange(this).state.value;\n\n    return new SceneDataNode({\n      data: {\n        series: patternFrames.map((patternFrame, seriesIndex) => {\n          // Mutating the dataframe config here means that we don't need to update the colors in the table view\n          const dataFrame = patternFrame.dataFrame;\n          dataFrame.fields[1].config.color = overrideToFixedColor(seriesIndex);\n          dataFrame.fields[1].name = '';\n          return dataFrame;\n        }),\n        state: LoadingState.Done,\n        timeRange: timeRange,\n      },\n    });\n  }\n}\n\nexport function overrideToFixedColor(key: keyof typeof palette): FieldColor {\n  return {\n    mode: 'fixed',\n    fixedColor: palette[key] as string,\n  };\n}\n\nconst styles = {\n  container: css({\n    width: '100%',\n    // Hide header on hover hack\n    '.show-on-hover': {\n      display: 'none',\n    },\n  }),\n};\n","import { SceneComponentProps, sceneGraph, SceneObjectBase, SceneObjectState } from '@grafana/scenes';\nimport React, { ChangeEvent } from 'react';\nimport { Field } from '@grafana/ui';\nimport { css } from '@emotion/css';\nimport { PatternFrame, PatternsBreakdownScene } from './PatternsBreakdownScene';\nimport { debouncedFuzzySearch, fuzzySearch } from '../../../../services/search';\nimport { SearchInput } from '../SearchInput';\nimport { areArraysEqual } from '../../../../services/comparison';\n\nexport interface PatternsViewTextSearchState extends SceneObjectState {}\n\nexport class PatternsViewTextSearch extends SceneObjectBase<PatternsViewTextSearchState> {\n  public static Component = PatternTextSearchComponent;\n\n  constructor(state?: Partial<PatternsViewTextSearchState>) {\n    super({\n      ...state,\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  /**\n   * On click callback to clear current text search\n   */\n  public clearSearch = () => {\n    const patternsBreakdownScene = sceneGraph.getAncestor(this, PatternsBreakdownScene);\n    patternsBreakdownScene.setState({\n      patternFilter: '',\n    });\n  };\n\n  /**\n   * Search input onchange callback\n   * @param e\n   */\n  public handleSearchChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const patternsBreakdownScene = sceneGraph.getAncestor(this, PatternsBreakdownScene);\n    patternsBreakdownScene.setState({\n      patternFilter: e.target.value,\n    });\n  };\n\n  /**\n   * Activation handler\n   * @private\n   */\n  private onActivate() {\n    const patternsBreakdownScene = sceneGraph.getAncestor(this, PatternsBreakdownScene);\n    this._subs.add(\n      patternsBreakdownScene.subscribeToState((newState, prevState) => {\n        if (newState.patternFilter !== prevState.patternFilter) {\n          const patternsBreakdownScene = sceneGraph.getAncestor(this, PatternsBreakdownScene);\n          if (patternsBreakdownScene.state.patternFrames) {\n            debouncedFuzzySearch(\n              patternsBreakdownScene.state.patternFrames.map((frame) => frame.pattern),\n              patternsBreakdownScene.state.patternFilter,\n              this.onSearchResult\n            );\n          }\n        }\n      })\n    );\n\n    this._subs.add(\n      patternsBreakdownScene.subscribeToState((newState, prevState) => {\n        // If we have a search string, but no filtered patterns, run the search\n        if (\n          newState.patternFilter &&\n          !newState.filteredPatterns &&\n          newState.patternFrames &&\n          !areArraysEqual(newState.filteredPatterns, prevState.filteredPatterns)\n        ) {\n          fuzzySearch(\n            newState.patternFrames.map((frame) => frame.pattern),\n            newState.patternFilter,\n            this.onSearchResult\n          );\n        }\n      })\n    );\n  }\n\n  /**\n   * Sets the patterns filtered by string match\n   * @param patterns\n   * @param patternFramesOverride\n   */\n  setFilteredPatterns(patterns: string[], patternFramesOverride?: PatternFrame[]) {\n    const patternsBreakdownScene = sceneGraph.getAncestor(this, PatternsBreakdownScene);\n    const patternFrames = patternFramesOverride ?? patternsBreakdownScene.state.patternFrames;\n\n    if (patternFrames) {\n      const filteredPatternFrames = patternFrames.filter((patternFrame) => {\n        if (patternsBreakdownScene.state.patternFilter && patternFrames?.length) {\n          return patterns.find((pattern) => pattern === patternFrame.pattern);\n        }\n        return false;\n      });\n\n      patternsBreakdownScene.setState({\n        filteredPatterns: filteredPatternFrames,\n      });\n    }\n  }\n\n  /**\n   * Fuzzy search callback\n   * @param data\n   */\n  onSearchResult = (data: string[][]) => {\n    const patternsBreakdownScene = sceneGraph.getAncestor(this, PatternsBreakdownScene);\n    // If we have a search string\n    if (patternsBreakdownScene.state.patternFilter) {\n      this.setFilteredPatterns(data[0]);\n    } else if (patternsBreakdownScene.state.filteredPatterns && !patternsBreakdownScene.state.patternFilter) {\n      // Wipe the parent filtered state\n      this.setEmptySearch();\n    }\n  };\n\n  /**\n   * Wipes filtered patterns when search string is empty\n   */\n  private setEmptySearch() {\n    const patternsBreakdownScene = sceneGraph.getAncestor(this, PatternsBreakdownScene);\n    patternsBreakdownScene.setState({\n      filteredPatterns: undefined,\n    });\n  }\n}\n\nconst styles = {\n  field: css({\n    label: 'field',\n    marginBottom: 0,\n  }),\n  icon: css({\n    cursor: 'pointer',\n  }),\n};\n\nexport function PatternTextSearchComponent({ model }: SceneComponentProps<PatternsViewTextSearch>) {\n  const patternsBreakdownScene = sceneGraph.getAncestor(model, PatternsBreakdownScene);\n  const { patternFilter } = patternsBreakdownScene.useState();\n  return (\n    <Field className={styles.field}>\n      <SearchInput\n        onChange={model.handleSearchChange}\n        onClear={model.clearSearch}\n        value={patternFilter}\n        placeholder=\"Search patterns\"\n      />\n    </Field>\n  );\n}\n","import { GrotError } from '../../../GrotError';\nimport { TextLink } from '@grafana/ui';\nimport React from 'react';\nimport { PATTERNS_MAX_AGE_HOURS } from './PatternsBreakdownScene';\n\nexport function PatternsNotDetected() {\n  return (\n    <GrotError>\n      <div>\n        <p>\n          <strong>Sorry, we could not detect any patterns.</strong>\n        </p>\n        <p>\n          Check back later or reach out to the team in the{' '}\n          <TextLink href=\"https://slack.grafana.com/\" external>\n            Grafana Labs community Slack channel\n          </TextLink>\n        </p>\n        <p>Patterns let you detect similar log lines to include or exclude from your search.</p>\n      </div>\n    </GrotError>\n  );\n}\n\nexport function PatternsTooOld() {\n  return (\n    <GrotError>\n      <div>\n        <p>\n          <strong>Patterns are only available for the most recent {PATTERNS_MAX_AGE_HOURS} hours of data.</strong>\n        </p>\n        <p>\n          See the{' '}\n          <TextLink\n            href=\"https://grafana.com/docs/grafana/latest/explore/simplified-exploration/logs/patterns/\"\n            external\n          >\n            patterns docs\n          </TextLink>{' '}\n          for more info.\n        </p>\n      </div>\n    </GrotError>\n  );\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { DataFrame, dateTime, GrafanaTheme2, LoadingState } from '@grafana/data';\nimport {\n  CustomVariable,\n  SceneComponentProps,\n  SceneDataState,\n  SceneFlexItem,\n  SceneFlexLayout,\n  sceneGraph,\n  SceneObjectBase,\n  SceneObjectState,\n  SceneVariableSet,\n} from '@grafana/scenes';\nimport { Text, useStyles2 } from '@grafana/ui';\nimport { StatusWrapper } from 'Components/ServiceScene/Breakdowns/StatusWrapper';\nimport { VAR_LABEL_GROUP_BY } from 'services/variables';\nimport { ServiceScene } from '../../ServiceScene';\nimport { IndexScene } from '../../../IndexScene/IndexScene';\nimport { PatternsFrameScene } from './PatternsFrameScene';\nimport { PatternsViewTextSearch } from './PatternsViewTextSearch';\nimport { PatternsNotDetected, PatternsTooOld } from './PatternsNotDetected';\nimport { areArraysEqual } from '../../../../services/comparison';\n\nexport interface PatternsBreakdownSceneState extends SceneObjectState {\n  body?: SceneFlexLayout;\n  value?: string;\n  loading?: boolean;\n  error?: string;\n  blockingMessage?: string;\n  // The dataframe built from the patterns that we get back from the loki Patterns API\n  patternFrames?: PatternFrame[];\n\n  // Subset of patternFrames, undefined if empty, empty array if search results returned nothing (no data)\n  filteredPatterns?: PatternFrame[];\n  patternFilter: string;\n}\n\nexport type PatternFrame = {\n  dataFrame: DataFrame;\n  pattern: string;\n  sum: number;\n  status?: 'include' | 'exclude';\n};\n\nexport const PATTERNS_MAX_AGE_HOURS = 3;\n\nexport class PatternsBreakdownScene extends SceneObjectBase<PatternsBreakdownSceneState> {\n  constructor(state: Partial<PatternsBreakdownSceneState>) {\n    super({\n      $variables:\n        state.$variables ??\n        new SceneVariableSet({\n          variables: [new CustomVariable({ name: VAR_LABEL_GROUP_BY, defaultToAll: true, includeAll: true })],\n        }),\n      loading: true,\n      patternFilter: '',\n      ...state,\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  // parent render\n  public static Component = ({ model }: SceneComponentProps<PatternsBreakdownScene>) => {\n    const { body, loading, blockingMessage, patternFrames } = model.useState();\n    const { value: timeRange } = sceneGraph.getTimeRange(model).useState();\n    const styles = useStyles2(getStyles);\n    const timeRangeTooOld = dateTime().diff(timeRange.to, 'hours') >= PATTERNS_MAX_AGE_HOURS;\n\n    return (\n      <div className={styles.container}>\n        <StatusWrapper {...{ isLoading: loading, blockingMessage }}>\n          {!loading && !patternFrames && (\n            <div className={styles.patternMissingText}>\n              <Text textAlignment=\"center\" color=\"primary\">\n                <p>There are no pattern matches.</p>\n                <p>Pattern matching has not been configured.</p>\n                <p>Patterns let you detect similar log lines and add or exclude them from your search.</p>\n                <p>To see them in action, add the following to your configuration</p>\n                <p>\n                  <code>--pattern-ingester.enabled=true</code>\n                </p>\n              </Text>\n            </div>\n          )}\n\n          {!loading && patternFrames?.length === 0 && timeRangeTooOld && <PatternsTooOld />}\n          {!loading && patternFrames?.length === 0 && !timeRangeTooOld && <PatternsNotDetected />}\n          {!loading && patternFrames && patternFrames.length > 0 && (\n            <div className={styles.content}>{body && <body.Component model={body} />}</div>\n          )}\n        </StatusWrapper>\n      </div>\n    );\n  };\n\n  private onActivate() {\n    const serviceScene = sceneGraph.getAncestor(this, ServiceScene);\n    this.setBody();\n\n    const dataFrames = serviceScene.state.$patternsData?.state.data?.series;\n\n    // If the patterns exist already, update the dataframe\n    if (dataFrames) {\n      this.updatePatternFrames(dataFrames);\n    }\n\n    // Subscribe to changes from pattern API call\n    this._subs.add(serviceScene.state.$patternsData?.subscribeToState(this.onDataChange));\n  }\n\n  private onDataChange = (newState: SceneDataState, prevState: SceneDataState) => {\n    const newFrames = newState.data?.series;\n    const prevFrames = prevState.data?.series;\n\n    if (newState.data?.state === LoadingState.Done) {\n      this.setState({\n        loading: false,\n      });\n\n      if (!areArraysEqual(newFrames, prevFrames)) {\n        this.updatePatternFrames(newFrames);\n      }\n    } else if (newState.data?.state === LoadingState.Loading) {\n      this.setState({\n        loading: true,\n      });\n    }\n  };\n\n  private setBody() {\n    this.setState({\n      body: new SceneFlexLayout({\n        direction: 'column',\n        children: [\n          new SceneFlexItem({\n            ySizing: 'content',\n            body: new PatternsViewTextSearch(),\n          }),\n          new SceneFlexItem({\n            body: new PatternsFrameScene(),\n          }),\n        ],\n      }),\n    });\n  }\n\n  private updatePatternFrames(dataFrames?: DataFrame[]) {\n    if (!dataFrames) {\n      return;\n    }\n\n    const patternFrames = this.dataFrameToPatternFrame(dataFrames);\n\n    this.setState({\n      patternFrames,\n    });\n  }\n\n  private dataFrameToPatternFrame(dataFrame: DataFrame[]): PatternFrame[] {\n    const serviceScene = sceneGraph.getAncestor(this, ServiceScene);\n    const appliedPatterns = sceneGraph.getAncestor(serviceScene, IndexScene).state.patterns;\n\n    return dataFrame.map((dataFrame) => {\n      const existingPattern = appliedPatterns?.find((appliedPattern) => appliedPattern.pattern === dataFrame.name);\n\n      const sum: number = dataFrame.meta?.custom?.sum;\n      const patternFrame: PatternFrame = {\n        dataFrame,\n        pattern: dataFrame.name ?? '',\n        sum,\n        status: existingPattern?.type,\n      };\n\n      return patternFrame;\n    });\n  }\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css({\n      flexGrow: 1,\n      display: 'flex',\n      minHeight: '100%',\n      flexDirection: 'column',\n    }),\n    content: css({\n      flexGrow: 1,\n      display: 'flex',\n      paddingTop: theme.spacing(0),\n    }),\n    controls: css({\n      flexGrow: 0,\n      display: 'flex',\n      alignItems: 'top',\n      gap: theme.spacing(2),\n    }),\n    controlsRight: css({\n      flexGrow: 0,\n      display: 'flex',\n      justifyContent: 'flex-end',\n    }),\n    controlsLeft: css({\n      display: 'flex',\n      justifyContent: 'flex-left',\n      justifyItems: 'left',\n      width: '100%',\n      flexDirection: 'column',\n    }),\n    patternMissingText: css({\n      padding: theme.spacing(2),\n    }),\n  };\n}\n","import { PageSlugs, ValueSlugs } from '../../services/routing';\nimport { LogsListScene } from './LogsListScene';\nimport { testIds } from '../../services/testIds';\nimport { LabelBreakdownScene } from './Breakdowns/LabelBreakdownScene';\nimport { FieldsBreakdownScene } from './Breakdowns/FieldsBreakdownScene';\nimport { PatternsBreakdownScene } from './Breakdowns/Patterns/PatternsBreakdownScene';\nimport { behaviors, SceneFlexItem, SceneFlexLayout, SceneObject } from '@grafana/scenes';\nimport { LogsVolumePanel } from './LogsVolumePanel';\nimport { DashboardCursorSync } from '@grafana/schema';\n\ninterface ValueBreakdownViewDefinition {\n  displayName: string;\n  value: ValueSlugs;\n  testId: string;\n  getScene: (value: string) => SceneObject;\n}\n\nexport enum TabNames {\n  logs = 'Logs',\n  labels = 'Labels',\n  fields = 'Fields',\n  patterns = 'Patterns',\n}\nexport interface BreakdownViewDefinition {\n  displayName: TabNames;\n  value: PageSlugs;\n  testId: string;\n  getScene: (changeFields: (f: number) => void) => SceneObject;\n}\n\nexport const breakdownViewsDefinitions: BreakdownViewDefinition[] = [\n  {\n    displayName: TabNames.logs,\n    value: PageSlugs.logs,\n    getScene: () => buildLogsListScene(),\n    testId: testIds.exploreServiceDetails.tabLogs,\n  },\n  {\n    displayName: TabNames.labels,\n    value: PageSlugs.labels,\n    getScene: () => buildLabelBreakdownActionScene(),\n    testId: testIds.exploreServiceDetails.tabLabels,\n  },\n  {\n    displayName: TabNames.fields,\n    value: PageSlugs.fields,\n    getScene: (f) => buildFieldsBreakdownActionScene(f),\n    testId: testIds.exploreServiceDetails.tabFields,\n  },\n  {\n    displayName: TabNames.patterns,\n    value: PageSlugs.patterns,\n    getScene: () => buildPatternsScene(),\n    testId: testIds.exploreServiceDetails.tabPatterns,\n  },\n];\nexport const valueBreakdownViews: ValueBreakdownViewDefinition[] = [\n  {\n    displayName: 'Label',\n    value: ValueSlugs.label,\n    getScene: (value: string) => buildLabelValuesBreakdownActionScene(value),\n    testId: testIds.exploreServiceDetails.tabLabels,\n  },\n  {\n    displayName: 'Field',\n    value: ValueSlugs.field,\n    getScene: (value: string) => buildFieldValuesBreakdownActionScene(value),\n    testId: testIds.exploreServiceDetails.tabFields,\n  },\n];\n\nfunction buildPatternsScene() {\n  return new SceneFlexLayout({\n    children: [\n      new SceneFlexItem({\n        body: new PatternsBreakdownScene({}),\n      }),\n    ],\n  });\n}\n\nfunction buildFieldsBreakdownActionScene(changeFieldNumber: (n: number) => void) {\n  return new SceneFlexLayout({\n    $behaviors: [new behaviors.CursorSync({ key: 'sync', sync: DashboardCursorSync.Crosshair })],\n    children: [\n      new SceneFlexItem({\n        body: new FieldsBreakdownScene({ changeFieldCount: changeFieldNumber }),\n      }),\n    ],\n  });\n}\n\nfunction buildFieldValuesBreakdownActionScene(value: string) {\n  return new SceneFlexLayout({\n    $behaviors: [new behaviors.CursorSync({ key: 'sync', sync: DashboardCursorSync.Crosshair })],\n    children: [\n      new SceneFlexItem({\n        body: new FieldsBreakdownScene({ value }),\n      }),\n    ],\n  });\n}\n\nfunction buildLabelValuesBreakdownActionScene(value: string) {\n  return new SceneFlexLayout({\n    $behaviors: [new behaviors.CursorSync({ key: 'sync', sync: DashboardCursorSync.Crosshair })],\n    children: [\n      new SceneFlexItem({\n        body: new LabelBreakdownScene({ value }),\n      }),\n    ],\n  });\n}\n\nfunction buildLogsListScene() {\n  return new SceneFlexLayout({\n    direction: 'column',\n    children: [\n      new SceneFlexItem({\n        body: new LogsVolumePanel({}),\n      }),\n      new SceneFlexItem({\n        minHeight: '470px',\n        height: 'calc(100vh - 500px)',\n        body: new LogsListScene({}),\n      }),\n    ],\n  });\n}\n\nfunction buildLabelBreakdownActionScene() {\n  return new SceneFlexLayout({\n    $behaviors: [new behaviors.CursorSync({ key: 'sync', sync: DashboardCursorSync.Crosshair })],\n    children: [\n      new SceneFlexItem({\n        body: new LabelBreakdownScene({}),\n      }),\n    ],\n  });\n}\n","import {\n  SceneComponentProps,\n  sceneGraph,\n  SceneObjectBase,\n  SceneObjectState,\n  SceneTimeRangeLike,\n} from '@grafana/scenes';\nimport { ButtonGroup, Dropdown, IconName, Menu, MenuGroup, ToolbarButton } from '@grafana/ui';\nimport React from 'react';\nimport { config, getAppEvents, getBackendSrv, locationService, reportInteraction } from '@grafana/runtime';\nimport { AppEvents, toUtc, urlUtil } from '@grafana/data';\nimport { copyText } from '../../services/text';\n\ninterface ShortLinkMenuItemData {\n  key: string;\n  label: string;\n  icon: IconName;\n  getUrl: Function;\n  shorten: boolean;\n  absTime: boolean;\n}\n\ninterface ShortLinkGroupData {\n  key: string;\n  label: string;\n  items: ShortLinkMenuItemData[];\n}\n\nexport interface ShareButtonSceneState extends SceneObjectState {\n  lastSelected: ShortLinkMenuItemData;\n  isOpen: boolean;\n  /**\n   * Reference to $timeRange\n   */\n  getSceneTimeRange?: () => SceneTimeRangeLike;\n  /**\n   * Callback on link copy\n   */\n  onCopyLink?: (shortened: boolean, absTime: boolean, url?: string) => void;\n}\n\nexport class ShareButtonScene extends SceneObjectBase<ShareButtonSceneState> {\n  constructor(state: Partial<ShareButtonSceneState>) {\n    super({ isOpen: false, lastSelected: defaultMode, ...state });\n  }\n\n  public setIsOpen(isOpen: boolean) {\n    this.setState({ isOpen });\n  }\n\n  public onCopyLink(shorten: boolean, absTime: boolean, url?: string) {\n    if (shorten) {\n      createAndCopyShortLink(url || global.location.href);\n      reportInteraction('grafana_explore_shortened_link_clicked', { isAbsoluteTime: absTime });\n    } else {\n      copyText(\n        url !== undefined\n          ? `${window.location.protocol}//${window.location.host}${config.appSubUrl}${url}`\n          : global.location.href\n      );\n\n      if (this.state.onCopyLink) {\n        this.state.onCopyLink(shorten, absTime, url);\n      }\n    }\n  }\n\n  static MenuActions = ({ model }: SceneComponentProps<ShareButtonScene>) => {\n    const menuOptions: ShortLinkGroupData[] = [\n      {\n        key: 'normal',\n        label: 'Normal URL links',\n        items: [\n          {\n            key: 'copy-shortened-link',\n            icon: 'link',\n            label: 'Copy shortened URL',\n            getUrl: () => undefined,\n            shorten: true,\n            absTime: false,\n          },\n          {\n            key: 'copy-link',\n            icon: 'link',\n            label: 'Copy URL',\n            getUrl: () => undefined,\n            shorten: false,\n            absTime: false,\n          },\n        ],\n      },\n      {\n        key: 'timesync',\n        label: 'Time-sync URL links (share with time range intact)',\n        items: [\n          {\n            key: 'copy-short-link-abs-time',\n            icon: 'clock-nine',\n            label: 'Copy absolute shortened URL',\n            shorten: true,\n            getUrl: () => {\n              return constructAbsoluteUrl(\n                model.state.getSceneTimeRange !== undefined\n                  ? model.state.getSceneTimeRange()\n                  : sceneGraph.getTimeRange(model)\n              );\n            },\n            absTime: true,\n          },\n          {\n            key: 'copy-link-abs-time',\n            icon: 'clock-nine',\n            label: 'Copy absolute URL',\n            shorten: false,\n            getUrl: () => {\n              return constructAbsoluteUrl(\n                model.state.getSceneTimeRange !== undefined\n                  ? model.state.getSceneTimeRange()\n                  : sceneGraph.getTimeRange(model)\n              );\n            },\n            absTime: true,\n          },\n        ],\n      },\n    ];\n\n    return (\n      <Menu>\n        {menuOptions.map((groupOption) => {\n          return (\n            <MenuGroup key={groupOption.key} label={groupOption.label}>\n              {groupOption.items.map((option) => {\n                return (\n                  <Menu.Item\n                    key={option.key}\n                    label={option.label}\n                    icon={option.icon}\n                    onClick={() => {\n                      const url = option.getUrl();\n                      model.onCopyLink(option.shorten, option.absTime, url);\n                      model.setState({\n                        lastSelected: option,\n                      });\n                    }}\n                  />\n                );\n              })}\n            </MenuGroup>\n          );\n        })}\n      </Menu>\n    );\n  };\n\n  static Component = ({ model }: SceneComponentProps<ShareButtonScene>) => {\n    const { lastSelected, isOpen } = model.useState();\n\n    return (\n      <ButtonGroup>\n        <ToolbarButton\n          tooltip={lastSelected.label}\n          icon={lastSelected.icon}\n          variant={'canvas'}\n          narrow={true}\n          onClick={() => {\n            const url = lastSelected.getUrl();\n            model.onCopyLink(lastSelected.shorten, lastSelected.absTime, url);\n          }}\n          aria-label={'Copy shortened URL'}\n        >\n          <span>Share</span>\n        </ToolbarButton>\n        <Dropdown\n          overlay={<ShareButtonScene.MenuActions model={model} />}\n          placement=\"bottom-end\"\n          onVisibleChange={model.setIsOpen.bind(model)}\n        >\n          <ToolbarButton narrow={true} variant={'canvas'} isOpen={isOpen} aria-label={'Open copy link options'} />\n        </Dropdown>\n      </ButtonGroup>\n    );\n  };\n}\n\nconst defaultMode: ShortLinkMenuItemData = {\n  key: 'copy-link',\n  label: 'Copy shortened URL',\n  icon: 'share-alt',\n  getUrl: () => undefined,\n  shorten: true,\n  absTime: false,\n};\n\n// Adapted from grafana/grafana/public/app/core/utils/shortLinks.ts shortLinks.ts\nfunction buildHostUrl() {\n  return `${window.location.protocol}//${window.location.host}${config.appSubUrl}`;\n}\n\nfunction getRelativeURLPath(url: string) {\n  let path = url.replace(buildHostUrl(), '');\n  return path.startsWith('/') ? path.substring(1, path.length) : path;\n}\n\nexport const createShortLink = async function (path: string) {\n  const appEvents = getAppEvents();\n  try {\n    const shortLink = await getBackendSrv().post(`/api/short-urls`, {\n      path: getRelativeURLPath(path),\n    });\n    return shortLink.url;\n  } catch (err) {\n    console.error('Error when creating shortened link: ', err);\n\n    appEvents.publish({\n      type: AppEvents.alertError.name,\n      payload: ['Error generating shortened link'],\n    });\n  }\n};\n\nexport const createAndCopyShortLink = async (path: string) => {\n  const appEvents = getAppEvents();\n  const shortLink = await createShortLink(path);\n  if (shortLink) {\n    copyText(shortLink);\n    appEvents.publish({\n      type: AppEvents.alertSuccess.name,\n      payload: ['Shortened link copied to clipboard'],\n    });\n  } else {\n    appEvents.publish({\n      type: AppEvents.alertError.name,\n      payload: ['Error generating shortened link'],\n    });\n  }\n};\n\n/**\n * Adapted from /grafana/grafana/public/app/features/explore/utils/links.ts\n * Returns the current URL with absolute time range\n */\nconst constructAbsoluteUrl = (timeRange: SceneTimeRangeLike): string => {\n  const from = toUtc(timeRange.state.value.from);\n  const to = toUtc(timeRange.state.value.to);\n  const location = locationService.getLocation();\n  const searchParams = urlUtil.getUrlSearchParams();\n  searchParams['from'] = from.toISOString();\n  searchParams['to'] = to.toISOString();\n  return urlUtil.renderUrl(location.pathname, searchParams);\n};\n","import { SceneComponentProps, sceneGraph, SceneObject, SceneObjectBase, SceneObjectState } from '@grafana/scenes';\nimport { Box, Dropdown, Menu, Stack, Tab, TabsBar, ToolbarButton, useStyles2 } from '@grafana/ui';\nimport { getDrilldownSlug, getDrilldownValueSlug, PageSlugs, ValueSlugs } from '../../services/routing';\nimport { reportAppInteraction, USER_EVENTS_ACTIONS, USER_EVENTS_PAGES } from '../../services/analytics';\nimport { navigateToDrilldownPage } from '../../services/navigate';\nimport React, { useEffect, useState } from 'react';\nimport { ServiceScene, ServiceSceneCustomState } from './ServiceScene';\nimport { getValueFormat, GrafanaTheme2 } from '@grafana/data';\nimport { css, cx } from '@emotion/css';\nimport { BreakdownViewDefinition, breakdownViewsDefinitions, TabNames } from './BreakdownViews';\nimport { config, usePluginLinks } from '@grafana/runtime';\nimport { getLabelsVariable } from '../../services/variableGetters';\nimport { IndexScene } from '../IndexScene/IndexScene';\nimport { LINE_LIMIT } from '../../services/query';\nimport { ShareButtonScene } from '../IndexScene/ShareButtonScene';\n\nexport interface ActionBarSceneState extends SceneObjectState {\n  maxLines?: number;\n  shareButtonScene?: ShareButtonScene;\n}\n\nexport class ActionBarScene extends SceneObjectBase<ActionBarSceneState> {\n  constructor(state: Partial<ActionBarSceneState>) {\n    super(state);\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  onActivate() {\n    const indexScene = sceneGraph.getAncestor(this, IndexScene);\n    const dataSource = indexScene.state.ds;\n    if (dataSource?.maxLines !== undefined) {\n      this.setState({\n        maxLines: dataSource.maxLines,\n      });\n    }\n\n    if (!this.state.shareButtonScene) {\n      this.setState({\n        shareButtonScene: new ShareButtonScene({}),\n      });\n    }\n  }\n  public static Component = ({ model }: SceneComponentProps<ActionBarScene>) => {\n    const styles = useStyles2(getStyles);\n    let currentBreakdownViewSlug = getDrilldownSlug();\n    let allowNavToParent = false;\n\n    if (!Object.values(PageSlugs).includes(currentBreakdownViewSlug)) {\n      const drilldownValueSlug = getDrilldownValueSlug();\n      allowNavToParent = true;\n      if (drilldownValueSlug === ValueSlugs.field) {\n        currentBreakdownViewSlug = PageSlugs.fields;\n      }\n      if (drilldownValueSlug === ValueSlugs.label) {\n        currentBreakdownViewSlug = PageSlugs.labels;\n      }\n    }\n\n    const serviceScene = sceneGraph.getAncestor(model, ServiceScene);\n    const { loading, $data, logsCount, totalLogsCount, ...state } = serviceScene.useState();\n    const { maxLines } = model.useState();\n\n    const loadingStates = state.loadingStates;\n\n    return (\n      <Box paddingY={0}>\n        <div className={styles.actions}>\n          <Stack gap={1}>\n            {config.featureToggles.appSidecar && <ToolbarExtensionsRenderer serviceScene={serviceScene} />}\n            {model.state.shareButtonScene && (\n              <model.state.shareButtonScene.Component model={model.state.shareButtonScene} />\n            )}\n          </Stack>\n        </div>\n\n        <TabsBar>\n          {breakdownViewsDefinitions.map((tab, index) => {\n            return (\n              <Tab\n                data-testid={tab.testId}\n                key={index}\n                label={tab.displayName}\n                active={currentBreakdownViewSlug === tab.value}\n                counter={loadingStates[tab.displayName] ? undefined : getCounter(tab, state)}\n                suffix={\n                  tab.displayName === TabNames.logs\n                    ? ({ className }) => LogsCount(className, totalLogsCount, logsCount, maxLines ?? LINE_LIMIT)\n                    : undefined\n                }\n                icon={loadingStates[tab.displayName] ? 'spinner' : undefined}\n                onChangeTab={() => {\n                  if ((tab.value && tab.value !== currentBreakdownViewSlug) || allowNavToParent) {\n                    reportAppInteraction(\n                      USER_EVENTS_PAGES.service_details,\n                      USER_EVENTS_ACTIONS.service_details.action_view_changed,\n                      {\n                        newActionView: tab.value,\n                        previousActionView: currentBreakdownViewSlug,\n                      }\n                    );\n\n                    const serviceScene = sceneGraph.getAncestor(model, ServiceScene);\n                    navigateToDrilldownPage(tab.value, serviceScene);\n                  }\n                }}\n              />\n            );\n          })}\n        </TabsBar>\n      </Box>\n    );\n  };\n}\nconst getCounter = (tab: BreakdownViewDefinition, state: ServiceSceneCustomState) => {\n  switch (tab.value) {\n    case 'fields':\n      return state.fieldsCount;\n    case 'patterns':\n      return state.patternsCount;\n    case 'labels':\n      return state.labelsCount;\n    default:\n      return undefined;\n  }\n};\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    actions: css({\n      [theme.breakpoints.up(theme.breakpoints.values.md)]: {\n        position: 'absolute',\n        right: 0,\n        zIndex: 2,\n      },\n    }),\n  };\n}\n\n/**\n * Shows extensions in the toolbar.\n * Shows a single button if there is only one extension or a dropdown if there are multiple.\n * @param props\n * @constructor\n */\nfunction ToolbarExtensionsRenderer(props: { serviceScene: SceneObject }) {\n  const [filters, setFilters] = useState<Array<{ key: string; value: string }>>(\n    getLabelsVariable(props.serviceScene).state.filters\n  );\n  useEffect(() => {\n    const sub = getLabelsVariable(props.serviceScene).subscribeToState((newState) => {\n      setFilters(newState.filters);\n    });\n    return () => {\n      sub.unsubscribe();\n    };\n  }, [props.serviceScene]);\n\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n  const extensions = usePluginLinks({\n    extensionPointId: 'grafana-lokiexplore-app/toolbar-open-related/v1',\n    limitPerPlugin: 3,\n    context: { filters },\n  });\n\n  if (extensions.isLoading || extensions.links.length === 0) {\n    return null;\n  }\n\n  if (extensions.links.length === 1) {\n    const e = extensions.links[0];\n\n    return (\n      <div>\n        <ToolbarButton variant={'canvas'} key={e.id} onClick={(event) => e.onClick?.(event)} icon={e.icon}>\n          Related {e.title}\n        </ToolbarButton>\n      </div>\n    );\n  }\n\n  const menu = (\n    <Menu>\n      {extensions.links.map((link) => {\n        return (\n          <Menu.Item\n            ariaLabel={link.title}\n            icon={link?.icon || 'plug'}\n            key={link.id}\n            label={link.title}\n            onClick={(event) => {\n              link.onClick?.(event);\n            }}\n          />\n        );\n      })}\n    </Menu>\n  );\n\n  return (\n    <Dropdown onVisibleChange={setIsOpen} placement=\"bottom-start\" overlay={menu}>\n      <ToolbarButton aria-label=\"Open related\" variant=\"canvas\" isOpen={isOpen}>\n        Open related\n      </ToolbarButton>\n    </Dropdown>\n  );\n}\n\nfunction LogsCount(\n  className: string | undefined,\n  totalCount: number | undefined,\n  logsCount: number | undefined,\n  maxLines: number\n) {\n  const styles = useStyles2(getLogsCountStyles);\n  const valueFormatter = getValueFormat('short');\n\n  // The instant query (totalCount) doesn't return good results for small result sets, if we're below the max number of lines, use the logs query result instead.\n  if (totalCount === undefined && logsCount !== undefined && logsCount < maxLines) {\n    const formattedCount = valueFormatter(logsCount, 0);\n    return (\n      <span className={cx(className, styles.logsCountStyles)}>\n        {formattedCount.text}\n        {formattedCount.suffix?.trim()}\n      </span>\n    );\n  } else if (totalCount !== undefined) {\n    const formattedTotalCount = valueFormatter(totalCount, 0);\n    return (\n      <span className={cx(className, styles.logsCountStyles)}>\n        {formattedTotalCount.text}\n        {formattedTotalCount.suffix?.trim()}\n      </span>\n    );\n  }\n\n  return <span className={cx(className, styles.emptyCountStyles)}></span>;\n}\n\nfunction getLogsCountStyles(theme: GrafanaTheme2) {\n  return {\n    emptyCountStyles: css({\n      display: 'inline-block',\n      fontSize: theme.typography.bodySmall.fontSize,\n      minWidth: '1em',\n      marginLeft: theme.spacing(1),\n      padding: theme.spacing(0.25, 1),\n    }),\n    logsCountStyles: css({\n      fontSize: theme.typography.bodySmall.fontSize,\n      label: 'counter',\n      marginLeft: theme.spacing(1),\n      borderRadius: theme.spacing(3),\n      backgroundColor: theme.colors.action.hover,\n      padding: theme.spacing(0.25, 1),\n      color: theme.colors.text.secondary,\n      fontWeight: theme.typography.fontWeightMedium,\n    }),\n  };\n}\n","import { locationService } from '@grafana/runtime';\nimport { getLineFiltersVariable } from './variableGetters';\nimport { LineFilterCaseSensitive } from '../Components/ServiceScene/LineFilter/LineFilterScene';\nimport { LineFilterOp } from './filterTypes';\nimport { ServiceScene } from '../Components/ServiceScene/ServiceScene';\nimport { urlUtil } from '@grafana/data';\n\nfunction removeEscapeChar(value: string, caseSensitive: boolean) {\n  const charsEscapedByEscapeRegExp = ['^', '$', '.', '*', '+', '?', '(', ')', '[', ']', '{', '}', '|'];\n  if (!caseSensitive) {\n    charsEscapedByEscapeRegExp.push('\\\\');\n  }\n  return value\n    .split('')\n    .filter((char, index, stringArray) => {\n      // We need to differentiate between user entered escape chars, and escape chars added by lodash escapeRegExp to return the same query results in urls from before the line filter regex feature\n      // Since there is no reverse of the escapeRegExp method provided by lodash we're essentially building our own \"unescapeRegExp\"\n      const nextChar = stringArray[index + 1];\n      const isNextCharRegex = charsEscapedByEscapeRegExp.includes(nextChar);\n      return !(char === '\\\\' && isNextCharRegex);\n    })\n    .join('');\n}\n\n/**\n * Migrates old line filter to new variables\n */\nexport function migrateLineFilterV1(serviceScene: ServiceScene) {\n  const search = urlUtil.getUrlSearchParams();\n\n  const deprecatedLineFilterArray = search['var-lineFilter'];\n  if (!Array.isArray(deprecatedLineFilterArray) || !deprecatedLineFilterArray.length) {\n    return;\n  }\n  const deprecatedLineFilter = deprecatedLineFilterArray[0];\n  if (typeof deprecatedLineFilter !== 'string' || !deprecatedLineFilter) {\n    return;\n  }\n\n  const globalLineFilterVars = getLineFiltersVariable(serviceScene);\n  const caseSensitiveMatches = deprecatedLineFilter?.match(/\\|=.`(.+?)`/);\n\n  if (caseSensitiveMatches && caseSensitiveMatches.length === 2) {\n    globalLineFilterVars.addActivationHandler(() => {\n      globalLineFilterVars.setState({\n        filters: [\n          {\n            key: LineFilterCaseSensitive.caseSensitive,\n            operator: LineFilterOp.match,\n            value: removeEscapeChar(caseSensitiveMatches[1], true),\n            keyLabel: '0',\n          },\n        ],\n      });\n    });\n  }\n\n  const caseInsensitiveMatches = deprecatedLineFilter?.match(/`\\(\\?i\\)(.+)`/);\n  if (caseInsensitiveMatches && caseInsensitiveMatches.length === 2) {\n    globalLineFilterVars.addActivationHandler(() => {\n      globalLineFilterVars.updateFilters([\n        {\n          key: LineFilterCaseSensitive.caseInsensitive,\n          operator: LineFilterOp.match,\n          value: removeEscapeChar(caseInsensitiveMatches[1], false),\n          keyLabel: '0',\n        },\n      ]);\n    });\n  }\n\n  // Remove from url without refreshing\n  delete search['var-lineFilter'];\n  locationService.replace(urlUtil.renderUrl(location.pathname, search));\n}\n","import React from 'react';\n\nimport { LoadingState, PanelData } from '@grafana/data';\nimport {\n  QueryRunnerState,\n  SceneComponentProps,\n  SceneDataProvider,\n  SceneDataState,\n  SceneFlexItem,\n  SceneFlexLayout,\n  sceneGraph,\n  SceneObject,\n  SceneObjectBase,\n  SceneObjectState,\n  SceneQueryRunner,\n  SceneVariableValueChangedEvent,\n  VariableDependencyConfig,\n} from '@grafana/scenes';\nimport { LoadingPlaceholder } from '@grafana/ui';\nimport { getQueryRunner, getResourceQueryRunner } from 'services/panel';\nimport { buildDataQuery, buildResourceQuery } from 'services/query';\nimport {\n  EMPTY_VARIABLE_VALUE,\n  LEVEL_VARIABLE_VALUE,\n  LOG_STREAM_SELECTOR_EXPR,\n  SERVICE_NAME,\n  SERVICE_UI_LABEL,\n  VAR_DATASOURCE,\n  VAR_FIELDS,\n  VAR_LABELS,\n  VAR_LABELS_EXPR,\n  VAR_LEVELS,\n  VAR_PATTERNS,\n} from 'services/variables';\nimport { getMetadataService } from '../../services/metadata';\nimport { navigateToDrilldownPage, navigateToIndex, navigateToValueBreakdown } from '../../services/navigate';\nimport { areArraysEqual } from '../../services/comparison';\nimport { ActionBarScene } from './ActionBarScene';\nimport { breakdownViewsDefinitions, TabNames, valueBreakdownViews } from './BreakdownViews';\nimport {\n  getDataSourceVariable,\n  getFieldsVariable,\n  getLabelsVariable,\n  getLevelsVariable,\n  getLineFiltersVariable,\n  getMetadataVariable,\n  getPatternsVariable,\n} from '../../services/variableGetters';\nimport { logger } from '../../services/logger';\nimport { IndexScene, showLogsButtonSceneKey } from '../IndexScene/IndexScene';\nimport {\n  getDrilldownSlug,\n  getDrilldownValueSlug,\n  getPrimaryLabelFromUrl,\n  PageSlugs,\n  ValueSlugs,\n} from '../../services/routing';\nimport { replaceSlash } from '../../services/extensions/links';\nimport { ShowLogsButtonScene } from '../IndexScene/ShowLogsButtonScene';\nimport { migrateLineFilterV1 } from '../../services/migrations';\n\nexport const LOGS_PANEL_QUERY_REFID = 'logsPanelQuery';\nexport const LOGS_COUNT_QUERY_REFID = 'logsCountQuery';\nconst PATTERNS_QUERY_REFID = 'patterns';\nconst DETECTED_LABELS_QUERY_REFID = 'detectedLabels';\nconst DETECTED_FIELDS_QUERY_REFID = 'detectedFields';\n\ntype MakeOptional<T, K extends keyof T> = Pick<Partial<T>, K> & Omit<T, K>;\n\ntype ServiceSceneLoadingStates = {\n  [name in TabNames]: boolean;\n};\n\nexport interface ServiceSceneCustomState {\n  labelsCount?: number;\n  patternsCount?: number;\n  fieldsCount?: number;\n  loading?: boolean;\n  totalLogsCount?: number;\n  logsCount?: number;\n}\n\nexport interface ServiceSceneState extends SceneObjectState, ServiceSceneCustomState {\n  body: SceneFlexLayout | undefined;\n  drillDownLabel?: string;\n  $data: SceneDataProvider | undefined;\n  $logsCount: SceneQueryRunner | undefined;\n  $patternsData: SceneQueryRunner | undefined;\n  $detectedLabelsData: SceneQueryRunner | undefined;\n  $detectedFieldsData: SceneQueryRunner | undefined;\n  loadingStates: ServiceSceneLoadingStates;\n}\n\nexport function getLogsPanelFrame(data: PanelData | undefined) {\n  return data?.series.find((series) => series.refId === LOGS_PANEL_QUERY_REFID);\n}\n\nexport function getDetectedLabelsFrame(sceneRef: SceneObject) {\n  const serviceScene = sceneGraph.getAncestor(sceneRef, ServiceScene);\n  return serviceScene.state.$detectedLabelsData?.state.data?.series?.[0];\n}\n\nexport function getDetectedFieldsFrame(sceneRef: SceneObject) {\n  const serviceScene = sceneGraph.getAncestor(sceneRef, ServiceScene);\n  return getDetectedFieldsFrameFromQueryRunnerState(serviceScene.state.$detectedFieldsData?.state);\n}\n\nexport const getDetectedFieldsFrameFromQueryRunnerState = (state?: QueryRunnerState) => {\n  // Only ever one frame in the response\n  return state?.data?.series?.[0];\n};\n\nexport const getDetectedFieldsNamesFromQueryRunnerState = (state: QueryRunnerState) => {\n  // The first field, DETECTED_FIELDS_NAME_FIELD, has the list of names of the detected fields\n  return state.data?.series?.[0]?.fields?.[0];\n};\n\nexport const getDetectedFieldsParsersFromQueryRunnerState = (state: QueryRunnerState) => {\n  // The third field, DETECTED_FIELDS_PARSER_NAME, has the list of parsers of the detected fields\n  return state.data?.series?.[0]?.fields?.[2];\n};\n\nexport class ServiceScene extends SceneObjectBase<ServiceSceneState> {\n  protected _variableDependency = new VariableDependencyConfig(this, {\n    variableNames: [VAR_DATASOURCE, VAR_LABELS, VAR_FIELDS, VAR_PATTERNS, VAR_LEVELS],\n  });\n\n  public constructor(\n    state: MakeOptional<\n      ServiceSceneState,\n      | 'body'\n      | '$data'\n      | '$patternsData'\n      | '$detectedLabelsData'\n      | '$detectedFieldsData'\n      | 'loadingStates'\n      | '$logsCount'\n    >\n  ) {\n    super({\n      loadingStates: {\n        [TabNames.patterns]: false,\n        [TabNames.labels]: false,\n        [TabNames.fields]: false,\n        [TabNames.logs]: false,\n      },\n      loading: true,\n      body: state.body ?? buildGraphScene(),\n      $data: getServiceSceneQueryRunner(),\n      $patternsData: getPatternsQueryRunner(),\n      $detectedLabelsData: getDetectedLabelsQueryRunner(),\n      $detectedFieldsData: getDetectedFieldsQueryRunner(),\n      $logsCount: getLogCountQueryRunner(),\n      ...state,\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  private setSubscribeToLabelsVariable() {\n    const variable = getLabelsVariable(this);\n    if (variable.state.filters.length === 0) {\n      this.redirectToStart();\n      return;\n    }\n    this._subs.add(\n      variable.subscribeToState((newState, prevState) => {\n        if (newState.filters.length === 0) {\n          this.redirectToStart();\n        }\n\n        // If we remove the service name filter, we should redirect to the start\n        let { labelName, labelValue, breakdownLabel } = getPrimaryLabelFromUrl();\n\n        // Before we dynamically pulled label filter keys into the URL, we had hardcoded \"service\" as the primary label slug, we want to keep URLs the same, so overwrite \"service_name\" with \"service\" if that's the primary label\n        if (labelName === SERVICE_UI_LABEL) {\n          labelName = SERVICE_NAME;\n        }\n        const indexScene = sceneGraph.getAncestor(this, IndexScene);\n        const prevRouteMatch = indexScene.state.routeMatch;\n\n        // The \"primary\" label used in the URL is no longer active, pick a new one\n        if (\n          !newState.filters.some(\n            (f) => f.key === labelName && f.operator === '=' && replaceSlash(f.value) === labelValue\n          )\n        ) {\n          const newPrimaryLabel = newState.filters.find((f) => f.operator === '=' && f.value !== EMPTY_VARIABLE_VALUE);\n          if (newPrimaryLabel) {\n            indexScene.setState({\n              routeMatch: {\n                ...prevRouteMatch,\n                params: {\n                  ...prevRouteMatch?.params,\n                  labelName: newPrimaryLabel.key === SERVICE_NAME ? SERVICE_UI_LABEL : newPrimaryLabel.key,\n                  labelValue: replaceSlash(newPrimaryLabel.value),\n                },\n                url: prevRouteMatch?.url ?? '',\n                path: prevRouteMatch?.path ?? '',\n                isExact: prevRouteMatch?.isExact ?? true,\n              },\n            });\n\n            this.resetTabCount();\n\n            if (!breakdownLabel) {\n              navigateToDrilldownPage(getDrilldownSlug(), this);\n            } else {\n              navigateToValueBreakdown(getDrilldownValueSlug(), breakdownLabel, this);\n            }\n          } else {\n            this.redirectToStart();\n          }\n        } else if (!areArraysEqual(newState.filters, prevState.filters)) {\n          this.state.$patternsData?.runQueries();\n          this.state.$detectedLabelsData?.runQueries();\n          this.state.$detectedFieldsData?.runQueries();\n          this.state.$logsCount?.runQueries();\n        }\n      })\n    );\n  }\n\n  private redirectToStart() {\n    // Clear ongoing queries\n    this.setState({\n      $data: undefined,\n      $logsCount: undefined,\n      body: undefined,\n      $patternsData: undefined,\n      $detectedLabelsData: undefined,\n      $detectedFieldsData: undefined,\n      patternsCount: undefined,\n      labelsCount: undefined,\n      fieldsCount: undefined,\n      logsCount: undefined,\n      totalLogsCount: undefined,\n    });\n    getMetadataService().setServiceSceneState(this.state);\n    this._subs.unsubscribe();\n\n    this.clearAdHocVariables();\n\n    // Redirect to root with updated params, which will trigger history push back to index route, preventing empty page or empty service query bugs\n    navigateToIndex();\n  }\n\n  /**\n   * If the scene has previously been activated, we can see cached variable states when re-activating\n   * To prevent this we clear out the variable filters\n   */\n  private clearAdHocVariables = () => {\n    const variables = [getLabelsVariable(this), getFieldsVariable(this), getLevelsVariable(this)];\n    variables.forEach((variable) => {\n      variable.setState({\n        filters: [],\n      });\n    });\n  };\n\n  /**\n   * After routing we need to pull any data set to the service scene by other routes from the metadata singleton,\n   * as each route has a different instantiation of this scene\n   * @private\n   */\n  private getMetadata() {\n    const metadataService = getMetadataService();\n    const state = metadataService.getServiceSceneState();\n\n    if (state) {\n      this.setState({\n        ...state,\n      });\n    }\n  }\n\n  private onActivate() {\n    // Hide show logs button\n    const showLogsButton = sceneGraph.findByKeyAndType(this, showLogsButtonSceneKey, ShowLogsButtonScene);\n    showLogsButton.setState({ hidden: true });\n    this.getMetadata();\n    this.resetBodyAndData();\n\n    this.setBreakdownView();\n\n    // Run queries on activate\n    this.runQueries();\n\n    // Query Subscriptions\n    this._subs.add(this.subscribeToPatternsQuery());\n    this._subs.add(this.subscribeToDetectedLabelsQuery());\n\n    // Fields tab will update its own count, and update count when a query fails\n    this._subs.add(this.subscribeToDetectedFieldsQuery(getDrilldownSlug() !== PageSlugs.fields));\n    this._subs.add(this.subscribeToLogsQuery());\n    this._subs.add(this.subscribeToLogsCountQuery());\n\n    // Variable subscriptions\n    this.setSubscribeToLabelsVariable();\n    this._subs.add(this.subscribeToFieldsVariable());\n    this._subs.add(this.subscribeToMetadataVariable());\n    this._subs.add(this.subscribeToLevelsVariable());\n    this._subs.add(this.subscribeToDataSourceVariable());\n    this._subs.add(this.subscribeToPatternsVariable());\n    this._subs.add(this.subscribeToLineFiltersVariable());\n\n    // Update query runner on manual time range change\n    this._subs.add(this.subscribeToTimeRange());\n\n    // Migrations\n    migrateLineFilterV1(this);\n  }\n\n  private subscribeToPatternsVariable() {\n    return getPatternsVariable(this).subscribeToState((newState, prevState) => {\n      if (newState.value !== prevState.value) {\n        this.state.$detectedFieldsData?.runQueries();\n        this.state.$logsCount?.runQueries();\n      }\n    });\n  }\n\n  private subscribeToLineFiltersVariable() {\n    return getLineFiltersVariable(this).subscribeToEvent(SceneVariableValueChangedEvent, () => {\n      this.state.$logsCount?.runQueries();\n      this.state.$detectedFieldsData?.runQueries();\n    });\n  }\n\n  private subscribeToDataSourceVariable() {\n    return getDataSourceVariable(this).subscribeToState(() => {\n      this.redirectToStart();\n    });\n  }\n\n  private resetTabCount() {\n    this.setState({\n      fieldsCount: undefined,\n      labelsCount: undefined,\n      patternsCount: undefined,\n    });\n\n    getMetadataService().setServiceSceneState(this.state);\n  }\n\n  private subscribeToFieldsVariable() {\n    return getFieldsVariable(this).subscribeToState((newState, prevState) => {\n      if (!areArraysEqual(newState.filters, prevState.filters)) {\n        this.state.$detectedFieldsData?.runQueries();\n        this.state.$logsCount?.runQueries();\n      }\n    });\n  }\n\n  private subscribeToMetadataVariable() {\n    return getMetadataVariable(this).subscribeToState((newState, prevState) => {\n      if (!areArraysEqual(newState.filters, prevState.filters)) {\n        this.state.$detectedFieldsData?.runQueries();\n        this.state.$logsCount?.runQueries();\n      }\n    });\n  }\n\n  private subscribeToLevelsVariable() {\n    return getLevelsVariable(this).subscribeToState((newState, prevState) => {\n      if (!areArraysEqual(newState.filters, prevState.filters)) {\n        this.state.$detectedFieldsData?.runQueries();\n        this.state.$logsCount?.runQueries();\n      }\n    });\n  }\n\n  private runQueries() {\n    const slug = getDrilldownSlug();\n    const parentSlug = getDrilldownValueSlug();\n\n    // If we don't have a patterns count in the tabs, or we are activating the patterns scene, run the pattern query\n    if (slug === PageSlugs.patterns || this.state.patternsCount === undefined) {\n      this.state.$patternsData?.runQueries();\n    }\n\n    // If we don't have a detected labels count, or we are activating the labels scene, run the detected labels query\n    if (slug === PageSlugs.labels || parentSlug === ValueSlugs.label || this.state.labelsCount === undefined) {\n      this.state.$detectedLabelsData?.runQueries();\n    }\n\n    // If we don't have a detected fields count, or we are activating the fields scene, run the detected fields query\n    if (slug === PageSlugs.fields || parentSlug === ValueSlugs.field || this.state.fieldsCount === undefined) {\n      this.state.$detectedFieldsData?.runQueries();\n    }\n    if (this.state.logsCount === undefined) {\n      this.state.$logsCount?.runQueries();\n    }\n  }\n\n  private subscribeToPatternsQuery() {\n    return this.state.$patternsData?.subscribeToState((newState) => {\n      this.updateLoadingState(newState, TabNames.patterns);\n      if (newState.data?.state === LoadingState.Done) {\n        const patternsResponse = newState.data.series;\n        if (patternsResponse?.length !== undefined) {\n          // Save the count of patterns to state\n          this.setState({\n            patternsCount: patternsResponse.length,\n          });\n          getMetadataService().setPatternsCount(patternsResponse.length);\n        }\n      }\n    });\n  }\n\n  private subscribeToDetectedLabelsQuery() {\n    return this.state.$detectedLabelsData?.subscribeToState((newState) => {\n      this.updateLoadingState(newState, TabNames.labels);\n      if (newState.data?.state === LoadingState.Done) {\n        const detectedLabelsResponse = newState.data;\n        // Detected labels API call always returns a single frame, with a field for each label\n        const detectedLabelsFields = detectedLabelsResponse.series[0].fields;\n        if (detectedLabelsResponse.series.length !== undefined && detectedLabelsFields.length !== undefined) {\n          const removeSpecialFields = detectedLabelsResponse.series[0].fields.filter(\n            (f) => LEVEL_VARIABLE_VALUE !== f.name\n          );\n\n          this.setState({\n            labelsCount: removeSpecialFields.length + 1, // Add one for detected_level\n          });\n          getMetadataService().setLabelsCount(detectedLabelsFields.length);\n        }\n      }\n    });\n  }\n\n  private updateLoadingState(newState: SceneDataState, key: keyof ServiceSceneLoadingStates) {\n    const loadingStates = this.state.loadingStates;\n    loadingStates[key] = newState.data?.state === LoadingState.Loading;\n    // set loading state to true if any of the queries are loading\n    const loading = Object.values(loadingStates).some((v) => v);\n    this.setState({ loading, loadingStates });\n  }\n\n  private subscribeToLogsQuery() {\n    return this.state.$data?.subscribeToState((newState, prevState) => {\n      this.updateLoadingState(newState, TabNames.logs);\n      if (newState.data?.state === LoadingState.Done || newState.data?.state === LoadingState.Streaming) {\n        const resultCount = newState.data.series[0]?.length ?? 0;\n        if (resultCount !== this.state.logsCount) {\n          this.setState({\n            logsCount: resultCount,\n          });\n        }\n      }\n    });\n  }\n\n  private subscribeToLogsCountQuery() {\n    return this.state.$logsCount?.subscribeToState((newState) => {\n      if (newState.data?.state === LoadingState.Done) {\n        const value: number | undefined = newState.data.series[0]?.fields?.[1]?.values?.[0];\n        this.setState({\n          totalLogsCount: value,\n        });\n      }\n    });\n  }\n\n  private subscribeToDetectedFieldsQuery(updateFieldsCount: boolean) {\n    return this.state.$detectedFieldsData?.subscribeToState((newState) => {\n      this.updateLoadingState(newState, TabNames.fields);\n      if (updateFieldsCount && newState.data?.state === LoadingState.Done) {\n        const detectedFieldsResponse = newState.data;\n        const detectedFieldsFields = detectedFieldsResponse.series[0];\n\n        if (detectedFieldsFields !== undefined && detectedFieldsFields.length !== this.state.fieldsCount) {\n          this.setState({\n            fieldsCount: detectedFieldsFields.length,\n          });\n          getMetadataService().setFieldsCount(detectedFieldsFields.length);\n        }\n      }\n    });\n  }\n\n  private subscribeToTimeRange() {\n    return sceneGraph.getTimeRange(this).subscribeToState(() => {\n      this.state.$patternsData?.runQueries();\n      this.state.$detectedLabelsData?.runQueries();\n      this.state.$detectedFieldsData?.runQueries();\n      this.state.$logsCount?.runQueries();\n    });\n  }\n\n  private resetBodyAndData() {\n    let stateUpdate: Partial<ServiceSceneState> = {};\n\n    if (!this.state.$data) {\n      stateUpdate.$data = getServiceSceneQueryRunner();\n    }\n\n    if (!this.state.$patternsData) {\n      stateUpdate.$patternsData = getPatternsQueryRunner();\n    }\n\n    if (!this.state.$detectedLabelsData) {\n      stateUpdate.$detectedLabelsData = getDetectedLabelsQueryRunner();\n    }\n\n    if (!this.state.$detectedFieldsData) {\n      stateUpdate.$detectedFieldsData = getDetectedFieldsQueryRunner();\n    }\n\n    if (!this.state.$logsCount) {\n      stateUpdate.$logsCount = getLogCountQueryRunner();\n    }\n\n    if (!this.state.body) {\n      stateUpdate.body = buildGraphScene();\n    }\n\n    if (Object.keys(stateUpdate).length) {\n      this.setState(stateUpdate);\n    }\n  }\n\n  public setBreakdownView() {\n    const { body } = this.state;\n    const breakdownView = getDrilldownSlug();\n    const breakdownViewDef = breakdownViewsDefinitions.find((v) => v.value === breakdownView);\n\n    if (!body) {\n      const err = new Error('body is not defined in setBreakdownView!');\n      logger.error(err, { msg: 'ServiceScene setBreakdownView error' });\n      throw err;\n    }\n\n    if (breakdownViewDef) {\n      body.setState({\n        children: [\n          ...body.state.children.slice(0, 1),\n          breakdownViewDef.getScene((length) => {\n            if (breakdownViewDef.value === 'fields') {\n              this.setState({ fieldsCount: length });\n            }\n          }),\n        ],\n      });\n    } else {\n      const valueBreakdownView = getDrilldownValueSlug();\n      const valueBreakdownViewDef = valueBreakdownViews.find((v) => v.value === valueBreakdownView);\n\n      if (valueBreakdownViewDef && this.state.drillDownLabel) {\n        body.setState({\n          children: [...body.state.children.slice(0, 1), valueBreakdownViewDef.getScene(this.state.drillDownLabel)],\n        });\n      } else {\n        logger.error(new Error('not setting breakdown view'), { msg: 'setBreakdownView error' });\n      }\n    }\n  }\n\n  static Component = ({ model }: SceneComponentProps<ServiceScene>) => {\n    const { body } = model.useState();\n    if (body) {\n      return <body.Component model={body} />;\n    }\n\n    return <LoadingPlaceholder text={'Loading...'} />;\n  };\n}\n\nfunction buildGraphScene() {\n  return new SceneFlexLayout({\n    direction: 'column',\n    children: [\n      new SceneFlexItem({\n        ySizing: 'content',\n        body: new ActionBarScene({}),\n      }),\n    ],\n  });\n}\n\nfunction getPatternsQueryRunner() {\n  return getResourceQueryRunner([\n    buildResourceQuery(`{${VAR_LABELS_EXPR}}`, 'patterns', { refId: PATTERNS_QUERY_REFID }),\n  ]);\n}\n\nfunction getDetectedLabelsQueryRunner() {\n  return getResourceQueryRunner([\n    buildResourceQuery(`{${VAR_LABELS_EXPR}}`, 'detected_labels', { refId: DETECTED_LABELS_QUERY_REFID }),\n  ]);\n}\n\nfunction getDetectedFieldsQueryRunner() {\n  return getResourceQueryRunner([\n    buildResourceQuery(LOG_STREAM_SELECTOR_EXPR, 'detected_fields', { refId: DETECTED_FIELDS_QUERY_REFID }),\n  ]);\n}\n\nfunction getServiceSceneQueryRunner() {\n  return getQueryRunner([buildDataQuery(LOG_STREAM_SELECTOR_EXPR, { refId: LOGS_PANEL_QUERY_REFID })]);\n}\n\nfunction getLogCountQueryRunner() {\n  const queryRunner = getQueryRunner(\n    [\n      buildDataQuery(`sum(count_over_time(${LOG_STREAM_SELECTOR_EXPR}[$__auto]))`, {\n        refId: LOGS_COUNT_QUERY_REFID,\n        queryType: 'instant',\n      }),\n    ],\n    { runQueriesMode: 'manual' } // for some reason when this query is set to auto, it doesn't run on time range update, looks like there is different behavior with data providers not in the special $data prop\n  );\n\n  if (queryRunner instanceof SceneQueryRunner) {\n    return queryRunner;\n  }\n  const error = new Error('log count query provider is not query runner!');\n  logger.error(error, { msg: 'getLogCountQueryRunner: invalid return type' });\n  throw error;\n}\n","import { SceneComponentProps, SceneObjectBase, SceneObjectState } from '@grafana/scenes';\nimport React from 'react';\nimport { Icon, ToolbarButton, useStyles2 } from '@grafana/ui';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { css } from '@emotion/css';\nimport { getFavoriteLabelValuesFromStorage } from '../../services/store';\nimport { addToFavorites, removeFromFavorites } from '../../services/favorites';\n\nexport interface FavoriteServiceHeaderActionSceneState extends SceneObjectState {\n  labelValue: string;\n  labelName: string;\n  ds: string;\n  hover?: boolean;\n}\n\nexport class FavoriteServiceHeaderActionScene extends SceneObjectBase<FavoriteServiceHeaderActionSceneState> {\n  public static Component = ({ model }: SceneComponentProps<FavoriteServiceHeaderActionScene>) => {\n    const { ds, labelValue, labelName, hover } = model.useState();\n    const isFavorite = getFavoriteLabelValuesFromStorage(ds, labelName).includes(labelValue);\n    const styles = useStyles2((theme) => getStyles(theme, isFavorite, hover));\n    const tooltipCopy = isFavorite ? `Remove  ${labelValue} from favorites` : `Add ${labelValue} to favorites`;\n\n    return (\n      <span className={styles.wrapper}>\n        <ToolbarButton\n          onMouseOver={() => {\n            model.setHover(true);\n          }}\n          onMouseOut={() => {\n            model.setHover(false);\n          }}\n          icon={<Icon name={isFavorite ? 'favorite' : 'star'} size=\"lg\" type={isFavorite ? 'mono' : 'default'} />}\n          color={isFavorite ? 'rgb(235, 123, 24)' : '#ccc'}\n          onClick={() => model.onClick(isFavorite)}\n          name={'star'}\n          aria-label={tooltipCopy}\n          tooltip={tooltipCopy}\n        />\n      </span>\n    );\n  };\n\n  public setHover(hover: boolean) {\n    this.setState({\n      hover,\n    });\n  }\n\n  public onClick(isFavorite: boolean) {\n    if (isFavorite) {\n      removeFromFavorites(this.state.labelName, this.state.labelValue, this);\n    } else {\n      addToFavorites(this.state.labelName, this.state.labelValue, this);\n    }\n  }\n}\n\nfunction getStyles(theme: GrafanaTheme2, isFavorite: boolean, hover = false) {\n  return {\n    wrapper: css({\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'center',\n      alignSelf: 'center',\n    }),\n  };\n}\n","import React from 'react';\n\nimport { SceneComponentProps, SceneObject, SceneObjectBase, SceneObjectState } from '@grafana/scenes';\nimport { Button, useStyles2 } from '@grafana/ui';\nimport { reportAppInteraction, USER_EVENTS_ACTIONS, USER_EVENTS_PAGES } from 'services/analytics';\nimport { navigateToInitialPageAfterServiceSelection } from '../../services/navigate';\nimport { getLabelsVariable } from '../../services/variableGetters';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { css } from '@emotion/css';\nimport { SERVICE_NAME, SERVICE_UI_LABEL } from '../../services/variables';\nimport { FilterOp } from '../../services/filterTypes';\nimport { testIds } from '../../services/testIds';\nimport { addToFavorites } from '../../services/favorites';\n\nexport interface SelectServiceButtonState extends SceneObjectState {\n  labelValue: string;\n  labelName: string;\n}\nexport function selectLabel(primaryLabelName: string, primaryLabelValue: string, sceneRef: SceneObject) {\n  const variable = getLabelsVariable(sceneRef);\n\n  reportAppInteraction(USER_EVENTS_PAGES.service_selection, USER_EVENTS_ACTIONS.service_selection.service_selected, {\n    value: primaryLabelValue,\n    label: primaryLabelName,\n  });\n\n  const filteredFilters = variable.state.filters.filter(\n    (f) => !(f.key === primaryLabelName && f.value === primaryLabelValue)\n  );\n\n  const filters = [\n    ...filteredFilters,\n    {\n      key: primaryLabelName,\n      operator: FilterOp.Equal,\n      value: primaryLabelValue,\n    },\n  ];\n\n  variable.setState({\n    filters,\n  });\n\n  addToFavorites(primaryLabelName, primaryLabelValue, sceneRef);\n\n  if (primaryLabelName === SERVICE_NAME) {\n    primaryLabelName = SERVICE_UI_LABEL;\n  }\n\n  // In this case, we don't have a ServiceScene created yet, so we call a special function to navigate there for the first time\n  navigateToInitialPageAfterServiceSelection(primaryLabelName, primaryLabelValue);\n}\n\nexport class SelectServiceButton extends SceneObjectBase<SelectServiceButtonState> {\n  public onClick = () => {\n    if (!this.state.labelValue) {\n      return;\n    }\n    selectLabel(this.state.labelName, this.state.labelValue, this);\n  };\n\n  public static Component = ({ model }: SceneComponentProps<SelectServiceButton>) => {\n    const styles = useStyles2(getStyles);\n    return (\n      <Button\n        data-testid={testIds.index.showLogsButton}\n        tooltip={`View logs for ${model.state.labelValue}`}\n        className={styles.button}\n        variant=\"secondary\"\n        size=\"sm\"\n        onClick={model.onClick}\n      >\n        Show logs\n      </Button>\n    );\n  };\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    button: css({\n      alignSelf: 'center',\n    }),\n  };\n}\n","import React from 'react';\nimport { GrotError } from 'Components/GrotError';\nimport { TextLink, Text } from '@grafana/ui';\n\nexport const ConfigureVolumeError = () => {\n  return (\n    <GrotError>\n      <p>Log volume has not been configured.</p>\n      <p>\n        <TextLink href=\"https://grafana.com/docs/loki/latest/reference/api/#query-log-volume\" external>\n          Instructions to enable volume in the Loki config:\n        </TextLink>\n      </p>\n      <Text textAlignment=\"left\">\n        <pre>\n          <code>\n            limits_config:\n            <br />\n            &nbsp;&nbsp;volume_enabled: true\n          </code>\n        </pre>\n      </Text>\n    </GrotError>\n  );\n};\n","import React from 'react';\nimport { GrotError } from 'Components/GrotError';\n\nexport const NoServiceSearchResults = () => {\n  return (\n    <GrotError>\n      <p>No service matched your search.</p>\n    </GrotError>\n  );\n};\n","import { SceneComponentProps, sceneGraph, SceneObjectBase, SceneObjectState } from '@grafana/scenes';\nimport { Select, Stack, useStyles2 } from '@grafana/ui';\nimport React from 'react';\nimport { ServiceSelectionScene } from './ServiceSelectionScene';\nimport { ServiceSelectionTabsScene, TabOption } from './ServiceSelectionTabsScene';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { css } from '@emotion/css';\n\nexport interface TabPopoverSceneState extends SceneObjectState {}\n\nexport class TabPopoverScene extends SceneObjectBase<TabPopoverSceneState> {\n  public static Component = ({ model }: SceneComponentProps<TabPopoverScene>) => {\n    const serviceSelectionScene = sceneGraph.getAncestor(model, ServiceSelectionScene);\n    const serviceSelectionTabsScene = sceneGraph.getAncestor(model, ServiceSelectionTabsScene);\n    const { tabOptions, showPopover } = serviceSelectionTabsScene.useState();\n    const popoverStyles = useStyles2(getPopoverStyles);\n\n    const tabOptionsWithIcon: TabOption[] = tabOptions.map((opt) => {\n      return {\n        ...opt,\n        icon: opt.saved ? 'save' : undefined,\n        label: `${opt.label}`,\n      };\n    });\n\n    return (\n      <Stack direction=\"column\" gap={0} role=\"tooltip\">\n        <div className={popoverStyles.card.body}>\n          <Select<string, { options: TabOption[] }>\n            menuShouldPortal={false}\n            width={50}\n            onBlur={() => {\n              serviceSelectionTabsScene.toggleShowPopover();\n            }}\n            autoFocus={true}\n            isOpen={showPopover}\n            placeholder={'Search labels'}\n            options={tabOptionsWithIcon}\n            isSearchable={true}\n            openMenuOnFocus={true}\n            onChange={(option) => {\n              // Add value to variable\n              if (option.value) {\n                // Hide the popover\n                serviceSelectionTabsScene.toggleShowPopover();\n                // Set new tab\n                serviceSelectionScene.setSelectedTab(option.value);\n              }\n            }}\n          />\n        </div>\n      </Stack>\n    );\n  };\n}\n\nconst getPopoverStyles = (theme: GrafanaTheme2) => ({\n  card: {\n    body: css({\n      padding: theme.spacing(1),\n    }),\n    p: css({\n      maxWidth: 300,\n    }),\n  },\n});\n","import { SceneComponentProps, sceneGraph, SceneObjectBase, SceneObjectState, SceneQueryRunner } from '@grafana/scenes';\nimport React, { useRef } from 'react';\nimport { Icon, Popover, PopoverController, Tab, TabsBar, Tooltip, useStyles2 } from '@grafana/ui';\nimport { GrafanaTheme2, LoadingState, SelectableValue } from '@grafana/data';\nimport { css, cx } from '@emotion/css';\nimport { SERVICE_NAME, SERVICE_UI_LABEL } from '../../services/variables';\nimport { truncateText } from '../../services/text';\nimport { rest } from 'lodash';\nimport { ServiceSelectionScene } from './ServiceSelectionScene';\nimport { getSceneQueryRunner } from '../../services/panel';\nimport { buildResourceQuery } from '../../services/query';\nimport { TabPopoverScene } from './TabPopoverScene';\nimport { getDataSourceVariable, getServiceSelectionPrimaryLabel } from '../../services/variableGetters';\nimport { getFavoriteTabsFromStorage, removeTabFromLocalStorage } from '../../services/store';\n\nexport interface TabOption extends SelectableValue<string> {\n  label: string;\n  value: string;\n  active?: boolean;\n  saved?: boolean;\n  savedIndex?: number;\n}\n\nexport interface ServiceSelectionTabsSceneState extends SceneObjectState {\n  tabOptions: TabOption[];\n  showPopover: boolean;\n  $labelsData: SceneQueryRunner;\n  popover?: TabPopoverScene;\n}\n\ninterface LabelOptions {\n  label: string;\n  cardinality: number;\n}\n\nexport class ServiceSelectionTabsScene extends SceneObjectBase<ServiceSelectionTabsSceneState> {\n  constructor(state: Partial<ServiceSelectionTabsSceneState>) {\n    super({\n      showPopover: false,\n      $labelsData: getSceneQueryRunner({\n        queries: [buildResourceQuery('', 'detected_labels')],\n        runQueriesMode: 'manual',\n      }),\n      tabOptions: [\n        {\n          label: SERVICE_UI_LABEL,\n          value: SERVICE_NAME,\n          saved: true,\n        },\n      ],\n      ...state,\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  public static Component = ({ model }: SceneComponentProps<ServiceSelectionTabsScene>) => {\n    // Scene vars\n    const { tabOptions, showPopover, popover, $labelsData } = model.useState();\n    const { data } = $labelsData.useState();\n    const serviceSelectionScene = sceneGraph.getAncestor(model, ServiceSelectionScene);\n    const primaryLabel = getServiceSelectionPrimaryLabel(model);\n    // Re-render when active tab changes, which is stored in the primary label variable\n    primaryLabel.useState();\n\n    // Constants\n    const styles = useStyles2(getTabsStyles);\n    const popoverRef = useRef<HTMLElement>(null);\n    const maxLabelLength = 15;\n\n    return (\n      <TabsBar>\n        {tabOptions\n          .filter((tabLabel) => tabLabel.saved || tabLabel.active || tabLabel.value === SERVICE_NAME)\n          .sort((a, b) => {\n            // Service name goes first\n            if (a.value === SERVICE_NAME || b.value === SERVICE_NAME) {\n              return a.value === SERVICE_NAME ? -1 : 1;\n            }\n\n            // Then sort by the order added to local storage\n            return (a.savedIndex ?? 0) - (b.savedIndex ?? 0);\n          })\n          .map((tabLabel) => {\n            const tab = (\n              <Tab\n                key={tabLabel.value}\n                onChangeTab={() => {\n                  // Set the new active tab\n                  serviceSelectionScene.setSelectedTab(tabLabel.value);\n                }}\n                label={truncateText(tabLabel.label, maxLabelLength, true)}\n                active={tabLabel.active}\n                suffix={\n                  tabLabel.value !== SERVICE_NAME\n                    ? (props) => {\n                        return (\n                          <>\n                            <Tooltip content={'Remove tab'}>\n                              <Icon\n                                onKeyDownCapture={(e) => {\n                                  if (e.key === 'Enter') {\n                                    model.removeSavedTab(tabLabel.value);\n                                  }\n                                }}\n                                onClick={(e) => {\n                                  // Don't bubble up to the tab component, we don't want to select the tab we're removing\n                                  e.stopPropagation();\n                                  model.removeSavedTab(tabLabel.value);\n                                }}\n                                name={'times'}\n                                className={cx(props.className)}\n                              />\n                            </Tooltip>\n                          </>\n                        );\n                      }\n                    : undefined\n                }\n              />\n            );\n\n            if (tabLabel.label.length > maxLabelLength) {\n              return (\n                <Tooltip key={tabLabel.value} content={tabLabel.label}>\n                  {tab}\n                </Tooltip>\n              );\n            } else {\n              return tab;\n            }\n          })}\n        {data?.state === LoadingState.Loading && <Tab label={'Loading tabs'} icon={'spinner'} />}\n\n        {/* Add more tabs tab */}\n        {data?.state === LoadingState.Done && (\n          <span className={styles.addTab}>\n            <Tab onChangeTab={model.toggleShowPopover} label={'Add label'} ref={popoverRef} icon={'plus-circle'} />\n          </span>\n        )}\n\n        {popover && (\n          <PopoverController content={<popover.Component model={popover} />}>\n            {(showPopper, hidePopper, popperProps) => {\n              const blurFocusProps = {\n                onBlur: hidePopper,\n                onFocus: showPopper,\n              };\n\n              return (\n                <>\n                  {popoverRef.current && (\n                    <>\n                      {/* @ts-expect-error @todo upgrade typescript */}\n                      <Popover\n                        {...popperProps}\n                        {...rest}\n                        show={showPopover}\n                        wrapperClassName={styles.popover}\n                        referenceElement={popoverRef.current}\n                        renderArrow={true}\n                        {...blurFocusProps}\n                      />\n                    </>\n                  )}\n                </>\n              );\n            }}\n          </PopoverController>\n        )}\n      </TabsBar>\n    );\n  };\n\n  removeSavedTab = (labelName: string) => {\n    removeTabFromLocalStorage(getDataSourceVariable(this).getValue().toString(), labelName);\n\n    const labels = this.getLabelsFromQueryRunnerState();\n    if (labels) {\n      this.populatePrimaryLabelsVariableOptions(labels);\n    }\n\n    // If the user is closing the active tab, select the default tab\n    const serviceSelectionScene = sceneGraph.getAncestor(this, ServiceSelectionScene);\n    if (serviceSelectionScene.getSelectedTab() === labelName) {\n      serviceSelectionScene.selectDefaultLabelTab();\n    }\n  };\n\n  toggleShowPopover = () => {\n    this.setState({\n      showPopover: !this.state.showPopover,\n    });\n  };\n\n  getLabelsFromQueryRunnerState(state = this.state.$labelsData?.state): LabelOptions[] | undefined {\n    return state.data?.series[0].fields.map((f) => {\n      return {\n        label: f.name,\n        cardinality: f.values[0],\n      };\n    });\n  }\n\n  public populatePrimaryLabelsVariableOptions(labels: LabelOptions[]) {\n    const serviceSelectionScene = sceneGraph.getAncestor(this, ServiceSelectionScene);\n    const selectedTab = serviceSelectionScene.getSelectedTab();\n    const savedTabs = getFavoriteTabsFromStorage(getDataSourceVariable(this).getValue().toString());\n\n    const tabOptions: TabOption[] = labels\n      .map((l) => {\n        const savedIndex = savedTabs.indexOf(l.label);\n        const option: TabOption = {\n          label: l.label === SERVICE_NAME ? SERVICE_UI_LABEL : l.label,\n          value: l.label,\n          active: selectedTab === l.label,\n          saved: savedIndex !== -1,\n          savedIndex,\n        };\n        return option;\n      })\n      .sort((a, b) => {\n        // Sort service first\n        if (a.value === SERVICE_NAME || b.value === SERVICE_NAME) {\n          return a.value === SERVICE_NAME ? -1 : 1;\n        }\n\n        // Then sort alphabetically\n        return a.label < b.label ? -1 : a.label > b.label ? 1 : 0;\n      });\n    this.setState({\n      tabOptions,\n    });\n  }\n\n  private runDetectedLabels() {\n    this.state.$labelsData.runQueries();\n  }\n\n  private runDetectedLabelsSubs() {\n    // Update labels/tabs on time range change\n    this._subs.add(\n      sceneGraph.getTimeRange(this).subscribeToState(() => {\n        this.runDetectedLabels();\n      })\n    );\n\n    // Update labels (tabs) when datasource is changed\n    this._subs.add(\n      getDataSourceVariable(this).subscribeToState(() => {\n        this.runDetectedLabels();\n      })\n    );\n  }\n\n  private onActivate() {\n    // Get labels\n    this.runDetectedLabels();\n\n    this.setState({\n      popover: new TabPopoverScene({}),\n    });\n\n    this.runDetectedLabelsSubs();\n\n    // Update labels (tabs) when datasource is changed\n    this._subs.add(\n      getDataSourceVariable(this).subscribeToState(() => {\n        this.state.$labelsData.runQueries();\n      })\n    );\n\n    this._subs.add(\n      getServiceSelectionPrimaryLabel(this).subscribeToState(() => {\n        const labels = this.getLabelsFromQueryRunnerState(this.state.$labelsData?.state);\n        if (labels) {\n          this.populatePrimaryLabelsVariableOptions(labels);\n        }\n      })\n    );\n\n    this._subs.add(\n      this.state.$labelsData.subscribeToState((newState) => {\n        if (newState.data?.state === LoadingState.Done) {\n          const labels = this.getLabelsFromQueryRunnerState(newState);\n          const serviceSelectionScene = sceneGraph.getAncestor(this, ServiceSelectionScene);\n\n          if (labels) {\n            this.populatePrimaryLabelsVariableOptions(labels);\n          }\n\n          const selectedTab = serviceSelectionScene.getSelectedTab();\n          // If the tab is no longer available, either because the user changed the datasource, or time range, select the default tab\n          if (!labels?.some((label) => label.label === selectedTab)) {\n            serviceSelectionScene.selectDefaultLabelTab();\n          }\n        }\n      })\n    );\n  }\n}\n\nconst getTabsStyles = (theme: GrafanaTheme2) => ({\n  addTab: css({\n    label: 'add-label-tab',\n    color: theme.colors.primary.text,\n    '& button': {\n      color: theme.colors.primary.text,\n    },\n  }),\n  popover: css({\n    borderRadius: theme.shape.radius.default,\n    boxShadow: theme.shadows.z3,\n    background: theme.colors.background.primary,\n    border: `1px solid ${theme.colors.border.weak}`,\n  }),\n});\n","import React from 'react';\nimport { GrotError } from 'Components/GrotError';\n\nexport const NoServiceVolume = (props: { labelName: string }) => {\n  return (\n    <GrotError>\n      <p>\n        No logs found in <strong>{props.labelName}</strong>.<br />\n        Please adjust time range or select another label.\n      </p>\n    </GrotError>\n  );\n};\n","import { SceneComponentProps, SceneObjectBase, SceneObjectState } from '@grafana/scenes';\nimport { Button, useStyles2 } from '@grafana/ui';\nimport { testIds } from '../../services/testIds';\nimport { addToFilters, FilterType } from '../ServiceScene/Breakdowns/AddToFiltersButton';\nimport { VAR_LABELS } from '../../services/variables';\nimport { getLabelsVariable, getValueFromAdHocVariableFilter } from '../../services/variableGetters';\nimport { reportAppInteraction, USER_EVENTS_ACTIONS, USER_EVENTS_PAGES } from '../../services/analytics';\nimport { css } from '@emotion/css';\nimport React from 'react';\nimport { FilterOp } from '../../services/filterTypes';\n\nexport interface AddLabelToFiltersHeaderActionSceneState extends SceneObjectState {\n  name: string;\n  value: string;\n  hidden?: boolean;\n  included: boolean | null;\n}\n\nexport class AddLabelToFiltersHeaderActionScene extends SceneObjectBase<AddLabelToFiltersHeaderActionSceneState> {\n  constructor(state: Omit<AddLabelToFiltersHeaderActionSceneState, 'included'>) {\n    super({\n      ...state,\n      included: null,\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  onActivate() {\n    this.setState({ ...this.isSelected() });\n    this._subs.add(\n      getLabelsVariable(this).subscribeToState(() => {\n        const selected = this.isSelected();\n        if (this.state.included !== selected.included) {\n          this.setState({ ...selected });\n        }\n      })\n    );\n  }\n\n  isSelected = () => {\n    const variable = getLabelsVariable(this);\n\n    // Check if the filter is already there\n    const filterInSelectedFilters = variable.state.filters.find((f) => {\n      const value = getValueFromAdHocVariableFilter(variable, f);\n      return f.key === this.state.name && value.value === this.state.value;\n    });\n\n    if (!filterInSelectedFilters) {\n      return { included: false };\n    }\n\n    return {\n      included: filterInSelectedFilters.operator === FilterOp.Equal,\n    };\n  };\n\n  public static Component = ({ model }: SceneComponentProps<AddLabelToFiltersHeaderActionScene>) => {\n    const { value, hidden, included } = model.useState();\n\n    if (hidden) {\n      return <></>;\n    }\n\n    const styles = useStyles2(getStyles);\n    return (\n      <span className={styles.wrapper}>\n        <Button\n          tooltip={included === true ? `Remove ${value} from filters` : `Add ${value} to filters`}\n          variant={'secondary'}\n          fill={'outline'}\n          icon={included === true ? 'minus' : 'plus'}\n          size=\"sm\"\n          aria-selected={included === true}\n          className={styles.includeButton}\n          onClick={() => (included === true ? model.onClick('clear') : model.onClick('include'))}\n          data-testid={testIds.exploreServiceDetails.buttonFilterInclude}\n        />\n      </span>\n    );\n  };\n\n  public getFilter() {\n    return { name: this.state.name, value: this.state.value };\n  }\n\n  public onClick = (type: FilterType) => {\n    const filter = this.getFilter();\n\n    addToFilters(filter.name, filter.value, type, this, VAR_LABELS);\n\n    const variable = getLabelsVariable(this);\n    reportAppInteraction(USER_EVENTS_PAGES.service_selection, USER_EVENTS_ACTIONS.service_selection.add_to_filters, {\n      filterType: 'index-filters',\n      key: filter.name,\n      action: type,\n      filtersLength: variable?.state.filters.length || 0,\n    });\n\n    this.setState({ ...this.isSelected() });\n  };\n}\n\nconst getStyles = () => {\n  return {\n    container: css({\n      display: 'flex',\n      justifyContent: 'center',\n    }),\n    includeButton: css({\n      borderRadius: 0,\n    }),\n    wrapper: css({\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'center',\n      alignSelf: 'center',\n    }),\n  };\n};\n","import { css } from '@emotion/css';\nimport { debounce } from 'lodash';\nimport React from 'react';\nimport {\n  AdHocVariableFilter,\n  DashboardCursorSync,\n  DataFrame,\n  dateTime,\n  GrafanaTheme2,\n  LoadingState,\n  TimeRange,\n} from '@grafana/data';\nimport {\n  AdHocFiltersVariable,\n  behaviors,\n  DataSourceVariable,\n  PanelBuilders,\n  SceneComponentProps,\n  SceneCSSGridItem,\n  SceneCSSGridLayout,\n  sceneGraph,\n  SceneObjectBase,\n  SceneObjectState,\n  SceneObjectUrlSyncConfig,\n  SceneObjectUrlValues,\n  SceneQueryRunner,\n  SceneVariableSet,\n  VizPanel,\n} from '@grafana/scenes';\nimport {\n  DrawStyle,\n  Field,\n  IconButton,\n  LegendDisplayMode,\n  PanelContext,\n  SeriesVisibilityChangeMode,\n  StackingMode,\n  useStyles2,\n} from '@grafana/ui';\nimport { addTabToLocalStorage, getFavoriteLabelValuesFromStorage } from 'services/store';\nimport {\n  EXPLORATION_DS,\n  LEVEL_VARIABLE_VALUE,\n  SERVICE_NAME,\n  SERVICE_UI_LABEL,\n  VAR_AGGREGATED_METRICS,\n  VAR_LABELS_REPLICA,\n  VAR_LABELS_REPLICA_EXPR,\n  VAR_PRIMARY_LABEL,\n  VAR_PRIMARY_LABEL_EXPR,\n  VAR_PRIMARY_LABEL_SEARCH,\n} from 'services/variables';\nimport { selectLabel, SelectServiceButton } from './SelectServiceButton';\nimport {\n  buildDataQuery,\n  buildVolumeQuery,\n  renderLogQLLabelFilters,\n  unwrapWildcardSearch,\n  wrapWildcardSearch,\n} from 'services/query';\nimport { reportAppInteraction, USER_EVENTS_ACTIONS, USER_EVENTS_PAGES } from 'services/analytics';\nimport { getQueryRunner, getSceneQueryRunner, setLevelColorOverrides } from 'services/panel';\nimport { ConfigureVolumeError } from './ConfigureVolumeError';\nimport { NoServiceSearchResults } from './NoServiceSearchResults';\nimport { getLabelsFromSeries, toggleLevelVisibility } from 'services/levels';\nimport { ServiceFieldSelector } from '../ServiceScene/Breakdowns/FieldSelector';\nimport { CustomConstantVariable } from '../../services/CustomConstantVariable';\nimport { areArraysEqual } from '../../services/comparison';\nimport {\n  clearServiceSelectionSearchVariable,\n  getAggregatedMetricsVariable,\n  getDataSourceVariable,\n  getLabelsVariable,\n  getLabelsVariableReplica,\n  getServiceSelectionPrimaryLabel,\n  getServiceSelectionSearchVariable,\n  setServiceSelectionPrimaryLabelKey,\n} from '../../services/variableGetters';\nimport { config, locationService } from '@grafana/runtime';\nimport { VariableHide } from '@grafana/schema';\nimport { ToolbarScene } from '../IndexScene/ToolbarScene';\nimport { IndexScene, showLogsButtonSceneKey } from '../IndexScene/IndexScene';\nimport { ServiceSelectionTabsScene } from './ServiceSelectionTabsScene';\nimport { FavoriteServiceHeaderActionScene } from './FavoriteServiceHeaderActionScene';\nimport { pushUrlHandler } from '../../services/navigate';\nimport { NoServiceVolume } from './NoServiceVolume';\nimport { getQueryRunnerFromChildren } from '../../services/scenes';\nimport { AddLabelToFiltersHeaderActionScene } from './AddLabelToFiltersHeaderActionScene';\nimport { ShowLogsButtonScene } from '../IndexScene/ShowLogsButtonScene';\n\nconst aggregatedMetricsEnabled: boolean | undefined = config.featureToggles.exploreLogsAggregatedMetrics;\n// Don't export AGGREGATED_SERVICE_NAME, we want to rename things so the rest of the application is agnostic to how we got the services\nconst AGGREGATED_SERVICE_NAME = '__aggregated_metric__';\n\n//@todo make start date user configurable, currently hardcoded for experimental cloud release\nexport const AGGREGATED_METRIC_START_DATE = dateTime('2024-08-30', 'YYYY-MM-DD');\nexport const SERVICES_LIMIT = 20;\n\ninterface ServiceSelectionSceneState extends SceneObjectState {\n  // The body of the component\n  body: SceneCSSGridLayout;\n  // Show logs of a certain level for a given service\n  serviceLevel: Map<string, string[]>;\n  // Logs volume API response as dataframe with SceneQueryRunner\n  $data: SceneQueryRunner;\n  tabs?: ServiceSelectionTabsScene;\n  showPopover: boolean;\n  tabOptions: Array<{\n    label: string;\n    value: string;\n  }>;\n}\n\nfunction renderPrimaryLabelFilters(filters: AdHocVariableFilter[]): string {\n  if (filters.length) {\n    const filter = filters[0];\n    return `${filter.key}${filter.operator}\\`${filter.value}\\``;\n  }\n\n  return '';\n}\n\nconst primaryLabelUrlKey = 'var-primary_label';\nconst datasourceUrlKey = 'var-ds';\n\nexport class ServiceSelectionScene extends SceneObjectBase<ServiceSelectionSceneState> {\n  protected _urlSync = new SceneObjectUrlSyncConfig(this, {\n    keys: [primaryLabelUrlKey],\n  });\n\n  constructor(state: Partial<ServiceSelectionSceneState>) {\n    super({\n      body: new SceneCSSGridLayout({ children: [] }),\n      $variables: new SceneVariableSet({\n        variables: [\n          // Service search variable\n          new CustomConstantVariable({\n            name: VAR_PRIMARY_LABEL_SEARCH,\n            label: 'Service',\n            hide: VariableHide.hideVariable,\n            skipUrlSync: true,\n            value: '.+',\n          }),\n          // variable that stores if aggregated metrics are supported for the query\n          new CustomConstantVariable({\n            name: VAR_AGGREGATED_METRICS,\n            label: '',\n            hide: VariableHide.hideLabel,\n            value: SERVICE_NAME,\n            skipUrlSync: true,\n            options: [\n              {\n                value: SERVICE_NAME,\n                label: SERVICE_NAME,\n              },\n              {\n                value: AGGREGATED_SERVICE_NAME,\n                label: AGGREGATED_SERVICE_NAME,\n              },\n            ],\n          }),\n          // The active tab expression, hidden variable\n          new AdHocFiltersVariable({\n            name: VAR_PRIMARY_LABEL,\n            hide: VariableHide.hideLabel,\n            expressionBuilder: (filters) => {\n              return renderPrimaryLabelFilters(filters);\n            },\n            filters: [\n              {\n                key: getSelectedTabFromUrl().key ?? SERVICE_NAME,\n                value: '.+',\n                operator: '=~',\n              },\n            ],\n          }),\n          new AdHocFiltersVariable({\n            name: VAR_LABELS_REPLICA,\n            datasource: EXPLORATION_DS,\n            layout: 'vertical',\n            filters: [],\n            expressionBuilder: renderLogQLLabelFilters,\n            hide: VariableHide.hideVariable,\n            key: 'adhoc_service_filter_replica',\n            skipUrlSync: true,\n          }),\n        ],\n      }),\n      $data: getSceneQueryRunner({\n        queries: [],\n        runQueriesMode: 'manual',\n      }),\n      serviceLevel: new Map<string, string[]>(),\n\n      showPopover: false,\n      tabOptions: [\n        {\n          label: SERVICE_UI_LABEL,\n          value: SERVICE_NAME,\n        },\n      ],\n      ...state,\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  /**\n   * Set changes from the URL to the state of the primary label variable\n   */\n  getUrlState() {\n    const { key } = getSelectedTabFromUrl();\n    const primaryLabelVar = getServiceSelectionPrimaryLabel(this);\n    const filter = primaryLabelVar.state.filters[0];\n\n    if (filter.key && filter.key !== key) {\n      getServiceSelectionPrimaryLabel(this).setState({\n        filters: [\n          {\n            ...filter,\n            key: key ?? filter.key,\n          },\n        ],\n      });\n    }\n\n    return {};\n  }\n\n  /**\n   * Unused, but required\n   * @param values\n   */\n  updateFromUrl(values: SceneObjectUrlValues) {}\n\n  addDatasourceChangeToBrowserHistory(newDs: string) {\n    const location = locationService.getLocation();\n    const search = new URLSearchParams(location.search);\n    const dsUrl = search.get(datasourceUrlKey);\n    if (dsUrl && newDs !== dsUrl) {\n      const currentUrl = location.pathname + location.search;\n      search.set(datasourceUrlKey, newDs);\n      const newUrl = location.pathname + '?' + search.toString();\n      if (currentUrl !== newUrl) {\n        pushUrlHandler(newUrl);\n      }\n    }\n  }\n\n  /**\n   * Attempting to add any change to the primary label variable (i.e. the selected tab) as a browser history event\n   * @param newKey\n   * @param replace\n   */\n  addLabelChangeToBrowserHistory(newKey: string, replace = false) {\n    const { key: primaryLabelRaw, search, location } = getSelectedTabFromUrl();\n    if (primaryLabelRaw) {\n      const primaryLabelSplit = primaryLabelRaw?.split('|');\n      const keyInUrl = primaryLabelSplit?.[0];\n\n      if (keyInUrl !== newKey) {\n        primaryLabelSplit[0] = newKey;\n        search.set(primaryLabelUrlKey, primaryLabelSplit.join('|'));\n        const currentUrl = location.pathname + location.search;\n        const newUrl = location.pathname + '?' + search.toString();\n        if (currentUrl !== newUrl) {\n          if (replace) {\n            locationService.replace(newUrl);\n          } else {\n            pushUrlHandler(newUrl);\n          }\n        }\n      }\n    }\n  }\n\n  public static Component = ({ model }: SceneComponentProps<ServiceSelectionScene>) => {\n    const styles = useStyles2(getStyles);\n    const { body, $data, tabs } = model.useState();\n    const { data } = $data.useState();\n    const selectedTab = model.getSelectedTab();\n\n    const serviceStringVariable = getServiceSelectionSearchVariable(model);\n    const { label, value: searchValue } = serviceStringVariable.useState();\n    const hasSearch = searchValue && searchValue !== '.+';\n\n    const { labelsByVolume, labelsToQuery } = model.getLabels(data?.series);\n    const isLogVolumeLoading =\n      data?.state === LoadingState.Loading || data?.state === LoadingState.Streaming || data === undefined;\n    const volumeApiError = $data.state.data?.state === LoadingState.Error;\n\n    const onSearchChange = (serviceName?: string) => {\n      model.onSearchServicesChange(serviceName);\n    };\n    const totalServices = labelsToQuery?.length ?? 0;\n    // To get the count of services that are currently displayed, divide the number of panels by 2, as there are 2 panels per service (logs and time series)\n    const renderedServices = body.state.children.length / 2;\n\n    const filterLabel = model.formatPrimaryLabelForUI();\n    let customValue = serviceStringVariable.getValue().toString();\n    if (customValue === '.+') {\n      customValue = '';\n    }\n    const customLabel = unwrapWildcardSearch(customValue);\n\n    return (\n      <div className={styles.container}>\n        <div className={styles.bodyWrapper}>\n          {tabs && <tabs.Component model={tabs} />}\n          <Field className={styles.searchField}>\n            <div className={styles.searchWrapper}>\n              <ServiceFieldSelector\n                initialFilter={{\n                  label: customLabel,\n                  value: customValue,\n                  icon: 'filter',\n                }}\n                isLoading={isLogVolumeLoading}\n                value={customValue ? customValue : label}\n                onChange={(serviceName) => onSearchChange(serviceName)}\n                selectOption={(value: string) => {\n                  selectLabel(selectedTab, value, model);\n                }}\n                label={filterLabel}\n                options={\n                  labelsToQuery?.map((serviceName) => ({\n                    value: serviceName,\n                    label: serviceName,\n                  })) ?? []\n                }\n              />\n              {!isLogVolumeLoading && (\n                <span className={styles.searchFieldPlaceholderText}>\n                  Showing {renderedServices} of {totalServices}{' '}\n                  <IconButton\n                    className={styles.icon}\n                    aria-label=\"Count info\"\n                    name={'info-circle'}\n                    tooltip={`${totalServices} labels have values for the selected time range. Total label count may differ`}\n                  />\n                </span>\n              )}\n            </div>\n          </Field>\n          {/** If we don't have any servicesByVolume, volume endpoint is probably not enabled */}\n          {!isLogVolumeLoading && volumeApiError && <ConfigureVolumeError />}\n          {!isLogVolumeLoading && !volumeApiError && hasSearch && !labelsByVolume?.length && <NoServiceSearchResults />}\n          {!isLogVolumeLoading && !volumeApiError && !hasSearch && !labelsByVolume?.length && (\n            <NoServiceVolume labelName={selectedTab} />\n          )}\n          {!(!isLogVolumeLoading && volumeApiError) && (\n            <div className={styles.body}>\n              <body.Component model={body} />\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  // We could also run model.setState in component, but it is recommended to implement the state-modifying methods in the scene object\n  onSearchServicesChange = debounce((primaryLabelSearch?: string) => {\n    // Set search variable\n    const searchVar = getServiceSelectionSearchVariable(this);\n\n    const newSearchString = primaryLabelSearch ? wrapWildcardSearch(primaryLabelSearch) : '.+';\n    if (newSearchString !== searchVar.state.value) {\n      searchVar.setState({\n        value: primaryLabelSearch ? wrapWildcardSearch(primaryLabelSearch) : '.+',\n        label: primaryLabelSearch ?? '',\n      });\n    }\n\n    const primaryLabelVar = getServiceSelectionPrimaryLabel(this);\n    const filter = primaryLabelVar.state.filters[0];\n\n    // Update primary label with search string\n    if (wrapWildcardSearch(searchVar.state.value.toString()) !== filter.value) {\n      primaryLabelVar.setState({\n        filters: [\n          {\n            ...filter,\n            value: wrapWildcardSearch(searchVar.state.value.toString()),\n          },\n        ],\n      });\n    }\n\n    reportAppInteraction(\n      USER_EVENTS_PAGES.service_selection,\n      USER_EVENTS_ACTIONS.service_selection.search_services_changed,\n      {\n        searchQuery: primaryLabelSearch,\n      }\n    );\n  }, 500);\n\n  getSelectedTab() {\n    return getServiceSelectionPrimaryLabel(this).state.filters[0]?.key;\n  }\n\n  selectDefaultLabelTab() {\n    // Need to update the history before the state with replace instead of push, or we'll get invalid services saved to url state after changing datasource\n    this.addLabelChangeToBrowserHistory(SERVICE_NAME, true);\n    this.setSelectedTab(SERVICE_NAME);\n  }\n\n  setSelectedTab(labelName: string) {\n    addTabToLocalStorage(getDataSourceVariable(this).getValue().toString(), labelName);\n\n    // clear active search\n    clearServiceSelectionSearchVariable(this);\n\n    // Update the primary label variable\n    setServiceSelectionPrimaryLabelKey(labelName, this);\n  }\n\n  // Creates a layout with timeseries panel\n  buildServiceLayout(\n    primaryLabelName: string,\n    primaryLabelValue: string,\n    timeRange: TimeRange,\n    serviceLabelVar: CustomConstantVariable,\n    primaryLabelVar: AdHocFiltersVariable,\n    datasourceVar: DataSourceVariable\n  ) {\n    let splitDuration;\n    if (timeRange.to.diff(timeRange.from, 'hours') >= 4 && timeRange.to.diff(timeRange.from, 'hours') <= 26) {\n      splitDuration = '2h';\n    }\n    const panel = PanelBuilders.timeseries()\n      // If service was previously selected, we show it in the title\n      .setTitle(primaryLabelValue)\n      .setData(\n        getQueryRunner(\n          [\n            buildDataQuery(this.getMetricExpression(primaryLabelValue, serviceLabelVar, primaryLabelVar), {\n              legendFormat: `{{${LEVEL_VARIABLE_VALUE}}}`,\n              splitDuration,\n              refId: `ts-${primaryLabelValue}`,\n            }),\n          ],\n          { runQueriesMode: 'manual' }\n        )\n      )\n      .setCustomFieldConfig('stacking', { mode: StackingMode.Normal })\n      .setCustomFieldConfig('fillOpacity', 100)\n      .setCustomFieldConfig('lineWidth', 0)\n      .setCustomFieldConfig('pointSize', 0)\n      .setCustomFieldConfig('drawStyle', DrawStyle.Bars)\n      .setUnit('short')\n      .setOverrides(setLevelColorOverrides)\n      .setOption('legend', {\n        showLegend: true,\n        calcs: ['sum'],\n        placement: 'right',\n        displayMode: LegendDisplayMode.Table,\n      })\n      .setHeaderActions([\n        new FavoriteServiceHeaderActionScene({\n          ds: datasourceVar.getValue()?.toString(),\n          labelName: primaryLabelName,\n          labelValue: primaryLabelValue,\n        }),\n        new AddLabelToFiltersHeaderActionScene({\n          name: primaryLabelName,\n          value: primaryLabelValue,\n          hidden: this.isAggregatedMetricsActive(),\n        }),\n        new SelectServiceButton({ labelValue: primaryLabelValue, labelName: primaryLabelName }),\n      ])\n      .build();\n\n    panel.setState({\n      extendPanelContext: (_, context) =>\n        this.extendTimeSeriesLegendBus(primaryLabelName, primaryLabelValue, context, panel),\n    });\n\n    const cssGridItem = new SceneCSSGridItem({\n      $behaviors: [new behaviors.CursorSync({ key: 'serviceCrosshairSync', sync: DashboardCursorSync.Crosshair })],\n      body: panel,\n    });\n\n    cssGridItem.addActivationHandler(() => {\n      const runner = getQueryRunnerFromChildren(cssGridItem)[0];\n      // If the query runner has already ran, the scene must be cached, don't re-run as the volume query will be triggered which will execute another panel query\n      if (runner.state.data?.state !== LoadingState.Done) {\n        this.runPanelQuery(cssGridItem);\n      }\n    });\n\n    return cssGridItem;\n  }\n\n  isAggregatedMetricsActive() {\n    const toolbar = this.getQueryOptionsToolbar();\n    return !toolbar?.state.options.aggregatedMetrics.disabled && toolbar?.state.options.aggregatedMetrics.active;\n  }\n\n  getLevelFilterForService = (service: string) => {\n    let serviceLevels = this.state.serviceLevel.get(service) || [];\n    if (serviceLevels.length === 0) {\n      return '';\n    }\n    const filters = serviceLevels.map((level) => {\n      if (level === 'logs') {\n        level = '';\n      }\n      return `${LEVEL_VARIABLE_VALUE}=\\`${level}\\``;\n    });\n    return ` | ${filters.join(' or ')} `;\n  };\n\n  // Creates a layout with logs panel\n  buildServiceLogsLayout = (labelName: string, labelValue: string) => {\n    const levelFilter = this.getLevelFilterForService(labelValue);\n    const cssGridItem = new SceneCSSGridItem({\n      $behaviors: [new behaviors.CursorSync({ sync: DashboardCursorSync.Off })],\n      body: PanelBuilders.logs()\n        // Hover header set to true removes unused header padding, displaying more logs\n        .setHoverHeader(true)\n        .setData(\n          getQueryRunner(\n            [\n              buildDataQuery(this.getLogExpression(labelName, labelValue, levelFilter), {\n                maxLines: 100,\n                refId: `logs-${labelValue}`,\n              }),\n            ],\n            {\n              runQueriesMode: 'manual',\n            }\n          )\n        )\n        .setTitle(labelValue)\n        .setOption('showTime', true)\n        .setOption('enableLogDetails', false)\n        .build(),\n    });\n\n    cssGridItem.addActivationHandler(() => {\n      const runner = getQueryRunnerFromChildren(cssGridItem)[0];\n      // If the query runner has already ran, the scene must be cached, don't re-run as the volume query will be triggered which will execute another panel query\n      if (runner.state.data?.state !== LoadingState.Done) {\n        this.runPanelQuery(cssGridItem);\n      }\n    });\n\n    return cssGridItem;\n  };\n\n  formatPrimaryLabelForUI() {\n    const selectedTab = this.getSelectedTab();\n    return selectedTab === SERVICE_NAME ? SERVICE_UI_LABEL : selectedTab;\n  }\n\n  private setVolumeQueryRunner() {\n    this.setState({\n      $data: getSceneQueryRunner({\n        queries: [\n          buildVolumeQuery(`{${VAR_PRIMARY_LABEL_EXPR}, ${VAR_LABELS_REPLICA_EXPR}}`, 'volume', this.getSelectedTab()),\n        ],\n        runQueriesMode: 'manual',\n      }),\n    });\n\n    // Need to re-init any subscriptions since we changed the query runner\n    this.subscribeToVolume();\n  }\n\n  private doVariablesNeedSync() {\n    const labelsVarPrimary = getLabelsVariable(this);\n    const labelsVarReplica = getLabelsVariableReplica(this);\n\n    const activeTab = this.getSelectedTab();\n    const filteredFilters = labelsVarPrimary.state.filters.filter((f) => f.key !== activeTab);\n\n    return { filters: filteredFilters, needsSync: !areArraysEqual(filteredFilters, labelsVarReplica.state.filters) };\n  }\n\n  private syncVariables() {\n    const labelsVarReplica = getLabelsVariableReplica(this);\n\n    const { filters, needsSync } = this.doVariablesNeedSync();\n    if (needsSync) {\n      labelsVarReplica.setState({ filters });\n    }\n  }\n\n  private onActivate() {\n    this.fixRequiredUrlParams();\n\n    // Sync initial state from primary labels to local replica\n    this.syncVariables();\n\n    // Clear existing volume data on activate or we'll show stale cached data, potentially from a different datasource\n    this.setVolumeQueryRunner();\n\n    // Subscribe to primary labels for further updates\n    this.subscribeToPrimaryLabelsVariable();\n\n    // Subscribe to variables replica\n    this.subscribeToLabelFilterChanges();\n\n    // Subscribe to tab changes (primary label)\n    this.subscribeToActiveTabVariable(getServiceSelectionPrimaryLabel(this));\n\n    if (this.state.$data.state.data?.state !== LoadingState.Done) {\n      this.runVolumeOnActivate();\n    }\n\n    // Update labels on time range change\n    this.subscribeToTimeRange();\n\n    // Update labels on datasource change\n    this.subscribeToDatasource();\n\n    this.subscribeToAggregatedMetricToggle();\n\n    this.subscribeToAggregatedMetricVariable();\n  }\n\n  private runVolumeOnActivate() {\n    if (this.isTimeRangeTooEarlyForAggMetrics()) {\n      this.onUnsupportedAggregatedMetricTimeRange();\n      if (this.state.$data.state.data?.state !== LoadingState.Done) {\n        this.runVolumeQuery();\n      }\n    } else {\n      this.onSupportedAggregatedMetricTimeRange();\n      if (this.state.$data.state.data?.state !== LoadingState.Done) {\n        this.runVolumeQuery();\n      }\n    }\n  }\n\n  private subscribeToAggregatedMetricToggle() {\n    this._subs.add(\n      this.getQueryOptionsToolbar()?.subscribeToState((newState, prevState) => {\n        if (newState.options.aggregatedMetrics.userOverride !== prevState.options.aggregatedMetrics.userOverride) {\n          this.runVolumeQuery(true);\n        }\n      })\n    );\n  }\n\n  private subscribeToDatasource() {\n    this._subs.add(\n      getDataSourceVariable(this).subscribeToState((newState) => {\n        this.addDatasourceChangeToBrowserHistory(newState.value.toString());\n        this.runVolumeQuery();\n      })\n    );\n  }\n\n  private subscribeToActiveTabVariable(primaryLabelVar: AdHocFiltersVariable) {\n    this._subs.add(\n      primaryLabelVar.subscribeToState((newState, prevState) => {\n        if (newState.filterExpression !== prevState.filterExpression) {\n          const newKey = newState.filters[0].key;\n          this.addLabelChangeToBrowserHistory(newKey);\n          // Need to tear down volume query runner to select other labels, as we need the selected tab to parse the volume response\n          const { needsSync } = this.doVariablesNeedSync();\n\n          if (needsSync) {\n            this.syncVariables();\n          } else {\n            this.runVolumeQuery(true);\n          }\n        }\n      })\n    );\n  }\n\n  /**\n   * agg metrics need parser and unwrap, have to tear down and rebuild panels when the variable changes\n   * @private\n   */\n  private subscribeToAggregatedMetricVariable() {\n    this._subs.add(\n      getAggregatedMetricsVariable(this).subscribeToState((newState, prevState) => {\n        if (newState.value !== prevState.value) {\n          // Clear the body panels\n          this.setState({\n            body: new SceneCSSGridLayout({ children: [] }),\n          });\n          // And re-init with the new query\n          this.updateBody(true);\n        }\n      })\n    );\n  }\n\n  private subscribeToPrimaryLabelsVariable() {\n    const labelsVarPrimary = getLabelsVariable(this);\n    this._subs.add(\n      labelsVarPrimary.subscribeToState((newState, prevState) => {\n        if (!areArraysEqual(newState.filters, prevState.filters)) {\n          this.syncVariables();\n        }\n      })\n    );\n  }\n\n  private subscribeToLabelFilterChanges() {\n    const labelsVar = getLabelsVariableReplica(this);\n    this._subs.add(\n      labelsVar.subscribeToState((newState, prevState) => {\n        if (!areArraysEqual(newState.filters, prevState.filters)) {\n          this.runVolumeQuery(true);\n        }\n      })\n    );\n  }\n\n  private subscribeToVolume() {\n    this._subs.add(\n      this.state.$data.subscribeToState((newState, prevState) => {\n        // update body if the data is done loading, and the dataframes have changed\n        if (\n          newState.data?.state === LoadingState.Done &&\n          !areArraysEqual(prevState?.data?.series, newState?.data?.series)\n        ) {\n          this.updateBody(true);\n        }\n      })\n    );\n  }\n\n  private subscribeToTimeRange() {\n    this._subs.add(\n      sceneGraph.getTimeRange(this).subscribeToState(() => {\n        if (this.isTimeRangeTooEarlyForAggMetrics()) {\n          this.onUnsupportedAggregatedMetricTimeRange();\n        } else {\n          this.onSupportedAggregatedMetricTimeRange();\n        }\n        this.runVolumeQuery();\n      })\n    );\n  }\n\n  /**\n   * If the user copies a partial URL we want to prevent throwing runtime errors or running invalid queries, so we set the default tab which will trigger updates to the primary_label\n   * @private\n   */\n  private fixRequiredUrlParams() {\n    // If the selected tab is not in the URL, set the default\n    const { key } = getSelectedTabFromUrl();\n    if (!key) {\n      this.selectDefaultLabelTab();\n    }\n  }\n\n  private isTimeRangeTooEarlyForAggMetrics(): boolean {\n    const timeRange = sceneGraph.getTimeRange(this);\n    return timeRange.state.value.from.isBefore(dateTime(AGGREGATED_METRIC_START_DATE));\n  }\n\n  private onUnsupportedAggregatedMetricTimeRange() {\n    const toolbar = this.getQueryOptionsToolbar();\n    toolbar?.setState({\n      options: {\n        aggregatedMetrics: {\n          ...toolbar?.state.options.aggregatedMetrics,\n          disabled: true,\n        },\n      },\n    });\n  }\n\n  private getQueryOptionsToolbar() {\n    const indexScene = sceneGraph.getAncestor(this, IndexScene);\n    return indexScene.state.controls.find((control) => control instanceof ToolbarScene) as ToolbarScene | undefined;\n  }\n\n  private onSupportedAggregatedMetricTimeRange() {\n    const toolbar = this.getQueryOptionsToolbar();\n    toolbar?.setState({\n      options: {\n        aggregatedMetrics: {\n          ...toolbar?.state.options.aggregatedMetrics,\n          disabled: false,\n        },\n      },\n    });\n  }\n  /**\n   * Executes the Volume API call\n   * @param resetQueryRunner - optional param which will replace the query runner state with a new instantiation\n   * @private\n   */\n  private runVolumeQuery(resetQueryRunner = false) {\n    if (resetQueryRunner) {\n      this.setVolumeQueryRunner();\n    }\n\n    this.updateAggregatedMetricVariable();\n    this.state.$data.runQueries();\n  }\n\n  private updateAggregatedMetricVariable() {\n    const serviceLabelVar = getAggregatedMetricsVariable(this);\n    const labelsVar = getLabelsVariable(this);\n    if ((!this.isTimeRangeTooEarlyForAggMetrics() || !aggregatedMetricsEnabled) && this.isAggregatedMetricsActive()) {\n      serviceLabelVar.changeValueTo(AGGREGATED_SERVICE_NAME);\n\n      // Hide combobox and reset filters if aggregated metrics is enabled\n      labelsVar.setState({\n        hide: VariableHide.hideVariable,\n        filters: [],\n      });\n\n      // Hide the show logs button\n      const showLogsButton = sceneGraph.findByKeyAndType(this, showLogsButtonSceneKey, ShowLogsButtonScene);\n      showLogsButton.setState({ hidden: true });\n    } else {\n      serviceLabelVar.changeValueTo(SERVICE_NAME);\n      // Show combobox if not aggregated metrics\n      labelsVar.setState({\n        hide: VariableHide.dontHide,\n      });\n      serviceLabelVar.changeValueTo(SERVICE_NAME);\n\n      // Show the show logs button\n      const showLogsButton = sceneGraph.findByKeyAndType(this, showLogsButtonSceneKey, ShowLogsButtonScene);\n      showLogsButton.setState({ hidden: false });\n    }\n  }\n\n  private updateTabs() {\n    if (!this.state.tabs) {\n      const tabs = new ServiceSelectionTabsScene({});\n      this.setState({\n        tabs,\n      });\n    }\n  }\n\n  private getGridItems(): SceneCSSGridItem[] {\n    return this.state.body.state.children as SceneCSSGridItem[];\n  }\n\n  private getVizPanel(child: SceneCSSGridItem) {\n    return child.state.body instanceof VizPanel ? child.state.body : undefined;\n  }\n\n  /**\n   * Runs logs/volume panel queries if lazy loaded grid item is active\n   * @param child\n   * @private\n   */\n  private runPanelQuery(child: SceneCSSGridItem) {\n    if (child.isActive) {\n      const queryRunners = getQueryRunnerFromChildren(child);\n      if (queryRunners.length === 1) {\n        const queryRunner = queryRunners[0];\n        const query = queryRunner.state.queries[0];\n\n        // If the scene was cached, the time range will still be the same as what was executed in the query\n        const requestTimeRange = queryRunner.state.data?.timeRange;\n        const sceneTimeRange = sceneGraph.getTimeRange(this);\n        const fromDiff = requestTimeRange\n          ? Math.abs(sceneTimeRange.state.value.from.diff(requestTimeRange?.from, 's'))\n          : Infinity;\n        const toDiff = requestTimeRange\n          ? Math.abs(sceneTimeRange.state.value.to.diff(requestTimeRange?.to, 's'))\n          : Infinity;\n\n        const interpolated = sceneGraph.interpolate(this, query.expr);\n        // If we haven't already run this exact same query, run it\n        if (queryRunner.state.key !== interpolated || fromDiff > 0 || toDiff > 0) {\n          queryRunner.setState({\n            key: interpolated,\n          });\n          queryRunner.runQueries();\n        }\n      }\n    }\n  }\n\n  private updateBody(runQueries = false) {\n    const { labelsToQuery } = this.getLabels(this.state.$data.state.data?.series);\n    const selectedTab = this.getSelectedTab();\n    this.updateTabs();\n    // If no services are to be queried, clear the body\n    if (!labelsToQuery || labelsToQuery.length === 0) {\n      this.state.body.setState({ children: [] });\n    } else {\n      // If we have services to query, build the layout with the services. Children is an array of layouts for each service (1 row with 2 columns - timeseries and logs panel)\n      const newChildren: SceneCSSGridItem[] = [];\n      const existingChildren = this.getGridItems();\n      const timeRange = sceneGraph.getTimeRange(this).state.value;\n      const aggregatedMetricsVariable = getAggregatedMetricsVariable(this);\n      const primaryLabelVar = getServiceSelectionPrimaryLabel(this);\n      const datasourceVariable = getDataSourceVariable(this);\n\n      for (const primaryLabelValue of labelsToQuery.slice(0, SERVICES_LIMIT)) {\n        const existing = existingChildren.filter((child) => {\n          const vizPanel = this.getVizPanel(child);\n          return vizPanel?.state.title === primaryLabelValue;\n        });\n\n        if (existing.length === 2) {\n          // If we already have grid items for this service, move them over to the new array of children, this will preserve their queryRunners, preventing duplicate queries from getting run\n          newChildren.push(existing[0], existing[1]);\n\n          if (existing[0].isActive && runQueries) {\n            this.runPanelQuery(existing[0]);\n          }\n\n          if (existing[1].isActive && runQueries) {\n            this.runPanelQuery(existing[1]);\n          }\n        } else {\n          const newChildTs = this.buildServiceLayout(\n            selectedTab,\n            primaryLabelValue,\n            timeRange,\n            aggregatedMetricsVariable,\n            primaryLabelVar,\n            datasourceVariable\n          );\n          const newChildLogs = this.buildServiceLogsLayout(selectedTab, primaryLabelValue);\n          // for each service, we create a layout with timeseries and logs panel\n          newChildren.push(newChildTs, newChildLogs);\n        }\n      }\n\n      this.state.body.setState({\n        children: newChildren,\n        isLazy: true,\n        templateColumns: 'repeat(auto-fit, minmax(500px, 1fr) minmax(300px, 70vw))',\n        autoRows: '200px',\n        md: {\n          templateColumns: '1fr',\n          rowGap: 1,\n          columnGap: 1,\n        },\n      });\n    }\n  }\n\n  /**\n   * Redraws service logs after toggling level visibility.\n   */\n  private updateServiceLogs(labelName: string, labelValue: string) {\n    if (!this.state.body) {\n      this.updateBody();\n      return;\n    }\n    const { labelsToQuery } = this.getLabels(this.state.$data.state.data?.series);\n    const serviceIndex = labelsToQuery?.indexOf(labelValue);\n    if (serviceIndex === undefined || serviceIndex < 0) {\n      return;\n    }\n    let newChildren = [...this.getGridItems()];\n    newChildren.splice(serviceIndex * 2 + 1, 1, this.buildServiceLogsLayout(labelName, labelValue));\n    this.state.body.setState({ children: newChildren });\n  }\n\n  private getLogExpression(labelName: string, labelValue: string, levelFilter: string) {\n    return `{${labelName}=\\`${labelValue}\\` , ${VAR_LABELS_REPLICA_EXPR} }${levelFilter}`;\n  }\n\n  private getMetricExpression(\n    labelValue: string,\n    serviceLabelVar: CustomConstantVariable,\n    primaryLabelVar: AdHocFiltersVariable\n  ) {\n    const filter = primaryLabelVar.state.filters[0];\n    if (serviceLabelVar.state.value === AGGREGATED_SERVICE_NAME) {\n      if (filter.key === SERVICE_NAME) {\n        return `sum by (${LEVEL_VARIABLE_VALUE}) (sum_over_time({${AGGREGATED_SERVICE_NAME}=\\`${labelValue}\\` } | logfmt | unwrap count [$__auto]))`;\n      } else {\n        return `sum by (${LEVEL_VARIABLE_VALUE}) (sum_over_time({${AGGREGATED_SERVICE_NAME}=~\\`.+\\` } | logfmt | ${filter.key}=\\`${labelValue}\\` | unwrap count [$__auto]))`;\n      }\n    }\n    return `sum by (${LEVEL_VARIABLE_VALUE}) (count_over_time({ ${filter.key}=\\`${labelValue}\\`, ${VAR_LABELS_REPLICA_EXPR} } [$__auto]))`;\n  }\n\n  private extendTimeSeriesLegendBus = (\n    labelName: string,\n    labelValue: string,\n    context: PanelContext,\n    panel: VizPanel\n  ) => {\n    const originalOnToggleSeriesVisibility = context.onToggleSeriesVisibility;\n\n    context.onToggleSeriesVisibility = (level: string, mode: SeriesVisibilityChangeMode) => {\n      originalOnToggleSeriesVisibility?.(level, mode);\n\n      const allLevels = getLabelsFromSeries(panel.state.$data?.state.data?.series ?? []);\n      const levels = toggleLevelVisibility(level, this.state.serviceLevel.get(labelValue), mode, allLevels);\n      this.state.serviceLevel.set(labelValue, levels);\n\n      this.updateServiceLogs(labelName, labelValue);\n    };\n  };\n\n  private getLabels(series?: DataFrame[]) {\n    const labelsByVolume: string[] = series?.[0]?.fields[0].values ?? [];\n    const dsString = getDataSourceVariable(this).getValue()?.toString();\n    const searchString = getServiceSelectionSearchVariable(this).getValue();\n    const selectedTab = this.getSelectedTab();\n    const labelsToQuery = createListOfLabelsToQuery(labelsByVolume, dsString, String(searchString), selectedTab);\n    return { labelsByVolume, labelsToQuery: labelsToQuery };\n  }\n}\n\n// Create a list of services to query:\n// 1. Filters provided services by searchString\n// 2. Gets favoriteServicesToQuery from localStorage and filters them by searchString\n// 3. Orders them correctly\nfunction createListOfLabelsToQuery(services: string[], ds: string, searchString: string, labelName: string) {\n  if (!services?.length) {\n    return [];\n  }\n\n  if (searchString === '.+') {\n    searchString = '';\n  }\n\n  const favoriteServicesToQuery = getFavoriteLabelValuesFromStorage(ds, labelName).filter(\n    (service) => service.toLowerCase().includes(searchString.toLowerCase()) && services.includes(service)\n  );\n\n  // Deduplicate\n  return Array.from(new Set([...favoriteServicesToQuery, ...services]));\n}\n\nfunction getSelectedTabFromUrl() {\n  const location = locationService.getLocation();\n  const search = new URLSearchParams(location.search);\n  const primaryLabelRaw = search.get(primaryLabelUrlKey);\n  const primaryLabelSplit = primaryLabelRaw?.split('|');\n  const key = primaryLabelSplit?.[0];\n  return { key, search, location };\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css({\n      display: 'flex',\n      flexDirection: 'column',\n      flexGrow: 1,\n      position: 'relative',\n    }),\n    headingWrapper: css({\n      marginTop: theme.spacing(1),\n    }),\n    loadingText: css({\n      margin: 0,\n    }),\n    header: css({\n      position: 'absolute',\n      right: 0,\n      top: '4px',\n      zIndex: 2,\n    }),\n    bodyWrapper: css({\n      flexGrow: 1,\n      display: 'flex',\n      flexDirection: 'column',\n    }),\n    body: css({\n      flexGrow: 1,\n      display: 'flex',\n      flexDirection: 'column',\n    }),\n    icon: css({\n      color: theme.colors.text.disabled,\n      marginLeft: theme.spacing.x1,\n    }),\n    searchFieldPlaceholderText: css({\n      fontSize: theme.typography.bodySmall.fontSize,\n      color: theme.colors.text.disabled,\n      alignItems: 'center',\n      display: 'flex',\n    }),\n    searchWrapper: css({\n      display: 'flex',\n      alignItems: 'center',\n      flexWrap: 'wrap',\n    }),\n    searchField: css({\n      marginTop: theme.spacing(1),\n      position: 'relative',\n    }),\n  };\n}\n","import React from 'react';\nimport { RadioButtonGroup } from '@grafana/ui';\nimport { LogsVisualizationType } from 'services/store';\n\n/**\n * The options shared between logs and table panels\n * @param props\n * @constructor\n */\nexport function LogsPanelHeaderActions(props: {\n  vizType: LogsVisualizationType;\n  onChange: (type: LogsVisualizationType) => void;\n}) {\n  return (\n    <RadioButtonGroup\n      options={[\n        {\n          label: 'Logs',\n          value: 'logs',\n          description: 'Show results in logs visualisation',\n        },\n        {\n          label: 'Table',\n          value: 'table',\n          description: 'Show results in table visualisation',\n        },\n      ]}\n      size=\"sm\"\n      value={props.vizType}\n      onChange={props.onChange}\n    />\n  );\n}\n","import { Observable, of } from 'rxjs';\nimport {\n  MultiValueVariable,\n  MultiValueVariableState,\n  renderSelectForVariable,\n  SceneComponentProps,\n  VariableGetOptionsArgs,\n  VariableValueOption,\n  VariableValueSingle,\n} from '@grafana/scenes';\n\nexport interface CustomConstantVariableState extends MultiValueVariableState {\n  value: VariableValueSingle;\n  isMulti?: false;\n}\n\nexport class CustomConstantVariable extends MultiValueVariable<CustomConstantVariableState> {\n  public constructor(initialState: Partial<CustomConstantVariableState>) {\n    super({\n      type: 'custom',\n      value: '',\n      text: '',\n      options: [],\n      name: '',\n      ...initialState,\n    });\n  }\n\n  public getValueOptions(args: VariableGetOptionsArgs): Observable<VariableValueOption[]> {\n    return of(this.state.options);\n  }\n\n  public static Component = ({ model }: SceneComponentProps<MultiValueVariable>) => {\n    return renderSelectForVariable(model);\n  };\n}\n","import { reportInteraction } from '@grafana/runtime';\nimport pluginJson from '../plugin.json';\n\n// Helper function to create a unique interaction name for analytics\nconst createInteractionName = (page: UserEventPagesType, action: string) => {\n  return `${pluginJson.id.replace(/-/g, '_')}_${page}_${action}`;\n};\n\n// Runs reportInteraction with a standardized interaction name\nexport const reportAppInteraction = (\n  page: UserEventPagesType,\n  action: UserEventActionType,\n  properties?: Record<string, unknown>\n) => {\n  reportInteraction(createInteractionName(page, action), properties);\n};\n\nexport const USER_EVENTS_PAGES = {\n  service_selection: 'service_selection',\n  service_details: 'service_details',\n  all: 'all',\n} as const;\n\ntype UserEventPagesType = keyof typeof USER_EVENTS_PAGES;\ntype UserEventActionType =\n  | keyof (typeof USER_EVENTS_ACTIONS)['service_selection']\n  | keyof (typeof USER_EVENTS_ACTIONS)['service_details']\n  | keyof (typeof USER_EVENTS_ACTIONS)['all'];\n\nexport const USER_EVENTS_ACTIONS = {\n  [USER_EVENTS_PAGES.service_selection]: {\n    // Searching for service using search input. Props: searchQueryLength, containsLevel\n    search_services_changed: 'search_services_changed',\n    // Selecting service. Props: service\n    service_selected: 'service_selected',\n    // Toggling aggregated metrics on/off\n    aggregated_metrics_toggled: 'aggregated_metrics_toggled',\n    add_to_filters: 'add_to_filters',\n  },\n  [USER_EVENTS_PAGES.service_details]: {\n    open_in_explore_clicked: 'open_in_explore_clicked',\n    // Selecting action view tab (logs/labels/fields/patterns). Props: newActionView, previousActionView\n    action_view_changed: 'action_view_changed',\n    // Clicking on \"Include\" button in time series panels. Used in multiple views. The view type is passed as a parameter. Props: filterType, key, isFilterDuplicate, filtersLength\n    add_to_filters_in_breakdown_clicked: 'add_to_filters_in_breakdown_clicked',\n    // Clicking on \"Select\" button button in time series panels. Used in multiple views.The view type is passed as a parameter. Props: field, previousField, view\n    select_field_in_breakdown_clicked: 'select_field_in_breakdown_clicked',\n    // Clicking on one of the levels in the Logs Volume panel\n    level_in_logs_volume_clicked: 'level_in_logs_volume_clicked',\n    // Changing layout type (e.g. single/grid/rows). Used in multiple views. The view type is passed as a parameter. Props: layout, view\n    layout_type_changed: 'layout_type_changed',\n    // Changing search string in logs. Props: searchQuery\n    search_string_in_logs_changed: 'search_string_in_logs_changed',\n    search_string_in_variables_changed: 'search_string_in_variables_changed',\n    // Removing a pattern (e.g. include/exclude) from the list. Props: includePatternsLength, excludePatternsLength, type\n    pattern_removed: 'pattern_removed',\n    // Selecting a pattern (e.g. include/exclude) from the list. Props: includePatternsLength, excludePatternsLength, type\n    pattern_selected: 'pattern_selected',\n    // Clicking on a pattern field in the pattern name.\n    pattern_field_clicked: 'pattern_field_clicked',\n    // Toggling between logs/table view\n    logs_visualization_toggle: 'logs_visualization_toggle',\n    // Filter (include, exclude) from log details\n    logs_detail_filter_applied: 'logs_detail_filter_applied',\n    // Popover menu filter\n    logs_popover_line_filter: 'logs_popover_line_filter',\n    // Toggle displayed fields\n    logs_toggle_displayed_field: 'logs_toggle_displayed_field',\n    // Clear all displayed fields\n    logs_clear_displayed_fields: 'logs_clear_displayed_fields',\n    // Value breakdown sort change\n    value_breakdown_sort_change: 'value_breakdown_sort_change',\n    // Wasm not supported\n    wasm_not_supported: 'wasm_not_supported',\n    change_viz_type: 'change_viz_type',\n  },\n  [USER_EVENTS_PAGES.all]: {\n    interval_too_long: 'interval_too_long',\n    open_in_explore_menu_clicked: 'open_in_explore_menu_clicked',\n  },\n} as const;\n","import _ from 'lodash';\n\n/**\n * Order doesn't matter, converts to sets, deep compare via lodash isEqual\n * @param arr1\n * @param arr2\n */\n\nexport const areArraysEqual = (arr1: any[] | undefined, arr2: any[] | undefined) => {\n  // If one array is undefined, and the other is empty, they will cast to the same set.\n  if (typeof arr1 !== typeof arr2) {\n    return false;\n  }\n  const set1 = new Set(arr1);\n  const set2 = new Set(arr2);\n\n  // Save us from running the isEqual check if the set sizes are different\n  if (set1.size !== set2.size) {\n    return false;\n  }\n\n  return _.isEqual(set1, set2);\n};\n\nexport const areArraysStrictlyEqual = (arr1: any[] | undefined, arr2: any[] | undefined) => {\n  // If one array is undefined, and the other is empty, they will cast to the same set.\n  if (typeof arr1 !== typeof arr2) {\n    return false;\n  }\n  return _.isEqual(arr1, arr2);\n};\n","import { MetricExpr, parser, Selector } from '@grafana/lezer-logql';\nimport { LokiQuery } from './lokiQuery';\nimport { getNodesFromQuery } from './logqlMatchers';\nimport { SceneDataQueryRequest } from './datasourceTypes';\n\nexport function isQueryWithNode(query: string, nodeType: number): boolean {\n  let isQueryWithNode = false;\n  const tree = parser.parse(query);\n  tree.iterate({\n    enter: ({ type }): false | void => {\n      if (type.id === nodeType) {\n        isQueryWithNode = true;\n        return false;\n      }\n    },\n  });\n  return isQueryWithNode;\n}\n\nexport function isLogsQuery(query: string): boolean {\n  // As a safeguard we are checking for a length of 2, because at least the query should be `{}`\n  return query.trim().length > 2 && !isQueryWithNode(query, MetricExpr);\n}\n\nexport function isLogsRequest(request: SceneDataQueryRequest) {\n  return request.targets.find((query) => isLogsQuery(query.expr)) !== undefined;\n}\n\nexport function isInstantQuery(request: SceneDataQueryRequest) {\n  return request.targets.find((query) => query.queryType === 'instant');\n}\n\nexport function requestSupportsSharding(request: SceneDataQueryRequest) {\n  if (isLogsRequest(request)) {\n    return false;\n  }\n  if (isInstantQuery(request)) {\n    return false;\n  }\n  for (let i = 0; i < request.targets.length; i++) {\n    if (request.targets[i].expr?.includes('avg_over_time')) {\n      return false;\n    }\n  }\n  return true;\n}\n\nconst SHARDING_PLACEHOLDER = '__stream_shard_number__';\nexport const addShardingPlaceholderSelector = (query: string) => {\n  return query.replace('}', `, __stream_shard__=~\"${SHARDING_PLACEHOLDER}\"}`);\n};\n\nexport const interpolateShardingSelector = (queries: LokiQuery[], shards?: number[]) => {\n  if (shards === undefined || shards.length === 0) {\n    return queries.map((query) => ({\n      ...query,\n      expr: query.expr.replace(`, __stream_shard__=~\"${SHARDING_PLACEHOLDER}\"}`, '}'),\n    }));\n  }\n\n  let shardValue = shards.join('|');\n\n  // -1 means empty shard value\n  if (shardValue === '-1' || shards.length === 1) {\n    shardValue = shardValue === '-1' ? '' : shardValue;\n    return queries.map((query) => ({\n      ...query,\n      expr: query.expr.replace(`, __stream_shard__=~\"${SHARDING_PLACEHOLDER}\"}`, `, __stream_shard__=\"${shardValue}\"}`),\n    }));\n  }\n\n  return queries.map((query) => ({\n    ...query,\n    expr: query.expr.replace(new RegExp(`${SHARDING_PLACEHOLDER}`, 'g'), shardValue),\n  }));\n};\n\nexport const getSelectorForShardValues = (query: string) => {\n  const selector = getNodesFromQuery(query, [Selector]);\n  if (selector.length > 0) {\n    return query\n      .substring(selector[0].from, selector[0].to)\n      .replace(`, __stream_shard__=~\"${SHARDING_PLACEHOLDER}\"}`, '}');\n  }\n  return '';\n};\n","import {\n  closestIdx,\n  DataFrame,\n  DataFrameType,\n  DataQueryResponse,\n  DataQueryResponseData,\n  Field,\n  FieldType,\n  QueryResultMetaStat,\n} from '@grafana/data';\nimport { logger } from './logger';\n\nexport function combineResponses(currentResult: DataQueryResponse | null, newResult: DataQueryResponse) {\n  if (!currentResult) {\n    return cloneQueryResponse(newResult);\n  }\n\n  newResult.data.forEach((newFrame) => {\n    const currentFrame = currentResult.data.find((frame) => shouldCombine(frame, newFrame));\n    if (!currentFrame) {\n      currentResult.data.push(cloneDataFrame(newFrame));\n      return;\n    }\n    mergeFrames(currentFrame, newFrame);\n  });\n\n  const mergedErrors = [...(currentResult.errors ?? []), ...(newResult.errors ?? [])];\n\n  // we make sure to have `.errors` as undefined, instead of empty-array\n  // when no errors.\n\n  if (mergedErrors.length > 0) {\n    currentResult.errors = mergedErrors;\n  }\n\n  // the `.error` attribute is obsolete now,\n  // but we have to maintain it, otherwise\n  // some grafana parts do not behave well.\n  // we just choose the old error, if it exists,\n  // otherwise the new error, if it exists.\n  const mergedError = currentResult.error ?? newResult.error;\n  if (mergedError != null) {\n    currentResult.error = mergedError;\n  }\n\n  const mergedTraceIds = [...(currentResult.traceIds ?? []), ...(newResult.traceIds ?? [])];\n  if (mergedTraceIds.length > 0) {\n    currentResult.traceIds = mergedTraceIds;\n  }\n\n  return currentResult;\n}\n\n/**\n * Given two data frames, merge their values. Overlapping values will be added together.\n */\nexport function mergeFrames(dest: DataFrame, source: DataFrame) {\n  const destTimeField = dest.fields.find((field) => field.type === FieldType.time);\n  const destIdField = dest.fields.find((field) => field.type === FieldType.string && field.name === 'id');\n  const sourceTimeField = source.fields.find((field) => field.type === FieldType.time);\n  const sourceIdField = source.fields.find((field) => field.type === FieldType.string && field.name === 'id');\n\n  if (!destTimeField || !sourceTimeField) {\n    logger.error(new Error(`Time fields not found in the data frames`));\n    return;\n  }\n\n  const sourceTimeValues = sourceTimeField?.values.slice(0) ?? [];\n  const totalFields = Math.max(dest.fields.length, source.fields.length);\n\n  for (let i = 0; i < sourceTimeValues.length; i++) {\n    const destIdx = resolveIdx(destTimeField, sourceTimeField, i);\n\n    const entryExistsInDest = compareEntries(destTimeField, destIdField, destIdx, sourceTimeField, sourceIdField, i);\n\n    for (let f = 0; f < totalFields; f++) {\n      // For now, skip undefined fields that exist in the new frame\n      if (!dest.fields[f]) {\n        continue;\n      }\n      // Index is not reliable when frames have disordered fields, or an extra/missing field, so we find them by name.\n      // If the field has no name, we fallback to the old index version.\n      const sourceField = findSourceField(dest.fields[f], source.fields, f);\n      if (!sourceField) {\n        continue;\n      }\n      // Same value, accumulate\n      if (entryExistsInDest) {\n        if (dest.fields[f].type === FieldType.time) {\n          // Time already exists, skip\n          continue;\n        } else if (dest.fields[f].type === FieldType.number) {\n          // Number, add\n          dest.fields[f].values[destIdx] = (dest.fields[f].values[destIdx] ?? 0) + sourceField.values[i];\n        } else if (dest.fields[f].type === FieldType.other) {\n          // Possibly labels, combine\n          if (typeof sourceField.values[i] === 'object') {\n            dest.fields[f].values[destIdx] = {\n              ...dest.fields[f].values[destIdx],\n              ...sourceField.values[i],\n            };\n          } else if (sourceField.values[i] != null) {\n            dest.fields[f].values[destIdx] = sourceField.values[i];\n          }\n        } else {\n          // Replace value\n          dest.fields[f].values[destIdx] = sourceField.values[i];\n        }\n      } else if (sourceField.values[i] !== undefined) {\n        // Insert in the `destIdx` position\n        dest.fields[f].values.splice(destIdx, 0, sourceField.values[i]);\n        if (sourceField.nanos) {\n          dest.fields[f].nanos = dest.fields[f].nanos ?? new Array(dest.fields[f].values.length - 1).fill(0);\n          dest.fields[f].nanos?.splice(destIdx, 0, sourceField.nanos[i]);\n        }\n      }\n    }\n  }\n\n  dest.length = dest.fields[0].values.length;\n\n  dest.meta = {\n    ...dest.meta,\n    stats: getCombinedMetadataStats(dest.meta?.stats ?? [], source.meta?.stats ?? []),\n  };\n}\n\nfunction resolveIdx(destField: Field, sourceField: Field, index: number) {\n  const idx = closestIdx(sourceField.values[index], destField.values);\n  if (idx < 0) {\n    return 0;\n  }\n  if (sourceField.values[index] === destField.values[idx] && sourceField.nanos != null && destField.nanos != null) {\n    return sourceField.nanos[index] > destField.nanos[idx] ? idx + 1 : idx;\n  }\n  if (sourceField.values[index] > destField.values[idx]) {\n    return idx + 1;\n  }\n  return idx;\n}\n\nfunction compareEntries(\n  destTimeField: Field,\n  destIdField: Field | undefined,\n  destIndex: number,\n  sourceTimeField: Field,\n  sourceIdField: Field | undefined,\n  sourceIndex: number\n) {\n  const sameTimestamp = compareNsTimestamps(destTimeField, destIndex, sourceTimeField, sourceIndex);\n  if (!sameTimestamp) {\n    return false;\n  }\n  if (destIdField == null || sourceIdField == null) {\n    return true;\n  }\n  // Log frames, check indexes\n  return (\n    destIdField.values[destIndex] !== undefined && destIdField.values[destIndex] === sourceIdField.values[sourceIndex]\n  );\n}\n\nfunction compareNsTimestamps(destField: Field, destIndex: number, sourceField: Field, sourceIndex: number) {\n  if (destField.nanos && sourceField.nanos) {\n    return (\n      destField.values[destIndex] !== undefined &&\n      destField.values[destIndex] === sourceField.values[sourceIndex] &&\n      destField.nanos[destIndex] !== undefined &&\n      destField.nanos[destIndex] === sourceField.nanos[sourceIndex]\n    );\n  }\n  return destField.values[destIndex] !== undefined && destField.values[destIndex] === sourceField.values[sourceIndex];\n}\n\nfunction findSourceField(referenceField: Field, sourceFields: Field[], index: number) {\n  const candidates = sourceFields.filter((f) => f.name === referenceField.name);\n\n  if (candidates.length === 1) {\n    return candidates[0];\n  }\n\n  return sourceFields[index];\n}\n\nconst TOTAL_BYTES_STAT = 'Summary: total bytes processed';\n// This is specific for Loki\nfunction getCombinedMetadataStats(\n  destStats: QueryResultMetaStat[],\n  sourceStats: QueryResultMetaStat[]\n): QueryResultMetaStat[] {\n  // in the current approach, we only handle a single stat\n  const destStat = destStats.find((s) => s.displayName === TOTAL_BYTES_STAT);\n  const sourceStat = sourceStats.find((s) => s.displayName === TOTAL_BYTES_STAT);\n\n  if (sourceStat != null && destStat != null) {\n    return [{ value: sourceStat.value + destStat.value, displayName: TOTAL_BYTES_STAT, unit: destStat.unit }];\n  }\n\n  // maybe one of them exist\n  const eitherStat = sourceStat ?? destStat;\n  if (eitherStat != null) {\n    return [eitherStat];\n  }\n\n  return [];\n}\n\n/**\n * Deep clones a DataQueryResponse\n */\nexport function cloneQueryResponse(response: DataQueryResponse): DataQueryResponse {\n  const newResponse = {\n    ...response,\n    data: response.data.map(cloneDataFrame),\n  };\n  return newResponse;\n}\n\nfunction cloneDataFrame(frame: DataQueryResponseData): DataQueryResponseData {\n  return {\n    ...frame,\n    fields: frame.fields.map((field: Field) => ({\n      ...field,\n      values: field.values,\n    })),\n  };\n}\n\nfunction shouldCombine(frame1: DataFrame, frame2: DataFrame): boolean {\n  if (frame1.refId !== frame2.refId) {\n    return false;\n  }\n  if (frame1.name != null && frame2.name != null && frame1.name !== frame2.name) {\n    return false;\n  }\n\n  const frameType1 = frame1.meta?.type;\n  const frameType2 = frame2.meta?.type;\n\n  if (frameType1 !== frameType2) {\n    // we do not join things that have a different type\n    return false;\n  }\n\n  // metric range query data\n  if (frameType1 === DataFrameType.TimeSeriesMulti) {\n    return compareLabels(frame1, frame2);\n  }\n\n  // logs query data\n  // logs use a special attribute in the dataframe's \"custom\" section\n  // because we do not have a good \"frametype\" value for them yet.\n  const customType1 = frame1.meta?.custom?.frameType;\n  const customType2 = frame2.meta?.custom?.frameType;\n  // Legacy frames have this custom type\n  if (customType1 === 'LabeledTimeValues' && customType2 === 'LabeledTimeValues') {\n    return true;\n  } else if (customType1 === customType2) {\n    // Data plane frames don't\n    return true;\n  }\n\n  // should never reach here\n  return false;\n}\n\nfunction compareLabels(frame1: DataFrame, frame2: DataFrame) {\n  const field1 = frame1.fields.find((f) => f.type === FieldType.number);\n  const field2 = frame2.fields.find((f) => f.type === FieldType.number);\n  if (field1 === undefined || field2 === undefined) {\n    // should never happen\n    return false;\n  }\n  // undefined == null\n  if (frame1.name == null) {\n    frame1.name = JSON.stringify(field1.labels);\n  }\n  if (frame2.name == null) {\n    frame2.name = JSON.stringify(field2.labels);\n  }\n  return frame1.name === frame2.name;\n}\n","import pluginJson from '../plugin.json';\nimport { Observable, Subscriber, Subscription } from 'rxjs';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { DataQueryRequest, DataQueryResponse, LoadingState, QueryResultMetaStat } from '@grafana/data';\nimport { addShardingPlaceholderSelector, getSelectorForShardValues, interpolateShardingSelector } from './logql';\nimport { combineResponses } from './combineResponses';\nimport { LokiDatasource, LokiQuery } from './lokiQuery';\nimport { logger } from './logger';\nimport { isValidQuery } from './logqlMatchers';\n\n/**\n * Query splitting by stream shards.\n * Query splitting was introduced in Loki to optimize querying for long intervals and high volume of data,\n * dividing a big request into smaller sub-requests, combining and displaying the results as they arrive.\n *\n * This approach, inspired by the time-based query splitting, takes advantage of the __stream_shard__\n * internal label, representing how data is spread into different sources that can be queried individually.\n *\n * The main entry point of this module is runShardSplitQuery(), which prepares the query for execution and\n * passes it to splitQueriesByStreamShard() to begin the querying loop.\n *\n * splitQueriesByStreamShard() has the following structure:\n * - Creates and returns an Observable to which the UI will subscribe\n * - Requests the __stream_shard__ values of the selected service:\n *   . If there are no shard values, it falls back to the standard querying approach of the data source in runNonSplitRequest()\n *   . If there are shards:\n *     - It sorts them by value, descending. Higher shard numbers correspond with the least volume.\n *     - It defines an initial group size, roughly Math.sqrt(amountOfShards).\n *     - It begins the querying loop with runNextRequest().\n * - runNextRequest() will create a group of groupSize shards from the nth shard (cycle), and has the following internal structure:\n *   . groupShardRequests() returns an array of shards from cycle to cycle + groupSize.\n *   . interpolateShardingSelector() will update the stream selector with the shard numbers in the current group.\n *   . After query execution:\n *     - If the response is successful:\n *       . It will add new data to the response with combineResponses()\n *       . Using the data and meta data of the response, updateGroupSizeFromResponse() will increase or decrease the group size.\n *       . nextRequest() will use the current cycle and group size to determine the next request or complete execution with done().\n *     - If the response is unsuccessful:\n *       . If the response is not a query error, and the group size bigger than 1, it will decrease the group size.\n *       . If the group size is already 1, it will retry the request up to 4 times.\n *       . If there are retry attempts, it will retry the current cycle, or else stop querying.\n * - Once all request groups have been executed, it will be done().\n */\n\nexport function runShardSplitQuery(datasource: LokiDatasource, request: DataQueryRequest<LokiQuery>) {\n  const queries = datasource\n    .interpolateVariablesInQueries(request.targets, request.scopedVars)\n    .filter((query) => query.expr)\n    .map((target) => ({\n      ...target,\n      expr: addShardingPlaceholderSelector(target.expr),\n    }));\n\n  return splitQueriesByStreamShard(datasource, request, queries);\n}\n\nfunction splitQueriesByStreamShard(\n  datasource: LokiDatasource,\n  request: DataQueryRequest<LokiQuery>,\n  splittingTargets: LokiQuery[]\n) {\n  let shouldStop = false;\n  let mergedResponse: DataQueryResponse = { data: [], state: LoadingState.Streaming, key: uuidv4() };\n  let subquerySubscription: Subscription | null = null;\n  let retriesMap = new Map<number, number>();\n  let retryTimer: ReturnType<typeof setTimeout> | null = null;\n\n  const runNextRequest = (\n    subscriber: Subscriber<DataQueryResponse>,\n    cycle: number,\n    shards: number[],\n    groupSize: number\n  ) => {\n    let nextGroupSize = groupSize;\n    let retrying = false;\n\n    if (subquerySubscription != null) {\n      subquerySubscription.unsubscribe();\n      subquerySubscription = null;\n    }\n\n    const done = () => {\n      mergedResponse.state = shouldStop ? LoadingState.Error : LoadingState.Done;\n      subscriber.next(mergedResponse);\n      subscriber.complete();\n    };\n\n    if (shouldStop) {\n      done();\n      return;\n    }\n\n    const nextRequest = () => {\n      const nextCycle = Math.min(cycle + groupSize, shards.length);\n      if (cycle < shards.length && nextCycle <= shards.length) {\n        runNextRequest(subscriber, nextCycle, shards, nextGroupSize);\n        return;\n      }\n      done();\n    };\n\n    const retry = (errorResponse?: DataQueryResponse) => {\n      try {\n        if (errorResponse && !isRetriableError(errorResponse)) {\n          return false;\n        }\n      } catch (e) {\n        logger.error(e, {\n          msg: 'sharding retry error',\n          error: errorResponse?.error?.message ?? '',\n          errors: errorResponse?.errors?.map((e) => e.message).join(' | ') ?? '',\n          traces: errorResponse?.traceIds?.join('|') ?? '',\n        });\n        shouldStop = true;\n        return false;\n      }\n\n      if (groupSize > 1) {\n        groupSize = Math.floor(Math.sqrt(groupSize));\n        debug(`Possible time out, new group size ${groupSize}`);\n        retrying = true;\n        runNextRequest(subscriber, cycle, shards, groupSize);\n        return true;\n      }\n\n      const retries = retriesMap.get(cycle) ?? 0;\n      if (retries > 3) {\n        shouldStop = true;\n        return false;\n      }\n\n      retriesMap.set(cycle, retries + 1);\n\n      retryTimer = setTimeout(() => {\n        logger.info(`Retrying ${cycle} (${retries + 1})`);\n        runNextRequest(subscriber, cycle, shards, groupSize);\n        retryTimer = null;\n      }, 1500 * Math.pow(2, retries)); // Exponential backoff\n\n      retrying = true;\n\n      return true;\n    };\n\n    const shardsToQuery = groupShardRequests(shards, cycle, groupSize);\n    debug(`Querying ${shardsToQuery.join(', ')}`);\n    const subRequest = { ...request, targets: interpolateShardingSelector(splittingTargets, shardsToQuery) };\n    // Request may not have a request id\n    if (request.requestId) {\n      subRequest.requestId = `${request.requestId}_shard_${cycle}_${groupSize}`;\n    }\n\n    // @ts-expect-error\n    subquerySubscription = datasource.runQuery(subRequest).subscribe({\n      next: (partialResponse: DataQueryResponse) => {\n        if ((partialResponse.errors ?? []).length > 0 || partialResponse.error != null) {\n          if (retry(partialResponse)) {\n            return;\n          }\n        }\n        nextGroupSize = constrainGroupSize(\n          cycle + groupSize,\n          updateGroupSizeFromResponse(partialResponse, groupSize),\n          shards.length\n        );\n        if (nextGroupSize !== groupSize) {\n          debug(`New group size ${nextGroupSize}`);\n        }\n        mergedResponse = combineResponses(mergedResponse, partialResponse);\n      },\n      complete: () => {\n        if (retrying) {\n          return;\n        }\n        // Prevent flashing \"no data\"\n        if (mergedResponse.data.length) {\n          subscriber.next(mergedResponse);\n        }\n        nextRequest();\n      },\n      error: (error: unknown) => {\n        logger.error(error, { msg: 'failed to shard' });\n        subscriber.next(mergedResponse);\n        if (retry()) {\n          return;\n        }\n        nextRequest();\n      },\n    });\n  };\n\n  const runNonSplitRequest = (subscriber: Subscriber<DataQueryResponse>) => {\n    subquerySubscription = datasource.query(request).subscribe({\n      next: (partialResponse: DataQueryResponse) => {\n        mergedResponse = partialResponse;\n      },\n      complete: () => {\n        subscriber.next(mergedResponse);\n      },\n      error: (error: unknown) => {\n        logger.error(error, { msg: 'runNonSplitRequest subscription error' });\n        subscriber.error(mergedResponse);\n      },\n    });\n  };\n\n  const response = new Observable<DataQueryResponse>((subscriber) => {\n    const selector = getSelectorForShardValues(splittingTargets[0].expr);\n\n    if (!isValidQuery(selector)) {\n      debug(`Skipping invalid selector: ${selector}`);\n      subscriber.complete();\n      return;\n    }\n\n    datasource.languageProvider\n      .fetchLabelValues('__stream_shard__', {\n        timeRange: request.range,\n        streamSelector: selector ? selector : undefined,\n      })\n      .then((values: string[]) => {\n        const shards = values.map((value) => parseInt(value, 10));\n        if (!shards || !shards.length) {\n          logger.warn(`Shard splitting not supported. Issuing a regular query.`);\n          runNonSplitRequest(subscriber);\n        } else {\n          shards.sort((a, b) => b - a);\n          debug(`Querying ${shards.join(', ')} shards`);\n          runNextRequest(subscriber, 0, shards, getInitialGroupSize(shards));\n        }\n      })\n      .catch((e: unknown) => {\n        logger.error(e, { msg: 'failed to fetch label values for __stream_shard__' });\n        runNonSplitRequest(subscriber);\n      });\n    return () => {\n      shouldStop = true;\n      if (retryTimer) {\n        clearTimeout(retryTimer);\n      }\n      if (subquerySubscription != null) {\n        subquerySubscription.unsubscribe();\n        subquerySubscription = null;\n      }\n    };\n  });\n\n  return response;\n}\n\nfunction updateGroupSizeFromResponse(response: DataQueryResponse, currentSize: number) {\n  if (!response.data.length) {\n    // Empty response, increase group size\n    return currentSize + 1;\n  }\n\n  const metaExecutionTime: QueryResultMetaStat | undefined = response.data[0].meta?.stats?.find(\n    (stat: QueryResultMetaStat) => stat.displayName === 'Summary: exec time'\n  );\n\n  if (metaExecutionTime) {\n    const executionTime = Math.round(metaExecutionTime.value);\n    debug(`${metaExecutionTime.value}`);\n    // Positive scenarios\n    if (executionTime <= 1) {\n      return Math.floor(currentSize * 1.5);\n    } else if (executionTime < 6) {\n      return Math.ceil(currentSize * 1.1);\n    }\n\n    // Negative scenarios\n    if (currentSize === 1) {\n      return currentSize;\n    } else if (executionTime < 20) {\n      return Math.ceil(currentSize * 0.9);\n    } else {\n      return Math.floor(currentSize / 2);\n    }\n  }\n\n  return currentSize;\n}\n\n/**\n * Prevents the group size for ever being more than maxFactor% of the pending shards.\n */\nfunction constrainGroupSize(cycle: number, groupSize: number, shards: number) {\n  const maxFactor = 0.7;\n  return Math.min(groupSize, Math.max(Math.floor((shards - cycle) * maxFactor), 1));\n}\n\nfunction groupShardRequests(shards: number[], start: number, groupSize: number) {\n  if (start === shards.length) {\n    return [-1];\n  }\n  return shards.slice(start, start + groupSize);\n}\n\nfunction getInitialGroupSize(shards: number[]) {\n  return Math.floor(Math.sqrt(shards.length));\n}\n\nfunction isRetriableError(errorResponse: DataQueryResponse) {\n  const message = errorResponse.errors\n    ? (errorResponse.errors[0].message ?? '').toLowerCase()\n    : errorResponse.error?.message ?? '';\n  if (message.includes('timeout')) {\n    return true;\n  } else if (message.includes('parse error')) {\n    // If the error is a parse error, we want to signal to stop querying.\n    throw new Error(message);\n  }\n  return false;\n}\n\n// Enable to output debugging logs\nconst DEBUG_ENABLED = Boolean(localStorage.getItem(`${pluginJson.id}.sharding_debug_enabled`));\nfunction debug(message: string) {\n  if (!DEBUG_ENABLED) {\n    return;\n  }\n  console.log(message);\n}\n","// Warning: This file (and any imports) are included in the main bundle with Grafana in order to provide link extension support in Grafana core, in an effort to keep Grafana loading quickly, please do not add any unnecessary imports to this file and run the bundle analyzer before committing any changes!\nimport { DataSourceRef } from '@grafana/schema';\nimport { DataSourceWithBackend } from '@grafana/runtime';\nimport { DataSourceJsonData } from '@grafana/data';\n\nexport enum LokiQueryDirection {\n  Backward = 'backward',\n  Forward = 'forward',\n  Scan = 'scan',\n}\n\nexport type LokiQuery = {\n  refId: string;\n  queryType?: LokiQueryType;\n  editorMode?: string;\n  supportingQueryType?: string;\n  expr: string;\n  legendFormat?: string;\n  splitDuration?: string;\n  datasource?: DataSourceRef;\n  maxLines?: number;\n  direction?: LokiQueryDirection;\n};\n\nexport type LokiQueryType = 'instant' | 'range' | 'stream' | string;\n\nexport type LokiDatasource = DataSourceWithBackend<LokiQuery, DataSourceJsonData> & { maxLines?: number };\n","import {\n  createDataFrame,\n  DataFrame,\n  DataQueryRequest,\n  DataQueryResponse,\n  Field,\n  FieldType,\n  LoadingState,\n  TestDataSourceResponse,\n} from '@grafana/data';\nimport { config, DataSourceWithBackend, getDataSourceSrv } from '@grafana/runtime';\nimport { RuntimeDataSource, sceneUtils } from '@grafana/scenes';\nimport { DataQuery, LogsSortOrder } from '@grafana/schema';\nimport { Observable, Subscriber } from 'rxjs';\nimport { getDataSource } from './scenes';\nimport { getPrimaryLabelFromUrl } from './routing';\nimport { DetectedFieldsResponse, DetectedLabelsResponse } from './fields';\nimport { FIELDS_TO_REMOVE, LABELS_TO_REMOVE, sortLabelsByCardinality } from './filters';\nimport { SERVICE_NAME } from './variables';\nimport { runShardSplitQuery } from './shardQuerySplitting';\nimport { requestSupportsSharding } from './logql';\nimport { LokiDatasource, LokiQuery, LokiQueryDirection } from './lokiQuery';\nimport { SceneDataQueryRequest, SceneDataQueryResourceRequest, VolumeRequestProps } from './datasourceTypes';\nimport { logger } from './logger';\nimport { PLUGIN_ID } from './plugin';\nimport { sanitizeStreamSelector } from './query';\nimport { LOGS_PANEL_QUERY_REFID } from 'Components/ServiceScene/ServiceScene';\nimport { getLogsPanelSortOrderFromStore, getLogsPanelSortOrderFromURL } from 'Components/ServiceScene/LogOptionsScene';\n\nexport const WRAPPED_LOKI_DS_UID = 'wrapped-loki-ds-uid';\n\ntype TimeStampOfVolumeEval = number;\ntype VolumeCount = string;\ntype VolumeValue = [TimeStampOfVolumeEval, VolumeCount];\ntype VolumeResult = {\n  metric: {\n    service_name?: string;\n    __aggregated_metric__?: string;\n    [index: string]: string | undefined;\n  };\n  value: VolumeValue;\n};\n\ntype IndexVolumeResponse = {\n  data: {\n    result: VolumeResult[];\n  };\n};\n\ntype LabelsResponse = {\n  status: string;\n  data: string[];\n};\n\ntype SampleTimeStamp = number;\ntype SampleCount = number;\ntype PatternSample = [SampleTimeStamp, SampleCount];\n\nexport interface LokiPattern {\n  pattern: string;\n  samples: PatternSample[];\n}\n\ntype PatternsResponse = {\n  data: LokiPattern[];\n};\n\nexport const DETECTED_FIELDS_NAME_FIELD = 'name';\n\nexport const DETECTED_FIELDS_CARDINALITY_NAME = 'cardinality';\n\nexport const DETECTED_FIELDS_PARSER_NAME = 'parser';\n\nexport const DETECTED_FIELDS_TYPE_NAME = 'type';\n\nexport class WrappedLokiDatasource extends RuntimeDataSource<DataQuery> {\n  constructor(pluginId: string, uid: string) {\n    super(pluginId, uid);\n  }\n\n  query(request: SceneDataQueryRequest): Promise<DataQueryResponse> | Observable<DataQueryResponse> {\n    return new Observable<DataQueryResponse>((subscriber) => {\n      if (!request.scopedVars?.__sceneObject) {\n        throw new Error('Scene object not found in request');\n      }\n\n      getDataSourceSrv()\n        .get(getDataSource(request.scopedVars.__sceneObject.valueOf()))\n        .then(async (ds) => {\n          if (!(ds instanceof DataSourceWithBackend)) {\n            throw new Error('Invalid datasource!');\n          }\n\n          // override the target datasource to Loki\n          request.targets = request.targets?.map((target) => {\n            target.datasource = ds;\n            return target;\n          });\n\n          const targetsSet = new Set();\n          request.targets.forEach((target) => {\n            targetsSet.add(target.resource ?? '');\n          });\n\n          if (targetsSet.size !== 1) {\n            throw new Error('A request cannot contain queries to multiple endpoints');\n          }\n\n          const requestType = request.targets[0].resource;\n\n          switch (requestType) {\n            case 'volume': {\n              await this.getVolume(request, ds, subscriber);\n              break;\n            }\n            case 'patterns': {\n              await this.getPatterns(request, ds, subscriber);\n              break;\n            }\n            case 'detected_labels': {\n              await this.getDetectedLabels(request, ds, subscriber);\n              break;\n            }\n            case 'detected_fields': {\n              await this.getDetectedFields(request, ds, subscriber);\n              break;\n            }\n            case 'labels': {\n              await this.getLabels(request, ds, subscriber);\n              break;\n            }\n            default: {\n              this.getData(request, ds, subscriber);\n              break;\n            }\n          }\n        });\n    });\n  }\n\n  private getData(request: SceneDataQueryRequest, ds: LokiDatasource, subscriber: Subscriber<DataQueryResponse>) {\n    const shardingEnabled = config.featureToggles.exploreLogsShardSplitting;\n\n    const updatedRequest = {\n      ...request,\n      targets: this.applyQueryDirection(\n        ds.interpolateVariablesInQueries(request.targets, request.scopedVars).map((target) => ({\n          ...target,\n          resource: undefined,\n          expr: sanitizeStreamSelector(target.expr),\n        }))\n      ),\n    };\n\n    // Query the datasource and return either observable or promise\n    const dsResponse =\n      requestSupportsSharding(updatedRequest) === false || !shardingEnabled\n        ? ds.query(updatedRequest)\n        : runShardSplitQuery(ds, updatedRequest);\n    dsResponse.subscribe(subscriber);\n\n    return subscriber;\n  }\n\n  private async getPatterns(\n    request: DataQueryRequest<LokiQuery & SceneDataQueryResourceRequest>,\n    ds: LokiDatasource,\n    subscriber: Subscriber<DataQueryResponse>\n  ) {\n    const targets = request.targets.filter((target) => {\n      return target.resource === 'patterns';\n    });\n\n    if (targets.length !== 1) {\n      throw new Error('Patterns query can only have a single target!');\n    }\n    const { interpolatedTarget, expression } = this.interpolate(ds, targets, request);\n    subscriber.next({ data: [], state: LoadingState.Loading });\n\n    try {\n      const dsResponse = ds.getResource(\n        'patterns',\n        {\n          query: expression,\n          start: request.range.from.utc().toISOString(),\n          end: request.range.to.utc().toISOString(),\n          step: request.interval,\n        },\n        {\n          requestId: request.requestId ?? 'patterns',\n          headers: {\n            'X-Query-Tags': `Source=${PLUGIN_ID}`,\n          },\n        }\n      );\n      const response: PatternsResponse = await dsResponse;\n      const lokiPatterns = response?.data;\n\n      let maxValue = -Infinity;\n      let minValue = 0;\n\n      const frames: DataFrame[] =\n        lokiPatterns?.map((pattern: LokiPattern) => {\n          const timeValues: number[] = [];\n          const countValues: number[] = [];\n          let sum = 0;\n          pattern.samples.forEach(([time, count]) => {\n            timeValues.push(time * 1000);\n            countValues.push(count);\n            if (count > maxValue) {\n              maxValue = count;\n            }\n            if (count < minValue) {\n              minValue = count;\n            }\n            if (count > maxValue) {\n              maxValue = count;\n            }\n            if (count < minValue) {\n              minValue = count;\n            }\n            sum += count;\n          });\n          return createDataFrame({\n            refId: interpolatedTarget.refId,\n            name: pattern.pattern,\n            fields: [\n              {\n                name: 'time',\n                type: FieldType.time,\n                values: timeValues,\n                config: {},\n              },\n              {\n                name: pattern.pattern,\n                type: FieldType.number,\n                values: countValues,\n                config: {},\n              },\n            ],\n            meta: {\n              preferredVisualisationType: 'graph',\n              custom: {\n                sum,\n              },\n            },\n          });\n        }) ?? [];\n\n      frames.sort((a, b) => (b.meta?.custom?.sum as number) - (a.meta?.custom?.sum as number));\n      subscriber.next({ data: frames, state: LoadingState.Done });\n    } catch (e) {\n      subscriber.next({ data: [], state: LoadingState.Error });\n    }\n\n    return subscriber;\n  }\n\n  private interpolate(\n    ds: LokiDatasource,\n    targets: Array<LokiQuery & SceneDataQueryResourceRequest>,\n    request: DataQueryRequest<LokiQuery & SceneDataQueryResourceRequest>\n  ) {\n    const targetsInterpolated = ds.interpolateVariablesInQueries(targets, request.scopedVars);\n    if (!targetsInterpolated.length) {\n      throw new Error('Datasource failed to interpolate query!');\n    }\n    const interpolatedTarget = targetsInterpolated[0];\n    const expression = sanitizeStreamSelector(interpolatedTarget.expr);\n    return { interpolatedTarget, expression };\n  }\n\n  private applyQueryDirection(targets: LokiQuery[]) {\n    const sortOrder = getLogsPanelSortOrderFromURL() || getLogsPanelSortOrderFromStore();\n    return targets.map((target) => {\n      if (target.refId !== LOGS_PANEL_QUERY_REFID) {\n        return target;\n      }\n      target.direction =\n        sortOrder === LogsSortOrder.Descending ? LokiQueryDirection.Backward : LokiQueryDirection.Forward;\n      return target;\n    });\n  }\n\n  private async getDetectedLabels(\n    request: DataQueryRequest<LokiQuery & SceneDataQueryResourceRequest>,\n    ds: LokiDatasource,\n    subscriber: Subscriber<DataQueryResponse>\n  ) {\n    const targets = request.targets.filter((target) => {\n      return target.resource === 'detected_labels';\n    });\n\n    if (targets.length !== 1) {\n      throw new Error('Detected labels query can only have a single target!');\n    }\n\n    let { interpolatedTarget, expression } = this.interpolate(ds, targets, request);\n\n    // Detected_labels is a bit different then other queries that interpolate the labels variable, it can be empty, but if it is empty it must be completely empty or we'll get the \"queries require at least one regexp or equality\" error from Loki\n    if (expression === `{}`) {\n      expression = '';\n    }\n\n    subscriber.next({ data: [], state: LoadingState.Loading });\n\n    try {\n      const response = await ds.getResource<DetectedLabelsResponse>(\n        'detected_labels',\n        {\n          query: expression,\n          start: request.range.from.utc().toISOString(),\n          end: request.range.to.utc().toISOString(),\n        },\n        {\n          requestId: request.requestId ?? 'detected_labels',\n          headers: {\n            'X-Query-Tags': `Source=${PLUGIN_ID}`,\n          },\n        }\n      );\n\n      const { labelName: primaryLabelName } = getPrimaryLabelFromUrl();\n\n      const labels = response.detectedLabels\n        ?.filter((label) => primaryLabelName !== label.label && !LABELS_TO_REMOVE.includes(label.label))\n        ?.sort((a, b) => sortLabelsByCardinality(a, b));\n\n      const detectedLabelFields: Array<Partial<Field>> = labels?.map((label) => {\n        return {\n          name: label.label,\n          values: [label.cardinality],\n        };\n      });\n\n      const dataFrame = createDataFrame({\n        refId: interpolatedTarget.refId,\n        fields: detectedLabelFields ?? [],\n      });\n\n      subscriber.next({ data: [dataFrame], state: LoadingState.Done });\n    } catch (e) {\n      subscriber.next({ data: [], state: LoadingState.Error });\n    }\n\n    return subscriber;\n  }\n\n  private async getDetectedFields(\n    request: DataQueryRequest<LokiQuery & SceneDataQueryResourceRequest>,\n    ds: LokiDatasource,\n    subscriber: Subscriber<DataQueryResponse>\n  ) {\n    const targets = request.targets.filter((target) => {\n      return target.resource === 'detected_fields';\n    });\n\n    if (targets.length !== 1) {\n      throw new Error('Detected fields query can only have a single target!');\n    }\n\n    subscriber.next({ data: [], state: LoadingState.Loading });\n\n    const { interpolatedTarget, expression } = this.interpolate(ds, targets, request);\n\n    try {\n      const response = await ds.getResource<DetectedFieldsResponse>(\n        'detected_fields',\n        {\n          query: expression,\n          start: request.range.from.utc().toISOString(),\n          end: request.range.to.utc().toISOString(),\n        },\n        {\n          requestId: request.requestId ?? 'detected_fields',\n          headers: {\n            'X-Query-Tags': `Source=${PLUGIN_ID}`,\n          },\n        }\n      );\n\n      const nameField: Field = { name: DETECTED_FIELDS_NAME_FIELD, type: FieldType.string, values: [], config: {} };\n      const cardinalityField: Field = {\n        name: DETECTED_FIELDS_CARDINALITY_NAME,\n        type: FieldType.number,\n        values: [],\n        config: {},\n      };\n      const parserField: Field = { name: DETECTED_FIELDS_PARSER_NAME, type: FieldType.string, values: [], config: {} };\n      const typeField: Field = { name: DETECTED_FIELDS_TYPE_NAME, type: FieldType.string, values: [], config: {} };\n\n      response.fields?.forEach((field) => {\n        if (!FIELDS_TO_REMOVE.includes(field.label)) {\n          nameField.values.push(field.label);\n          cardinalityField.values.push(field.cardinality);\n          parserField.values.push(field.parsers?.length ? field.parsers.join(', ') : 'structuredMetadata');\n          typeField.values.push(field.type);\n        }\n      });\n\n      const dataFrame = createDataFrame({\n        refId: interpolatedTarget.refId,\n        fields: [nameField, cardinalityField, parserField, typeField],\n      });\n\n      subscriber.next({ data: [dataFrame], state: LoadingState.Done });\n    } catch (e) {\n      logger.error(e, { msg: 'Detected fields error' });\n      subscriber.next({ data: [], state: LoadingState.Error });\n    }\n\n    return subscriber;\n  }\n\n  //@todo doesn't work with multiple queries\n  private async getVolume(\n    request: DataQueryRequest<LokiQuery & SceneDataQueryResourceRequest & VolumeRequestProps>,\n    ds: LokiDatasource,\n    subscriber: Subscriber<DataQueryResponse>\n  ) {\n    if (request.targets.length !== 1) {\n      throw new Error('Volume query can only have a single target!');\n    }\n\n    const target = request.targets[0];\n    const primaryLabel = target.primaryLabel;\n    if (!primaryLabel) {\n      throw new Error('Primary label is required for volume queries!');\n    }\n\n    const targetsInterpolated = ds.interpolateVariablesInQueries([target], request.scopedVars);\n    const expression = sanitizeStreamSelector(targetsInterpolated[0].expr.replace('.*.*', '.+'));\n\n    subscriber.next({ data: [], state: LoadingState.Loading });\n\n    try {\n      const volumeResponse: IndexVolumeResponse = await ds.getResource(\n        'index/volume',\n        {\n          query: expression,\n          start: request.range.from.utc().toISOString(),\n          end: request.range.to.utc().toISOString(),\n          limit: 5000,\n        },\n        {\n          requestId: request.requestId ?? 'volume',\n          headers: {\n            'X-Query-Tags': `Source=${PLUGIN_ID}`,\n          },\n        }\n      );\n      volumeResponse?.data.result.sort((lhs: VolumeResult, rhs: VolumeResult) => {\n        const lVolumeCount: VolumeCount = lhs.value[1];\n        const rVolumeCount: VolumeCount = rhs.value[1];\n        return Number(rVolumeCount) - Number(lVolumeCount);\n      });\n\n      // Scenes will only emit dataframes from the SceneQueryRunner, so for now we need to convert the API response to a dataframe\n      const df = createDataFrame({\n        fields: [\n          {\n            // @todo rename\n            name: SERVICE_NAME,\n            values: volumeResponse?.data.result?.map((r) => {\n              return r.metric[primaryLabel];\n            }),\n          },\n          { name: 'volume', values: volumeResponse?.data.result?.map((r) => Number(r.value[1])) },\n        ],\n      });\n\n      subscriber.next({ data: [df] });\n    } catch (e) {\n      logger.error(e);\n      subscriber.next({ data: [], state: LoadingState.Error });\n    }\n\n    subscriber.complete();\n\n    return subscriber;\n  }\n\n  private async getLabels(\n    request: DataQueryRequest<LokiQuery & SceneDataQueryResourceRequest>,\n    ds: LokiDatasource,\n    subscriber: Subscriber<DataQueryResponse>\n  ) {\n    if (request.targets.length !== 1) {\n      throw new Error('Volume query can only have a single target!');\n    }\n\n    try {\n      const labelsResponse: LabelsResponse = await ds.getResource(\n        'labels',\n        {\n          start: request.range.from.utc().toISOString(),\n          end: request.range.to.utc().toISOString(),\n        },\n        {\n          requestId: request.requestId ?? 'labels',\n          headers: {\n            'X-Query-Tags': `Source=${PLUGIN_ID}`,\n          },\n        }\n      );\n\n      // Scenes will only emit dataframes from the SceneQueryRunner, so for now we need to convert the API response to a dataframe\n      const df = createDataFrame({\n        fields: [{ name: 'labels', values: labelsResponse?.data }],\n      });\n      subscriber.next({ data: [df], state: LoadingState.Done });\n    } catch (e) {\n      subscriber.next({ data: [], state: LoadingState.Error });\n    }\n\n    subscriber.complete();\n\n    return subscriber;\n  }\n\n  testDatasource(): Promise<TestDataSourceResponse> {\n    return Promise.resolve({ status: 'success', message: 'Data source is working', title: 'Success' });\n  }\n}\n\nfunction init() {\n  sceneUtils.registerRuntimeDataSource({\n    dataSource: new WrappedLokiDatasource('wrapped-loki-ds', WRAPPED_LOKI_DS_UID),\n  });\n}\n\nexport default init;\n","import { sceneGraph, SceneObject } from '@grafana/scenes';\nimport { IndexScene } from '../Components/IndexScene/IndexScene';\nimport { FavoriteServiceHeaderActionScene } from '../Components/ServiceSelectionScene/FavoriteServiceHeaderActionScene';\nimport { ServiceSelectionScene } from '../Components/ServiceSelectionScene/ServiceSelectionScene';\nimport { getDataSourceVariable } from './variableGetters';\nimport { addToFavoriteLabelValueInStorage, removeFromFavoritesInStorage } from './store';\n\nexport function rerenderFavorites(sceneRef: SceneObject) {\n  // Find all FavoriteServiceHeaderActionScene and re-render\n  const indexScene = sceneGraph.getAncestor(sceneRef, IndexScene);\n  const favoriteServiceHeaderActionScene = sceneGraph.findAllObjects(\n    indexScene,\n    (o) => o instanceof FavoriteServiceHeaderActionScene\n  );\n  favoriteServiceHeaderActionScene.forEach((s) => s.forceRender());\n\n  // Find the ServiceFieldSelector's parent (currently service selection scene) and force re-render so dropdown has correct order\n  // @todo move ServiceFieldSelector to new scene\n  const serviceSelectionScene = sceneGraph.findDescendents(indexScene, ServiceSelectionScene);\n  serviceSelectionScene.forEach((s) => s.forceRender());\n}\n\nexport function addToFavorites(labelName: string, labelValue: string, sceneRef: SceneObject) {\n  const ds = getDataSourceVariable(sceneRef).getValue();\n  addToFavoriteLabelValueInStorage(ds, labelName, labelValue);\n  rerenderFavorites(sceneRef);\n}\n\nexport function removeFromFavorites(labelName: string, labelValue: string, sceneRef: SceneObject) {\n  const ds = getDataSourceVariable(sceneRef).getValue();\n  removeFromFavoritesInStorage(ds, labelName, labelValue);\n  rerenderFavorites(sceneRef);\n}\n","import { DataFrame, Field, ReducerID } from '@grafana/data';\nimport { DrawStyle, StackingMode } from '@grafana/ui';\nimport {\n  AdHocFiltersVariable,\n  PanelBuilders,\n  SceneCSSGridItem,\n  SceneDataTransformer,\n  SceneObject,\n} from '@grafana/scenes';\nimport { AddToFiltersButton, VariableFilterType } from 'Components/ServiceScene/Breakdowns/AddToFiltersButton';\nimport {\n  DetectedFieldType,\n  LEVEL_VARIABLE_VALUE,\n  LogsQueryOptions,\n  ParserType,\n  VAR_FIELDS,\n  VAR_LABELS,\n  VAR_LEVELS,\n  VAR_METADATA,\n} from './variables';\nimport { setLevelColorOverrides } from './panel';\nimport { map, Observable } from 'rxjs';\nimport { SortBy, SortByScene } from '../Components/ServiceScene/Breakdowns/SortByScene';\nimport { getDetectedFieldsFrame } from '../Components/ServiceScene/ServiceScene';\nimport { getLogsStreamSelector, getValueFromFieldsFilter } from './variableGetters';\nimport { LabelType } from './fieldsTypes';\nimport { logger } from './logger';\nimport { PanelMenu } from '../Components/Panels/PanelMenu';\n\nexport type DetectedLabel = {\n  label: string;\n  cardinality: number;\n};\n\nexport type DetectedLabelsResponse = {\n  detectedLabels: DetectedLabel[];\n};\n\nexport type DetectedField = {\n  label: string;\n  cardinality: number;\n  type: string;\n  parsers: string[] | null;\n};\n\nexport type DetectedFieldsResponse = {\n  fields: DetectedField[];\n};\n\nconst getReducerId = (sortBy: SortBy) => {\n  if (sortBy) {\n    const values: string[] = Object.values(ReducerID);\n    if (values.includes(sortBy)) {\n      return sortBy;\n    }\n  }\n  return undefined;\n};\n\n/**\n * Extracts the ExtractedFieldsType from the string returned on the detected_fields api parser field value\n * @param parserString\n */\nexport function extractParserFromString(parserString?: string): ParserType {\n  switch (parserString) {\n    case 'json':\n      return 'json';\n    case 'logfmt':\n      return 'logfmt';\n    case '': // Structured metadata is empty\n      return 'structuredMetadata';\n    case 'structuredMetadata': // Structured metadata is empty\n      return 'structuredMetadata';\n    default: // if we get a parser with multiple\n      return 'mixed';\n  }\n}\n\nexport function extractFieldTypeFromString(fieldString?: string): DetectedFieldType {\n  switch (fieldString) {\n    case 'int':\n    case 'float':\n    case 'duration':\n    case 'boolean':\n    case 'bytes':\n      return fieldString;\n    default:\n      return 'string';\n  }\n}\n\nexport function extractParserFromArray(parsers?: string[]): ParserType {\n  const parsersSet = new Set(parsers?.map((v) => v.toString()) ?? []);\n\n  // Structured metadata doesn't change the parser we use, so remove it\n  parsersSet.delete('structuredMetadata');\n\n  // get unique values\n  const parsersArray = Array.from(parsersSet);\n\n  if (parsersArray.length === 1) {\n    return extractParserFromString(parsersArray[0]);\n  }\n\n  // If the set size is zero, we only had structured metadata detected as a parser\n  if (parsersSet.size === 0) {\n    return 'structuredMetadata';\n  }\n\n  // Otherwise if there was more then one value, return mixed parser\n  return 'mixed';\n}\n\nexport function getParserForField(fieldName: string, sceneRef: SceneObject): ParserType | undefined {\n  const detectedFieldsFrame = getDetectedFieldsFrame(sceneRef);\n  const parserField: Field<string> | undefined = detectedFieldsFrame?.fields[2];\n  const namesField: Field<string> | undefined = detectedFieldsFrame?.fields[0];\n\n  const index = namesField?.values.indexOf(fieldName);\n  const parser =\n    index !== undefined && index !== -1 ? extractParserFromString(parserField?.values?.[index] ?? '') : undefined;\n\n  if (parser === undefined) {\n    logger.warn('missing parser, using mixed format for', { fieldName });\n    return 'mixed';\n  }\n  return parser;\n}\n\nexport function getFilterBreakdownValueScene(\n  getTitle: (df: DataFrame) => string,\n  style: DrawStyle,\n  variableName: typeof VAR_FIELDS | typeof VAR_LABELS | typeof VAR_METADATA,\n  sortByScene: SortByScene,\n  labelKey?: string\n) {\n  return (frame: DataFrame, frameIndex: number) => {\n    const reducerID = getReducerId(sortByScene.state.sortBy);\n    const panel = PanelBuilders.timeseries()\n      .setOption('legend', { showLegend: false })\n      .setCustomFieldConfig('fillOpacity', 9)\n      .setTitle(getTitle(frame))\n      // 11.5\n      // .setShowMenuAlways(true)\n      .setData(\n        new SceneDataTransformer({\n          transformations: [() => selectFrameTransformation(frame)],\n        })\n      )\n      .setOverrides(setLevelColorOverrides)\n      .setMenu(new PanelMenu({ frame, fieldName: getTitle(frame), labelName: labelKey }))\n      .setHeaderActions([new AddToFiltersButton({ frame, variableName })]);\n\n    if (style === DrawStyle.Bars) {\n      panel\n        .setCustomFieldConfig('stacking', { mode: StackingMode.Normal })\n        .setCustomFieldConfig('fillOpacity', 100)\n        .setCustomFieldConfig('lineWidth', 0)\n        .setCustomFieldConfig('pointSize', 0)\n        .setOverrides(setLevelColorOverrides)\n        .setCustomFieldConfig('drawStyle', DrawStyle.Bars);\n    }\n\n    if (reducerID) {\n      panel.setOption('legend', {\n        showLegend: true,\n        calcs: [reducerID],\n      });\n      // These will only have a single series, no need to show the title twice\n      panel.setDisplayName(' ');\n    }\n\n    return new SceneCSSGridItem({\n      body: panel.build(),\n    });\n  };\n}\n\nexport function selectFrameTransformation(frame: DataFrame) {\n  return (source: Observable<DataFrame[]>) => {\n    return source.pipe(\n      map(() => {\n        return [frame];\n      })\n    );\n  };\n}\n\nexport function getLabelTypeFromFrame(labelKey: string, frame: DataFrame, index = 0): null | LabelType {\n  const typeField = frame.fields.find((field) => field.name === 'labelTypes')?.values[index];\n  if (!typeField) {\n    return null;\n  }\n  switch (typeField[labelKey]) {\n    case 'I':\n      return LabelType.Indexed;\n    case 'S':\n      return LabelType.StructuredMetadata;\n    case 'P':\n      return LabelType.Parsed;\n    default:\n      return null;\n  }\n}\n\n/**\n * Returns the variable to use when adding filters in a panel.\n * @param frame\n * @param key\n * @param sceneRef\n */\nexport function getVariableForLabel(\n  frame: DataFrame | undefined,\n  key: string,\n  sceneRef: SceneObject\n): VariableFilterType {\n  const labelType = frame ? getLabelTypeFromFrame(key, frame) : LabelType.Parsed;\n\n  if (labelType) {\n    // Use the labelType from the dataframe\n    return getFilterTypeFromLabelType(labelType, key, sceneRef);\n  }\n\n  // If the dataframe doesn't have labelTypes, check if the detected_fields response returned a parser.\n  const parserForThisField = getParserForField(key, sceneRef);\n  if (parserForThisField === 'structuredMetadata') {\n    return VAR_METADATA;\n  }\n\n  logger.warn('unable to determine label variable, falling back to parsed field', {\n    key,\n    parserForThisField: parserForThisField ?? '',\n  });\n\n  return VAR_FIELDS;\n}\n\nexport function getFilterTypeFromLabelType(type: LabelType, key: string, sceneRef: SceneObject): VariableFilterType {\n  switch (type) {\n    case LabelType.Indexed: {\n      return VAR_LABELS;\n    }\n    case LabelType.Parsed: {\n      return VAR_FIELDS;\n    }\n    case LabelType.StructuredMetadata: {\n      // Structured metadata is either a special level variable, or a field variable\n      if (key === LEVEL_VARIABLE_VALUE) {\n        return VAR_LEVELS;\n      }\n      return VAR_METADATA;\n    }\n    default: {\n      const err = new Error(`Invalid label type for ${key}`);\n      logger.error(err, { type, msg: `Invalid label type for ${key}` });\n      throw err;\n    }\n  }\n}\n\nexport function getParserFromFieldsFilters(fields: AdHocFiltersVariable): ParserType {\n  const parsers = fields.state.filters.map((filter) => {\n    return getValueFromFieldsFilter(filter).parser;\n  });\n\n  return extractParserFromArray(parsers);\n}\n\nexport function isAvgField(fieldType: DetectedFieldType | undefined) {\n  return fieldType === 'duration' || fieldType === 'bytes' || fieldType === 'float';\n}\n\nexport function buildFieldsQuery(optionValue: string, options: LogsQueryOptions) {\n  if (options.fieldType && ['bytes', 'duration'].includes(options.fieldType)) {\n    return (\n      `avg_over_time(${getLogsStreamSelector(options)} | unwrap ` +\n      options.fieldType +\n      `(${optionValue}) | __error__=\"\" [$__auto]) by ()`\n    );\n  } else if (options.fieldType && options.fieldType === 'float') {\n    return (\n      `avg_over_time(${getLogsStreamSelector(options)} | unwrap ` + optionValue + ` | __error__=\"\" [$__auto]) by ()`\n    );\n  } else {\n    return `sum by (${optionValue}) (count_over_time(${getLogsStreamSelector(options)} [$__auto]))`;\n  }\n}\n\n/**\n * Returns the DetectedFieldType if available for a specific label\n * @param optionValue\n * @param detectedFieldsFrame\n */\nexport function getDetectedFieldType(optionValue: string, detectedFieldsFrame?: DataFrame) {\n  const namesField: Field<string> | undefined = detectedFieldsFrame?.fields[0];\n  const typesField: Field<string> | undefined = detectedFieldsFrame?.fields[3];\n  const index = namesField?.values.indexOf(optionValue);\n  return index !== undefined && index !== -1 ? extractFieldTypeFromString(typesField?.values?.[index]) : undefined;\n}\n\nexport function buildFieldsQueryString(\n  optionValue: string,\n  fieldsVariable: AdHocFiltersVariable,\n  detectedFieldsFrame?: DataFrame\n) {\n  const parserField: Field<string> | undefined = detectedFieldsFrame?.fields[2];\n  const namesField: Field<string> | undefined = detectedFieldsFrame?.fields[0];\n  const typesField: Field<string> | undefined = detectedFieldsFrame?.fields[3];\n  const index = namesField?.values.indexOf(optionValue);\n\n  const parserForThisField =\n    index !== undefined && index !== -1 ? extractParserFromString(parserField?.values?.[index]) : 'mixed';\n\n  const optionType =\n    index !== undefined && index !== -1 ? extractFieldTypeFromString(typesField?.values?.[index]) : undefined;\n\n  // Get the parser from the json payload of each filter\n  const parsers = fieldsVariable.state.filters.map((filter) => {\n    const index = namesField?.values.indexOf(filter.key);\n    const parserFromFilterValue = getValueFromFieldsFilter(filter);\n    if (parserFromFilterValue.parser) {\n      return parserFromFilterValue.parser;\n    }\n\n    // Then fallback to check the latest response\n    const parser =\n      index !== undefined && index !== -1\n        ? extractParserFromString(parserField?.values?.[index] ?? 'mixed')\n        : undefined;\n    return parser ?? 'mixed';\n  });\n\n  const parser = extractParserFromArray([...parsers, parserForThisField]);\n\n  let fieldExpressionToAdd = '';\n  let structuredMetadataToAdd = '';\n\n  if (parserForThisField === 'structuredMetadata') {\n    structuredMetadataToAdd = `| ${optionValue}!=\"\"`;\n    // Structured metadata\n  } else {\n    fieldExpressionToAdd = `| ${optionValue}!=\"\"`;\n  }\n\n  // is option structured metadata\n  const options: LogsQueryOptions = {\n    structuredMetadataToAdd,\n    fieldExpressionToAdd,\n    parser: parser,\n    fieldType: optionType,\n  };\n\n  return buildFieldsQuery(optionValue, options);\n}\n\n// copied from /grafana/grafana/public/app/plugins/datasource/loki/datasource.ts:1204\nexport function lokiRegularEscape<T>(value: T) {\n  if (typeof value === 'string') {\n    return value.replace(/'/g, \"\\\\\\\\'\");\n  }\n  return value;\n}\n","import { DetectedLabel } from './fields';\nimport { ALL_VARIABLE_VALUE, LEVEL_VARIABLE_VALUE } from './variables';\nimport { VariableValueOption } from '@grafana/scenes';\n\n// We want to show labels with cardinality 1 at the end of the list because they are less useful\n// And then we want to sort by cardinality - from lowest to highest\nexport function sortLabelsByCardinality(a: DetectedLabel, b: DetectedLabel) {\n  if (a.cardinality === 1) {\n    return 1;\n  }\n  if (b.cardinality === 1) {\n    return -1;\n  }\n  return a.cardinality - b.cardinality;\n}\n\n// Creates label options by taking all labels and if LEVEL_VARIABLE_VALUE is not in the list, it is added at the beginning.\n// It also adds 'All' option at the beginning\nexport function getLabelOptions(labels: string[]) {\n  const options = [...labels];\n  if (!labels.includes(LEVEL_VARIABLE_VALUE)) {\n    options.unshift(LEVEL_VARIABLE_VALUE);\n  }\n\n  const labelOptions: VariableValueOption[] = options.map((label) => ({\n    label,\n    value: String(label),\n  }));\n\n  return [{ label: 'All', value: ALL_VARIABLE_VALUE }, ...labelOptions];\n}\nexport const LEVEL_INDEX_NAME = 'level';\nexport const FIELDS_TO_REMOVE = ['level_extracted', LEVEL_VARIABLE_VALUE, LEVEL_INDEX_NAME];\n\nexport const LABELS_TO_REMOVE = ['__aggregated_metric__', '__stream_shard__'];\nexport function getFieldOptions(labels: string[]) {\n  const options = [...labels];\n  const labelOptions: VariableValueOption[] = options.map((label) => ({\n    label,\n    value: String(label),\n  }));\n\n  return [{ label: 'All', value: ALL_VARIABLE_VALUE }, ...labelOptions];\n}\n","import { SceneObject } from '@grafana/scenes';\nimport { LEVEL_VARIABLE_VALUE } from './variables';\nimport { getParserFromFieldsFilters } from './fields';\nimport { buildDataQuery } from './query';\nimport { getFieldsVariable, getLogsStreamSelector } from './variableGetters';\n\nexport const LABEL_BREAKDOWN_GRID_TEMPLATE_COLUMNS = 'repeat(auto-fit, minmax(400px, 1fr))';\n\nexport function buildLabelsQuery(sceneRef: SceneObject, optionValue: string, optionName: string) {\n  let labelExpressionToAdd = '';\n  let structuredMetadataToAdd = '';\n\n  const fields = getFieldsVariable(sceneRef);\n  const parser = getParserFromFieldsFilters(fields);\n\n  if (optionName && optionName !== LEVEL_VARIABLE_VALUE) {\n    labelExpressionToAdd = ` ,${optionName} != \"\"`;\n  } else if (optionName && optionName === LEVEL_VARIABLE_VALUE) {\n    structuredMetadataToAdd = ` | ${optionName} != \"\"`;\n  }\n\n  return buildDataQuery(\n    `sum(count_over_time(${getLogsStreamSelector({\n      labelExpressionToAdd,\n      structuredMetadataToAdd,\n      parser,\n    })} [$__auto])) by (${optionValue})`,\n    { legendFormat: `{{${optionValue}}}`, refId: 'LABEL_BREAKDOWN_VALUES' }\n  );\n}\n","import { DataFrame } from '@grafana/data';\nimport { SeriesVisibilityChangeMode } from '@grafana/ui';\nimport { LEVEL_VARIABLE_VALUE } from './variables';\nimport { SceneObject } from '@grafana/scenes';\nimport { addToFilters, replaceFilter } from 'Components/ServiceScene/Breakdowns/AddToFiltersButton';\nimport { getLevelsVariable } from './variableGetters';\nimport { FilterOp } from './filterTypes';\n\n/**\n * Given a set of `visibleLevels` in a panel, it returns a list of the new visible levels\n * after applying the visibility change in `mode`.\n */\nexport function toggleLevelVisibility(\n  level: string,\n  visibleLevels: string[] | undefined,\n  mode: SeriesVisibilityChangeMode,\n  allLevels: string[]\n) {\n  if (mode === SeriesVisibilityChangeMode.ToggleSelection) {\n    const levels = visibleLevels ?? [];\n    if (levels.length === 1 && levels.includes(level)) {\n      return [];\n    }\n    return [level];\n  }\n  /**\n   * When the behavior is `AppendToSelection` and the filter is empty, we initialize it\n   * with all levels because the user is excluding this level in their action.\n   */\n  let levels = !visibleLevels?.length ? allLevels : visibleLevels;\n  if (levels.includes(level)) {\n    return levels.filter((existingLevel) => existingLevel !== level);\n  }\n\n  return [...levels, level];\n}\n\nexport function getLabelsFromSeries(series: DataFrame[]) {\n  return series.map((dataFrame) => getLabelValueFromDataFrame(dataFrame) ?? 'logs');\n}\n\nexport function getLabelValueFromDataFrame(frame: DataFrame) {\n  const labels = frame.fields[1]?.labels;\n\n  if (!labels) {\n    return null;\n  }\n\n  const keys = Object.keys(labels);\n  if (keys.length === 0) {\n    return null;\n  }\n\n  return labels[keys[0]];\n}\n\n/*\n * From the current state of the levels filter, return the level names that\n * the user wants to see.\n */\nexport function getVisibleLevels(allLevels: string[], sceneRef: SceneObject) {\n  const levelsFilter = getLevelsVariable(sceneRef);\n  const wantedLevels = levelsFilter.state.filters\n    .filter((filter) => filter.operator === FilterOp.Equal)\n    .map((filter) => normalizeLevelName(filter.value));\n  const unwantedLevels = levelsFilter.state.filters\n    .filter((filter) => filter.operator === FilterOp.NotEqual)\n    .map((filter) => normalizeLevelName(filter.value));\n  return allLevels.filter((level) => {\n    if (unwantedLevels.includes(level)) {\n      return false;\n    }\n    return wantedLevels.length === 0 || wantedLevels.includes(level);\n  });\n}\n\nfunction normalizeLevelName(level: string) {\n  if (level === '\"\"') {\n    return 'logs';\n  }\n  return level;\n}\n\n/**\n * Toggle a level from the filter state.\n * If the filter is empty, it's added.\n * If the filter exists but it's different, it's replaced.\n * If the filter exists, it's removed.\n */\nexport function toggleLevelFromFilter(level: string, sceneRef: SceneObject) {\n  const levelFilter = getLevelsVariable(sceneRef);\n  const empty = levelFilter.state.filters.length === 0;\n  const filterExists = levelFilter.state.filters.find(\n    (filter) => filter.value === level && filter.operator === FilterOp.Equal\n  );\n\n  if (level === 'logs') {\n    level = '\"\"';\n  }\n\n  let action;\n  if (empty || !filterExists) {\n    replaceFilter(LEVEL_VARIABLE_VALUE, level, 'include', sceneRef);\n    action = 'add';\n  } else {\n    addToFilters(LEVEL_VARIABLE_VALUE, level, 'toggle', sceneRef);\n    action = 'remove';\n  }\n\n  return action;\n}\n","import { LogContext } from '@grafana/faro-web-sdk';\nimport { FetchError, logError, logInfo, logWarning } from '@grafana/runtime';\nimport pluginJson from '../plugin.json';\nimport packageJson from '../../package.json';\nimport { isRecord } from './narrowing';\n\nconst defaultContext = {\n  app: pluginJson.id,\n  version: packageJson.version,\n};\n\nexport const logger = {\n  info: (msg: string, context?: LogContext) => {\n    const ctx = { ...defaultContext, ...context };\n    console.log(msg, ctx);\n    attemptFaroInfo(msg, ctx);\n  },\n  warn: (msg: string, context?: LogContext) => {\n    const ctx = { ...defaultContext, ...context };\n    console.warn(msg, ctx);\n    attemptFaroWarn(msg, ctx);\n  },\n  error: (err: Error | unknown, context?: LogContext) => {\n    const ctx = { ...defaultContext, ...context };\n    console.error(err, ctx);\n    attemptFaroErr(err, ctx);\n  },\n};\n\nconst attemptFaroInfo = (msg: string, context?: LogContext) => {\n  try {\n    logInfo(msg, context);\n  } catch (e) {\n    console.warn('Failed to log faro event!');\n  }\n};\n\nconst attemptFaroWarn = (msg: string, context?: LogContext) => {\n  try {\n    logWarning(msg, context);\n  } catch (e) {\n    console.warn('Failed to log faro warning!', { msg, context });\n  }\n};\n/**\n * Checks unknown error for properties from Records like FetchError and adds them to the context\n * @param err\n * @param context\n */\nfunction populateFetchErrorContext(err: unknown | FetchError, context: LogContext) {\n  if (typeof err === 'object' && err !== null) {\n    if (isRecord(err)) {\n      Object.keys(err).forEach((key: string) => {\n        const value = err[key];\n        if (typeof value === 'string' || typeof value === 'boolean' || typeof value === 'number') {\n          context[key] = value.toString();\n        }\n      });\n    }\n\n    if (hasData(err)) {\n      if (typeof err.data === 'object' && err.data !== null) {\n        try {\n          context.data = JSON.stringify(err.data);\n        } catch (e) {\n          // do nothing\n        }\n      } else if (typeof err.data === 'string' || typeof err.data === 'boolean' || typeof err.data === 'number') {\n        context.data = err.data.toString();\n      }\n    }\n  }\n}\n\nconst attemptFaroErr = (err: Error | FetchError | unknown, context2: LogContext) => {\n  let context = context2;\n  try {\n    populateFetchErrorContext(err, context);\n\n    if (err instanceof Error) {\n      logError(err, context);\n    } else if (typeof err === 'string') {\n      logError(new Error(err), context);\n    } else if (err && typeof err === 'object') {\n      if (context.msg) {\n        logError(new Error(context.msg), context);\n      } else {\n        logError(new Error('error object'), context);\n      }\n    } else {\n      logError(new Error('unknown error'), context);\n    }\n  } catch (e) {\n    console.error('Failed to log faro error!', { err, context });\n  }\n};\n\nconst hasData = (value: object): value is { data: unknown } => {\n  return 'data' in value;\n};\n","import {\n  arrayToDataFrame,\n  DataFrame,\n  DataFrameType,\n  DataTopic,\n  Field,\n  FieldCache,\n  FieldType,\n  FieldWithIndex,\n  Labels,\n} from '@grafana/data';\n\n// these are like Labels, but their values can be\n// arbitrary structures, not just strings\nexport type LogFrameLabels = Record<string, unknown>;\n\n// the attributes-access is a little awkward, but it's necessary\n// because there are multiple,very different dataFrame-representations.\nexport type LogsFrame = {\n  timeField: FieldWithIndex;\n  bodyField: FieldWithIndex;\n  timeNanosecondField: FieldWithIndex | null;\n  severityField: FieldWithIndex | null;\n  idField: FieldWithIndex | null;\n  getLogFrameLabels: () => LogFrameLabels[] | null; // may be slow, so we only do it when asked for it explicitly\n  getLogFrameLabelsAsLabels: () => Labels[] | null; // temporarily exists to make the labels=>attributes migration simpler\n  getLabelFieldName: () => string | null;\n  extraFields: FieldWithIndex[];\n  raw: DataFrame;\n};\n\nfunction getField(cache: FieldCache, name: string, fieldType: FieldType): FieldWithIndex | undefined {\n  const field = cache.getFieldByName(name);\n  if (field === undefined) {\n    return undefined;\n  }\n\n  return field.type === fieldType ? field : undefined;\n}\n\nexport const DATAPLANE_TIMESTAMP_NAME = 'timestamp';\nexport const DATAPLANE_BODY_NAME = 'body';\nexport const DATAPLANE_SEVERITY_NAME = 'severity';\nexport const DATAPLANE_ID_NAME = 'id';\nexport const DATAPLANE_LABELS_NAME = 'labels';\n\nexport function logFrameLabelsToLabels(logFrameLabels: LogFrameLabels): Labels {\n  const result: Labels = {};\n\n  Object.entries(logFrameLabels).forEach(([k, v]) => {\n    result[k] = typeof v === 'string' ? v : JSON.stringify(v);\n  });\n\n  return result;\n}\n\nexport function parseLogsFrame(frame: DataFrame): LogsFrame | null {\n  if (frame.meta?.type === DataFrameType.LogLines) {\n    return parseDataplaneLogsFrame(frame);\n  } else {\n    return parseLegacyLogsFrame(frame);\n  }\n}\n\nexport function parseDataplaneLogsFrame(frame: DataFrame): LogsFrame | null {\n  const cache = new FieldCache(frame);\n\n  const timestampField = getField(cache, DATAPLANE_TIMESTAMP_NAME, FieldType.time);\n  const bodyField = getField(cache, DATAPLANE_BODY_NAME, FieldType.string);\n\n  // these two are mandatory\n  if (timestampField === undefined || bodyField === undefined) {\n    return null;\n  }\n\n  const severityField = getField(cache, DATAPLANE_SEVERITY_NAME, FieldType.string) ?? null;\n  const idField = getField(cache, DATAPLANE_ID_NAME, FieldType.string) ?? null;\n  const labelsField = getField(cache, DATAPLANE_LABELS_NAME, FieldType.other) ?? null;\n\n  const labels = labelsField === null ? null : labelsField.values;\n\n  const extraFields = cache.fields.filter(\n    (_, i) =>\n      i !== timestampField.index &&\n      i !== bodyField.index &&\n      i !== severityField?.index &&\n      i !== idField?.index &&\n      i !== labelsField?.index\n  );\n\n  return {\n    raw: frame,\n    timeField: timestampField,\n    bodyField,\n    severityField,\n    idField,\n    getLogFrameLabels: () => labels,\n    timeNanosecondField: null,\n    getLogFrameLabelsAsLabels: () => (labels !== null ? labels.map(logFrameLabelsToLabels) : null),\n    getLabelFieldName: () => (labelsField !== null ? labelsField.name : null),\n    extraFields,\n  };\n}\n\n// Copied from https://github.com/grafana/grafana/blob/main/public/app/features/logs/legacyLogsFrame.ts\nexport function parseLegacyLogsFrame(frame: DataFrame): LogsFrame | null {\n  const cache = new FieldCache(frame);\n  const timeField = cache.getFirstFieldOfType(FieldType.time);\n  const bodyField = cache.getFirstFieldOfType(FieldType.string);\n\n  // these two are mandatory\n  if (timeField === undefined || bodyField === undefined) {\n    return null;\n  }\n\n  const timeNanosecondField = cache.getFieldByName('tsNs') ?? null;\n  const severityField = cache.getFieldByName('level') ?? null;\n  const idField = cache.getFieldByName('id') ?? null;\n\n  // extracting the labels is done very differently for old-loki-style and simple-style\n  // dataframes, so it's a little awkward to handle it,\n  // we both need to on-demand extract the labels, and also get teh labelsField,\n  // but only if the labelsField is used.\n  const [labelsField, getL] = makeLabelsGetter(cache, bodyField, frame);\n\n  const extraFields = cache.fields.filter(\n    (_, i) =>\n      i !== timeField.index &&\n      i !== bodyField.index &&\n      i !== timeNanosecondField?.index &&\n      i !== severityField?.index &&\n      i !== idField?.index &&\n      i !== labelsField?.index\n  );\n\n  return {\n    timeField,\n    bodyField,\n    timeNanosecondField,\n    severityField,\n    idField,\n    getLogFrameLabels: getL,\n    getLogFrameLabelsAsLabels: getL,\n    getLabelFieldName: () => labelsField?.name ?? null,\n    extraFields,\n    raw: frame,\n  };\n}\n\n// if the frame has \"labels\" field with type \"other\", adjust the behavior.\n// we also have to return the labels-field (if we used it),\n// to be able to remove it from the unused-fields, later.\nfunction makeLabelsGetter(\n  cache: FieldCache,\n  lineField: Field,\n  frame: DataFrame\n): [FieldWithIndex | null, () => Labels[] | null] {\n  // If we have labels field with type \"other\", use that\n  const labelsField = cache.getFieldByName('labels');\n  if (labelsField !== undefined && labelsField.type === FieldType.other) {\n    const values = labelsField.values.map(logFrameLabelsToLabels);\n    return [labelsField, () => values];\n  } else {\n    // Otherwise we use the labels on the line-field, and make an array with it\n    return [null, () => makeLabelsArray(lineField, frame.length)];\n  }\n}\n\n// take the labels from the line-field, and \"stretch\" it into an array\n// with the length of the frame (so there are the same labels for every row)\nfunction makeLabelsArray(lineField: Field, length: number): Labels[] | null {\n  const lineLabels = lineField.labels;\n  if (lineLabels !== undefined) {\n    const result = new Array(length);\n    result.fill(lineLabels);\n    return result;\n  } else {\n    return null;\n  }\n}\n\nexport function getTimeName(logsFrame?: LogsFrame) {\n  return logsFrame?.timeField.name ?? DATAPLANE_TIMESTAMP_NAME;\n}\n\nexport function getBodyName(logsFrame?: LogsFrame | null): string {\n  return logsFrame?.bodyField.name ?? DATAPLANE_BODY_NAME;\n}\n\nexport function getIdName(logsFrame?: LogsFrame): string {\n  return logsFrame?.idField?.name ?? DATAPLANE_ID_NAME;\n}\n\nexport function getSeriesVisibleRange(series: DataFrame[]) {\n  let start = 0;\n  let end = 0;\n\n  const timeField = series[0]?.fields.find((field) => field.type === FieldType.time);\n  if (timeField) {\n    const values = [...timeField.values].sort();\n    const oldestFirst = values[0] < values[values.length - 1];\n    start = oldestFirst ? values[0] : values[values.length - 1];\n    end = oldestFirst ? values[values.length - 1] : values[0];\n  }\n  return { start, end };\n}\n\nexport const VISIBLE_RANGE_NAME = 'Visible range';\nexport function getVisibleRangeFrame(start: number, end: number) {\n  const frame = arrayToDataFrame([\n    {\n      time: start,\n      timeEnd: end,\n      isRegion: true,\n      text: 'Range from oldest to newest logs in display',\n      color: 'rgba(58, 113, 255, 0.3)',\n    },\n  ]);\n  frame.name = VISIBLE_RANGE_NAME;\n  frame.meta = {\n    dataTopic: DataTopic.Annotations,\n  };\n\n  return frame;\n}\n","import { ServiceSceneCustomState } from '../Components/ServiceScene/ServiceScene';\n\nlet metadataService: MetadataService;\n\nexport function initializeMetadataService(): void {\n  if (!metadataService) {\n    metadataService = new MetadataService();\n  }\n}\n\n/**\n * Singleton class for sharing state across drilldown routes with common parent scene\n */\nexport class MetadataService {\n  private serviceSceneState: ServiceSceneCustomState | undefined = undefined;\n  public getServiceSceneState() {\n    return this.serviceSceneState;\n  }\n\n  public setPatternsCount(count: number) {\n    if (!this.serviceSceneState) {\n      this.serviceSceneState = {};\n    }\n\n    this.serviceSceneState.patternsCount = count;\n  }\n\n  public setLabelsCount(count: number) {\n    if (!this.serviceSceneState) {\n      this.serviceSceneState = {};\n    }\n\n    this.serviceSceneState.labelsCount = count;\n  }\n\n  public setFieldsCount(count: number) {\n    if (!this.serviceSceneState) {\n      this.serviceSceneState = {};\n    }\n\n    this.serviceSceneState.fieldsCount = count;\n  }\n\n  public setServiceSceneState(state: ServiceSceneCustomState) {\n    this.serviceSceneState = {\n      patternsCount: state.patternsCount,\n      labelsCount: state.labelsCount,\n      fieldsCount: state.fieldsCount,\n      loading: state.loading,\n      logsCount: state.logsCount,\n      totalLogsCount: state.totalLogsCount,\n    };\n  }\n}\n\nexport function getMetadataService(): MetadataService {\n  return metadataService;\n}\n","import { SelectedTableRow } from '../Components/Table/LogLineCellComponent';\nimport { LogsVisualizationType } from './store';\nimport { FieldValue, ParserType } from './variables';\nimport { LogsSortOrder, RawTimeRange } from '@grafana/data';\nconst isObj = (o: unknown): o is object => typeof o === 'object' && o !== null;\n\nfunction hasProp<K extends PropertyKey>(data: object, prop: K): data is Record<K, unknown> {\n  return prop in data;\n}\n\nconst isString = (s: unknown) => (typeof s === 'string' && s) || '';\n\nexport const isRecord = (obj: unknown): obj is Record<string, unknown> => typeof obj === 'object';\n\nexport function unknownToStrings(a: unknown): string[] {\n  let strings: string[] = [];\n  if (Array.isArray(a)) {\n    for (let i = 0; i < a.length; i++) {\n      strings.push(isString(a[i]));\n    }\n  }\n  return strings;\n}\n\nexport function narrowSelectedTableRow(o: unknown): SelectedTableRow | false {\n  const narrowed = isObj(o) && hasProp(o, 'row') && hasProp(o, 'id') && o;\n\n  if (narrowed) {\n    const row = typeof narrowed.row === 'number' && narrowed.row;\n    const id = typeof narrowed.id === 'string' && narrowed.id;\n    if (id !== false && row !== false) {\n      return { row, id };\n    }\n  }\n\n  return false;\n}\n\nexport function narrowLogsVisualizationType(o: unknown): LogsVisualizationType | false {\n  return typeof o === 'string' && (o === 'logs' || o === 'table') && o;\n}\nexport function narrowLogsSortOrder(o: unknown): LogsSortOrder | false {\n  if (typeof o === 'string' && o === LogsSortOrder.Ascending.toString()) {\n    return LogsSortOrder.Ascending;\n  }\n\n  if (typeof o === 'string' && o === LogsSortOrder.Descending.toString()) {\n    return LogsSortOrder.Descending;\n  }\n\n  return false;\n}\n\nexport function narrowFieldValue(o: unknown): FieldValue | false {\n  const narrowed = isObj(o) && hasProp(o, 'value') && hasProp(o, 'parser') && o;\n\n  if (narrowed) {\n    const parser: ParserType | false =\n      typeof narrowed.parser === 'string' &&\n      (narrowed.parser === 'logfmt' ||\n        narrowed.parser === 'json' ||\n        narrowed.parser === 'mixed' ||\n        narrowed.parser === 'structuredMetadata') &&\n      narrowed.parser;\n    const value = typeof narrowed.value === 'string' && narrowed.value;\n\n    if (parser !== false && value !== false) {\n      return { parser, value };\n    }\n  }\n\n  return false;\n}\n\nexport function narrowRecordStringNumber(o: unknown): Record<string, number> | false {\n  const narrowed = isObj(o) && isRecord(o) && o;\n\n  if (narrowed) {\n    const keys = Object.keys(narrowed);\n    const returnRecord: Record<string, number> = {};\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      const value = narrowed[keys[i]];\n      if (typeof value === 'number') {\n        returnRecord[key] = value;\n      }\n    }\n\n    return returnRecord;\n  }\n\n  return false;\n}\n\nexport function narrowTimeRange(unknownRange: unknown): RawTimeRange | undefined {\n  const range = isObj(unknownRange) && hasProp(unknownRange, 'to') && hasProp(unknownRange, 'from') && unknownRange;\n  if (range) {\n    const to = isString(range.to);\n    const from = isString(range.from);\n    if (to && from) {\n      return { to, from };\n    }\n  }\n\n  return undefined;\n}\n\nexport class NarrowingError extends Error {}\n","import { ServiceScene } from '../Components/ServiceScene/ServiceScene';\nimport { IndexScene } from '../Components/IndexScene/IndexScene';\nimport { ALL_VARIABLE_VALUE } from './variables';\nimport { getMetadataService } from './metadata';\nimport { locationService } from '@grafana/runtime';\nimport { buildServicesUrl, DRILLDOWN_URL_KEYS, PageSlugs, ROUTES, ValueSlugs } from './routing';\nimport { sceneGraph } from '@grafana/scenes';\nimport { UrlQueryMap, urlUtil } from '@grafana/data';\nimport { replaceSlash } from './extensions/links';\nimport { logger } from './logger';\nimport { prefixRoute } from './plugin';\n\nlet previousRoute: string | undefined = undefined;\n\nfunction buildValueBreakdownUrl(label: string, newPath: ValueSlugs, labelValue: string, labelName = 'service') {\n  if (label === ALL_VARIABLE_VALUE && newPath === ValueSlugs.label) {\n    return prefixRoute(`${PageSlugs.explore}/${labelName}/${replaceSlash(labelValue)}/${PageSlugs.labels}`);\n  } else if (label === ALL_VARIABLE_VALUE && newPath === ValueSlugs.field) {\n    return prefixRoute(`${PageSlugs.explore}/${labelName}/${replaceSlash(labelValue)}/${PageSlugs.fields}`);\n  } else {\n    return prefixRoute(\n      `${PageSlugs.explore}/${labelName}/${replaceSlash(labelValue)}/${newPath}/${replaceSlash(label)}`\n    );\n  }\n}\n\nexport function buildDrilldownPageUrl(path: PageSlugs | string, extraQueryParams?: UrlQueryMap): string {\n  return urlUtil.renderUrl(path, buildDrilldownPageRoute(extraQueryParams));\n}\n\nexport function buildDrilldownPageRoute(extraQueryParams?: UrlQueryMap): UrlQueryMap {\n  return {\n    ...Object.entries(urlUtil.getUrlSearchParams()).reduce<UrlQueryMap>((acc, [key, value]) => {\n      if (DRILLDOWN_URL_KEYS.includes(key)) {\n        acc[key] = value;\n      }\n\n      return acc;\n    }, {}),\n    ...extraQueryParams,\n  };\n}\n\n/**\n * Navigate to value breakdown url\n * @param newPath\n * @param label\n * @param serviceScene\n */\nexport function navigateToValueBreakdown(newPath: ValueSlugs, label: string, serviceScene: ServiceScene) {\n  const indexScene = sceneGraph.getAncestor(serviceScene, IndexScene);\n\n  if (indexScene) {\n    const urlLabelName = indexScene.state.routeMatch?.params.labelName;\n    const urlLabelValue = indexScene.state.routeMatch?.params.labelValue;\n    if (urlLabelName && urlLabelValue) {\n      let urlPath = buildValueBreakdownUrl(label, newPath, urlLabelValue, urlLabelName);\n      const fullUrl = buildDrilldownPageUrl(urlPath);\n\n      // If we're going to navigate, we need to share the state between this instantiation of the service scene\n      if (serviceScene) {\n        const metadataService = getMetadataService();\n        metadataService.setServiceSceneState(serviceScene.state);\n      }\n\n      pushUrlHandler(fullUrl);\n      return;\n    } else {\n      logger.warn('missing url params', {\n        urlLabelName: urlLabelName ?? '',\n        urlLabelValue: urlLabelValue ?? '',\n      });\n    }\n  }\n}\n\n/**\n * The case for initial navigation from the service selection to the service index is a special case, as we don't yet have a serviceScene constructed to pull the selected service.\n * This function will route users to the initial (logs) page from the service selection view, which will populate the service scene state with the selected service string.\n * @param labelName\n * @param labelValue\n */\nexport function navigateToInitialPageAfterServiceSelection(labelName: string, labelValue: string) {\n  const breakdownUrl = buildDrilldownPageUrl(ROUTES.logs(labelValue, labelName));\n  pushUrlHandler(breakdownUrl);\n}\n\n/**\n * Navigates to the drilldown page specified by the path slug\n *\n * @param path\n * @param serviceScene\n * @param extraQueryParams\n */\nexport function navigateToDrilldownPage(path: PageSlugs, serviceScene: ServiceScene, extraQueryParams?: UrlQueryMap) {\n  const indexScene = sceneGraph.getAncestor(serviceScene, IndexScene);\n  const urlLabelValue = indexScene.state.routeMatch?.params.labelValue;\n  const urlLabelName = indexScene.state.routeMatch?.params.labelName;\n\n  if (urlLabelValue) {\n    const fullUrl = prefixRoute(`${PageSlugs.explore}/${urlLabelName}/${replaceSlash(urlLabelValue)}/${path}`);\n    const breakdownUrl = buildDrilldownPageUrl(fullUrl, extraQueryParams);\n\n    // If we're going to navigate, we need to share the state between this instantiation of the service scene\n    if (serviceScene) {\n      const metadataService = getMetadataService();\n      metadataService.setServiceSceneState(serviceScene.state);\n    }\n\n    pushUrlHandler(breakdownUrl);\n    return;\n  }\n}\n\nexport function pushUrlHandler(newUrl: string) {\n  previousRoute = newUrl;\n  locationService.push(newUrl);\n}\n\n/**\n * Navigate to the services selection url\n */\nexport function navigateToIndex() {\n  const location = locationService.getLocation();\n  const serviceUrl = buildServicesUrl(ROUTES.explore());\n  const currentUrl = location.pathname + location.search;\n  const search = locationService.getSearch();\n\n  if (serviceUrl === currentUrl || currentUrl.includes(serviceUrl)) {\n    return;\n  }\n\n  if (!search.get('var-filters')) {\n    // If we don't have filters, we don't want to keep this url in browser history since this is fired AFTER the url props are made invalid, push the previous route and replace it\n    if (previousRoute) {\n      locationService.replace(previousRoute);\n    }\n    locationService.push(serviceUrl);\n  } else {\n    pushUrlHandler(serviceUrl);\n  }\n}\n","import { QueryRunnerState, sceneGraph, SceneQueryRunner } from '@grafana/scenes';\n\nexport class LogsSceneQueryRunner extends SceneQueryRunner {\n  constructor(initialState: QueryRunnerState) {\n    super(initialState);\n  }\n\n  public runQueries() {\n    const timeRange = sceneGraph.getTimeRange(this);\n\n    // We don't want to subscribe to time range changes, or we'll get duplicate queries\n    // this.subscribeToTimeRangeChanges(timeRange);\n\n    // @todo can we make runWithTimeRange protected? (https://github.com/grafana/scenes/pull/866)\n    // Hack to call private method\n    this['runWithTimeRange'](timeRange);\n  }\n}\n","import {\n  DataFrame,\n  FieldColorModeId,\n  FieldConfig,\n  FieldMatcherID,\n  FieldType,\n  getFieldDisplayName,\n} from '@grafana/data';\nimport {\n  FieldConfigBuilder,\n  FieldConfigBuilders,\n  FieldConfigOverridesBuilder,\n  PanelBuilders,\n  QueryRunnerState,\n  SceneDataProvider,\n  SceneDataTransformer,\n  SceneObject,\n  SceneQueryRunner,\n  VizPanel,\n} from '@grafana/scenes';\nimport { map, Observable } from 'rxjs';\nimport { HideSeriesConfig } from '@grafana/schema';\nimport { WRAPPED_LOKI_DS_UID } from './datasource';\nimport { LogsSceneQueryRunner } from './LogsSceneQueryRunner';\nimport { DrawStyle, StackingMode } from '@grafana/ui';\nimport { getLabelsFromSeries, getVisibleLevels } from './levels';\nimport { LokiQuery } from './lokiQuery';\nimport { LOGS_COUNT_QUERY_REFID, LOGS_PANEL_QUERY_REFID } from '../Components/ServiceScene/ServiceScene';\n\nconst UNKNOWN_LEVEL_LOGS = 'logs';\nexport function setLevelColorOverrides(overrides: FieldConfigOverridesBuilder<FieldConfig>) {\n  overrides.matchFieldsWithName('info').overrideColor({\n    mode: 'fixed',\n    fixedColor: 'semi-dark-green',\n  });\n  overrides.matchFieldsWithName('debug').overrideColor({\n    mode: 'fixed',\n    fixedColor: 'semi-dark-blue',\n  });\n  overrides.matchFieldsWithName('error').overrideColor({\n    mode: 'fixed',\n    fixedColor: 'semi-dark-red',\n  });\n  overrides.matchFieldsWithName('warn').overrideColor({\n    mode: 'fixed',\n    fixedColor: 'semi-dark-orange',\n  });\n  overrides.matchFieldsWithName('logs').overrideColor({\n    mode: 'fixed',\n    fixedColor: 'darkgray',\n  });\n}\n\nexport function setLogsVolumeFieldConfigs(\n  builder: ReturnType<typeof PanelBuilders.timeseries> | ReturnType<typeof FieldConfigBuilders.timeseries>\n) {\n  return builder\n    .setCustomFieldConfig('stacking', { mode: StackingMode.Normal })\n    .setCustomFieldConfig('fillOpacity', 100)\n    .setCustomFieldConfig('lineWidth', 0)\n    .setCustomFieldConfig('pointSize', 0)\n    .setCustomFieldConfig('drawStyle', DrawStyle.Bars)\n    .setOverrides(setLevelColorOverrides);\n}\n\ninterface TimeSeriesFieldConfig extends FieldConfig {\n  hideFrom: HideSeriesConfig;\n}\n\nexport function setLevelSeriesOverrides(levels: string[], overrideConfig: FieldConfigOverridesBuilder<FieldConfig>) {\n  overrideConfig\n    .match({\n      id: FieldMatcherID.byNames,\n      options: {\n        mode: 'exclude',\n        names: levels,\n        prefix: 'All except:',\n        readOnly: true,\n      },\n    })\n    .overrideCustomFieldConfig<TimeSeriesFieldConfig, 'hideFrom'>('hideFrom', {\n      legend: false,\n      tooltip: false,\n      viz: true,\n    });\n\n  // Setting __systemRef to hideSeriesFrom, allows the override to be changed by interacting with the viz\n  const overrides = overrideConfig.build();\n  // @ts-expect-error\n  overrides[overrides.length - 1].__systemRef = 'hideSeriesFrom';\n}\n\nexport function syncLogsPanelVisibleSeries(panel: VizPanel, series: DataFrame[], sceneRef: SceneObject) {\n  const focusedLevels = getVisibleLevels(getLabelsFromSeries(series), sceneRef);\n  if (focusedLevels?.length) {\n    const config = setLogsVolumeFieldConfigs(FieldConfigBuilders.timeseries()).setOverrides(\n      setLevelSeriesOverrides.bind(null, focusedLevels)\n    );\n    if (config instanceof FieldConfigBuilder) {\n      panel.onFieldConfigChange(config.build(), true);\n    }\n  }\n}\nfunction setColorByDisplayNameTransformation() {\n  return (source: Observable<DataFrame[]>) => {\n    return source.pipe(\n      map((data: DataFrame[]) => {\n        return data.map((frame, frameIndex) => {\n          return {\n            ...frame,\n            fields: frame.fields.map((f, fieldIndex) => {\n              // Time fields do not have color config\n              if (f.type === FieldType.time) {\n                return f;\n              }\n              const displayName = getFieldDisplayName(f, frame, data);\n              return {\n                ...f,\n                config: {\n                  ...f.config,\n                  displayName,\n                  color: {\n                    mode: FieldColorModeId.PaletteClassicByName,\n                  },\n                },\n              };\n            }),\n          };\n        });\n      })\n    );\n  };\n}\n\nexport function sortLevelTransformation() {\n  return (source: Observable<DataFrame[]>) => {\n    return source.pipe(\n      map((data: DataFrame[]) => {\n        return data\n          .map((d) => {\n            if (d.fields.length < 2) {\n              return d;\n            }\n            if (!d.fields[1].config.displayNameFromDS) {\n              d.fields[1].config.displayNameFromDS = UNKNOWN_LEVEL_LOGS;\n            }\n            return d;\n          })\n          .sort((a, b) => {\n            if (a.fields.length < 2 || b.fields.length < 2) {\n              return 0;\n            }\n            const aName: string | undefined = a.fields[1].config.displayNameFromDS;\n            const aVal = aName?.includes('error') ? 4 : aName?.includes('warn') ? 3 : aName?.includes('info') ? 2 : 1;\n            const bName: string | undefined = b.fields[1].config.displayNameFromDS;\n            const bVal = bName?.includes('error') ? 4 : bName?.includes('warn') ? 3 : bName?.includes('info') ? 2 : 1;\n            return aVal - bVal;\n          });\n      })\n    );\n  };\n}\n\nexport function getResourceQueryRunner(queries: LokiQuery[]) {\n  return new LogsSceneQueryRunner({\n    datasource: { uid: WRAPPED_LOKI_DS_UID },\n    queries: queries,\n  });\n}\n\nexport function getQueryRunner(queries: LokiQuery[], queryRunnerOptions?: Partial<QueryRunnerState>) {\n  // if there's a legendFormat related to any `level` like label, we want to\n  // sort the output equally. That's purposefully not `LEVEL_VARIABLE_VALUE`,\n  // such that the `detected_level` graph looks the same as a graph for the\n  // `level` label.\n\n  const hasLevel = queries.find((query) => query.legendFormat?.toLowerCase().includes('level'));\n  const isLogPanelQuery = queries.find(\n    (query) => query.refId === LOGS_PANEL_QUERY_REFID || query.refId === LOGS_COUNT_QUERY_REFID\n  );\n\n  if (hasLevel) {\n    return new SceneDataTransformer({\n      $data: getSceneQueryRunner({\n        datasource: { uid: WRAPPED_LOKI_DS_UID },\n        queries: queries,\n        ...queryRunnerOptions,\n      }),\n      transformations: [sortLevelTransformation],\n    });\n  }\n\n  if (!isLogPanelQuery) {\n    return new SceneDataTransformer({\n      $data: getSceneQueryRunner({\n        datasource: { uid: WRAPPED_LOKI_DS_UID },\n        queries: queries,\n        ...queryRunnerOptions,\n      }),\n      transformations: [setColorByDisplayNameTransformation],\n    });\n  }\n\n  return getSceneQueryRunner({\n    datasource: { uid: WRAPPED_LOKI_DS_UID },\n    queries: queries,\n    ...queryRunnerOptions,\n  });\n}\n\nexport function getSceneQueryRunner(queryRunnerOptions?: Partial<QueryRunnerState>) {\n  return new SceneQueryRunner({\n    datasource: { uid: WRAPPED_LOKI_DS_UID },\n    queries: [],\n    ...queryRunnerOptions,\n  });\n}\n\nexport function getQueryRunnerFromProvider(provider: SceneDataProvider): SceneQueryRunner {\n  if (provider instanceof SceneQueryRunner) {\n    return provider;\n  }\n\n  if (provider.state.$data instanceof SceneQueryRunner) {\n    return provider.state.$data;\n  }\n\n  throw new Error('SceneDataProvider is missing SceneQueryRunner');\n}\n","import pluginJson from '../plugin.json';\n\n// jest tests struggle with import order when importing from the plugin.json, moving methods that use the plugin_id to its own file makes it simpler to import when mocking\nexport const PLUGIN_ID = pluginJson.id;\nexport const PLUGIN_BASE_URL = `/a/${PLUGIN_ID}`;\n\n// Prefixes the route with the base URL of the plugin\nexport function prefixRoute(route: string): string {\n  return `${PLUGIN_BASE_URL}/${route}`;\n}\n","import { AdHocVariableFilter } from '@grafana/data';\nimport { AppliedPattern, numericOperatorArray } from 'Components/IndexScene/IndexScene';\nimport { EMPTY_VARIABLE_VALUE, VAR_DATASOURCE_EXPR } from './variables';\nimport { groupBy, trim } from 'lodash';\nimport { getValueFromFieldsFilter } from './variableGetters';\nimport { LokiQuery } from './lokiQuery';\nimport { SceneDataQueryResourceRequest, SceneDataQueryResourceRequestOptions } from './datasourceTypes';\nimport { AdHocFilterWithLabels } from './scenes';\nimport { PLUGIN_ID } from './plugin';\nimport { AdHocFiltersVariable } from '@grafana/scenes';\nimport { FilterOp, LineFilterOp } from './filterTypes';\nimport { LineFilterCaseSensitive } from '../Components/ServiceScene/LineFilter/LineFilterScene';\nimport { sortLineFilters } from '../Components/IndexScene/LineFilterVariablesScene';\n\n/**\n * Builds the resource query\n * @param expr string to be interpolated and executed in the resource request\n * @param resource\n * @param queryParamsOverrides\n * @param primaryLabel\n */\nexport const buildResourceQuery = (\n  expr: string,\n  resource: SceneDataQueryResourceRequestOptions,\n  queryParamsOverrides?: Partial<LokiQuery>,\n  primaryLabel?: string\n): LokiQuery & SceneDataQueryResourceRequest & { primaryLabel?: string } => {\n  return {\n    ...defaultQueryParams,\n    resource,\n    refId: resource,\n    ...queryParamsOverrides,\n    datasource: { uid: VAR_DATASOURCE_EXPR },\n    expr,\n    primaryLabel,\n  };\n};\n/**\n * Builds a loki data query\n * @param expr\n * @param queryParamsOverrides\n * @returns LokiQuery\n */\nexport const buildDataQuery = (expr: string, queryParamsOverrides?: Partial<LokiQuery>): LokiQuery => {\n  return {\n    ...defaultQueryParams,\n    ...queryParamsOverrides,\n    expr,\n  };\n};\n\nconst defaultQueryParams = {\n  refId: 'A',\n  queryType: 'range',\n  editorMode: 'code',\n  supportingQueryType: PLUGIN_ID,\n};\n\nexport const buildVolumeQuery = (\n  expr: string,\n  resource: 'volume' | 'patterns' | 'detected_labels' | 'detected_fields' | 'labels',\n  primaryLabel: string,\n  queryParamsOverrides?: Record<string, unknown>\n): LokiQuery & SceneDataQueryResourceRequest => {\n  return buildResourceQuery(expr, resource, { ...queryParamsOverrides }, primaryLabel);\n};\n\nexport function getLogQLLabelGroups(filters: AdHocVariableFilter[]) {\n  const positive = filters.filter((filter) => filter.operator === FilterOp.Equal);\n  const negative = filters.filter((filter) => filter.operator === FilterOp.NotEqual);\n\n  const positiveGroups = groupBy(positive, (filter) => filter.key);\n  return { negative, positiveGroups };\n}\n\nexport function getLogQLLabelFilters(filters: AdHocVariableFilter[]) {\n  const { negative, positiveGroups } = getLogQLLabelGroups(filters);\n\n  let positiveFilters: string[] = [];\n  for (const key in positiveGroups) {\n    const values = positiveGroups[key].map((filter) => filter.value);\n    positiveFilters.push(\n      values.length === 1 ? renderMetadata(positiveGroups[key][0]) : renderRegexLabelFilter(key, values)\n    );\n  }\n\n  return { positiveFilters, negative };\n}\n\nexport function renderLogQLLabelFilters(filters: AdHocFilterWithLabels[]) {\n  let { positiveFilters, negative } = getLogQLLabelFilters(filters);\n  const negativeFilters = negative.map((filter) => renderMetadata(filter)).join(', ');\n\n  const result = trim(`${positiveFilters.join(', ')}, ${negativeFilters}`, ' ,');\n\n  return result;\n}\n\nexport function renderLogQLFieldFilters(filters: AdHocVariableFilter[]) {\n  // @todo partition instead of looping through again and again\n  const positive = filters.filter((filter) => filter.operator === FilterOp.Equal);\n  const negative = filters.filter((filter) => filter.operator === FilterOp.NotEqual);\n\n  const numeric = filters.filter((filter) => {\n    const numericValues: string[] = numericOperatorArray;\n    return numericValues.includes(filter.operator);\n  });\n\n  const positiveGroups = groupBy(positive, (filter) => filter.key);\n\n  let positiveFilters = '';\n  for (const key in positiveGroups) {\n    positiveFilters += ' | ' + positiveGroups[key].map((filter) => `${fieldFilterToQueryString(filter)}`).join(' or ');\n  }\n\n  const negativeFilters = negative.map((filter) => `| ${fieldFilterToQueryString(filter)}`).join(' ');\n\n  let numericFilters = numeric.map((filter) => `| ${fieldNumericFilterToQueryString(filter)}`).join(' ');\n\n  return `${positiveFilters} ${negativeFilters} ${numericFilters}`.trim();\n}\n\nexport function escapeDoubleQuotedLineFilter(filter: AdHocFilterWithLabels) {\n  // Is not regex\n  if (filter.operator === LineFilterOp.match || filter.operator === LineFilterOp.negativeMatch) {\n    if (filter.key === LineFilterCaseSensitive.caseInsensitive) {\n      return escapeLabelValueInRegexSelector(filter.value);\n    } else {\n      return escapeLabelValueInExactSelector(filter.value);\n    }\n  } else {\n    return escapeLabelValueInExactSelector(filter.value);\n  }\n}\n\nfunction buildLogQlLineFilter(filter: AdHocFilterWithLabels, value: string) {\n  // Change operator if needed and insert caseInsensitive flag\n  if (filter.key === LineFilterCaseSensitive.caseInsensitive) {\n    if (filter.operator === LineFilterOp.negativeRegex || filter.operator === LineFilterOp.negativeMatch) {\n      return `${LineFilterOp.negativeRegex} \"(?i)${value}\"`;\n    }\n    return `${LineFilterOp.regex} \"(?i)${value}\"`;\n  }\n\n  return `${filter.operator} \"${value}\"`;\n}\n\n/**\n * Converts line filter ad-hoc filters to LogQL\n *\n * the filter key is LineFilterCaseSensitive\n * the filter operator is LineFilterOp\n * the value is the user input\n */\nexport function renderLogQLLineFilter(filters: AdHocFilterWithLabels[]) {\n  sortLineFilters(filters);\n  return filters\n    .map((filter) => {\n      if (filter.value === '') {\n        return '';\n      }\n\n      const value = escapeDoubleQuotedLineFilter(filter);\n      return buildLogQlLineFilter(filter, value);\n    })\n    .join(' ');\n}\nexport function renderLogQLMetadataFilters(filters: AdHocVariableFilter[]) {\n  const positive = filters.filter((filter) => filter.operator === FilterOp.Equal);\n  const negative = filters.filter((filter) => filter.operator === FilterOp.NotEqual);\n\n  const positiveGroups = groupBy(positive, (filter) => filter.key);\n\n  let positiveFilters = '';\n  for (const key in positiveGroups) {\n    positiveFilters += ' | ' + positiveGroups[key].map((filter) => `${renderMetadata(filter)}`).join(' or ');\n  }\n\n  const negativeFilters = negative.map((filter) => `| ${renderMetadata(filter)}`).join(' ');\n\n  return `${positiveFilters} ${negativeFilters}`.trim();\n}\n\nfunction renderMetadata(filter: AdHocVariableFilter) {\n  // If the filter value is an empty string, we don't want to wrap it in backticks!\n  if (filter.value === EMPTY_VARIABLE_VALUE) {\n    return `${filter.key}${filter.operator}${filter.value}`;\n  }\n  return `${filter.key}${filter.operator}\\`${filter.value}\\``;\n}\n\nfunction fieldFilterToQueryString(filter: AdHocVariableFilter) {\n  const fieldObject = getValueFromFieldsFilter(filter);\n  const value = fieldObject.value;\n  // If the filter value is an empty string, we don't want to wrap it in backticks!\n  if (value === EMPTY_VARIABLE_VALUE) {\n    return `${filter.key}${filter.operator}${value}`;\n  }\n  return `${filter.key}${filter.operator}\\`${value}\\``;\n}\n\nfunction fieldNumericFilterToQueryString(filter: AdHocVariableFilter) {\n  const fieldObject = getValueFromFieldsFilter(filter);\n  const value = fieldObject.value;\n  // If the filter value is an empty string, we don't want to wrap it in backticks!\n\n  return `${filter.key}${filter.operator}${value}`;\n}\n\nexport function renderRegexLabelFilter(key: string, values: string[]) {\n  return `${key}=~\"${values.join('|')}\"`;\n}\n\nexport function renderPatternFilters(patterns: AppliedPattern[]) {\n  const excludePatterns = patterns.filter((pattern) => pattern.type === 'exclude');\n  const excludePatternsLine = excludePatterns\n    .map((p) => `!> \\`${p.pattern}\\``)\n    .join(' ')\n    .trim();\n\n  const includePatterns = patterns.filter((pattern) => pattern.type === 'include');\n  let includePatternsLine = '';\n  if (includePatterns.length > 0) {\n    if (includePatterns.length === 1) {\n      includePatternsLine = `|> \\`${includePatterns[0].pattern}\\``;\n    } else {\n      includePatternsLine = `|>  ${includePatterns.map((p) => `\\`${p.pattern}\\``).join(' or ')}`;\n    }\n  }\n  return `${excludePatternsLine} ${includePatternsLine}`.trim();\n}\n\nexport function joinTagFilters(variable: AdHocFiltersVariable) {\n  const { positiveGroups, negative } = getLogQLLabelGroups(variable.state.filters);\n\n  const filters: AdHocFilterWithLabels[] = [];\n  for (const key in positiveGroups) {\n    const values = positiveGroups[key].map((filter) => filter.value);\n    if (values.length === 1) {\n      filters.push({\n        key,\n        value: positiveGroups[key][0].value,\n        operator: '=',\n      });\n    } else {\n      filters.push({\n        key,\n        value: values.join('|'),\n        operator: '=~',\n      });\n    }\n  }\n\n  negative.forEach((filter) => {\n    filters.push(filter);\n  });\n  return filters;\n}\n\nexport function wrapWildcardSearch(input: string) {\n  if (input !== '.+' && input.substring(0, 2) !== '.*') {\n    return `.*${input}.*`;\n  }\n\n  return input;\n}\n\nexport function unwrapWildcardSearch(input: string) {\n  if (input.substring(0, 2) === '.*' && input.slice(-2) === '.*') {\n    return input.slice(2).slice(0, -2);\n  }\n  return input;\n}\n\nexport function sanitizeStreamSelector(expression: string) {\n  return expression.replace(/\\s*,\\s*}/, '}');\n}\n\n// default line limit; each data source can define it's own line limit too\nexport const LINE_LIMIT = 1000;\n\n// Taken from /grafana/grafana/public/app/plugins/datasource/loki/languageUtils.ts\n\n// based on the openmetrics-documentation, the 3 symbols we have to handle are:\n// - \\n ... the newline character\n// - \\  ... the backslash character\n// - \"  ... the double-quote character\nexport function escapeLabelValueInExactSelector(labelValue: string): string {\n  return labelValue.replace(/\\\\/g, '\\\\\\\\').replace(/\\n/g, '\\\\n').replace(/\"/g, '\\\\\"');\n}\n\n// Loki regular-expressions use the RE2 syntax (https://github.com/google/re2/wiki/Syntax),\n// so every character that matches something in that list has to be escaped.\n// the list of meta characters is: *+?()|\\.[]{}^$\n// we make a javascript regular expression that matches those characters:\nconst RE2_METACHARACTERS = /[*+?()|\\\\.\\[\\]{}^$]/g;\nfunction escapeLokiRegexp(value: string): string {\n  return value.replace(RE2_METACHARACTERS, '\\\\$&');\n}\nexport function escapeLabelValueInRegexSelector(labelValue: string): string {\n  return escapeLabelValueInExactSelector(escapeLokiRegexp(labelValue));\n}\n","import { UrlQueryMap, urlUtil } from '@grafana/data';\nimport {\n  SERVICE_NAME,\n  SERVICE_UI_LABEL,\n  VAR_DATASOURCE,\n  VAR_FIELD_GROUP_BY,\n  VAR_FIELDS,\n  VAR_LABEL_GROUP_BY,\n  VAR_LABELS,\n  VAR_LEVELS,\n  VAR_LINE_FILTER,\n  VAR_LINE_FILTERS,\n  VAR_METADATA,\n  VAR_PATTERNS,\n} from './variables';\nimport { locationService } from '@grafana/runtime';\nimport { RouteMatch, RouteProps } from '../Components/Pages';\nimport { replaceSlash } from './extensions/links';\nimport { SceneObject } from '@grafana/scenes';\nimport { getLabelsVariable } from './variableGetters';\nimport { logger } from './logger';\nimport { PLUGIN_BASE_URL, prefixRoute } from './plugin';\n\nexport enum PageSlugs {\n  explore = 'explore',\n  logs = 'logs',\n  labels = 'labels',\n  patterns = 'patterns',\n  fields = 'fields',\n}\nexport enum ValueSlugs {\n  field = 'field',\n  label = 'label',\n}\n\nexport type ParentDrilldownSlugs =\n  | PageSlugs.explore\n  | PageSlugs.fields\n  | PageSlugs.logs\n  | PageSlugs.labels\n  | PageSlugs.patterns;\nexport type ChildDrilldownSlugs = ValueSlugs.field | ValueSlugs.label;\n\nexport const ROUTES = {\n  explore: () => prefixRoute(PageSlugs.explore),\n  logs: (labelValue: string, labelName = 'service') =>\n    prefixRoute(`${PageSlugs.explore}/${labelName}/${replaceSlash(labelValue)}/${PageSlugs.logs}`),\n  fields: (labelValue: string, labelName = 'service') =>\n    prefixRoute(`${PageSlugs.explore}/${labelName}/${replaceSlash(labelValue)}/${PageSlugs.fields}`),\n  patterns: (labelValue: string, labelName = 'service') =>\n    prefixRoute(`${PageSlugs.explore}/${labelName}/${replaceSlash(labelValue)}/${PageSlugs.patterns}`),\n  labels: (labelValue: string, labelName = 'service') =>\n    prefixRoute(`${PageSlugs.explore}/${labelName}/${replaceSlash(labelValue)}/${PageSlugs.labels}`),\n};\n\nexport const SUB_ROUTES = {\n  label: (labelValue: string, labelName = 'service', breakdownLabelName: string) =>\n    prefixRoute(\n      `${PageSlugs.explore}/${labelName}/${replaceSlash(labelValue)}/${ValueSlugs.label}/${breakdownLabelName}`\n    ),\n  field: (labelValue: string, labelName = 'service', breakdownLabelName: string) =>\n    prefixRoute(\n      `${PageSlugs.explore}/${labelName}/${replaceSlash(labelValue)}/${ValueSlugs.field}/${breakdownLabelName}`\n    ),\n};\n\nexport const ROUTE_DEFINITIONS: Record<keyof typeof PageSlugs, string> = {\n  explore: prefixRoute(PageSlugs.explore),\n  logs: prefixRoute(`${PageSlugs.explore}/:labelName/:labelValue/${PageSlugs.logs}`),\n  fields: prefixRoute(`${PageSlugs.explore}/:labelName/:labelValue/${PageSlugs.fields}`),\n  patterns: prefixRoute(`${PageSlugs.explore}/:labelName/:labelValue/${PageSlugs.patterns}`),\n  labels: prefixRoute(`${PageSlugs.explore}/:labelName/:labelValue/${PageSlugs.labels}`),\n};\n\nexport const CHILD_ROUTE_DEFINITIONS: Record<keyof typeof ValueSlugs, string> = {\n  field: prefixRoute(`${PageSlugs.explore}/:labelName/:labelValue/${ValueSlugs.field}/:breakdownLabel`),\n  label: prefixRoute(`${PageSlugs.explore}/:labelName/:labelValue/${ValueSlugs.label}/:breakdownLabel`),\n};\n\nexport const EXPLORATIONS_ROUTE = `${PLUGIN_BASE_URL}/${PageSlugs.explore}`;\n\n// For redirect back to service, we just want to keep datasource, and timerange\nexport const SERVICE_URL_KEYS = ['from', 'to', `var-${VAR_DATASOURCE}`, `var-${VAR_LABELS}`];\n//@todo why patterns and var-patterns?\nexport const DRILLDOWN_URL_KEYS = [\n  'from',\n  'to',\n  'mode',\n  'urlColumns',\n  'visualizationType',\n  'selectedLine',\n  'displayedFields',\n  'panelState',\n  VAR_PATTERNS,\n  `var-${VAR_PATTERNS}`,\n  `var-${VAR_DATASOURCE}`,\n  `var-${VAR_LABELS}`,\n  `var-${VAR_FIELDS}`,\n  `var-${VAR_LEVELS}`,\n  `var-${VAR_FIELD_GROUP_BY}`,\n  `var-${VAR_LABEL_GROUP_BY}`,\n  `var-${VAR_DATASOURCE}`,\n  `var-${VAR_LINE_FILTER}`,\n  `var-${VAR_METADATA}`,\n  `var-${VAR_LINE_FILTERS}`,\n];\n\nexport function getDrilldownSlug() {\n  const location = locationService.getLocation();\n  const slug = location.pathname.slice(location.pathname.lastIndexOf('/') + 1, location.pathname.length);\n  return slug as PageSlugs;\n}\n\n/**\n * The \"primary\" label, is the replacement for the service_name paradigm\n * It must be an indexed label with an include filter\n * Note: Will return the label as it exists in the url, so \"service_name\" will be returned as \"service\", we'll need to adjust for this case if we want to support URLs from before this change\n */\nexport function getPrimaryLabelFromUrl(): RouteProps {\n  const location = locationService.getLocation();\n  const startOfUrl = '/a/grafana-lokiexplore-app/explore';\n  const endOfUrl = location.pathname.slice(location.pathname.indexOf(startOfUrl) + startOfUrl.length + 1);\n  const routeParams = endOfUrl.split('/');\n\n  let labelName = routeParams[0];\n  const labelValue = routeParams[1];\n  const breakdownLabel = routeParams[3];\n  // Keep urls the same\n  if (labelName === SERVICE_NAME) {\n    labelName = SERVICE_UI_LABEL;\n  }\n  return { labelName, labelValue, breakdownLabel };\n}\n\nexport function getDrilldownValueSlug() {\n  const location = locationService.getLocation();\n  const locationArray = location.pathname.split('/');\n  const slug = locationArray[locationArray.length - 2];\n  return slug as ValueSlugs;\n}\n\nexport function buildServicesUrl(path: string, extraQueryParams?: UrlQueryMap): string {\n  return urlUtil.renderUrl(path, buildServicesRoute(extraQueryParams));\n}\nexport function extractValuesFromRoute(routeMatch: RouteMatch): RouteProps {\n  return {\n    labelName: routeMatch.params.labelName,\n    labelValue: routeMatch.params.labelValue,\n    breakdownLabel: routeMatch.params.breakdownLabel,\n  };\n}\n\nexport function buildServicesRoute(extraQueryParams?: UrlQueryMap): UrlQueryMap {\n  return {\n    ...Object.entries(urlUtil.getUrlSearchParams()).reduce<UrlQueryMap>((acc, [key, value]) => {\n      if (SERVICE_URL_KEYS.includes(key)) {\n        acc[key] = value;\n      }\n\n      return acc;\n    }, {}),\n    ...extraQueryParams,\n  };\n}\n\n/**\n * Compare slugs against variable filters and log discrepancies\n * These don't cause errors or render empty UIs, but shouldn't be possible when routing within the app\n * If we see these logged in production it indicates we're navigating users incorrectly\n * @param sceneRef\n */\nexport function checkPrimaryLabel(sceneRef: SceneObject) {\n  const labelsVariable = getLabelsVariable(sceneRef);\n  let { labelName, labelValue } = getPrimaryLabelFromUrl();\n  if (labelName === SERVICE_UI_LABEL) {\n    labelName = SERVICE_NAME;\n  }\n  const primaryLabel = labelsVariable.state.filters.find((filter) => filter.key === labelName);\n  if (!primaryLabel) {\n    const location = locationService.getLocation();\n\n    logger.info('invalid primary label name in url', {\n      labelName,\n      url: `${location.pathname}${location.search}`,\n    });\n  }\n\n  const primaryLabelValue = labelsVariable.state.filters.find((filter) => replaceSlash(filter.value) === labelValue);\n  if (!primaryLabelValue) {\n    const location = locationService.getLocation();\n\n    logger.info('invalid primary label value in url', {\n      labelValue,\n      url: `${location.pathname}${location.search}`,\n    });\n  }\n}\n","import { AdHocVariableFilter, urlUtil } from '@grafana/data';\nimport { config, getDataSourceSrv } from '@grafana/runtime';\nimport { sceneGraph, SceneObject, SceneObjectUrlValues, SceneQueryRunner, SceneTimePicker } from '@grafana/scenes';\nimport { LOG_STREAM_SELECTOR_EXPR, VAR_DATASOURCE_EXPR, VAR_LABELS_EXPR } from './variables';\nimport { EXPLORATIONS_ROUTE } from './routing';\nimport { IndexScene } from 'Components/IndexScene/IndexScene';\nimport { logger } from './logger';\nimport { LokiDatasource } from './lokiQuery';\n\nexport function getExplorationFor(model: SceneObject): IndexScene {\n  return sceneGraph.getAncestor(model, IndexScene);\n}\n\nexport function getUrlForValues(values: SceneObjectUrlValues) {\n  return urlUtil.renderUrl(EXPLORATIONS_ROUTE, values);\n}\n\nexport function getDataSource(sceneObject: SceneObject) {\n  return sceneGraph.interpolate(sceneObject, VAR_DATASOURCE_EXPR);\n}\n\nexport function getQueryExpr(exploration: IndexScene) {\n  return sceneGraph.interpolate(exploration, LOG_STREAM_SELECTOR_EXPR).replace(/\\s+/g, ' ');\n}\n\nexport function getPatternExpr(exploration: IndexScene) {\n  return sceneGraph.interpolate(exploration, VAR_LABELS_EXPR).replace(/\\s+/g, ' ');\n}\n\nexport function getColorByIndex(index: number) {\n  const visTheme = config.theme2.visualization;\n  return visTheme.getColorByName(visTheme.palette[index % 8]);\n}\n\nexport async function getLokiDatasource(sceneObject: SceneObject) {\n  const ds = (await getDataSourceSrv().get(VAR_DATASOURCE_EXPR, { __sceneObject: { value: sceneObject } })) as\n    | LokiDatasource\n    | undefined;\n  return ds;\n}\n\nexport function isDefined<T>(value: T | null | undefined): value is T {\n  return value !== null && value !== undefined;\n}\n\nexport function getQueryRunnerFromChildren(sceneObject: SceneObject) {\n  return sceneGraph.findDescendents(sceneObject, SceneQueryRunner);\n}\n\n//@todo export from scenes\nexport interface AdHocFilterWithLabels extends AdHocVariableFilter {\n  keyLabel?: string;\n  valueLabels?: string[];\n  // this is used to externally trigger edit mode in combobox filter UI\n  forceEdit?: boolean;\n}\n\ninterface SceneType<T> extends Function {\n  new (...args: never[]): T;\n}\n\nexport function findObjectOfType<T extends SceneObject>(\n  scene: SceneObject,\n  check: (obj: SceneObject) => boolean,\n  returnType: SceneType<T>\n) {\n  const obj = sceneGraph.findObject(scene, check);\n  if (obj instanceof returnType) {\n    return obj;\n  } else if (obj !== null) {\n    logger.warn(`invalid return type: ${returnType.toString()}`);\n  }\n\n  return null;\n}\n\nexport function getTimePicker(scene: IndexScene) {\n  return scene.state.controls?.find((s) => s instanceof SceneTimePicker) as SceneTimePicker;\n}\n","import uFuzzy from '@leeoniya/ufuzzy';\nimport { debounce as debounceLodash } from 'lodash';\n\nconst uf = new uFuzzy({\n  intraMode: 1,\n  intraIns: 1,\n  intraSub: 1,\n  intraTrn: 1,\n  intraDel: 1,\n});\n\nexport function fuzzySearch(haystack: string[], query: string, callback: (data: string[][]) => void) {\n  const [idxs, info, order] = uf.search(haystack, query, 0, 1e5);\n\n  let haystackOrder: string[] = [];\n  let matchesSet: Set<string> = new Set();\n  if (idxs && order) {\n    /**\n     * get the fuzzy matches for highlighting\n     * @param part\n     * @param matched\n     */\n    const mark = (part: string, matched: boolean) => {\n      if (matched) {\n        matchesSet.add(part);\n      }\n    };\n\n    // Iterate to create the order of needles(queries) and the matches\n    for (let i = 0; i < order.length; i++) {\n      let infoIdx = order[i];\n\n      /** Evaluate the match, get the matches for highlighting */\n      uFuzzy.highlight(haystack[info.idx[infoIdx]], info.ranges[infoIdx], mark);\n      /** Get the order */\n      haystackOrder.push(haystack[info.idx[infoIdx]]);\n    }\n\n    callback([haystackOrder, [...matchesSet]]);\n  } else if (!query) {\n    callback([]);\n  }\n}\n\nexport const debouncedFuzzySearch = debounceLodash(fuzzySearch, 300);\n","import { ChangepointDetector } from '@bsull/augurs/changepoint';\nimport { OutlierDetector, OutlierOutput } from '@bsull/augurs/outlier';\nimport { DataFrame, doStandardCalcs, fieldReducers, FieldType, outerJoinDataFrames, ReducerID } from '@grafana/data';\nimport { getLabelValueFromDataFrame } from './levels';\nimport { memoize } from 'lodash';\nimport { reportAppInteraction, USER_EVENTS_ACTIONS, USER_EVENTS_PAGES } from './analytics';\nimport { logger } from './logger';\n\nexport const DEFAULT_SORT_BY = 'changepoint';\n\nexport const sortSeries = memoize(\n  (series: DataFrame[], sortBy: string, direction: string) => {\n    if (sortBy === 'alphabetical') {\n      return sortSeriesByName(series, direction);\n    }\n\n    if (sortBy === 'outliers') {\n      initOutlierDetector(series);\n    }\n\n    const reducer = (dataFrame: DataFrame) => {\n      // ML & Wasm sorting options\n      try {\n        if (sortBy === 'changepoint') {\n          return calculateDataFrameChangepoints(dataFrame);\n        } else if (sortBy === 'outliers') {\n          return calculateOutlierValue(series, dataFrame);\n        }\n      } catch (e) {\n        logger.error(e, { msg: 'failed to sort' });\n\n        // ML sorting panicked, fallback to stdDev\n        sortBy = ReducerID.stdDev;\n      }\n      const fieldReducer = fieldReducers.get(sortBy);\n      const value =\n        fieldReducer.reduce?.(dataFrame.fields[1], true, true) ?? doStandardCalcs(dataFrame.fields[1], true, true);\n      return value[sortBy] ?? 0;\n    };\n\n    const seriesCalcs = series.map((dataFrame) => ({\n      value: reducer(dataFrame),\n      dataFrame: dataFrame,\n    }));\n\n    seriesCalcs.sort((a, b) => {\n      if (a.value !== undefined && b.value !== undefined) {\n        return b.value - a.value;\n      }\n      return 0;\n    });\n\n    if (direction === 'asc') {\n      seriesCalcs.reverse();\n    }\n\n    return seriesCalcs.map(({ dataFrame }) => dataFrame);\n  },\n  (series: DataFrame[], sortBy: string, direction: string) => {\n    const firstTimestamp = series.length > 0 ? series[0].fields[0].values[0] : 0;\n    const lastTimestamp =\n      series.length > 0\n        ? series[series.length - 1].fields[0].values[series[series.length - 1].fields[0].values.length - 1]\n        : 0;\n    const firstValue = series.length > 0 ? getLabelValueFromDataFrame(series[0]) : '';\n    const lastValue = series.length > 0 ? getLabelValueFromDataFrame(series[series.length - 1]) : '';\n    // This still isn't good enough, if the dataframe returns the same number of fields, with the same start and end values, we'll fail to update the UI\n    const allSeriesKey = series.map(\n      (frame) =>\n        frame.length +\n        '_' +\n        frame.fields.map((field) => field.name + '_' + field.values[0] + '_' + field.values[field.values.length - 1])\n    );\n    return `${firstValue}_${lastValue}_${firstTimestamp}_${lastTimestamp}_${series.length}_${allSeriesKey}_${sortBy}_${direction}`;\n  }\n);\n\nexport const calculateDataFrameChangepoints = (data: DataFrame) => {\n  if (!wasmSupported()) {\n    throw new Error('WASM not supported, fall back to stdDev');\n  }\n\n  const fields = data.fields.filter((f) => f.type === FieldType.number);\n\n  const dataPoints = fields[0].values.length;\n\n  let samplingStep = Math.floor(dataPoints / 100) || 1;\n  if (samplingStep > 1) {\n    // Avoiding \"big\" steps for more accuracy\n    samplingStep = Math.ceil(samplingStep / 2);\n  }\n\n  const sample = fields[0].values.filter((_, i) => i % samplingStep === 0);\n\n  const values = new Float64Array(sample);\n  const points = ChangepointDetector.defaultArgpcp().detectChangepoints(values);\n\n  return points.indices.length;\n};\n\nexport const sortSeriesByName = (series: DataFrame[], direction: string) => {\n  const sortedSeries = [...series];\n  sortedSeries.sort((a, b) => {\n    const valueA = getLabelValueFromDataFrame(a);\n    const valueB = getLabelValueFromDataFrame(b);\n    if (!valueA || !valueB) {\n      return 0;\n    }\n    return valueA?.localeCompare(valueB) ?? 0;\n  });\n  if (direction === 'desc') {\n    sortedSeries.reverse();\n  }\n  return sortedSeries;\n};\n\nconst initOutlierDetector = (series: DataFrame[]) => {\n  if (!wasmSupported()) {\n    return;\n  }\n\n  // Combine all frames into one by joining on time.\n  const joined = outerJoinDataFrames({ frames: series });\n  if (!joined) {\n    return;\n  }\n\n  // Get number fields: these are our series.\n  const joinedSeries = joined.fields.filter((f) => f.type === FieldType.number);\n  const points = joinedSeries.flatMap((series) => new Float64Array(series.values));\n\n  try {\n    const detector = OutlierDetector.dbscan({ sensitivity: 0.4 }).preprocess(points);\n    outliers = detector.detect();\n  } catch (e) {\n    logger.error(e, { msg: 'initOutlierDetector: OutlierDetector error' });\n  }\n};\n\nlet outliers: OutlierOutput | undefined = undefined;\n\nexport const calculateOutlierValue = (series: DataFrame[], data: DataFrame): number => {\n  if (!wasmSupported()) {\n    throw new Error('WASM not supported, fall back to stdDev');\n  }\n  if (!outliers) {\n    throw new Error('Initialize outlier detector first');\n  }\n\n  const index = series.indexOf(data);\n  if (outliers.seriesResults[index].isOutlier) {\n    return outliers.seriesResults[index].outlierIntervals.length;\n  }\n\n  return 0;\n};\n\nexport const wasmSupported = () => {\n  const support = typeof WebAssembly === 'object';\n\n  if (!support) {\n    reportAppInteraction(USER_EVENTS_PAGES.service_details, USER_EVENTS_ACTIONS.service_details.wasm_not_supported);\n  }\n\n  return support;\n};\n","import pluginJson from '../plugin.json';\nimport { SortBy, SortDirection } from '../Components/ServiceScene/Breakdowns/SortByScene';\nimport { SceneObject, VariableValue } from '@grafana/scenes';\nimport { getDataSourceName, getServiceName } from './variableGetters';\nimport { logger } from './logger';\nimport { SERVICE_NAME } from './variables';\nimport { Options } from '@grafana/schema/dist/esm/raw/composable/logs/panelcfg/x/LogsPanelCfg_types.gen';\nimport { unknownToStrings } from './narrowing';\nimport { AvgFieldPanelType, CollapsablePanelText } from '../Components/Panels/PanelMenu';\n\nconst FAVORITE_PRIMARY_LABEL_VALUES_LOCALSTORAGE_KEY = `${pluginJson.id}.services.favorite`;\nconst FAVORITE_PRIMARY_LABEL_NAME_LOCALSTORAGE_KEY = `${pluginJson.id}.primarylabels.tabs.favorite`;\nconst DS_LOCALSTORAGE_KEY = `${pluginJson.id}.datasource`;\n\n// This should be a string, but we'll accept anything and return an empty array if it's not a string\nexport function getFavoriteLabelValuesFromStorage(dsKey: string | unknown, labelName: string): string[] {\n  if (!dsKey || typeof dsKey !== 'string') {\n    return [];\n  }\n  const key = createPrimaryLabelLocalStorageKey(dsKey, labelName);\n  let labelValues: string[] = [];\n  try {\n    labelValues = unknownToStrings(JSON.parse(localStorage.getItem(key) || '[]'));\n  } catch (e) {\n    logger.error(e, { msg: 'Error parsing favorite services from local storage' });\n  }\n\n  if (!Array.isArray(labelValues)) {\n    labelValues = [];\n  }\n  return labelValues;\n}\n\n// This should be a string, but we'll accept anything and return early\nexport function addToFavoriteLabelValueInStorage(dsKey: string | unknown, labelName: string, labelValue: string) {\n  if (!dsKey || typeof dsKey !== 'string') {\n    return;\n  }\n  const key = createPrimaryLabelLocalStorageKey(dsKey, labelName);\n  let services: string[] = [];\n  try {\n    services = unknownToStrings(JSON.parse(localStorage.getItem(key) || '[]'));\n  } catch (e) {\n    logger.error(e, { msg: 'Error parsing favorite services from local storage' });\n  }\n\n  if (!Array.isArray(services)) {\n    services = [];\n  }\n\n  // We want to put this service at the top of the list and remove any duplicates\n  const servicesToStore = services.filter((service: string) => service !== labelValue);\n  servicesToStore.unshift(labelValue);\n\n  localStorage.setItem(key, JSON.stringify(servicesToStore));\n}\n\nexport function removeFromFavoritesInStorage(dsKey: VariableValue, labelName: string, labelValue: string) {\n  if (!dsKey || !labelName || !labelValue || typeof dsKey !== 'string') {\n    return;\n  }\n  const key = createPrimaryLabelLocalStorageKey(dsKey, labelName);\n  let services: string[] = [];\n  try {\n    services = unknownToStrings(JSON.parse(localStorage.getItem(key) || '[]'));\n  } catch (e) {\n    logger.error(e, { msg: 'Error parsing favorite services from local storage' });\n  }\n\n  if (!Array.isArray(services)) {\n    services = [];\n  }\n  const servicesToStore = services.filter((service: string) => service !== labelValue);\n  localStorage.setItem(key, JSON.stringify(servicesToStore));\n}\n\nexport function addTabToLocalStorage(dsKey: string, labelName: string) {\n  if (!dsKey || !labelName) {\n    return;\n  }\n\n  const key = createTabsLocalStorageKey(dsKey);\n\n  let services: string[] = [];\n  try {\n    services = unknownToStrings(JSON.parse(localStorage.getItem(key) || '[]'));\n  } catch (e) {\n    logger.error(e, { msg: 'Error parsing saved tabs from local storage' });\n  }\n\n  if (!Array.isArray(services)) {\n    services = [];\n  }\n\n  if (services.indexOf(labelName) === -1) {\n    // We want to put this service at the top of the list and remove any duplicates\n    const servicesToStore = services.filter((tabName: string) => tabName !== labelName);\n    servicesToStore.unshift(labelName);\n\n    localStorage.setItem(key, JSON.stringify(servicesToStore));\n  }\n}\n\nexport function removeTabFromLocalStorage(dsKey: string, labelName: string) {\n  if (!dsKey || !labelName) {\n    return;\n  }\n  const key = createTabsLocalStorageKey(dsKey);\n  let services: string[] = [];\n  try {\n    services = unknownToStrings(JSON.parse(localStorage.getItem(key) || '[]'));\n  } catch (e) {\n    logger.error(e, { msg: 'Error parsing favorite services from local storage' });\n  }\n\n  if (!Array.isArray(services)) {\n    services = [];\n  }\n  const servicesToStore = services.filter((tabName: string) => tabName !== labelName);\n  localStorage.setItem(key, JSON.stringify(servicesToStore));\n}\n\nexport function getFavoriteTabsFromStorage(dsKey: string | unknown): string[] {\n  if (!dsKey || typeof dsKey !== 'string') {\n    return [];\n  }\n  const key = createTabsLocalStorageKey(dsKey);\n  let tabNames: string[] = [];\n  try {\n    tabNames = unknownToStrings(JSON.parse(localStorage.getItem(key) || '[]'));\n  } catch (e) {\n    logger.error(e, { msg: 'Error parsing favorite services from local storage' });\n  }\n\n  if (!Array.isArray(tabNames)) {\n    tabNames = [];\n  }\n  return tabNames;\n}\n\nfunction createPrimaryLabelLocalStorageKey(ds: string, labelName: string) {\n  if (labelName === SERVICE_NAME) {\n    labelName = '';\n  } else {\n    labelName = `_${labelName}`;\n  }\n  return `${FAVORITE_PRIMARY_LABEL_VALUES_LOCALSTORAGE_KEY}_${ds}${labelName}`;\n}\n\nfunction createTabsLocalStorageKey(ds: string) {\n  return `${FAVORITE_PRIMARY_LABEL_NAME_LOCALSTORAGE_KEY}_${ds}`;\n}\n\nexport function getLastUsedDataSourceFromStorage(): string | undefined {\n  return localStorage.getItem(DS_LOCALSTORAGE_KEY) ?? undefined;\n}\n\nexport function addLastUsedDataSourceToStorage(dsKey: string) {\n  localStorage.setItem(DS_LOCALSTORAGE_KEY, dsKey);\n}\n\nconst SORT_BY_LOCALSTORAGE_KEY = `${pluginJson.id}.values.sort`;\nexport function getSortByPreference(\n  target: string,\n  defaultSortBy: SortBy,\n  defaultDirection: SortDirection\n): { sortBy: SortBy | ''; direction: SortDirection } {\n  const preference = localStorage.getItem(`${SORT_BY_LOCALSTORAGE_KEY}.${target}.by`) ?? '';\n  const parts = preference.split('.');\n  if (!parts[0] || !parts[1]) {\n    return { sortBy: defaultSortBy, direction: defaultDirection };\n  }\n  const sortBy = parts[0] as SortBy;\n  const direction = parts[1] as SortDirection;\n  return { sortBy, direction };\n}\n\nexport function setSortByPreference(target: string, sortBy: string, direction: string) {\n  // Prevent storing empty values\n  if (sortBy && direction) {\n    localStorage.setItem(`${SORT_BY_LOCALSTORAGE_KEY}.${target}.by`, `${sortBy}.${direction}`);\n  }\n}\n\nfunction getExplorationPrefix(sceneRef: SceneObject) {\n  const ds = getDataSourceName(sceneRef);\n  const serviceName = getServiceName(sceneRef);\n  return `${ds}.${serviceName}`;\n}\n\nexport function getDisplayedFields(sceneRef: SceneObject) {\n  const PREFIX = getExplorationPrefix(sceneRef);\n  const storedFields = localStorage.getItem(`${pluginJson.id}.${PREFIX}.logs.fields`);\n  if (storedFields) {\n    return JSON.parse(storedFields);\n  }\n  return [];\n}\n\nexport function setDisplayedFields(sceneRef: SceneObject, fields: string[]) {\n  const PREFIX = getExplorationPrefix(sceneRef);\n  localStorage.setItem(`${pluginJson.id}.${PREFIX}.logs.fields`, JSON.stringify(fields));\n}\n\n// Log panel options\nconst LOG_OPTIONS_LOCALSTORAGE_KEY = `${pluginJson.id}.logs.option`;\nexport function getLogOption<T>(option: keyof Options, defaultValue: T) {\n  const localStorageResult = localStorage.getItem(`${LOG_OPTIONS_LOCALSTORAGE_KEY}.${option}`);\n  return localStorageResult ? localStorageResult : defaultValue;\n}\n\nexport function setLogOption(option: keyof Options, value: string | number | boolean) {\n  let storedValue = value.toString();\n  if (typeof value === 'boolean' && !value) {\n    storedValue = '';\n  }\n  localStorage.setItem(`${LOG_OPTIONS_LOCALSTORAGE_KEY}.${option}`, storedValue);\n}\n\n// Logs volume options\nconst LOGS_VOLUME_LOCALSTORAGE_KEY = 'grafana.explore.logs.logsVolume';\nexport function setLogsVolumeOption(option: 'collapsed', value: string | undefined) {\n  const key = `${LOGS_VOLUME_LOCALSTORAGE_KEY}.${option}`;\n  if (value === undefined) {\n    localStorage.removeItem(key);\n    return;\n  }\n  localStorage.setItem(key, value);\n}\n\nexport function getLogsVolumeOption(option: 'collapsed') {\n  return localStorage.getItem(`${LOGS_VOLUME_LOCALSTORAGE_KEY}.${option}`);\n}\n\n// Log visualization options\nexport type LogsVisualizationType = 'logs' | 'table';\n\nconst VISUALIZATION_TYPE_LOCALSTORAGE_KEY = 'grafana.explore.logs.visualisationType';\nexport function getLogsVisualizationType(): LogsVisualizationType {\n  const storedType = localStorage.getItem(VISUALIZATION_TYPE_LOCALSTORAGE_KEY) ?? '';\n  switch (storedType) {\n    case 'table':\n    case 'logs':\n      return storedType;\n    default:\n      return 'logs';\n  }\n}\n\nexport function setLogsVisualizationType(type: string) {\n  localStorage.setItem(VISUALIZATION_TYPE_LOCALSTORAGE_KEY, type);\n}\n\n// Line filter options\nconst LINE_FILTER_OPTIONS_LOCALSTORAGE_KEY = `${pluginJson.id}.linefilter.option`;\nexport function setLineFilterCase(caseSensitive: boolean) {\n  let storedValue = caseSensitive.toString();\n  if (!caseSensitive) {\n    storedValue = '';\n  }\n\n  localStorage.setItem(`${LINE_FILTER_OPTIONS_LOCALSTORAGE_KEY}.caseSensitive`, storedValue);\n}\n\nexport function setLineFilterRegex(regex: boolean) {\n  let storedValue = regex.toString();\n  if (!regex) {\n    storedValue = '';\n  }\n\n  localStorage.setItem(`${LINE_FILTER_OPTIONS_LOCALSTORAGE_KEY}.regex`, storedValue);\n}\n\nexport function setLineFilterExclusive(exclusive: boolean) {\n  let storedValue = exclusive.toString();\n  if (!exclusive) {\n    storedValue = '';\n  }\n\n  localStorage.setItem(`${LINE_FILTER_OPTIONS_LOCALSTORAGE_KEY}.exclusive`, storedValue);\n}\n\nexport function getLineFilterCase(defaultValue: boolean): boolean {\n  const storedValue = localStorage.getItem(`${LINE_FILTER_OPTIONS_LOCALSTORAGE_KEY}.caseSensitive`);\n  return storedValue === 'true' ? true : defaultValue;\n}\n\nexport function getLineFilterRegex(defaultValue: boolean): boolean {\n  const storedValue = localStorage.getItem(`${LINE_FILTER_OPTIONS_LOCALSTORAGE_KEY}.regex`);\n  return storedValue === 'true' ? true : defaultValue;\n}\n\nexport function getLineFilterExclusive(defaultValue: boolean): boolean {\n  const storedValue = localStorage.getItem(`${LINE_FILTER_OPTIONS_LOCALSTORAGE_KEY}.exclusive`);\n  return storedValue === 'true' ? true : defaultValue;\n}\n\n// Panel options\nconst PANEL_OPTIONS_LOCALSTORAGE_KEY = `${pluginJson.id}.panel.option`;\nexport interface PanelOptions {\n  panelType: AvgFieldPanelType;\n  collapsed: CollapsablePanelText;\n}\nexport function getPanelOption<K extends keyof PanelOptions, V extends PanelOptions[K]>(\n  option: K,\n  values: V[]\n): V | null {\n  const result = localStorage.getItem(`${PANEL_OPTIONS_LOCALSTORAGE_KEY}.${option}`);\n  if (result !== null) {\n    return values.find((v) => result === v) ?? null;\n  }\n\n  return null;\n}\n\nexport function setPanelOption<K extends keyof PanelOptions, V extends PanelOptions[K]>(option: K, value: V) {\n  localStorage.setItem(`${PANEL_OPTIONS_LOCALSTORAGE_KEY}.${option}`, value);\n}\n","export const testIds = {\n  appConfig: {\n    container: 'data-testid ac-container',\n    apiKey: 'data-testid ac-api-key',\n    apiUrl: 'data-testid ac-api-url',\n    submit: 'data-testid ac-submit-form',\n  },\n  exploreServiceSearch: {\n    search: 'data-testid search-services',\n  },\n  header: {\n    refreshPicker: 'data-testid RefreshPicker run button',\n  },\n  variables: {\n    datasource: {\n      label: 'data-testid Dashboard template variables submenu Label Data source',\n    },\n    combobox: {},\n    serviceName: {\n      label: 'data-testid Dashboard template variables submenu Label Labels',\n    },\n  },\n  breakdowns: {\n    labels: {},\n    fields: {},\n    common: {\n      sortByFunction: 'data-testid SortBy function',\n      sortByDirection: 'data-testid SortBy direction',\n      filterButtonGroup: 'data-testid filter-button-group',\n      filterButton: 'data-testid filter-button',\n      filterSelect: 'data-testid filter-select',\n      filterNumericPopover: {\n        removeButton: 'data-testid filter-numeric-remove',\n        submitButton: 'data-testid filter-numeric-submit',\n        cancelButton: 'data-testid filter-numeric-cancel',\n        inputGreaterThan: 'data-testid filter-numeric-gt',\n        inputGreaterThanUnit: 'data-testid filter-numeric-gtu',\n        inputGreaterThanInclusive: 'data-testid filter-numeric-gte',\n\n        inputLessThan: 'data-testid filter-numeric-lt',\n        inputLessThanUnit: 'data-testid filter-numeric-ltu',\n        inputLessThanInclusive: 'data-testid filter-numeric-lte',\n      },\n    },\n  },\n\n  index: {\n    showLogsButton: 'data-testid Show logs',\n    addNewLabelTab: 'data-testid Tab Add label',\n    searchLabelValueInput: 'data-testid search-services-input',\n    aggregatedMetricsMenu: 'data-testid aggregated-metrics-menu',\n    aggregatedMetricsToggle: 'data-testid aggregated-metrics-toggle',\n    header: {\n      showLogsButton: 'data-testid Show logs header',\n    },\n  },\n\n  exploreServiceDetails: {\n    searchLogs: 'data-testid search-logs',\n    openExplore: 'data-testid open-explore',\n    tabPatterns: 'data-testid tab-patterns',\n    tabLogs: 'data-testid tab-logs',\n    tabFields: 'data-testid tab-fields',\n    tabLabels: 'data-testid tab-labels',\n    buttonRemovePattern: 'data-testid button-remove-pattern',\n    buttonFilterInclude: 'data-testid button-filter-include',\n    buttonFilterExclude: 'data-testid button-filter-exclude',\n  },\n  patterns: {\n    tableWrapper: 'data-testid table-wrapper',\n    buttonIncludedPattern: 'data-testid button-included-pattern',\n    buttonExcludedPattern: 'data-testid button-excluded-pattern',\n  },\n  logsPanelHeader: {\n    header: 'data-testid Panel header Logs',\n    radio: 'data-testid radio-button',\n  },\n  table: {\n    wrapper: 'data-testid table-wrapper',\n    inspectLine: 'data-testid inspect',\n    rawLogLine: 'data-testid raw-log-line',\n  },\n};\n","import { locationService } from '@grafana/runtime';\nimport { logger } from './logger';\nimport { dateTime, LogRowModel, TimeRange } from '@grafana/data';\n\nexport const copyText = (string: string) => {\n  if (navigator.clipboard && window.isSecureContext) {\n    navigator.clipboard.writeText(string);\n  } else {\n    const el = document.createElement('textarea');\n    el.value = string;\n    document.body.appendChild(el);\n    el.select();\n    document.execCommand('copy');\n    document.body.removeChild(el);\n  }\n};\n\nexport enum UrlParameterType {\n  From = 'from',\n  To = 'to',\n}\n\ntype PermalinkDataType =\n  | {\n      id?: string;\n      row?: number;\n    }\n  | {\n      logs: {\n        id: string;\n        displayedFields: string[];\n      };\n    };\n\nexport const generateLogShortlink = (paramName: string, data: PermalinkDataType, timeRange: TimeRange) => {\n  const location = locationService.getLocation();\n  const searchParams = new URLSearchParams(location.search);\n\n  searchParams.set(UrlParameterType.From, timeRange.from.toISOString());\n  searchParams.set(UrlParameterType.To, timeRange.to.toISOString());\n  searchParams.set(paramName, JSON.stringify(data));\n\n  // @todo can encoding + as %20 break other stuff? Can label names or values have + in them that we don't want encoded? Should we just update values?\n  // + encoding for whitespace is for application/x-www-form-urlencoded, which appears to be the default encoding for URLSearchParams, replacing + with %20 to keep urls meant for the browser from breaking\n  const searchString = searchParams.toString().replace(/\\+/g, '%20');\n  return window.location.origin + location.pathname + '?' + searchString;\n};\n\nexport function capitalizeFirstLetter(input: string) {\n  if (input.length) {\n    return input?.charAt(0).toUpperCase() + input.slice(1);\n  }\n\n  logger.warn('invalid string argument');\n  return input;\n}\n\nexport function truncateText(input: string, length: number, ellipsis: boolean) {\n  return input.substring(0, length) + (ellipsis && input.length > length ? '…' : '');\n}\n\nexport function resolveRowTimeRangeForSharing(row: LogRowModel): TimeRange {\n  // With infinite scrolling, we cannot rely on the time picker range, so we use a time range around the shared log line.\n  const from = dateTime(row.timeEpochMs - 1);\n  const to = dateTime(row.timeEpochMs + 1);\n\n  const range = {\n    from,\n    to,\n    raw: {\n      from,\n      to,\n    },\n  };\n\n  return range;\n}\n","import {\n  AdHocFiltersVariable,\n  CustomVariable,\n  DataSourceVariable,\n  sceneGraph,\n  SceneObject,\n  SceneVariableState,\n} from '@grafana/scenes';\nimport { CustomConstantVariable } from './CustomConstantVariable';\nimport {\n  AdHocFieldValue,\n  FieldValue,\n  JSON_FORMAT_EXPR,\n  LOGS_FORMAT_EXPR,\n  LogsQueryOptions,\n  MIXED_FORMAT_EXPR,\n  SERVICE_NAME,\n  VAR_AGGREGATED_METRICS,\n  VAR_DATASOURCE,\n  VAR_FIELD_GROUP_BY,\n  VAR_FIELDS,\n  VAR_FIELDS_EXPR,\n  VAR_LABEL_GROUP_BY,\n  VAR_LABELS,\n  VAR_LABELS_EXPR,\n  VAR_LABELS_REPLICA,\n  VAR_LEVELS,\n  VAR_LEVELS_EXPR,\n  VAR_LINE_FILTER,\n  VAR_LINE_FILTERS,\n  VAR_LINE_FILTERS_EXPR,\n  VAR_METADATA,\n  VAR_METADATA_EXPR,\n  VAR_PATTERNS,\n  VAR_PATTERNS_EXPR,\n  VAR_PRIMARY_LABEL,\n  VAR_PRIMARY_LABEL_SEARCH,\n} from './variables';\nimport { AdHocVariableFilter } from '@grafana/data';\nimport { logger } from './logger';\nimport { narrowFieldValue, NarrowingError } from './narrowing';\n\nexport function getLogsStreamSelector(options: LogsQueryOptions) {\n  const {\n    labelExpressionToAdd = '',\n    structuredMetadataToAdd = '',\n    fieldExpressionToAdd = '',\n    parser = undefined,\n  } = options;\n\n  switch (parser) {\n    case 'structuredMetadata':\n      return `{${VAR_LABELS_EXPR}${labelExpressionToAdd}} ${structuredMetadataToAdd} ${VAR_LEVELS_EXPR} ${VAR_METADATA_EXPR} ${VAR_PATTERNS_EXPR} ${VAR_LINE_FILTERS_EXPR} ${fieldExpressionToAdd} ${VAR_FIELDS_EXPR}`;\n    case 'json':\n      return `{${VAR_LABELS_EXPR}${labelExpressionToAdd}} ${structuredMetadataToAdd} ${VAR_LEVELS_EXPR} ${VAR_METADATA_EXPR} ${VAR_PATTERNS_EXPR} ${VAR_LINE_FILTERS_EXPR} ${JSON_FORMAT_EXPR} ${fieldExpressionToAdd} ${VAR_FIELDS_EXPR}`;\n    case 'logfmt':\n      return `{${VAR_LABELS_EXPR}${labelExpressionToAdd}} ${structuredMetadataToAdd} ${VAR_LEVELS_EXPR} ${VAR_METADATA_EXPR} ${VAR_PATTERNS_EXPR} ${VAR_LINE_FILTERS_EXPR} ${LOGS_FORMAT_EXPR} ${fieldExpressionToAdd} ${VAR_FIELDS_EXPR}`;\n    default:\n      return `{${VAR_LABELS_EXPR}${labelExpressionToAdd}} ${structuredMetadataToAdd} ${VAR_LEVELS_EXPR} ${VAR_METADATA_EXPR} ${VAR_PATTERNS_EXPR} ${VAR_LINE_FILTERS_EXPR} ${MIXED_FORMAT_EXPR} ${fieldExpressionToAdd} ${VAR_FIELDS_EXPR}`;\n  }\n}\n\nexport function getPatternsVariable(scene: SceneObject) {\n  const variable = sceneGraph.lookupVariable(VAR_PATTERNS, scene);\n  if (!(variable instanceof CustomVariable)) {\n    throw new Error('VAR_PATTERNS not found');\n  }\n  return variable;\n}\n\nexport function getLabelsVariable(scene: SceneObject) {\n  return getAdHocFiltersVariable(VAR_LABELS, scene);\n}\n\nexport function getLabelsVariableReplica(scene: SceneObject) {\n  return getAdHocFiltersVariable(VAR_LABELS_REPLICA, scene);\n}\n\nexport function getMetadataVariable(scene: SceneObject) {\n  return getAdHocFiltersVariable(VAR_METADATA, scene);\n}\n\nexport function getFieldsVariable(scene: SceneObject) {\n  return getAdHocFiltersVariable(VAR_FIELDS, scene);\n}\n\nexport function getLevelsVariable(scene: SceneObject) {\n  return getAdHocFiltersVariable(VAR_LEVELS, scene);\n}\n\nexport function getLineFilterVariable(scene: SceneObject) {\n  const variable = sceneGraph.lookupVariable(VAR_LINE_FILTER, scene);\n  if (!(variable instanceof AdHocFiltersVariable)) {\n    throw new Error('VAR_LINE_FILTER not found');\n  }\n  return variable;\n}\n\nexport function getLabelGroupByVariable(scene: SceneObject) {\n  const variable = sceneGraph.lookupVariable(VAR_LABEL_GROUP_BY, scene);\n  if (!(variable instanceof CustomConstantVariable)) {\n    throw new Error('VAR_LABEL_GROUP_BY not found');\n  }\n  return variable;\n}\n\nexport function getAggregatedMetricsVariable(scene: SceneObject) {\n  const variable = sceneGraph.lookupVariable(VAR_AGGREGATED_METRICS, scene);\n  if (!(variable instanceof CustomConstantVariable)) {\n    throw new Error('SERVICE_LABEL_VAR not found');\n  }\n  return variable;\n}\n\nexport function getFieldGroupByVariable(scene: SceneObject) {\n  const variable = sceneGraph.lookupVariable(VAR_FIELD_GROUP_BY, scene);\n  if (!(variable instanceof CustomConstantVariable)) {\n    throw new Error('VAR_FIELD_GROUP_BY not found');\n  }\n  return variable;\n}\n\nexport function getDataSourceVariable(scene: SceneObject) {\n  const variable = sceneGraph.lookupVariable(VAR_DATASOURCE, scene);\n  if (!(variable instanceof DataSourceVariable)) {\n    throw new Error('VAR_DATASOURCE not found');\n  }\n  return variable;\n}\n\nexport function getLineFiltersVariable(scene: SceneObject) {\n  const variable = sceneGraph.lookupVariable(VAR_LINE_FILTERS, scene);\n  if (!(variable instanceof AdHocFiltersVariable)) {\n    throw new Error('VAR_LINE_FILTERS not found');\n  }\n  return variable;\n}\n\nexport function getAdHocFiltersVariable(variableName: string, scene: SceneObject) {\n  const variable = sceneGraph.lookupVariable(variableName, scene);\n\n  if (!(variable instanceof AdHocFiltersVariable)) {\n    throw new Error(`Could not get AdHocFiltersVariable ${variableName}. Variable not found.`);\n  }\n  return variable;\n}\n\nexport function getServiceSelectionSearchVariable(sceneRef: SceneObject) {\n  const variable = sceneGraph.lookupVariable(VAR_PRIMARY_LABEL_SEARCH, sceneRef);\n  if (!(variable instanceof CustomConstantVariable)) {\n    throw new Error('VAR_PRIMARY_LABEL_SEARCH not found');\n  }\n  return variable;\n}\n\nexport function clearServiceSelectionSearchVariable(sceneRef: SceneObject) {\n  getServiceSelectionSearchVariable(sceneRef).setState({\n    value: '.+',\n    label: '',\n  });\n}\n\nexport function getServiceSelectionPrimaryLabel(sceneRef: SceneObject) {\n  const variable = sceneGraph.lookupVariable(VAR_PRIMARY_LABEL, sceneRef);\n  if (!(variable instanceof AdHocFiltersVariable)) {\n    throw new Error('VAR_PRIMARY_LABEL not found');\n  }\n  return variable;\n}\n\nexport function setServiceSelectionPrimaryLabelKey(key: string, sceneRef: SceneObject) {\n  getServiceSelectionPrimaryLabel(sceneRef).setState({\n    filters: [\n      {\n        // the value is replaced by the value in VAR_PRIMARY_LABEL_SEARCH if a search is active, so we just need to set the filter key (label name)\n        value: '.+',\n        operator: '=~',\n        key: key,\n      },\n    ],\n  });\n}\n\nexport function getUrlParamNameForVariable(variableName: string) {\n  return `var-${variableName}`;\n}\n\nexport function getValueFromFieldsFilter(filter: AdHocVariableFilter, variableName: string = VAR_FIELDS): FieldValue {\n  try {\n    const fieldValue = narrowFieldValue(JSON.parse(filter.value));\n    if (fieldValue !== false) {\n      return fieldValue;\n    } else {\n      throw new NarrowingError('getValueFromFieldsFilter: invalid filter value!');\n    }\n  } catch (e) {\n    if (e instanceof NarrowingError) {\n      logger.error(e, { msg: `getValueFromFieldsFilter: Failed to validate ${variableName}`, value: filter.value });\n    } else {\n      logger.error(e, { msg: `getValueFromFieldsFilter: Failed to parse ${variableName}`, value: filter.value });\n    }\n\n    // If the user has a URL from before 0.1.4 where detected_fields changed the format of the fields value to include the parser, fall back to mixed parser if we have a value\n    if (filter.value) {\n      return {\n        value: filter.value,\n        parser: 'mixed',\n      };\n    }\n    throw e;\n  }\n}\n\nexport function getValueFromAdHocVariableFilter(\n  variable: AdHocFiltersVariable,\n  filter?: AdHocVariableFilter\n): AdHocFieldValue {\n  if (variable.state.name === VAR_FIELDS && filter) {\n    return getValueFromFieldsFilter(filter);\n  }\n\n  return {\n    value: filter?.value,\n  };\n}\n\nexport function getServiceName(scene: SceneObject) {\n  const labelsVariable = getLabelsVariable(scene);\n  return getServiceNameFromVariableState(labelsVariable.state);\n}\n\nexport function getServiceNameFromVariableState(\n  adHocFiltersVariableState: SceneVariableState & { filters: AdHocVariableFilter[] }\n) {\n  const serviceName = adHocFiltersVariableState.filters\n    .filter((filter) => filter.key === SERVICE_NAME)\n    .map((filter) => filter.value);\n\n  if (!serviceName) {\n    throw new Error('Service present in filters selected');\n  }\n  return serviceName[0];\n}\n\nexport function getDataSourceName(scene: SceneObject) {\n  const dsVariable = getDataSourceVariable(scene);\n  return dsVariable.getValue();\n}\n","import { AdHocFiltersVariable, sceneGraph, SceneObject, SceneVariable } from '@grafana/scenes';\nimport { CustomConstantVariable } from './CustomConstantVariable';\nimport { SERVICE_NAME, SERVICE_UI_LABEL } from './variables';\nimport { IndexScene } from '../Components/IndexScene/IndexScene';\nimport { getPrimaryLabelFromUrl } from './routing';\n\nexport function getVariablesThatCanBeCleared(indexScene: IndexScene) {\n  const variables = sceneGraph.getVariables(indexScene);\n  let variablesToClear: SceneVariable[] = [];\n\n  for (const variable of variables.state.variables) {\n    if (variable instanceof AdHocFiltersVariable && variable.state.filters.length) {\n      variablesToClear.push(variable);\n    }\n    if (variable instanceof CustomConstantVariable && variable.state.value && variable.state.name !== 'logsFormat') {\n      variablesToClear.push(variable);\n    }\n  }\n  return variablesToClear;\n}\n\nexport function clearVariables(sceneRef: SceneObject) {\n  // clear patterns: needs to happen first, or it won't work as patterns is split into a variable and a state, and updating the variable triggers a state update\n  const indexScene = sceneGraph.getAncestor(sceneRef, IndexScene);\n  indexScene.setState({\n    patterns: [],\n  });\n\n  const variablesToClear = getVariablesThatCanBeCleared(indexScene);\n\n  variablesToClear.forEach((variable) => {\n    if (variable instanceof AdHocFiltersVariable && variable.state.key === 'adhoc_service_filter') {\n      let { labelName } = getPrimaryLabelFromUrl();\n      // getPrimaryLabelFromUrl returns the label name that exists in the URL, which is \"service\" not \"service_name\"\n      if (labelName === SERVICE_UI_LABEL) {\n        labelName = SERVICE_NAME;\n      }\n      variable.setState({\n        filters: variable.state.filters.filter((filter) => filter.key === labelName),\n      });\n    } else if (variable instanceof AdHocFiltersVariable) {\n      variable.setState({\n        filters: [],\n      });\n    } else if (variable instanceof CustomConstantVariable) {\n      variable.setState({\n        value: '',\n        text: '',\n      });\n    }\n  });\n}\n"],"names":["FilterButton","props","isExcluded","isIncluded","onInclude","onExclude","onClear","titles","buttonFill","styles","useStyles2","getStyles","div","className","container","Button","variant","fill","size","aria-selected","includeButton","onClick","data-testid","testIds","exploreServiceDetails","buttonFilterInclude","title","include","excludeButton","exclude","buttonFilterExclude","theme","css","display","justifyContent","borderRadius","borderRight","undefined","shape","radius","default","borderLeft","graphicContainer","margin","graphic","width","height","padding","spacing","text","alignItems","wrap","GrotError","children","useTheme2","SVG","src","isDark","Text","textAlignment","color","element","PatternTag","onRemove","pattern","expanded","setExpanded","useState","onMouseLeave","Tag","key","name","getPatternPreview","tag","aria-label","buttonRemovePattern","removeButton","Icon","PREVIEW_WIDTH","sm","lg","Math","round","window","innerWidth","length","substringLength","substring","fontFamily","gap","cursor","overflow","borderTopRightRadius","borderBottomRightRadius","backgroundColor","colors","secondary","main","border","boxSizing","textOverflow","paddingLeft","paddingRight","PatternControls","patterns","includePatterns","filter","type","excludePatterns","onRemovePattern","pat","reportAppInteraction","USER_EVENTS_PAGES","service_details","USER_EVENTS_ACTIONS","pattern_removed","includePatternsLength","excludePatternsLength","patternsContainer","weight","buttonIncludedPattern","map","p","buttonExcludedPattern","flexWrap","GiveFeedbackButton","wrapper","a","href","feedback","target","rel","marginLeft","position","top","alignSelf","fontSize","typography","bodySmall","link","InterceptBanner","Alert","alert","severity","br","flex","CustomVariableValueSelectors","SceneObjectBase","model","variablesSetState","sceneGraph","getVariables","variables","state","variable","includes","VariableValueSelectWrapper","layout","Component","interceptBannerStorageKey","PLUGIN_ID","CONTROLS_VARS_METADATA_ROW_KEY","CONTROLS_VARS_FIELDS_ELSE_KEY","LayoutScene","onActivate","this","setState","lineFilterRenderer","LineFilterVariablesScene","dismiss","interceptDismissed","localStorage","setItem","constructor","super","getItem","addActivationHandler","bind","firstRowWrapper","label","breakpoints","down","flexDirection","bodyContainer","flexGrow","minHeight","maxWidth","body","controlsFirstRowContainer","controlsRowContainer","controlsContainer","filters","filtersWrap","visibility","controlsWrapper","marginTop","controls","textAlign","rotateIcon","svg","transform","indexScene","getAncestor","IndexScene","contentScene","logger","warn","cx","control","SceneFlexLayout","parent","getDetectedFieldValuesTagValuesProvider","expr","sceneRef","timeRange","datasourceUnknownType","getDataSourceSrv","get","getDataSource","DataSourceWithBackend","error","Error","languageProvider","values","fetchDetectedLabelValues","options","limit","throwError","requestOptions","showErrorAlert","results","isArray","VAR_FIELDS","valueDecoded","getValueFromFieldsFilter","replace","v","value","JSON","stringify","parser","r","e","msg","getLabelsTagValuesProvider","datasource_","datasource","getTagValues","joinTagFilters","f","operator","getDataSourceVariable","result","some","FilterOp","Equal","favoriteValuesArray","getFavoriteLabelValuesFromStorage","getValue","toString","favoriteValuesSet","Set","sort","b","has","getLabelsTagKeysProvider","getTagKeys","tagKeys","filteredResult","Array","LABELS_TO_REMOVE","MAP","KEYCODE_MAP","SHIFT_MAP","$","_","SPECIAL_ALIASES","option","command","return","escape","plus","mod","test","navigator","platform","REVERSE_MAP","i","characterFromEvent","event","character","String","fromCharCode","which","shiftKey","toLowerCase","isModifier","pickBestAction","modifiers","action","keyNumber","parseInt","hasOwnProperty","getReverseMap","getKeyInfo","combination","keys","split","keysFromString","push","belongsTo","ancestor","document","parentNode","mousetrap","el","_callbacks","_directMap","_sequenceLevels","_resetTimer","_ignoreNextKeyup","_ignoreNextKeypress","_nextExpectedAction","_globalCallbacks","_resetSequences","doNotReset","activeSequences","_getMatches","sequenceName","level","callback","matches","seq","metaKey","ctrlKey","modifiers1","modifiers2","join","deleteCombo","combo","deleteSequence","splice","_fireCallback","sequence","srcElement","HTMLElement","stopCallback","preventDefault","returnValue","stopPropagation","cancelBubble","_handleKey","callbacks","maxLevel","processedSequenceCallback","max","suffixPrefixIndex","lastIndexOf","sequencePrefix","slice","Object","entries","startsWith","ignoreThisKeypress","_handleKeyEvent","rawEvent","KeyboardEvent","repeat","keyCode","handleKey","altKey","eventModifiers","_resetSequenceTimer","clearTimeout","setTimeout","_bindSequence","_increaseSequence","nextAction","_callbackAndReset","wrappedCallback","_bindSingle","info","eventLike","callbackInfo","_bindMultiple","combinations","self","unbind","bindGlobal","unbindGlobal","trigger","reset","indexOf","composedPath","initialEventTarget","Boolean","tagName","isContentEditable","args","addKeycodes","object","addEventListener","KeybindingSet","addBinding","item","evt","onTrigger","_binds","removeAll","forEach","appEvents","getAppEvents","handleZoomOut","scene","timePicker","getTimePicker","onZoom","handleTimeRangeShift","direction","onMoveBackward","onMoveForward","toggleVizPanelLegend","vizPanel","optionsWithLegend","legend","showLegend","onOptionsChange","CopyTimeEvent","BusEventBase","PasteTimeEvent","BusEventWithPayload","getCopiedTimeRange","raw","clipboard","readText","unknownRange","parse","range","narrowTimeRange","isError","showLogsButtonSceneKey","stateUpdate","drillDownLabel","setVariableTagValuesProviders","findByKeyAndType","ShowLogsButtonScene","hidden","routeMatch","params","breakdownLabel","getDrilldownSlug","PageSlugs","explore","ServiceSelectionScene","ServiceScene","setTagProviders","setVariableOperators","updatePatterns","getPatternsVariable","resetVariablesIfNotInUrl","getFieldsVariable","getUrlParamNameForVariable","getLevelsVariable","VAR_LEVELS","_subs","add","subscribeToState","newState","getTimeRange","limitMaxInterval","subscribeToEvent","subscribeToPasteTimeEvent","clearKeyBindings","keybindings","vizPanelKey","panelAttentionSubscription","subscribe","SetPanelAttentionEvent","payload","panelId","withFocusedPanel","fn","findObject","o","isActive","VizPanel","findAllObjects","withAllPanels","url","getExploreLink","locationService","activeScene","__grafanaSceneContext","publish","updateUrl","publishEvent","onRefresh","toAbsolute","unsubscribe","setupKeyboardShortcuts","fieldsVar","_getOperators","numericOperatorArray","operators","numericOperators","labelsVar","getLabelsVariable","wip","_wip","includeOperators","getTagKeysProvider","getTagValuesProvider","prevState","jsonData","plugin","meta","interval","maxInterval","rangeUtil","intervalToSeconds","timeRangeInterval","to","diff","from","defaultRange","SceneTimeRange","DEFAULT_TIME_RANGE","AppEvents","alertWarning","attempted_duration_seconds","configured_max_interval","console","fieldsVariable","levelsVariable","metadataVariable","getMetadataVariable","getFieldsTagValuesProvider","VAR_METADATA","variableType","parsed","lokiRegularEscape","otherFiltersString","getFieldsTagValuesExpression","PENDING_FIELDS_EXPR","interpolated","interpolate","DETECTED_FIELD_VALUES_EXPR","DETECTED_METADATA_VALUES_EXPR","DETECTED_LEVELS_VALUES_EXPR","urlParamName","location","getLocation","URLSearchParams","search","patternsVariable","patternsLine","renderPatternFilters","changeValueTo","getUrlState","updateFromUrl","getLastUsedDataSourceFromStorage","variablesScene","unsub","initialDatasourceUid","initialFilters","labelVariable","AdHocFiltersVariable","VAR_LABELS","EXPLORATION_DS","expressionBuilder","renderLogQLLabelFilters","hide","VariableHide","dontHide","applyMode","Promise","resolve","renderLogQLFieldFilters","hideLabel","renderLogQLMetadataFilters","lineFiltersVariable","VAR_LINE_FILTERS","hideVariable","renderLogQLLineFilter","lineFilterOperators","dsVariable","DataSourceVariable","VAR_DATASOURCE","pluginId","dsValue","addLastUsedDataSourceToStorage","SceneVariableSet","CustomVariable","VAR_PATTERNS","VAR_LINE_FILTER","CustomConstantVariable","VAR_LOGS_FORMAT","MIXED_FORMAT_EXPR","skipUrlSync","getVariableSet","SceneFlexItem","disabled","SceneTimePicker","SceneRefreshPicker","config","featureToggles","exploreLogsAggregatedMetrics","ToolbarScene","isOpen","$timeRange","$variables","_urlSync","SceneObjectUrlSyncConfig","copiedRange","newRange","convertRawToRange","sceneTimeRange","getLokiDatasource","then","ds","LoadingPlaceholder","NotEqual","gt","gte","lt","lte","LineFilterOp","match","negativeMatch","regex","negativeRegex","isFilterExclusive","updateFilter","existingFilter","filterUpdate","debounced","updateVariableLineFilter","updateVariableDebounced","handleEnter","lineFilter","onRegexToggle","newOperator","onToggleExclusive","onCaseSensitiveToggle","caseSensitive","LineFilterCaseSensitive","caseInsensitive","onInputChange","removeFilter","getLineFiltersVariable","otherFilters","keyLabel","skipPublish","forcePublish","updateFilters","search_string_in_variables_changed","searchQueryLength","containsLevel","debounce","sortLineFilters","lineFiltersWrap","titleWrap","marginBottom","lineFilterVar","exclusive","setExclusive","span","IconButton","LineFilterEditor","hasPositiveFilter","positiveFilter","find","navigateToInitialPageAfterServiceSelection","button","index","header","showLogsButton","AGGREGATED_METRICS_USER_OVERRIDE_LOCALSTORAGE_KEY","pluginJson","userOverride","active","aggregatedMetrics","toggleAggregatedMetricsOverride","service_selection","aggregated_metrics_toggled","enabled","onToggleOpen","popover","background","primary","boxShadow","shadows","z3","weak","zIndex","marginRight","heading","fontWeight","fontWeightMedium","paddingBottom","gridTemplateColumns","rowGap","columnGap","Dropdown","overlay","AGGREGATED_METRIC_START_DATE","toLocaleString","Switch","aggregatedMetricsToggle","onChange","placement","onVisibleChange","ToolbarButton","icon","aggregatedMetricsMenu","getServicesScene","EmbeddedScene","makeIndexPage","SceneAppPage","prefixRoute","PageLayoutType","Custom","preserveUrlKeys","SERVICE_URL_KEYS","routePath","getScene","drilldowns","ROUTE_DEFINITIONS","logs","getPage","makeBreakdownPage","defaultRoute","labels","fields","CHILD_ROUTE_DEFINITIONS","makeBreakdownValuePage","ValueSlugs","field","makeRedirectPage","PLUGIN_BASE_URL","hideFromBreadcrumbs","$behaviors","navigateToIndex","slug","labelName","labelValue","extractValuesFromRoute","capitalizeFirstLetter","ROUTES","DRILLDOWN_URL_KEYS","getParentPage","SUB_ROUTES","AddToExplorationButton","queries","getQueries","context","getContext","data","getData","queryRunner","findObjectOfType","SceneQueryRunner","frame","getFilter","q","legendFormat","fieldName","uid","ctx","origin","id","logoPath","links","usePluginLinks","extensionPointId","ExtensionPoints","MetricExploration","tooltip","description","filterNameAndValueObj","ADD_TO_INVESTIGATION_MENU_TEXT","ADD_TO_INVESTIGATION_MENU_DIVIDER_TEXT","ADD_TO_INVESTIGATION_MENU_GROUP_TEXT","AvgFieldPanelType","CollapsablePanelText","PanelMenu","addItem","setItems","items","addExplorationsLink","iconClassName","onExploreLinkClickTracking","shortcut","viz","VizPanelMenu","explorationsButton","activate","panelType","collapsible","addVisualizationHeader","menu","collapsed","newCollapsableState","vizPanelFlexLayout","setValueSummaryHeight","setPanelOption","addCollapsableItem","gridItem","SceneCSSGridItem","clone","$data","headerActions","PanelBuilders","timeseries","setOverrides","setLevelColorOverrides","histogram","setMenu","setTitle","setHeaderActions","setData","build","newPanelType","fieldsAggregatedBreakdownScene","FieldsAggregatedBreakdownScene","rebuildAvgFields","onSwitchVizTypeTracking","addHistogramItem","exploreLogsVizPanelMenu","addToExplorationButton","getInvestigationLink","existingMenuItems","existingAddToExplorationLink","onAddToInvestigationClick","subscribeToAddToExploration","getQueryRunnerFromChildren","breakdownScene","FieldValuesBreakdownScene","LabelValuesBreakdownScene","queryProvider","uninterpolatedExpr","open","getQueryExpr","trimEnd","displayedFields","getDisplayedFields","visualisationType","getLogsVisualizationType","columns","urlColumns","unknownToStrings","columnsParam","getUrlColumns","exploreState","toURLRange","refId","panelsState","subUrl","appSubUrl","urlUtil","renderUrl","panes","schemaVersion","onExploreLinkClick","all","open_in_explore_menu_clicked","newVizType","change_viz_type","addToExplorations","getPluginLinkExtensions","extensions","getPanelWrapperStyles","panelWrapper","opacity","shade","AddFilterEvent","ClearFilterEvent","addAdHocFilter","addToFilters","clearFilters","resolveVariableTypeForField","getAdHocFiltersVariable","validateVariableNameForField","fieldValue","getValueFromAdHocVariableFilter","getNumericOperatorType","op","operatorType","addNumericFilter","valueObject","getParserForField","valueLabels","addToFavorites","filterExists","replaceFilter","variableName","LEVEL_VARIABLE_VALUE","getDetectedLabelsFrame","AddToFiltersButton","add_to_filters_in_breakdown_clicked","filterType","filtersLength","isSelected","filterInSelectedFilters","BreakdownSearchReset","recentFilters","BreakdownSearchScene","filterValues","LabelBreakdownScene","FieldsBreakdownScene","cacheKey","byFrameRepeater","findDescendents","ByFrameRepeater","child","filterByString","typeofBody","onValueFilterChange","clearValueFilter","SearchInput","placeholder","performRepeat","newChildren","sortedSeries","sortSeries","series","sortBy","seriesIndex","layoutChild","getLayoutChild","unfilteredChildren","layoutSwitcher","LayoutSwitcher","singleGraphParent","obj","VALUE_SUMMARY_PANEL_KEY","panel","SceneDataTransformer","transformations","limitFramesByName","source","pipe","frames","newFrames","getLabelValue","typeofPanel","typeofGraphParent","iterateFrames","haystack","fuzzySearch","filterFrames","filterSummaryChart","filterFn","buildNoResultsScene","clearFilter","prevData","LoadingState","Done","Streaming","SceneReactObject","reactNode","alertContainer","noResultsAlert","clearButton","minWidth","EmptyLayoutScene","emptyStateStyles","FieldSelector","selected","setSelected","selectableOptions","InlineField","selectWrapper","Select","onOpenMenu","onCloseMenu","select","prefix","ServiceFieldSelector","selectOption","isLoading","initialFilter","customOption","setCustomOption","allOptions","selectedOption","opt","serviceSceneSelectWrapper","exploreServiceSearch","isClearable","allowCustomValue","__isNew__","actionMeta","prevInputValue","wrapWildcardSearch","input","x1","Selector","groupByVariable","getFieldGroupByVariable","tagKey","detectedFieldsFrame","getDetectedFieldsFrame","queryString","buildFieldsQueryString","query","buildDataQuery","getQueryRunner","lastFilterEvent","onValuesDataQueryChange","navigateToFields","setErrorState","errors","err","status","strong","message","traceId","navigateToDrilldownPage","optionValue","getSortByPreference","DEFAULT_SORT_BY","fieldsBreakdownScene","parserForThisField","layouts","LabelsMenu","ValueSummaryPanelScene","ValuesMenu","SceneCSSGridLayout","templateColumns","FIELDS_BREAKDOWN_GRID_TEMPLATE_COLUMNS","autoRows","isLazy","getFilterBreakdownValueScene","DrawStyle","Bars","Line","updateChildren","newParser","getDetectedFieldsFrameFromQueryRunnerState","newNamesField","getDetectedFieldsNamesFromQueryRunnerState","newParsersField","getDetectedFieldsParsersFromQueryRunnerState","cardinalityMap","calculateCardinalityMap","newFieldsSet","updatedChildren","fieldType","getDetectedFieldType","dataTransformer","getQueryRunnerForPanel","delete","buildChildren","sortChildren","subscribeToPanel","aPanel","bPanel","aCardinality","Map","cardinality","set","serviceScene","fieldsCount","updateFieldCount","$detectedFieldsData","onDetectedFieldsChange","subscribeToFieldsVar","newParsers","oldParsers","extractParserFromArray","detectedFieldsState","childrenClones","getResultsStream","isHidden","activeLayout","getActiveGridLayouts","getPanelOption","panels","isAvgField","newChild","buildChild","ALL_VARIABLE_VALUE","SelectLabelActionScene","hideValueDrilldown","setCustomFieldConfig","mode","StackingMode","Normal","setSeriesLimit","MAX_NUMBER_OF_TIME_SERIES","l","activeLayoutChildren","activePanels","changeFieldCount","loading","$detectedLabelsData","SortCriteriaChanged","handleSortByChange","variableChanged","getPrimaryLabelFromUrl","newService","prevService","oldState","updateOptions","checkPrimaryLabel","dataFrame","getVariablesThatCanBeCleared","NoMatchingLabelsScene","clearCallback","clearVariables","getFieldOptions","updateBody","VAR_FIELD_GROUP_BY","defaultToAll","includeAll","SortByScene","_variableDependency","VariableDependencyConfig","variableNames","areArraysEqual","value_breakdown_sort_change","criteria","onFieldSelectorChange","select_field_in_breakdown_clicked","previousField","getValueText","view","sortByDirection","navigateToValueBreakdown","labelsMenuWrapper","valuesMenuWrapper","blockingMessage","StatusWrapper","content","textDecoration","paddingTop","LabelsAggregatedBreakdownScene","$detectedLabels","update","updateQueriesOnFieldsVariableChange","getPanelByIndex","detectedLabelsFrame","newLabels","getLabelGroupByVariable","layoutObj","existingLabels","newLabelsSet","detectedLabels","LABEL_BREAKDOWN_GRID_TEMPLATE_COLUMNS","buildLabelsQuery","setHoverHeader","onDetectedLabelsDataChange","onLabelsVariableChange","onGroupByVariableChange","SERVICE_UI_LABEL","SERVICE_NAME","newPrimaryLabel","prevPrimaryLabel","getLabelOptions","hasAllValue","VAR_LABEL_GROUP_BY","previousLabel","VAR_LABEL_GROUP_BY_EXPR","setEmptyStates","setErrorStates","navigateOnLastFilter","navigateToLabels","errorIndex","displayed","showErrorToast","getActiveLayout","activeLayoutContainsNoPanels","repeater","variableState","labelBreakdownScene","bodyOpts","levelColor","errorArray","displayError","alertError","renderError","onLayoutChange","layout_type_changed","Field","RadioButtonGroup","findIndex","setCollapsible","setCollapsed","buildValueSummaryPanel","getValueSummaryHeight","maxHeight","collapsableState","suffix","rest","Input","suffixWrapper","clearIcon","durationUnitValues","byteUnitValues","NumericFilterPopoverScene","gtFilter","ltFilter","extractedValue","extractValueFromString","gtu","unit","ltu","Number","hasExistingFilter","onSubmit","togglePopover","units","onInputKeydown","formDisabled","inputString","inputType","durationValue","durationValueLength","isNaN","bytesValue","byteValueLength","getUnitOptions","popoverStyles","getPopoverStyles","subTitle","selectLabelActionScene","ClickOutsideWrapper","useCapture","Stack","role","card","fieldWrap","FieldSet","fieldset","breakdowns","common","filterNumericPopover","inputGreaterThanInclusive","horizontal","inclusiveField","inclusiveInput","menuShouldPortal","inputGreaterThan","onKeyDownCapture","autoFocus","currentTarget","numberInput","Label","inputGreaterThanUnit","unitFieldLabel","selectInput","inputLessThanInclusive","inputLessThan","inputLessThanUnit","buttons","submitButton","cancelButton","numberFieldLabel","switchFieldLabel","INCLUDE_VALUE","EXCLUDE_VALUE","NUMERIC_FILTER_VALUE","getVariable","getExistingFilter","EMPTY_VARIABLE_VALUE","onClickExcludeEmpty","onClickIncludeEmpty","onClickNumericFilter","selectedValue","calculateSparsity","newLogsPanelState","showPopover","logsPanelData","getLogsPanelFrame","hasNumericFilters","hasSparseFilters","logLinesWithLabelCount","reduce","acc","percentage","existingFilterValue","detectedFieldFrame","onClickViewValues","SelectableValueComponent","getSelectableValueComponentStyles","popoverRef","useRef","filterButtonDisabled","hasOtherFilter","selectedOptionValue","hasExistingNumericFilter","numericSelected","includeSelected","sparseIncludeOption","component","sparseExcludeOption","numericFilterOption","defaultOption","ButtonGroup","filterButtonGroup","filterButton","ref","ButtonSelect","filterSelect","buttonSelect","PopoverController","showPopper","hidePopper","popperProps","blurFocusProps","onBlur","onFocus","current","Popover","show","wrapperClassName","referenceElement","renderArrow","left","warning","pxToRem","borderTopLeftRadius","borderBottomLeftRadius","sortingOptions","ReducerID","stdDev","sum","min","fieldReducers","selectOptions","filterReducerOptions","onCriteriaChange","setSortByPreference","onDirectionChange","group","sortByValue","htmlFor","sortByFunction","isSearchable","inputId","ENABLED_PERCENTILES","ext","getLabelValueFromDataFrame","statusMessage","fontStyle","getFocusStyles","outline","outlineOffset","canvas","transitionTimingFunction","transitionDuration","transitionProperty","getIconButtonBefore","hoverSize","transitions","handleMotion","RegexIconButton","maxContrast","Tooltip","viewBox","xmlns","x","y","dominantBaseline","textAnchor","gridSize","x0_5","hover","colorManipulator","alpha","LineFilterCaseSensitivityButton","onSubmitLineFilter","onClearLineFilter","searchLogs","inputNoBorderRight","onKeyUp","buttonWrap","removeBtn","submit","exclusiveBtn","LineFilterScene","getLineFilterVariable","updateInputState","updateVariable","getLineFilterCase","getLineFilterRegex","getLineFilterExclusive","cancel","setLineFilterExclusive","flush","existingFilters","thisFilter","clearVariable","handleChange","setLineFilterCase","setLineFilterRegex","getFilterKey","getOperator","search_string_in_logs_changed","LogOptionsScene","handleWrapLinesChange","getLogsPanelScene","wrapLogMessage","setLogOption","getLogsListScene","setLogsVizOption","prettifyLogMessage","onChangeLogsSortOrder","sortOrder","LogsListScene","LogsPanelScene","clearDisplayedFields","logs_clear_displayed_fields","getLogsPanelSortOrderFromStore","getLogOption","LogsSortOrder","Descending","getLogsPanelSortOrderFromURL","decodedSortOrder","narrowLogsSortOrder","onChangeVisualizationType","visualizationType","wrapLines","buttonGroupWrapper","transparent","Ascending","LogsPanelHeaderActions","vizType","tableColumnCustomWidths","LogLineState","TableColumnsContext","createContext","columnWidthMap","setColumnWidthMap","filteredColumns","setColumns","setFilteredColumns","setVisible","visible","bodyState","setBodyState","clearSelectedLine","TableColumnContextProvider","initialColumns","logsFrame","setUrlColumns","setUrlTableBodyState","urlTableBodyState","removeExtraColumns","initialColumnWidths","existingWidths","narrowRecordStringNumber","NarrowingError","getColumnWidthsFromLocalStorage","setColumnWidthMapState","handleSetColumns","useCallback","newColumns","activeColumns","colA","colB","getActiveColumns","handleSetBodyState","logLineState","handleSetVisible","isVisible","useEffect","pendingLabelState","newColumnsArray","pa","pb","timeField","bodyField","defaultColumns","getDefaultColumns","col","pendingColumns","getTimeName","percentOfLinesWithLabel","Infinity","getBodyName","setDefaultColumns","Provider","labelTypes","columnsToSet","useTableColumnContext","useContext","TableCellContext","cellIndex","numberOfMenuItems","setActiveCellIndex","TableCellContextProvider","cellActive","setCellActive","handleCellActive","useTableCellContext","TableHeaderContext","isHeaderMenuActive","setHeaderMenuActive","TableHeaderContextProvider","handleisHeaderMenuActive","useTableHeaderContext","LogsColumnSearch","searchValue","setSearchValue","dispatcher","newColumnsWithMeta","numberOfResults","searchResultCount","reportInteraction","resultCount","searchWrap","needle","debouncedFuzzySearch","LogsTableEmptyFields","empty","LogsTableNavField","dragIcon","labelCount","appearance","contentWrap","customWidthWrap","checkboxLabel","whiteSpace","Checkbox","checked","showCount","omit","draggable","LogsTableActiveFields","reorderColumn","valueFilter","toggleColumn","dragging","columnWrapper","getLogsFieldsStyles","labelKeys","renderTitle","DragDropContext","onDragEnd","destination","Droppable","droppableId","provided","droppableProps","innerRef","la","lb","sortLabels","Draggable","draggableId","snapshot","isDragging","draggableProps","dragHandleProps","collator","Intl","Collator","sensitivity","LogsTableAvailableFields","borderBottom","compare","LogsTableMultiSelect","sidebarWrap","overflowY","scrollbarWidth","columnHeaderButton","columnHeader","h6","clear","filteredColumnsWithMeta","columnsWithMeta","getReorderColumn","sourceIndex","destinationIndex","ColumnSelectionDrawerWrap","columnName","logContext","logError","c","priorActiveCount","column","columnAction","columnCount","columnFilterEvent","pendingFilteredLabelState","isDefaultField","DefaultCellWrapComponent","CellWrapInnerComponent","onMouseOut","onMouseIn","rowIndex","cellState","overflowX","onMouseEnter","initialState","addFilter","selectedLine","QueryContext","QueryContextProvider","useQueryContext","CellContextMenu","pillType","menuItemsWrap","menuItem","showColumn","path","fillRule","clipRule","d","fillOpacity","LEVEL_NAME","DefaultPill","mappings","getFieldMappings","isPillActive","activePillWrap","pillWrap","pill","menuItemText","FieldType","time","LineActionIcons","clipboardButton","lineHeight","inspectButton","verticalAlign","iconWrapper","z2","inspect","logId","idField","lineValue","isInspecting","setIsInspecting","getText","generateLogShortlink","row","table","inspectLine","tooltipPlacement","tabIndex","ClipboardButton","Modal","onDismiss","pre","ButtonRow","DefaultCellComponent","getCellLinks","displayValue","number","linkWrapper","hasLinks","React","formattedValueToString","fieldIndex","showColumns","renderValue","getLinks","DataLinksContextMenu","api","openMenu","LogLinePillValue","activePill","valueWrap","menuActive","onClickAdd","LogLinePill","templateSrv","getTemplateSrv","useMemo","other","originalField","isDerivedField","originalFrame","getLinksSupplier","subFieldName","addFieldToColumns","stopScroll","scrollTo","scrollLeft","Scroller","scrollerRef","scroller","scrollRight","onPointerDown","behavior","onPointerUp","scrollWidth","RawLogLineText","rawLogLine","bgColor","fontFamilyMonospace","LogLineCellComponent","isHover","setIsHover","untransformedField","rawValue","isDerived","untransformedValue","string","renderLabels","isAuto","auto","hasLabels","ScrollSyncPane","LogsTableHeader","isFirstColumn","isLine","tableHeaderMenu","right","defaultContentWrapper","defaultContent","LogsTableHeaderWrap","hideColumn","pendingColumnState","columnIndex","cols","isBodyField","headerProps","linkWrap","openColumnManagementDrawer","slideLeft","reverse","slideRight","autoColumnWidths","TableAndContext","GrafanaTable","onColumnResize","onResize","initialSortBy","displayName","desc","initialRowIndex","cellHeight","TableCellHeight","Sm","footerOptions","reducer","countRows","Table","timeZone","section","tableWrap","tableFrame","setTableFrame","localSelectedLine","prepareTableFrame","frameWithOverrides","applyFieldOverrides","replaceVariables","fieldConfig","defaults","custom","overrides","guessLogsFieldTypeForField","filterable","headerComponent","getInitialFieldWidth","cellOptions","getTableCellOptions","prepare","isFieldLokiLabels","typeInfo","DataFrameType","LogLines","isFieldDataplaneLabels","flatMap","format","keepTime","labelFiltersTransform","labelFilters","labelFiltersInclude","indexByName","includeByName","getOrganizeFieldsTransform","buildColumnsWithMeta","specialFields","extraFields","getDefaultStateOrganizeFieldsTransform","transformedDataFrame","lastValueFrom","transformDataFrame","getIdName","lineIndex","cleanLineIndex","Drawer","onClose","ScrollSync","vertical","proportional","fieldDisplayName","guessLogsFieldTypeForValue","critical","crit","eror","debug","trace","MappingType","ValueToText","cellComponent","TableCellDisplayMode","tableWidth","numberOfFields","extraPadding","columnMeta","maxLength","iso8601Regex","TableWrap","panelWrapSize","setPanelWrapSize","useResizeObserver","panelWrap","clientWidth","clientHeight","getTimeZone","getColumnsFromProps","fieldNames","previouslySelected","getLogFrameLabelsAsLabels","numberOfLogLines","labelMap","fieldLabels","setObj","valueSet","getCardinalityMapFromLabels","cardinalityCount","fromEntries","normalize","mapLabelsToInitialState","specialFieldArray","addSpecialLabelsState","setSpecialFieldMeta","total","ceil","guessFieldTypeFromValue","TableProvider","parseLogsFrame","LogsTableScene","parentModel","tableLogLineState","timeRangeValue","PanelChrome","loadingState","actions","setVisualizationType","getVariableForLabel","areArraysStrictlyEqual","decodedUrlColumns","unknownTableRow","narrowSelectedTableRow","decodedSelectedTableRow","decodedVisualizationType","narrowLogsVisualizationType","searchParams","setStateFromUrl","updateLogsPanel","selectedLineUrl","urlColumnsUrl","vizTypeUrl","displayedFieldsUrl","getVizPanel","logsPanelScene","xSizing","lineFilterScenes","lineFilterScene","logs_visualization_toggle","setLogsVisualizationType","contain","CopyLinkButton","copied","setCopied","timeoutId","handleClick","decodedWrapLogMessage","getLogsPanel","logsCount","getTitle","runQueries","getParentScene","formattedCount","valueFormatter","getValueFormat","trim","setOption","handleLabelFilterClick","handleLabelFilterOutClick","handleIsFilterLabelActive","handleFilterStringClick","handleFilterOutStringClick","onClickShowField","onClickHideField","updateVisibleRange","handleShareLogLineClick","handleLabelFilter","logs_detail_filter_applied","setDisplayedFields","logs_toggle_displayed_field","displayedField","newLogs","logsVolumePanelKey","LogsVolumePanel","rowId","resolveRowTimeRangeForSharing","copyText","levels","metadata","hasKeyValueFilter","fieldFilter","hasKeyValueFilterField","lineFiltersVar","logs_popover_line_filter","selectionLength","getTimeSeriesExpr","streamSelectorName","excludeEmpty","metadataExpressionToAdd","fieldFilters","getParserFromFieldsFilters","VAR_LABELS_EXPR","VAR_METADATA_EXPR","VAR_PATTERNS_EXPR","VAR_LINE_FILTERS_EXPR","VAR_FIELDS_EXPR","JSON_FORMAT_EXPR","LOGS_FORMAT_EXPR","updateContainerHeight","totalLogsCount","formattedTotalCount","maxLines","LINE_LIMIT","calcs","displayMode","LegendDisplayMode","List","setUnit","getLogsVolumeOption","setLogsVolumeFieldConfigs","extendPanelContext","extendTimeSeriesLegendBus","setLogsVolumeOption","annotations","displayVisibleRange","syncLogsPanelVisibleSeries","containerLayout","innerHeight","updatedLogSeries","visibleRange","getSeriesVisibleRange","getVisibleRangeFrame","start","end","levelFilter","onToggleSeriesVisibility","SeriesVisibilityChangeMode","AppendToSelection","toggleLevelFromFilter","level_in_logs_volume_clicked","onPatternClick","filteredPatterns","staleIndex","pattern_selected","logsStatsRow","logsStatsRowActive","logsStatsRowLabel","logsStatsRowValue","logsStatsRowCount","logsStatsRowPercent","logsStatsRowBar","logsStatsRowInnerBar","PatternFieldLabelStatsRow","count","proportion","style","percent","barStyle","logsStats","wordBreak","logsStatsHeader","medium","logsStatsTitle","logsStatsClose","logsStatsBody","PatternFieldLabelStats","stats","topRows","activeRow","otherRows","otherCount","combinedRows","stat","PatternNameLabel","exploration","patternIndices","indices","currentIndex","extractPatternIndices","setStats","statsError","setStatsError","previousQueryRef","previousTimeRangeRef","handlePatternClick","pattern_field_clicked","patternExtractor","filterExpression","_value","constructQuery","currentTimeRange","requestId","intervalMs","scopedVars","targets","timezone","app","startTime","fieldCount","fieldStatsMap","toArray","fieldStats","convertResultToStats","parts","part","Toggletip","onOpen","Spinner","emphasize","PatternsLogsSampleScene","queryWithFilters","LOG_STREAM_SELECTOR_EXPR","replacePatternsInQuery","queryRunnerWithFilters","onQueryWithFiltersResult","pendingPattern","removePatternFromFilterExclusion","patternsViewTableScene","PatternsViewTableScene","patternsNotMatchingFilters","setWarningMessage","noticeFlexItem","getNoticeFlexItem","vizFlexItem","getVizFlexItem","getFlexItemChildren","excludeThisPatternFromFiltering","patternsThatDontMatchCurrentFilters","filterVariable","onQueryError","every","traceIds","request","panelFlexItem","queryWithoutFilters","PATTERNS_SAMPLE_SELECTOR_EXPR","queryRunnerWithoutFilters","PatternsTableExpandedRow","tableViz","expandedRows","rowScene","newRowScene","SCALED_UNITS","appliedPatterns","getColumnStyles","cell","panelData","original","dataNode","SceneDataNode","timeSeries","TooltipDisplayMode","None","AxisPlacement","Hidden","setDisplayMode","tableTimeSeriesWrap","tableTimeSeries","sortType","scaledUnits","countTextWrap","toFixed","getTablePatternTextStyles","tablePatternTextDefault","getExplorationFor","disableGrow","existingPattern","appliedPattern","includeLink","excludeLink","undoLink","patternFrames","legendSyncPatterns","logExploration","patternFrame","getTableStyles","patternsFrameScene","PatternsFrameScene","patternFramesRaw","previousValue","tableData","buildTableData","buildColumns","tableWrapper","InteractiveTable","getRowId","renderExpandedRow","theme2","overflowWrap","th","navbarFixed","pointerEvents","palette","visualization","newFrame","$patternsData","prevFrame","patternsBreakdownScene","PatternsBreakdownScene","patternFilter","forEachChild","getTimeseriesDataNode","getSingleViewLayout","originalOnToggleSeriesVisibility","override","patternsToShow","matcher","names","getTimeSeries","asTable","setLinks","targetBlank","fixedColor","overrideToFixedColor","logsByServiceScene","PatternsViewTextSearch","onSearchResult","setFilteredPatterns","patternFramesOverride","filteredPatternFrames","clearSearch","handleSearchChange","setEmptySearch","PatternsNotDetected","TextLink","external","PatternsTooOld","PATTERNS_MAX_AGE_HOURS","setBody","dataFrames","updatePatternFrames","onDataChange","ySizing","dataFrameToPatternFrame","prevFrames","Loading","controlsRight","controlsLeft","justifyItems","patternMissingText","timeRangeTooOld","dateTime","code","TabNames","breakdownViewsDefinitions","testId","tabLogs","behaviors","sync","DashboardCursorSync","Crosshair","tabLabels","buildFieldsBreakdownActionScene","changeFieldNumber","tabFields","tabPatterns","valueBreakdownViews","buildLabelValuesBreakdownActionScene","buildFieldValuesBreakdownActionScene","ShareButtonScene","setIsOpen","onCopyLink","shorten","absTime","createAndCopyShortLink","global","isAbsoluteTime","protocol","host","lastSelected","defaultMode","MenuActions","menuOptions","getUrl","constructAbsoluteUrl","getSceneTimeRange","Menu","groupOption","MenuGroup","Item","narrow","getRelativeURLPath","createShortLink","getBackendSrv","post","shortLink","alertSuccess","toUtc","getUrlSearchParams","toISOString","pathname","ActionBarScene","dataSource","shareButtonScene","currentBreakdownViewSlug","allowNavToParent","drilldownValueSlug","getDrilldownValueSlug","loadingStates","Box","paddingY","appSidecar","ToolbarExtensionsRenderer","TabsBar","tab","Tab","counter","getCounter","totalCount","getLogsCountStyles","logsCountStyles","emptyCountStyles","LogsCount","onChangeTab","action_view_changed","newActionView","previousActionView","patternsCount","labelsCount","up","md","setFilters","sub","limitPerPlugin","ariaLabel","removeEscapeChar","charsEscapedByEscapeRegExp","char","stringArray","nextChar","isNextCharRegex","LOGS_PANEL_QUERY_REFID","LOGS_COUNT_QUERY_REFID","setSubscribeToLabelsVariable","redirectToStart","prevRouteMatch","replaceSlash","$logsCount","isExact","resetTabCount","getMetadataService","setServiceSceneState","clearAdHocVariables","getServiceSceneState","getMetadata","resetBodyAndData","setBreakdownView","subscribeToPatternsQuery","subscribeToDetectedLabelsQuery","subscribeToDetectedFieldsQuery","subscribeToLogsQuery","subscribeToLogsCountQuery","subscribeToFieldsVariable","subscribeToMetadataVariable","subscribeToLevelsVariable","subscribeToDataSourceVariable","subscribeToPatternsVariable","subscribeToLineFiltersVariable","subscribeToTimeRange","deprecatedLineFilterArray","deprecatedLineFilter","globalLineFilterVars","caseSensitiveMatches","caseInsensitiveMatches","migrateLineFilterV1","SceneVariableValueChangedEvent","parentSlug","updateLoadingState","patternsResponse","setPatternsCount","detectedLabelsResponse","detectedLabelsFields","removeSpecialFields","setLabelsCount","updateFieldsCount","detectedFieldsFields","setFieldsCount","getServiceSceneQueryRunner","getPatternsQueryRunner","getDetectedLabelsQueryRunner","getDetectedFieldsQueryRunner","getLogCountQueryRunner","buildGraphScene","breakdownView","breakdownViewDef","valueBreakdownView","valueBreakdownViewDef","getResourceQueryRunner","buildResourceQuery","queryType","runQueriesMode","FavoriteServiceHeaderActionScene","setHover","isFavorite","removeFromFavorites","tooltipCopy","onMouseOver","selectLabel","primaryLabelName","primaryLabelValue","service_selected","SelectServiceButton","ConfigureVolumeError","NoServiceSearchResults","TabPopoverScene","serviceSelectionScene","serviceSelectionTabsScene","ServiceSelectionTabsScene","tabOptions","tabOptionsWithIcon","saved","toggleShowPopover","openMenuOnFocus","setSelectedTab","getLabelsFromQueryRunnerState","$labelsData","populatePrimaryLabelsVariableOptions","selectedTab","getSelectedTab","savedTabs","getFavoriteTabsFromStorage","savedIndex","runDetectedLabels","runDetectedLabelsSubs","getServiceSelectionPrimaryLabel","selectDefaultLabelTab","getSceneQueryRunner","removeSavedTab","removeTabFromLocalStorage","getTabsStyles","tabLabel","truncateText","addTab","NoServiceVolume","AddLabelToFiltersHeaderActionScene","included","add_to_filters","aggregatedMetricsEnabled","AGGREGATED_SERVICE_NAME","primaryLabelUrlKey","datasourceUrlKey","getSelectedTabFromUrl","addDatasourceChangeToBrowserHistory","newDs","dsUrl","currentUrl","newUrl","pushUrlHandler","addLabelChangeToBrowserHistory","newKey","primaryLabelRaw","primaryLabelSplit","addTabToLocalStorage","clearServiceSelectionSearchVariable","setServiceSelectionPrimaryLabelKey","buildServiceLayout","serviceLabelVar","primaryLabelVar","datasourceVar","splitDuration","getMetricExpression","isAggregatedMetricsActive","cssGridItem","runner","runPanelQuery","toolbar","getQueryOptionsToolbar","formatPrimaryLabelForUI","setVolumeQueryRunner","buildVolumeQuery","VAR_PRIMARY_LABEL_EXPR","VAR_LABELS_REPLICA_EXPR","subscribeToVolume","doVariablesNeedSync","labelsVarPrimary","labelsVarReplica","getLabelsVariableReplica","activeTab","filteredFilters","needsSync","syncVariables","fixRequiredUrlParams","subscribeToPrimaryLabelsVariable","subscribeToLabelFilterChanges","subscribeToActiveTabVariable","runVolumeOnActivate","subscribeToDatasource","subscribeToAggregatedMetricToggle","subscribeToAggregatedMetricVariable","isTimeRangeTooEarlyForAggMetrics","onUnsupportedAggregatedMetricTimeRange","runVolumeQuery","onSupportedAggregatedMetricTimeRange","getAggregatedMetricsVariable","isBefore","resetQueryRunner","updateAggregatedMetricVariable","updateTabs","tabs","getGridItems","queryRunners","requestTimeRange","fromDiff","abs","toDiff","labelsToQuery","getLabels","existingChildren","aggregatedMetricsVariable","datasourceVariable","existing","newChildTs","newChildLogs","buildServiceLogsLayout","serviceIndex","getLogExpression","labelsByVolume","dsString","searchString","getServiceSelectionSearchVariable","services","favoriteServicesToQuery","service","createListOfLabelsToQuery","VAR_PRIMARY_LABEL_SEARCH","VAR_AGGREGATED_METRICS","VAR_PRIMARY_LABEL","renderPrimaryLabelFilters","VAR_LABELS_REPLICA","serviceLevel","onSearchServicesChange","primaryLabelSearch","searchVar","search_services_changed","searchQuery","getLevelFilterForService","serviceLevels","Off","allLevels","getLabelsFromSeries","toggleLevelVisibility","updateServiceLogs","headingWrapper","loadingText","bodyWrapper","searchFieldPlaceholderText","searchWrapper","searchField","serviceStringVariable","hasSearch","isLogVolumeLoading","volumeApiError","totalServices","renderedServices","filterLabel","customValue","customLabel","unwrapWildcardSearch","serviceName","onSearchChange","MultiValueVariable","getValueOptions","of","renderSelectForVariable","page","properties","createInteractionName","open_in_explore_clicked","wasm_not_supported","interval_too_long","arr1","arr2","set1","set2","requestSupportsSharding","nodeType","isQueryWithNode","iterate","enter","MetricExpr","isLogsQuery","isLogsRequest","isInstantQuery","SHARDING_PLACEHOLDER","addShardingPlaceholderSelector","interpolateShardingSelector","shards","shardValue","RegExp","resolveIdx","destField","sourceField","idx","closestIdx","nanos","compareEntries","destTimeField","destIdField","destIndex","sourceTimeField","sourceIdField","sameTimestamp","compareNsTimestamps","findSourceField","referenceField","sourceFields","candidates","TOTAL_BYTES_STAT","getCombinedMetadataStats","destStats","sourceStats","destStat","s","sourceStat","eitherStat","cloneDataFrame","runShardSplitQuery","interpolateVariablesInQueries","splittingTargets","shouldStop","mergedResponse","uuidv4","subquerySubscription","retriesMap","retryTimer","runNextRequest","subscriber","cycle","groupSize","nextGroupSize","retrying","done","next","complete","nextRequest","nextCycle","retry","errorResponse","isRetriableError","traces","floor","sqrt","retries","pow","shardsToQuery","groupShardRequests","subRequest","runQuery","partialResponse","constrainGroupSize","response","currentSize","metaExecutionTime","executionTime","updateGroupSizeFromResponse","currentResult","newResult","currentFrame","frame1","frame2","frameType1","TimeSeriesMulti","field1","field2","compareLabels","customType1","frameType","customType2","shouldCombine","dest","sourceTimeValues","totalFields","destIdx","entryExistsInDest","mergeFrames","mergedErrors","mergedError","mergedTraceIds","combineResponses","runNonSplitRequest","Observable","selector","getNodesFromQuery","getSelectorForShardValues","isValidQuery","fetchLabelValues","streamSelector","getInitialGroupSize","catch","splitQueriesByStreamShard","DEBUG_ENABLED","log","LokiQueryDirection","WRAPPED_LOKI_DS_UID","DETECTED_FIELDS_NAME_FIELD","DETECTED_FIELDS_CARDINALITY_NAME","DETECTED_FIELDS_PARSER_NAME","DETECTED_FIELDS_TYPE_NAME","WrappedLokiDatasource","RuntimeDataSource","__sceneObject","valueOf","targetsSet","resource","getVolume","getPatterns","getDetectedLabels","getDetectedFields","shardingEnabled","exploreLogsShardSplitting","updatedRequest","applyQueryDirection","sanitizeStreamSelector","interpolatedTarget","expression","dsResponse","getResource","utc","step","headers","lokiPatterns","maxValue","minValue","timeValues","countValues","samples","createDataFrame","preferredVisualisationType","targetsInterpolated","Backward","Forward","sortLabelsByCardinality","detectedLabelFields","nameField","cardinalityField","parserField","typeField","FIELDS_TO_REMOVE","parsers","primaryLabel","volumeResponse","lhs","rhs","lVolumeCount","rVolumeCount","df","metric","labelsResponse","testDatasource","sceneUtils","registerRuntimeDataSource","rerenderFavorites","forceRender","addToFavoriteLabelValueInStorage","removeFromFavoritesInStorage","getReducerId","extractParserFromString","parserString","extractFieldTypeFromString","fieldString","parsersSet","parsersArray","namesField","sortByScene","labelKey","frameIndex","reducerID","selectFrameTransformation","setDisplayName","labelType","LabelType","Indexed","StructuredMetadata","Parsed","getLabelTypeFromFrame","getFilterTypeFromLabelType","typesField","optionType","parserFromFilterValue","fieldExpressionToAdd","structuredMetadataToAdd","getLogsStreamSelector","buildFieldsQuery","unshift","labelOptions","optionName","labelExpressionToAdd","visibleLevels","ToggleSelection","existingLevel","getVisibleLevels","levelsFilter","wantedLevels","normalizeLevelName","unwantedLevels","defaultContext","version","attemptFaroInfo","attemptFaroWarn","attemptFaroErr","logInfo","logWarning","context2","isRecord","hasData","populateFetchErrorContext","getField","cache","getFieldByName","DATAPLANE_TIMESTAMP_NAME","DATAPLANE_BODY_NAME","DATAPLANE_SEVERITY_NAME","DATAPLANE_ID_NAME","DATAPLANE_LABELS_NAME","logFrameLabelsToLabels","logFrameLabels","k","FieldCache","timestampField","severityField","labelsField","getLogFrameLabels","timeNanosecondField","getLabelFieldName","parseDataplaneLogsFrame","getFirstFieldOfType","getL","lineField","lineLabels","makeLabelsArray","makeLabelsGetter","parseLegacyLogsFrame","oldestFirst","VISIBLE_RANGE_NAME","arrayToDataFrame","timeEnd","isRegion","dataTopic","DataTopic","Annotations","metadataService","initializeMetadataService","MetadataService","serviceSceneState","isObj","hasProp","prop","isString","strings","narrowed","narrowFieldValue","returnRecord","previousRoute","buildDrilldownPageUrl","extraQueryParams","buildDrilldownPageRoute","newPath","urlLabelName","urlLabelValue","urlPath","buildValueBreakdownUrl","fullUrl","breakdownUrl","serviceUrl","buildServicesUrl","getSearch","LogsSceneQueryRunner","UNKNOWN_LEVEL_LOGS","matchFieldsWithName","overrideColor","builder","setLevelSeriesOverrides","overrideConfig","FieldMatcherID","byNames","readOnly","overrideCustomFieldConfig","__systemRef","focusedLevels","FieldConfigBuilders","FieldConfigBuilder","onFieldConfigChange","setColorByDisplayNameTransformation","getFieldDisplayName","FieldColorModeId","PaletteClassicByName","sortLevelTransformation","displayNameFromDS","aName","aVal","bName","queryRunnerOptions","hasLevel","isLogPanelQuery","route","queryParamsOverrides","defaultQueryParams","VAR_DATASOURCE_EXPR","editorMode","supportingQueryType","getLogQLLabelGroups","positive","negative","positiveGroups","groupBy","positiveFilters","renderMetadata","renderRegexLabelFilter","getLogQLLabelFilters","negativeFilters","numeric","fieldFilterToQueryString","fieldNumericFilterToQueryString","buildLogQlLineFilter","escapeLabelValueInExactSelector","RE2_METACHARACTERS","escapeDoubleQuotedLineFilter","excludePatternsLine","includePatternsLine","breakdownLabelName","routeParams","startOfUrl","locationArray","buildServicesRoute","labelsVariable","sceneObject","check","returnType","uf","uFuzzy","intraMode","intraIns","intraSub","intraTrn","intraDel","idxs","order","haystackOrder","matchesSet","mark","matched","infoIdx","highlight","ranges","debounceLodash","memoize","sortSeriesByName","initOutlierDetector","fieldReducer","calculateDataFrameChangepoints","calculateOutlierValue","doStandardCalcs","seriesCalcs","firstTimestamp","lastTimestamp","firstValue","lastValue","allSeriesKey","wasmSupported","dataPoints","samplingStep","sample","Float64Array","ChangepointDetector","defaultArgpcp","detectChangepoints","valueA","valueB","localeCompare","joined","outerJoinDataFrames","points","detector","OutlierDetector","dbscan","preprocess","outliers","detect","seriesResults","isOutlier","outlierIntervals","support","WebAssembly","FAVORITE_PRIMARY_LABEL_VALUES_LOCALSTORAGE_KEY","FAVORITE_PRIMARY_LABEL_NAME_LOCALSTORAGE_KEY","DS_LOCALSTORAGE_KEY","dsKey","createPrimaryLabelLocalStorageKey","labelValues","servicesToStore","createTabsLocalStorageKey","tabName","tabNames","SORT_BY_LOCALSTORAGE_KEY","defaultSortBy","defaultDirection","getExplorationPrefix","getDataSourceName","getServiceName","PREFIX","storedFields","LOG_OPTIONS_LOCALSTORAGE_KEY","defaultValue","storedValue","LOGS_VOLUME_LOCALSTORAGE_KEY","removeItem","VISUALIZATION_TYPE_LOCALSTORAGE_KEY","storedType","LINE_FILTER_OPTIONS_LOCALSTORAGE_KEY","PANEL_OPTIONS_LOCALSTORAGE_KEY","appConfig","apiKey","apiUrl","refreshPicker","combobox","addNewLabelTab","searchLabelValueInput","openExplore","logsPanelHeader","radio","isSecureContext","writeText","createElement","appendChild","execCommand","removeChild","paramName","charAt","toUpperCase","ellipsis","timeEpochMs","VAR_LEVELS_EXPR","lookupVariable","adHocFiltersVariableState","getServiceNameFromVariableState","variablesToClear"],"sourceRoot":""}