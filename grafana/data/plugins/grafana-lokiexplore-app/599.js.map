{"version":3,"file":"599.js","mappings":"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","sources":["webpack://grafana-lokiexplore-app/./Components/AppConfig/AppConfig.tsx","webpack://grafana-lokiexplore-app/./services/logger.ts","webpack://grafana-lokiexplore-app/./services/narrowing.ts"],"sourcesContent":["import { getBackendSrv, locationService } from '@grafana/runtime';\nimport { AppPluginMeta, GrafanaTheme2, PluginConfigPageProps, PluginMeta, rangeUtil } from '@grafana/data';\nimport { lastValueFrom } from 'rxjs';\nimport { css } from '@emotion/css';\nimport { Button, Field, FieldSet, Input, useStyles2 } from '@grafana/ui';\nimport React, { ChangeEvent, useState } from 'react';\nimport { isNumber } from 'lodash';\nimport { logger } from '../../services/logger';\n\nexport type JsonData = {\n  interval?: string;\n};\n\ntype State = {\n  interval: string;\n  isValid: boolean;\n};\n\n// 1 hour minimum\nconst MIN_INTERVAL_SECONDS = 3600;\n\ninterface Props extends PluginConfigPageProps<AppPluginMeta<JsonData>> {}\n\nconst AppConfig = ({ plugin }: Props) => {\n  const styles = useStyles2(getStyles);\n  const { enabled, pinned, jsonData } = plugin.meta;\n\n  const [state, setState] = useState<State>({\n    interval: jsonData?.interval ?? '',\n    isValid: isValid(jsonData?.interval ?? ''),\n  });\n\n  const onChangeInterval = (event: ChangeEvent<HTMLInputElement>) => {\n    const interval = event.target.value.trim();\n    setState({\n      ...state,\n      interval,\n      isValid: isValid(interval),\n    });\n  };\n\n  return (\n    <div data-testid={testIds.appConfig.container}>\n      <FieldSet label=\"Settings\">\n        <Field\n          invalid={!isValid(state.interval)}\n          error={'Interval is invalid. Please enter an interval longer then \"60m\". For example: 3d, 1w, 1m'}\n          description={\n            <span>\n              The maximum interval that can be selected in the time picker within the Explore Logs app. If empty, users\n              can select any time range interval in Explore Logs. <br />\n              Example values: 7d, 24h, 2w\n            </span>\n          }\n          label={'Maximum time picker interval'}\n          className={styles.marginTop}\n        >\n          <Input\n            width={60}\n            id=\"interval\"\n            data-testid={testIds.appConfig.interval}\n            label={`Max interval`}\n            value={state?.interval}\n            placeholder={`7d`}\n            onChange={onChangeInterval}\n          />\n        </Field>\n\n        <div className={styles.marginTop}>\n          <Button\n            type=\"submit\"\n            data-testid={testIds.appConfig.submit}\n            onClick={() =>\n              updatePluginAndReload(plugin.meta.id, {\n                enabled,\n                pinned,\n                jsonData: {\n                  interval: state.interval,\n                },\n              })\n            }\n            disabled={!isValid(state.interval)}\n          >\n            Save settings\n          </Button>\n        </div>\n      </FieldSet>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  colorWeak: css`\n    color: ${theme.colors.text.secondary};\n  `,\n  marginTop: css`\n    margin-top: ${theme.spacing(3)};\n  `,\n  marginTopXl: css`\n    margin-top: ${theme.spacing(6)};\n  `,\n  label: css({\n    display: 'flex',\n    alignItems: 'center',\n    marginBottom: theme.spacing(0.75),\n  }),\n  icon: css({\n    marginLeft: theme.spacing(1),\n  }),\n});\n\nconst updatePluginAndReload = async (pluginId: string, data: Partial<PluginMeta<JsonData>>) => {\n  try {\n    await updatePlugin(pluginId, data);\n\n    // Reloading the page as the changes made here wouldn't be propagated to the actual plugin otherwise.\n    // This is not ideal, however unfortunately currently there is no supported way for updating the plugin state.\n    locationService.reload();\n  } catch (e) {\n    logger.error(e, { msg: 'Error while updating the plugin' });\n  }\n};\n\nconst testIds = {\n  appConfig: {\n    container: 'data-testid ac-container',\n    interval: 'data-testid ac-interval-input',\n    submit: 'data-testid ac-submit-form',\n  },\n};\n\nexport const updatePlugin = async (pluginId: string, data: Partial<PluginMeta>) => {\n  const response = getBackendSrv().fetch({\n    url: `/api/plugins/${pluginId}/settings`,\n    method: 'POST',\n    data,\n  });\n\n  const dataResponse = await lastValueFrom(response);\n\n  return dataResponse.data;\n};\n\nconst isValid = (interval: string): boolean => {\n  try {\n    if (interval) {\n      const seconds = rangeUtil.intervalToSeconds(interval);\n      return isNumber(seconds) && seconds >= MIN_INTERVAL_SECONDS;\n    } else {\n      // Empty strings are fine\n      return true;\n    }\n  } catch (e) {}\n\n  return false;\n};\n\nexport default AppConfig;\n","import { LogContext } from '@grafana/faro-web-sdk';\nimport { FetchError, logError, logInfo, logWarning } from '@grafana/runtime';\nimport pluginJson from '../plugin.json';\nimport packageJson from '../../package.json';\nimport { isRecord } from './narrowing';\n\nconst defaultContext = {\n  app: pluginJson.id,\n  version: packageJson.version,\n};\n\nexport const logger = {\n  info: (msg: string, context?: LogContext) => {\n    const ctx = { ...defaultContext, ...context };\n    console.log(msg, ctx);\n    attemptFaroInfo(msg, ctx);\n  },\n  warn: (msg: string, context?: LogContext) => {\n    const ctx = { ...defaultContext, ...context };\n    console.warn(msg, ctx);\n    attemptFaroWarn(msg, ctx);\n  },\n  error: (err: Error | unknown, context?: LogContext) => {\n    const ctx = { ...defaultContext, ...context };\n    console.error(err, ctx);\n    attemptFaroErr(err, ctx);\n  },\n};\n\nconst attemptFaroInfo = (msg: string, context?: LogContext) => {\n  try {\n    logInfo(msg, context);\n  } catch (e) {\n    console.warn('Failed to log faro event!');\n  }\n};\n\nconst attemptFaroWarn = (msg: string, context?: LogContext) => {\n  try {\n    logWarning(msg, context);\n  } catch (e) {\n    console.warn('Failed to log faro warning!', { msg, context });\n  }\n};\n/**\n * Checks unknown error for properties from Records like FetchError and adds them to the context\n * @param err\n * @param context\n */\nfunction populateFetchErrorContext(err: unknown | FetchError, context: LogContext) {\n  if (typeof err === 'object' && err !== null) {\n    if (isRecord(err)) {\n      Object.keys(err).forEach((key: string) => {\n        const value = err[key];\n        if (typeof value === 'string' || typeof value === 'boolean' || typeof value === 'number') {\n          context[key] = value.toString();\n        }\n      });\n    }\n\n    if (hasData(err)) {\n      if (typeof err.data === 'object' && err.data !== null) {\n        try {\n          context.data = JSON.stringify(err.data);\n        } catch (e) {\n          // do nothing\n        }\n      } else if (typeof err.data === 'string' || typeof err.data === 'boolean' || typeof err.data === 'number') {\n        context.data = err.data.toString();\n      }\n    }\n  }\n}\n\nconst attemptFaroErr = (err: Error | FetchError | unknown, context2: LogContext) => {\n  let context = context2;\n  try {\n    populateFetchErrorContext(err, context);\n\n    if (err instanceof Error) {\n      logError(err, context);\n    } else if (typeof err === 'string') {\n      logError(new Error(err), context);\n    } else if (err && typeof err === 'object') {\n      if (context.msg) {\n        logError(new Error(context.msg), context);\n      } else {\n        logError(new Error('error object'), context);\n      }\n    } else {\n      logError(new Error('unknown error'), context);\n    }\n  } catch (e) {\n    console.error('Failed to log faro error!', { err, context });\n  }\n};\n\nconst hasData = (value: object): value is { data: unknown } => {\n  return 'data' in value;\n};\n","import { SelectedTableRow } from '../Components/Table/LogLineCellComponent';\nimport { LogsVisualizationType } from './store';\nimport { FieldValue, ParserType } from './variables';\nimport { LogsSortOrder, RawTimeRange } from '@grafana/data';\nconst isObj = (o: unknown): o is object => typeof o === 'object' && o !== null;\n\nfunction hasProp<K extends PropertyKey>(data: object, prop: K): data is Record<K, unknown> {\n  return prop in data;\n}\n\nconst isString = (s: unknown) => (typeof s === 'string' && s) || '';\n\nexport const isRecord = (obj: unknown): obj is Record<string, unknown> => typeof obj === 'object';\n\nexport function unknownToStrings(a: unknown): string[] {\n  let strings: string[] = [];\n  if (Array.isArray(a)) {\n    for (let i = 0; i < a.length; i++) {\n      strings.push(isString(a[i]));\n    }\n  }\n  return strings;\n}\n\nexport function narrowSelectedTableRow(o: unknown): SelectedTableRow | false {\n  const narrowed = isObj(o) && hasProp(o, 'row') && hasProp(o, 'id') && o;\n\n  if (narrowed) {\n    const row = typeof narrowed.row === 'number' && narrowed.row;\n    const id = typeof narrowed.id === 'string' && narrowed.id;\n    if (id !== false && row !== false) {\n      return { row, id };\n    }\n  }\n\n  return false;\n}\n\nexport function narrowLogsVisualizationType(o: unknown): LogsVisualizationType | false {\n  return typeof o === 'string' && (o === 'logs' || o === 'table') && o;\n}\nexport function narrowLogsSortOrder(o: unknown): LogsSortOrder | false {\n  if (typeof o === 'string' && o === LogsSortOrder.Ascending.toString()) {\n    return LogsSortOrder.Ascending;\n  }\n\n  if (typeof o === 'string' && o === LogsSortOrder.Descending.toString()) {\n    return LogsSortOrder.Descending;\n  }\n\n  return false;\n}\n\nexport function narrowFieldValue(o: unknown): FieldValue | false {\n  const narrowed = isObj(o) && hasProp(o, 'value') && hasProp(o, 'parser') && o;\n\n  if (narrowed) {\n    const parser: ParserType | false =\n      typeof narrowed.parser === 'string' &&\n      (narrowed.parser === 'logfmt' ||\n        narrowed.parser === 'json' ||\n        narrowed.parser === 'mixed' ||\n        narrowed.parser === 'structuredMetadata') &&\n      narrowed.parser;\n    const value = typeof narrowed.value === 'string' && narrowed.value;\n\n    if (parser !== false && value !== false) {\n      return { parser, value };\n    }\n  }\n\n  return false;\n}\n\nexport function narrowRecordStringNumber(o: unknown): Record<string, number> | false {\n  const narrowed = isObj(o) && isRecord(o) && o;\n\n  if (narrowed) {\n    const keys = Object.keys(narrowed);\n    const returnRecord: Record<string, number> = {};\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      const value = narrowed[keys[i]];\n      if (typeof value === 'number') {\n        returnRecord[key] = value;\n      }\n    }\n\n    return returnRecord;\n  }\n\n  return false;\n}\n\nexport function narrowTimeRange(unknownRange: unknown): RawTimeRange | undefined {\n  const range = isObj(unknownRange) && hasProp(unknownRange, 'to') && hasProp(unknownRange, 'from') && unknownRange;\n  if (range) {\n    const to = isString(range.to);\n    const from = isString(range.from);\n    if (to && from) {\n      return { to, from };\n    }\n  }\n\n  return undefined;\n}\n\nexport class NarrowingError extends Error {}\n"],"names":["getStyles","theme","colorWeak","css","colors","text","secondary","marginTop","spacing","marginTopXl","label","display","alignItems","marginBottom","icon","marginLeft","updatePluginAndReload","pluginId","data","updatePlugin","locationService","reload","e","logger","error","msg","testIds","container","interval","submit","response","getBackendSrv","fetch","url","method","lastValueFrom","isValid","seconds","rangeUtil","intervalToSeconds","isNumber","plugin","styles","useStyles2","enabled","pinned","jsonData","meta","state","setState","useState","div","data-testid","FieldSet","Field","invalid","description","span","br","className","Input","width","id","value","placeholder","onChange","event","target","trim","Button","type","onClick","disabled","defaultContext","app","pluginJson","version","info","context","ctx","console","log","attemptFaroInfo","warn","attemptFaroWarn","err","attemptFaroErr","logInfo","logWarning","context2","isRecord","Object","keys","forEach","key","toString","hasData","JSON","stringify","populateFetchErrorContext","Error","logError","isObj","o","hasProp","prop","isString","s","obj","unknownToStrings","a","strings","Array","isArray","i","length","push","narrowSelectedTableRow","narrowed","row","narrowLogsVisualizationType","narrowLogsSortOrder","LogsSortOrder","Ascending","Descending","narrowFieldValue","parser","narrowRecordStringNumber","returnRecord","narrowTimeRange","unknownRange","range","to","from","NarrowingError"],"sourceRoot":""}