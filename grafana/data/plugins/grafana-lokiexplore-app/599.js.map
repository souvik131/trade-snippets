{"version":3,"file":"599.js","mappings":"msBAmBA,MAwEMA,EAAaC,IAA0B,CAC3CC,UAAWC,EAAAA,GAAG;aACHF,EAAMG,OAAOC,KAAKC;IAE7BC,UAAWJ,EAAAA,GAAG;kBACEF,EAAMO,QAAQ;IAE9BC,YAAaN,EAAAA,GAAG;kBACAF,EAAMO,QAAQ;IAE9BE,OAAOP,EAAAA,EAAAA,KAAI,CACTQ,QAAS,OACTC,WAAY,SACZC,aAAcZ,EAAMO,QAAQ,OAE9BM,MAAMX,EAAAA,EAAAA,KAAI,CACRY,WAAYd,EAAMO,QAAQ,OAIxBQ,EAAAA,W,MAAwB,aAAOC,EAAkBC,GACrD,UACQC,EAAaF,EAAUC,GAI7BE,EAAAA,gBAAgBC,QAClB,CAAE,MAAOC,GACPC,EAAAA,EAAOC,MAAMF,EAAG,CAAEG,IAAK,mCACzB,CACF,I,gBAVqCR,EAAkBC,G,gCAAjDF,GAYAU,EACO,CACTC,UAAW,2BACXC,SAAU,gCACVC,OAAQ,8BAICV,EAAAA,W,MAAe,aAAOF,EAAkBC,GACnD,MAAMY,GAAWC,EAAAA,EAAAA,iBAAgBC,MAAM,CACrCC,IAAK,gBAAgBhB,aACrBiB,OAAQ,OACRhB,SAKF,aAF2BiB,EAAAA,EAAAA,eAAcL,IAErBZ,IACtB,I,gBAVmCD,EAAkBC,G,gCAAxCC,GAYPiB,EAAWR,IACf,IACE,GAAIA,EAAU,CACZ,MAAMS,EAAUC,EAAAA,UAAUC,kBAAkBX,GAC5C,OAAOY,EAAAA,EAAAA,UAASH,IAAYA,GAhIL,IAiIzB,CAEE,OAAO,CAEX,CAAE,MAAOf,GAAI,CAEb,OAAO,CAAK,EAGd,EAtIkB,EAAGmB,aACnB,MAAMC,GAASC,EAAAA,EAAAA,YAAW3C,IACpB,QAAE4C,EAAO,OAAEC,EAAM,SAAEC,GAAaL,EAAOM,K,IAGjCD,EACOA,EAFnB,MAAOE,EAAOC,IAAYC,EAAAA,EAAAA,UAAgB,CACxCtB,SAA4B,QAAlBkB,EAAAA,aAAAA,EAAAA,EAAUlB,gBAAVkB,IAAAA,EAAAA,EAAsB,GAChCV,QAASA,EAA0B,QAAlBU,EAAAA,aAAAA,EAAAA,EAAUlB,gBAAVkB,IAAAA,EAAAA,EAAsB,MAYzC,OACE,kBAACK,MAAAA,CAAIC,cAAa1B,EAAkBC,WAClC,kBAAC0B,EAAAA,SAAQA,CAAC3C,MAAM,YACd,kBAAC4C,EAAAA,MAAKA,CACJC,SAAUnB,EAAQY,EAAMpB,UACxBJ,MAAO,2FACPgC,YACE,kBAACC,OAAAA,KAAK,iKAEgD,kBAACC,KAAAA,MAAK,+BAI9DhD,MAAO,+BACPiD,UAAWjB,EAAOnC,WAElB,kBAACqD,EAAAA,MAAKA,CACJC,MAAO,GACPC,GAAG,WACHV,cAAa1B,EAAkBE,SAC/BlB,MAAO,eACPqD,MAAOf,aAAAA,EAAAA,EAAOpB,SACdoC,YAAa,KACbC,SAhCgBC,IACxB,MAAMtC,EAAWsC,EAAMC,OAAOJ,MAAMK,O,QACpCnB,G,wUAAS,IACJD,G,WAAAA,CACHpB,WACAQ,QAASA,EAAQR,K,oVA+Bf,kBAACuB,MAAAA,CAAIQ,UAAWjB,EAAOnC,WACrB,kBAAC8D,EAAAA,OAAMA,CACLC,KAAK,SACLlB,cAAa1B,EAAkBG,OAC/B0C,QAAS,IACPvD,EAAsByB,EAAOM,KAAKe,GAAI,CACpClB,UACAC,SACAC,SAAU,CACRlB,SAAUoB,EAAMpB,YAItB4C,UAAWpC,EAAQY,EAAMpB,WAC1B,oB","sources":["webpack://grafana-lokiexplore-app/./Components/AppConfig/AppConfig.tsx"],"sourcesContent":["import { getBackendSrv, locationService } from '@grafana/runtime';\nimport { AppPluginMeta, GrafanaTheme2, PluginConfigPageProps, PluginMeta, rangeUtil } from '@grafana/data';\nimport { lastValueFrom } from 'rxjs';\nimport { css } from '@emotion/css';\nimport { Button, Field, FieldSet, Input, useStyles2 } from '@grafana/ui';\nimport React, { ChangeEvent, useState } from 'react';\nimport { isNumber } from 'lodash';\nimport { logger } from '../../services/logger';\n\nexport type JsonData = {\n  interval?: string;\n};\n\ntype State = {\n  interval: string;\n  isValid: boolean;\n};\n\n// 1 hour minimum\nconst MIN_INTERVAL_SECONDS = 3600;\n\ninterface Props extends PluginConfigPageProps<AppPluginMeta<JsonData>> {}\n\nconst AppConfig = ({ plugin }: Props) => {\n  const styles = useStyles2(getStyles);\n  const { enabled, pinned, jsonData } = plugin.meta;\n\n  const [state, setState] = useState<State>({\n    interval: jsonData?.interval ?? '',\n    isValid: isValid(jsonData?.interval ?? ''),\n  });\n\n  const onChangeInterval = (event: ChangeEvent<HTMLInputElement>) => {\n    const interval = event.target.value.trim();\n    setState({\n      ...state,\n      interval,\n      isValid: isValid(interval),\n    });\n  };\n\n  return (\n    <div data-testid={testIds.appConfig.container}>\n      <FieldSet label=\"Settings\">\n        <Field\n          invalid={!isValid(state.interval)}\n          error={'Interval is invalid. Please enter an interval longer then \"60m\". For example: 3d, 1w, 1m'}\n          description={\n            <span>\n              The maximum interval that can be selected in the time picker within the Explore Logs app. If empty, users\n              can select any time range interval in Explore Logs. <br />\n              Example values: 7d, 24h, 2w\n            </span>\n          }\n          label={'Maximum time picker interval'}\n          className={styles.marginTop}\n        >\n          <Input\n            width={60}\n            id=\"interval\"\n            data-testid={testIds.appConfig.interval}\n            label={`Max interval`}\n            value={state?.interval}\n            placeholder={`7d`}\n            onChange={onChangeInterval}\n          />\n        </Field>\n\n        <div className={styles.marginTop}>\n          <Button\n            type=\"submit\"\n            data-testid={testIds.appConfig.submit}\n            onClick={() =>\n              updatePluginAndReload(plugin.meta.id, {\n                enabled,\n                pinned,\n                jsonData: {\n                  interval: state.interval,\n                },\n              })\n            }\n            disabled={!isValid(state.interval)}\n          >\n            Save settings\n          </Button>\n        </div>\n      </FieldSet>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  colorWeak: css`\n    color: ${theme.colors.text.secondary};\n  `,\n  marginTop: css`\n    margin-top: ${theme.spacing(3)};\n  `,\n  marginTopXl: css`\n    margin-top: ${theme.spacing(6)};\n  `,\n  label: css({\n    display: 'flex',\n    alignItems: 'center',\n    marginBottom: theme.spacing(0.75),\n  }),\n  icon: css({\n    marginLeft: theme.spacing(1),\n  }),\n});\n\nconst updatePluginAndReload = async (pluginId: string, data: Partial<PluginMeta<JsonData>>) => {\n  try {\n    await updatePlugin(pluginId, data);\n\n    // Reloading the page as the changes made here wouldn't be propagated to the actual plugin otherwise.\n    // This is not ideal, however unfortunately currently there is no supported way for updating the plugin state.\n    locationService.reload();\n  } catch (e) {\n    logger.error(e, { msg: 'Error while updating the plugin' });\n  }\n};\n\nconst testIds = {\n  appConfig: {\n    container: 'data-testid ac-container',\n    interval: 'data-testid ac-interval-input',\n    submit: 'data-testid ac-submit-form',\n  },\n};\n\nexport const updatePlugin = async (pluginId: string, data: Partial<PluginMeta>) => {\n  const response = getBackendSrv().fetch({\n    url: `/api/plugins/${pluginId}/settings`,\n    method: 'POST',\n    data,\n  });\n\n  const dataResponse = await lastValueFrom(response);\n\n  return dataResponse.data;\n};\n\nconst isValid = (interval: string): boolean => {\n  try {\n    if (interval) {\n      const seconds = rangeUtil.intervalToSeconds(interval);\n      return isNumber(seconds) && seconds >= MIN_INTERVAL_SECONDS;\n    } else {\n      // Empty strings are fine\n      return true;\n    }\n  } catch (e) {}\n\n  return false;\n};\n\nexport default AppConfig;\n"],"names":["getStyles","theme","colorWeak","css","colors","text","secondary","marginTop","spacing","marginTopXl","label","display","alignItems","marginBottom","icon","marginLeft","updatePluginAndReload","pluginId","data","updatePlugin","locationService","reload","e","logger","error","msg","testIds","container","interval","submit","response","getBackendSrv","fetch","url","method","lastValueFrom","isValid","seconds","rangeUtil","intervalToSeconds","isNumber","plugin","styles","useStyles2","enabled","pinned","jsonData","meta","state","setState","useState","div","data-testid","FieldSet","Field","invalid","description","span","br","className","Input","width","id","value","placeholder","onChange","event","target","trim","Button","type","onClick","disabled"],"sourceRoot":""}