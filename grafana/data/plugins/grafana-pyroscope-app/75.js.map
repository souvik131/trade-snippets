{"version":3,"file":"75.js","mappings":"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","sources":["webpack://grafana-pyroscope-app/./shared/domain/prepareHistoryEntry.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/domain/events/EventTimeseriesDataReceived.ts","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/domain/types.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/infrastructure/series/http/DataSourceProxyClient.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/infrastructure/labels/http/LabelsApiClient.ts","webpack://grafana-pyroscope-app/./shared/infrastructure/MemoryCacheClient.ts","webpack://grafana-pyroscope-app/./shared/types/helpers/invariant.ts","webpack://grafana-pyroscope-app/./shared/infrastructure/AbstractRepository.ts","webpack://grafana-pyroscope-app/./shared/infrastructure/labels/LabelsApiClient.ts","webpack://grafana-pyroscope-app/./shared/infrastructure/labels/labelsRepository.ts","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/domain/helpers/areFiltersEqual.ts","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/domain/helpers/buildIsEmptyFilter.ts","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/domain/helpers/filtersToQuery.ts","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/domain/helpers/getLastFilter.ts","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/domain/helpers/isMultipleValuesOperator.ts","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/domain/helpers/isPartialFilter.ts","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/domain/helpers/isSwitchingOperatorMode.ts","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/domain/helpers/queryToFilters.ts","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/domain/helpers/toggleCompleteFilters.ts","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/domain/actions.ts","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/domain/helpers/getFilterUnderEdition.ts","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/domain/guards.ts","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/infrastructure/operatorsRepository.ts","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/domain/helpers/isPrivateLabel.ts","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/domain/services.ts","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/domain/states/autoSuggestProxy.ts","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/ui/constants.ts","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/domain/helpers/isRegexOperator.ts","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/domain/states/idle.ts","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/domain/states/loadLabels.ts","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/domain/states/loadLabelValues.ts","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/domain/states/loadOperators.ts","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/domain/stateMachine.ts","webpack://grafana-pyroscope-app/./shared/domain/localeCompare.ts","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/ui/selects/MultipleEditionSelect.tsx","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/ui/inputs/SingleEditionInput.tsx","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/ui/selects/SingleEditionSelect.tsx","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/ui/chiclets/ChicletAttributeOperator.tsx","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/ui/chiclets/ChicletAttributeOperatorValue.tsx","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/ui/chiclets/PartialChiclet.tsx","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/ui/chiclets/Chiclet.tsx","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/ui/chiclets/ChicletsList.tsx","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/ui/selects/SingleSelect.tsx","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/ui/selects/DisabledSelect.tsx","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/ui/selects/MultipleSelect.tsx","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/QueryBuilder.tsx","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/domain/useStateMachine.tsx","webpack://grafana-pyroscope-app/./shared/components/QueryBuilder/ui/hooks.ts","webpack://grafana-pyroscope-app/./shared/infrastructure/profile-metrics/getProfileMetric.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/infrastructure/pyroscope-data-sources.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/domain/variables/ProfileMetricVariable.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/domain/variables/ServiceNameVariable/ServiceNameVariable.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/domain/variables/ServiceNameVariable/domain/useBuildServiceNameOptions.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/domain/useBuildPyroscopeQuery.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/domain/variables/ProfilesDataSourceVariable.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/domain/variables/FiltersVariable/filters-ops.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/domain/variables/FiltersVariable/FiltersVariable.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/helpers/getSceneVariableValue.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneByVariableRepeaterGrid/components/ScenePanelTypeSwitcher.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/helpers/getColorByIndex.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/infrastructure/helpers/getSeriesLabelFieldName.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/infrastructure/helpers/getSeriesStatsValue.ts","webpack://grafana-pyroscope-app/./shared/domain/url-params/parseQuery.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/infrastructure/withPreventInvalidQuery.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/infrastructure/timeseries/buildTimeSeriesQueryRunner.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneByVariableRepeaterGrid/infrastructure/data-transformations.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneLabelValuesBarGauge.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/helpers/formatSingleSeriesDisplayName.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneLabelValuesHistogram.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneLabelValuesTable.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/helpers/computeRoundedTimeRange.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/infrastructure/labels/LabelsDataSource.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/infrastructure/series/helpers/getProfileMetricLabel.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneLabelValuesTimeseries/SceneTimeseriesMenu.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/helpers/getExploreUrl.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/domain/useGetPluginExtensionLink.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneLabelValuesTimeseries/SceneLabelValuesTimeseries.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/helpers/vizPanelBuilder.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneByVariableRepeaterGrid/components/SceneEmptyState/ui/useMousePosition.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneByVariableRepeaterGrid/components/SceneEmptyState/ui/GrotNotFound.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneByVariableRepeaterGrid/components/SceneEmptyState/ui/EmptyState.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneByVariableRepeaterGrid/components/SceneEmptyState/SceneEmptyState.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneByVariableRepeaterGrid/components/SceneErrorState/SceneErrorState.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneByVariableRepeaterGrid/components/SceneLayoutSwitcher.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneByVariableRepeaterGrid/components/SceneNoDataSwitcher.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneByVariableRepeaterGrid/components/SceneQuickFilter.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/infrastructure/favorites/FavoritesDataSource.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/infrastructure/helpers/interpolateQueryRunnerVariables.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/domain/actions/FavAction.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneByVariableRepeaterGrid/domain/sortFavGridItems.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneByVariableRepeaterGrid/SceneByVariableRepeaterGrid.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/domain/events/EventExpandPanel.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/domain/events/EventSelectLabel.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/domain/events/EventViewServiceFlameGraph.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/domain/events/EventViewServiceLabels.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/domain/events/EventViewServiceProfiles.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/domain/actions/SelectAction.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreAllServices/SceneExploreAllServices.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneDrawer.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/domain/variables/FavoriteVariable.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreFavorites/SceneExploreFavorites.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/domain/variables/GroupByVariable/GroupBySelector.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/domain/variables/GroupByVariable/GroupByVariable.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneMainServiceTimeseries.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/domain/events/EventViewDiffFlameGraph.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceLabels/components/SceneGroupByLabels/domain/events/EventSelectForCompare.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceLabels/components/SceneGroupByLabels/components/SceneLabelValuesGrid/components/SceneStatsPanel/ui/CompareAction.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceLabels/components/SceneGroupByLabels/components/SceneLabelValuesGrid/components/SceneStatsPanel/ui/StatsPanel.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceLabels/components/SceneGroupByLabels/components/SceneLabelValuesGrid/components/SceneStatsPanel/SceneStatsPanel.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceLabels/components/SceneGroupByLabels/components/SceneLabelValuesGrid/components/SceneLabelValuePanel.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceLabels/components/SceneGroupByLabels/components/SceneLabelValuesGrid/infrastructure/buildLabelValuesGridQueryRunner.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceLabels/components/SceneGroupByLabels/components/SceneLabelValuesGrid/SceneLabelValuesGrid.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceLabels/components/SceneGroupByLabels/domain/events/EventClearLabelFromFilters.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceLabels/components/SceneGroupByLabels/domain/events/EventExcludeLabelFromFilters.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceLabels/components/SceneGroupByLabels/domain/events/EventIncludeLabelInFilters.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceLabels/components/SceneGroupByLabels/domain/actions/IncludeExcludeAction/ui/FilterButtons.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceLabels/components/SceneGroupByLabels/domain/actions/IncludeExcludeAction/IncludeExcludeAction.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceLabels/components/SceneGroupByLabels/ui/CompareControls.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceLabels/components/SceneGroupByLabels/SceneGroupByLabels.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceLabels/SceneExploreServiceLabels.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceProfileTypes/SceneExploreServiceProfileTypes.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/domain/buildTimeRange.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/infrastructure/series/formatSeriesToProfileMetrics.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/infrastructure/series/formatSeriesToServices.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/infrastructure/series/http/DataSourceProxyClientBuilder.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/infrastructure/series/http/formatSeriesResponse.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/infrastructure/series/http/SeriesApiClient.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/infrastructure/series/http/seriesRepository.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/infrastructure/series/SeriesDataSource.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreDiffFlameGraph/components/SceneComparePanel/domain/events/EventEnableSyncTimeRanges.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreDiffFlameGraph/components/SceneComparePanel/domain/events/EventSyncRefresh.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreDiffFlameGraph/components/SceneComparePanel/domain/events/EventSyncTimeRanges.ts","webpack://grafana-pyroscope-app/./shared/components/SceneTimePickerWithoutSync/SceneTimePickerWithoutSync.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreDiffFlameGraph/components/SceneComparePanel/domain/parseUrlParam.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreDiffFlameGraph/components/SceneComparePanel/domain/RangeAnnotation.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreDiffFlameGraph/components/SceneComparePanel/components/SceneTimeRangeWithAnnotations.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreDiffFlameGraph/components/SceneComparePanel/domain/evaluateTimeRange.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreDiffFlameGraph/components/SceneComparePanel/domain/events/EventSwitchTimerangeSelectionMode.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreDiffFlameGraph/components/SceneComparePanel/domain/actions/SwitchTimeRangeSelectionModeAction.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreDiffFlameGraph/components/SceneComparePanel/infrastructure/buildCompareTimeSeriesQueryRunner.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreDiffFlameGraph/components/SceneComparePanel/ui/colors.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreDiffFlameGraph/components/SceneComparePanel/SceneComparePanel.tsx","webpack://grafana-pyroscope-app/./shared/domain/useToggleSidePanel.ts","webpack://grafana-pyroscope-app/./shared/ui/Panel/GrafanaPanelBox/DelayRender.tsx","webpack://grafana-pyroscope-app/./shared/ui/Panel/GrafanaPanelBox/PanelMenu.tsx","webpack://grafana-pyroscope-app/./shared/ui/Panel/GrafanaPanelBox/HoverWidget.tsx","webpack://grafana-pyroscope-app/./shared/ui/Panel/GrafanaPanelBox/TitleItem.tsx","webpack://grafana-pyroscope-app/./shared/ui/Panel/GrafanaPanelBox/PanelDescription.tsx","webpack://grafana-pyroscope-app/./shared/ui/Panel/GrafanaPanelBox/PanelStatus.tsx","webpack://grafana-pyroscope-app/./shared/ui/Panel/GrafanaPanelBox/GrafanaPanelBox.tsx","webpack://grafana-pyroscope-app/./shared/ui/Panel/Panel.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneAiPanel/components/AiButton/AIButton.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneAiPanel/components/AiButton/infrastructure/useFetchLlmPluginStatus.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneAiPanel/components/AiReply.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneAiPanel/components/FollowUpForm.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneAiPanel/domain/buildLlmPrompts.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/infrastructure/profiles/ProfileApiClient.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneAiPanel/SceneAiPanel.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneAiPanel/infrastructure/useFetchDotProfiles.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneAiPanel/infrastructure/cleanupDotResponse.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneAiPanel/domain/useOpenAiChatCompletions.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreDiffFlameGraph/domain/events/EventDiffAutoSelect.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreDiffFlameGraph/domain/events/EventDiffChoosePreset.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreDiffFlameGraph/components/SceneDiffFlameGraph/infrastructure/DiffProfileApiClient.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreDiffFlameGraph/components/SceneDiffFlameGraph/infrastructure/useFetchDiffProfile.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreDiffFlameGraph/components/SceneDiffFlameGraph/ui/MissingSelectionsBanner.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreDiffFlameGraph/components/SceneDiffFlameGraph/SceneDiffFlameGraph.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/GiveFeedbackButton.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreDiffFlameGraph/components/ScenePresetsPicker/ScenePresetsPicker.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreDiffFlameGraph/domain/behaviours/syncYAxis.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreDiffFlameGraph/SceneExploreDiffFlameGraph.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/infrastructure/VcsClient.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/components/GitHubContextProvider/infrastructure/GitSessionCookie.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/components/GitHubContextProvider/infrastructure/GitSessionCookieManager.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/components/GitHubContextProvider/domain/openLoginPopup.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/components/GitHubContextProvider/domain/githubLogin.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/components/GitHubContextProvider/domain/authFromUrl.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/components/GitHubContextProvider/domain/usePollGitHubPopup.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/components/GitHubContextProvider/GitHubContext.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/components/GitHubContextProvider/infrastructure/PrivateVcsClient.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/components/GitHubContextProvider/GitHubContextProvider.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/components/GitHubContextProvider/domain/generateNonce.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/components/GitHubContextProvider/domain/useGithubSessionCookie.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/infrastructure/flame-graph/buildFlameGraphQueryRunner.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/infrastructure/PprofRequest.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/infrastructure/PprofApiClient.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneExportMenu/domain/getExportFilename.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneExportMenu/infrastructure/flamegraphDotComApiClient.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneExportMenu/SceneExportMenu.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/components/GitHubContextProvider/useGitHubContext.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/domain/useGitHubIntegration.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/domain/buildStackTrace.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/components/AiSuggestionsPanel/domain/buildLlmSuggestionPrompts.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/components/AiSuggestionsPanel/domain/useAiSuggestionsPanel.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/components/AiSuggestionsPanel/domain/useOpenAiSuggestions.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/components/AiSuggestionsPanel/AiSuggestionsPanel.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/components/CodeContainer/domain/buildGithubUrlForFunction.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/components/CodeContainer/domain/buildLineProfiles.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/components/CodeContainer/domain/useCodeContainer.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/components/CodeContainer/infrastructure/useFetchVCSFile.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/domain/buildUnitFormatter.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/components/CodeContainer/ui/Code.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/components/CodeContainer/CodeContainer.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/components/GitHubRepository.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/domain/getCommitsWithSamples.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/domain/isGitHubRepository.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/domain/getRepositoryDetails.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/domain/convertPprofToFunctionDetails.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/infrastructure/fetchCommitsInfo.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/infrastructure/helpers/getTotalSum.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/infrastructure/helpers/sortByTotal.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/infrastructure/useFetchFunctionsDetails.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/domain/getRelativeTimeString.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/domain/formatCommitDate.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/ui/CommitOption.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/ui/CommitOptionSelected.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/ui/CommitSelect.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/ui/GitHubIntegrationBanner.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/ui/InlineSpinner.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/SceneFunctionDetailsPanel.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/domain/formatFileName.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/SceneFlameGraph.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreServiceFlameGraph/SceneExploreServiceFlameGraph.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneProfilesExplorer/components/domain/useHeader.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneProfilesExplorer/components/domain/builsShareableUrl.ts","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneProfilesExplorer/components/ui/ExplorationTypeSelector.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneProfilesExplorer/components/Header.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneProfilesExplorer/SceneProfilesExplorer.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/ProfilesExplorerView.tsx","webpack://grafana-pyroscope-app/./pages/ProfilesExplorerView/components/SceneExploreDiffFlameGraph/domain/types.ts","webpack://grafana-pyroscope-app/./shared/components/FlameGraph/components/infrastructure/flamegraphDotComApiClient.ts","webpack://grafana-pyroscope-app/./shared/components/FlameGraph/components/domain/getExportFilename.ts","webpack://grafana-pyroscope-app/./shared/components/FlameGraph/components/domain/useExportMenu.ts","webpack://grafana-pyroscope-app/./shared/components/FlameGraph/components/ExportMenu.tsx","webpack://grafana-pyroscope-app/./shared/components/FlameGraph/components/ExportData.tsx","webpack://grafana-pyroscope-app/./shared/components/FlameGraph/domain/flamebearerToDataFrameDTO.ts","webpack://grafana-pyroscope-app/./shared/components/FlameGraph/FlameGraph.tsx","webpack://grafana-pyroscope-app/./shared/domain/displayStatus.ts","webpack://grafana-pyroscope-app/./shared/domain/reportInteraction.ts","webpack://grafana-pyroscope-app/./shared/domain/url-params/useMaxNodesFromUrl.ts","webpack://grafana-pyroscope-app/./shared/domain/url-params/useUrlSearchParams.ts","webpack://grafana-pyroscope-app/./shared/infrastructure/settings/PluginSettings.ts","webpack://grafana-pyroscope-app/./shared/infrastructure/settings/settingsApiClient.ts","webpack://grafana-pyroscope-app/./shared/infrastructure/settings/useFetchPluginSettings.ts","webpack://grafana-pyroscope-app/./shared/infrastructure/tracking/useReportPageInitialized.ts"],"sourcesContent":["/**\n * Prepares browser history before a user action is called\n *\n * This can be called BEFORE a user action is triggered. It is expected that the app is using UrlSyncManager\n * and the user action will change at least one variable or state synced with the URL. Once any variable or\n * state synced with the URL is triggered, UrlSyncManager will take care of replacing the prepared history entry.\n */\nexport function prepareHistoryEntry() {\n  history.pushState(null, '');\n}\n","import { BusEventWithPayload, DataFrame } from '@grafana/data';\n\ninterface EventTimeseriesDataReceivedPayload {\n  series?: DataFrame[];\n}\n\nexport class EventTimeseriesDataReceived extends BusEventWithPayload<EventTimeseriesDataReceivedPayload> {\n  public static type = 'timeseries-data-received';\n}\n","import { State } from 'xstate';\n\nexport enum FilterKind {\n  'partial' = 'partial',\n  'attribute-operator-value' = 'attribute-operator-value',\n  'attribute-operator' = 'attribute-operator',\n}\n\nexport enum OperatorKind {\n  '=' = '=',\n  '!=' = '!=',\n  'in' = 'in',\n  'not-in' = 'not-in',\n  'is-empty' = 'is-empty',\n  '=~' = '=~',\n  '!~' = '!~',\n}\n\nexport type PartialFilter = {\n  id: string;\n  type: FilterKind;\n  attribute: Suggestion;\n  operator?: Suggestion;\n  value?: Suggestion;\n  active: boolean;\n};\n\nexport type CompleteFilter = {\n  id: string;\n  type: FilterKind;\n  attribute: Suggestion;\n  operator: Suggestion;\n  value: Suggestion;\n  active: boolean;\n};\n\nexport type Filter = PartialFilter | CompleteFilter;\n\nexport type CompleteFilters = CompleteFilter[];\n\nexport type Filters = [PartialFilter] | CompleteFilter[] | [...CompleteFilter[], PartialFilter];\n\nexport enum FilterPartKind {\n  attribute = 'attribute',\n  operator = 'operator',\n  value = 'value',\n}\n\nexport type Suggestion = {\n  value: string;\n  label: string;\n  description?: string;\n};\n\nexport type Suggestions = Suggestion[];\n\nexport enum SuggestionKind {\n  'attribute' = 'attribute',\n  'operator' = 'operator',\n  'value' = 'value',\n}\n\nexport type InputParams = {\n  query: string;\n  from: number;\n  to: number;\n  // TODO: after migrate the legacy comparison pages to Scenes, dataSourceUid will be mandatory\n  dataSourceUid?: string;\n};\n\nexport type Edition = {\n  filterId: string;\n  part: FilterPartKind;\n};\n\nexport type QueryBuilderContext = {\n  inputParams: InputParams;\n  query: string;\n  filters: Filters;\n  isQueryUpToDate: boolean;\n  edition: Edition | null;\n  suggestions: {\n    type: SuggestionKind | null;\n    items: Suggestions;\n    isVisible: boolean;\n    isLoading: boolean;\n    error: Error | null;\n    placeholder: string;\n    noOptionsMessage: string;\n    allowCustomValue: boolean;\n    multiple: boolean;\n    disabled: boolean;\n  };\n};\n\nexport type QueryBuilderSchema = {\n  states: {\n    idle: State<QueryBuilderContext, QueryBuilderEvent>;\n    loadLabels: State<QueryBuilderContext, QueryBuilderEvent>;\n    displayLabels: State<QueryBuilderContext, QueryBuilderEvent>;\n    loadLabelValues: State<QueryBuilderContext, QueryBuilderEvent>;\n    loadOperators: State<QueryBuilderContext, QueryBuilderEvent>;\n    displayOperators: State<QueryBuilderContext, QueryBuilderEvent>;\n    displayLabelValues: State<QueryBuilderContext, QueryBuilderEvent>;\n    autoSuggestProxy: State<QueryBuilderContext, QueryBuilderEvent>;\n  };\n};\n\ntype StartEvent = { type: 'START_INPUT' };\nexport type SelectEvent = { type: 'SELECT_SUGGESTION'; data: Suggestion };\ntype DiscardEvent = { type: 'DISCARD_SUGGESTIONS' };\nexport type EditEvent = { type: 'EDIT_FILTER'; data: Edition };\nexport type RemoveFilterEvent = { type: 'REMOVE_FILTER'; data: string }; // data = filterId\ntype RemoveLastFilterEvent = { type: 'REMOVE_LAST_FILTER' };\nexport type ChangeInputParamsEvent = { type: 'CHANGE_INPUT_PARAMS'; data: InputParams };\ntype ExecuteQueryEvent = { type: 'EXECUTE_QUERY' };\n\nexport type QueryBuilderEvent =\n  | StartEvent\n  | SelectEvent\n  | DiscardEvent\n  | EditEvent\n  | RemoveFilterEvent\n  | RemoveLastFilterEvent\n  | ChangeInputParamsEvent\n  | ExecuteQueryEvent;\n","import { config } from '@grafana/runtime';\nimport { HttpClient } from '@shared/infrastructure/http/HttpClient';\n\nexport class DataSourceProxyClient extends HttpClient {\n  dataSourceUid: string;\n\n  constructor(options: { dataSourceUid: string }) {\n    const { dataSourceUid } = options;\n\n    let { appSubUrl = '', bootData } = config;\n    if (appSubUrl?.at(-1) !== '/') {\n      // ensures that the API pathname is appended correctly (appUrl seems to always have it but better to be extra careful)\n      appSubUrl += '/';\n    }\n\n    super(`${appSubUrl}api/datasources/proxy/uid/${dataSourceUid}`, {\n      'content-type': 'application/json',\n      'X-Grafana-Org-Id': String(bootData?.user?.orgId || ''),\n    });\n\n    this.dataSourceUid = options.dataSourceUid;\n  }\n}\n","import { DataSourceProxyClient } from '../../series/http/DataSourceProxyClient';\n\nexport class LabelsApiClient extends DataSourceProxyClient {\n  static queryToMatchers(query: string) {\n    const labelsIndex = query.indexOf('{');\n\n    if (labelsIndex > 0) {\n      const profileTypeID = query.substring(0, labelsIndex);\n      return [`{__profile_type__=\\\"${profileTypeID}\\\", ${query.substring(labelsIndex + 1, query.length)}`];\n    }\n\n    if (labelsIndex === 0) {\n      return [query];\n    }\n\n    return [`{__profile_type__=\\\"${query}\\\"}`];\n  }\n\n  constructor(options: { dataSourceUid: string }) {\n    super(options);\n  }\n\n  async fetchLabels(query: string, from: number, to: number) {\n    return this._post('/querier.v1.QuerierService/LabelNames', {\n      matchers: LabelsApiClient.queryToMatchers(query),\n      start: from,\n      end: to,\n    }).then((response) => response.json());\n  }\n\n  async fetchLabelValues(labelId: string, query: string, from: number, to: number) {\n    return this._post('/querier.v1.QuerierService/LabelValues', {\n      name: labelId,\n      matchers: LabelsApiClient.queryToMatchers(query),\n      start: from,\n      end: to,\n    }).then((response) => response.json());\n  }\n\n  _post(pathname: string, body: Record<string, any>) {\n    return super.fetch(pathname, {\n      method: 'POST',\n      body: JSON.stringify(body),\n    });\n  }\n}\n","type CacheKeyable = { toString(): string };\n\nexport class MemoryCacheClient {\n  store = new Map<string, any>();\n\n  static buildCacheKey(args: CacheKeyable[]) {\n    let key = '';\n    for (const arg of args) {\n      key += String(arg);\n    }\n    return key;\n  }\n\n  get(args: CacheKeyable[]): any {\n    return this.store.get(MemoryCacheClient.buildCacheKey(args));\n  }\n\n  // TODO: TTL?\n  set(args: CacheKeyable[], data: any) {\n    this.store.set(MemoryCacheClient.buildCacheKey(args), data);\n  }\n\n  delete(args: CacheKeyable[]) {\n    this.store.delete(MemoryCacheClient.buildCacheKey(args));\n  }\n}\n","export function invariant(check: boolean, message: string): asserts check {\n  if (!check) {\n    throw new Error(message);\n  }\n}\n","import { ApiClient } from './http/ApiClient';\n\nexport abstract class AbstractRepository<T extends ApiClient, U> {\n  apiClient?: T;\n  cacheClient: U | undefined;\n\n  constructor(options: { apiClient?: T; cacheClient?: U }) {\n    this.apiClient = options.apiClient;\n    this.cacheClient = options?.cacheClient;\n  }\n\n  setApiClient(apiClient: T) {\n    this.apiClient = apiClient;\n  }\n\n  setCacheClient(cacheClient: U) {\n    this.cacheClient = cacheClient;\n  }\n\n  cancel(reason: any) {\n    this.apiClient!.abort(reason);\n  }\n}\n","import { ApiClient } from '@shared/infrastructure/http/ApiClient';\n\nexport class LabelsApiClient extends ApiClient {\n  static queryToMatchers(query: string) {\n    const labelsIndex = query.indexOf('{');\n\n    if (labelsIndex > 0) {\n      const profileTypeID = query.substring(0, labelsIndex);\n      return [`{__profile_type__=\\\"${profileTypeID}\\\", ${query.substring(labelsIndex + 1, query.length)}`];\n    }\n\n    if (labelsIndex === 0) {\n      return [query];\n    }\n\n    return [`{__profile_type__=\\\"${query}\\\"}`];\n  }\n\n  async fetchLabels(query: string, from: number, to: number) {\n    // all /querier requests: timerange in Unix time ms (unix * 1000)\n    return this._post('/querier.v1.QuerierService/LabelNames', {\n      matchers: LabelsApiClient.queryToMatchers(query),\n      start: from,\n      end: to,\n    }).then((response) => response.json());\n  }\n\n  async fetchLabelValues(labelId: string, query: string, from: number, to: number) {\n    // all /querier requests: timerange in Unix time ms (unix * 1000)\n    return this._post('/querier.v1.QuerierService/LabelValues', {\n      name: labelId,\n      matchers: LabelsApiClient.queryToMatchers(query),\n      start: from,\n      end: to,\n    }).then((response) => response.json());\n  }\n\n  _post(pathname: string, body: Record<string, any>) {\n    return super.fetch(pathname, {\n      method: 'POST',\n      body: JSON.stringify(body),\n    });\n  }\n}\n","import { MemoryCacheClient } from '@shared/infrastructure/MemoryCacheClient';\n\nimport { Suggestions } from '../../components/QueryBuilder/domain/types';\nimport { invariant } from '../../types/helpers/invariant';\nimport { AbstractRepository } from '../AbstractRepository';\nimport { LabelsApiClient } from './LabelsApiClient';\n\ntype ListLabelsOptions = {\n  query: string;\n  from: number;\n  to: number;\n};\n\ntype ListLabelValuesOptions = ListLabelsOptions & {\n  label: string;\n};\n\nclass LabelsRepository extends AbstractRepository<LabelsApiClient, MemoryCacheClient> {\n  cacheClient: MemoryCacheClient;\n\n  static isNotMetaLabelOrServiceName = (label: string) => !/^(__.+__|service_name)$/.test(label);\n\n  static parseLabelsResponse(json: Record<string, any>): Suggestions {\n    if (!Array.isArray(json.names)) {\n      return [];\n    }\n\n    const uniqueLabels: string[] = Array.from(new Set(json.names.filter(LabelsRepository.isNotMetaLabelOrServiceName)));\n\n    return uniqueLabels.map((label) => ({ value: label, label }));\n  }\n\n  static parseLabelValuesResponse(json: Record<string, any>): Suggestions {\n    if (!Array.isArray(json.names)) {\n      return [];\n    }\n\n    const labelValues: string[] = json.names;\n\n    return labelValues.map((label) => ({ value: label, label }));\n  }\n\n  constructor(options: { apiClient: LabelsApiClient; cacheClient: MemoryCacheClient }) {\n    super({ apiClient: options.apiClient });\n\n    this.cacheClient = options.cacheClient;\n  }\n\n  static assertParams(query: string, from: number, to: number) {\n    invariant(Boolean(query), 'Missing \"query\" parameter!');\n    invariant(from > 0 && to > 0 && to > from, 'Invalid timerange!');\n  }\n\n  async listLabels({ query, from, to }: ListLabelsOptions): Promise<Suggestions> {\n    LabelsRepository.assertParams(query, from, to);\n\n    const cacheParams = [this.apiClient!.baseUrl, query, from, to];\n\n    const labelsFromCacheP = this.cacheClient.get(cacheParams);\n    if (labelsFromCacheP) {\n      const json = await labelsFromCacheP;\n      const labels = LabelsRepository.parseLabelsResponse(json);\n\n      if (!labels.length) {\n        this.cacheClient.delete(cacheParams);\n      }\n\n      return labels;\n    }\n\n    const fetchP = this.apiClient!.fetchLabels(query, from, to);\n    this.cacheClient.set(cacheParams, fetchP);\n\n    try {\n      const json = await fetchP;\n      return LabelsRepository.parseLabelsResponse(json);\n    } catch (error) {\n      this.cacheClient.delete(cacheParams);\n      throw error;\n    }\n  }\n\n  async listLabelValues({ label, query, from, to }: ListLabelValuesOptions): Promise<Suggestions> {\n    LabelsRepository.assertParams(query, from, to);\n    invariant(Boolean(label), 'Missing label value!');\n\n    const cacheParams = [this.apiClient!.baseUrl, label, query, from, to];\n\n    const labelValuesFromCacheP = this.cacheClient.get(cacheParams);\n    if (labelValuesFromCacheP) {\n      const json = await labelValuesFromCacheP;\n      const labelValues = LabelsRepository.parseLabelsResponse(json);\n\n      if (!labelValues.length) {\n        this.cacheClient.delete(cacheParams);\n      }\n\n      return labelValues;\n    }\n\n    const fetchP = this.apiClient!.fetchLabelValues(label, query, from, to);\n    this.cacheClient.set(cacheParams, fetchP);\n\n    try {\n      const json = await fetchP;\n      return LabelsRepository.parseLabelValuesResponse(json);\n    } catch (error) {\n      this.cacheClient.delete(cacheParams);\n      throw error;\n    }\n  }\n}\n\nexport const labelsRepository = new LabelsRepository({\n  apiClient: new LabelsApiClient(),\n  cacheClient: new MemoryCacheClient(),\n});\n","import { FilterKind, Filters } from '../types';\n\nexport function areFiltersEqual(newFilters: Filters, previousFilters: Filters): boolean {\n  const newFiltersWithoutPartial = newFilters.filter(({ type }) => type !== FilterKind.partial);\n  const previousFiltersWithoutPartial = previousFilters.filter(({ type }) => type !== FilterKind.partial);\n\n  return (\n    newFiltersWithoutPartial.length === previousFiltersWithoutPartial.length &&\n    newFiltersWithoutPartial.every((filter) =>\n      previousFiltersWithoutPartial.find(\n        ({ type, attribute, operator, value }) =>\n          type === filter.type &&\n          attribute.value === filter.attribute.value &&\n          operator?.value === filter.operator?.value &&\n          value?.value === filter.value?.value\n      )\n    )\n  );\n}\n","import { Filter, FilterKind, OperatorKind } from '../types';\n\nconst IsEmptyFilter = {\n  type: FilterKind['attribute-operator'],\n  operator: {\n    value: OperatorKind['is-empty'],\n    label: 'is empty',\n  },\n  value: {\n    value: OperatorKind['is-empty'],\n    label: '',\n  },\n};\n\nexport const buildIsEmptyFilter = (filter: Filter) => ({ ...filter, ...IsEmptyFilter });\n","import { CompleteFilter, FilterKind, Filters, OperatorKind } from '../types';\n\nexport function filtersToQuery(query: string, filters: Filters) {\n  const labelsList = filters\n    .filter(({ type }) => type !== FilterKind.partial)\n    .map((filter) => {\n      const { attribute, operator, value } = filter as CompleteFilter;\n\n      switch (operator.value) {\n        case OperatorKind.in:\n          return `${attribute.value}=~\"${value.value}\"`;\n\n        case OperatorKind['not-in']:\n          return `${attribute.value}!~\"${value.value}\"`;\n\n        case OperatorKind['is-empty']:\n          return `${attribute.value}=\"\"`;\n\n        default:\n          return `${attribute.value}${operator.value}\"${value.value}\"`;\n      }\n    });\n\n  const [, serviceNameLabel] = query.match(/{.*(service_name=\"[^\"]*\").*}/) ?? [];\n\n  if (serviceNameLabel) {\n    labelsList.unshift(serviceNameLabel);\n  }\n\n  return query.replace(/{(.*)}$/, `{${labelsList.join(',')}}`);\n}\n","import { Filter, Filters } from '../types';\n\nexport const getLastFilter = (filters: Filters): Filter | null => filters.at(-1) || null;\n","import { OperatorKind } from '../types';\n\nexport const isMultipleValuesOperator = (operator: string | OperatorKind) =>\n  operator === OperatorKind['in'] || operator === OperatorKind['not-in'];\n","import { invariant } from '../../../../types/helpers/invariant';\nimport { Filter, FilterKind } from '../types';\n\nexport const isPartialFilter = (filter: Filter): boolean => {\n  invariant(Boolean(filter), 'The filter is falsy!');\n\n  return filter.type === FilterKind.partial;\n};\n","import { invariant } from '../../../../types/helpers/invariant';\nimport { Filter, OperatorKind } from '../types';\n\n/**\n * Determines if we switch from strict operators (=, !=) to loose ones (=~)\n *\n * This is used when/after editing a filter:\n * - to determine to which state to transition to (see states/loadOperators.ts and domain/guards.ts)\n * - to set the correct edition data after the switch (see domain/actions.ts - editFilterOperator)\n *\n * Returns true when the value should be edited after the switch\n */\nexport function isEditingOperatorMode(currentOperator: string, newOperator: string) {\n  if (currentOperator === newOperator) {\n    return false;\n  }\n\n  if (newOperator === OperatorKind['is-empty']) {\n    return false;\n  }\n\n  return (\n    [\n      OperatorKind['=~'],\n      OperatorKind['!~'],\n      OperatorKind['in'],\n      OperatorKind['not-in'],\n      OperatorKind['is-empty'],\n    ].includes(currentOperator as OperatorKind) ||\n    [OperatorKind['=~'], OperatorKind['!~'], OperatorKind['in'], OperatorKind['not-in']].includes(\n      newOperator as OperatorKind\n    )\n  );\n}\n\nexport function isSwitchingOperatorMode(filterUnderEdition: Filter, newOperator: string) {\n  invariant(typeof filterUnderEdition.operator !== 'undefined', 'No operator for the filter under edition!');\n\n  const currentOperator = filterUnderEdition.operator.value;\n\n  return isEditingOperatorMode(currentOperator, newOperator);\n}\n","import { nanoid } from 'nanoid';\n\nimport { FilterKind, Filters, OperatorKind } from '../types';\nimport { buildIsEmptyFilter } from './buildIsEmptyFilter';\n\nconst parseRawFilters = (rawFilters: string): string[][] => {\n  const matches = rawFilters.matchAll(/(\\w+)(=|!=|=~|!~)\"([^\"]*)\"/g);\n  return Array.from(matches).map(([, attribute, operator, value]) => [attribute, operator, value]);\n};\n\nconst LABELS_REGEX = /.+:[^{]+\\{(.+)\\}$/;\nconst REGEX_CHARS_REGEX = /.*(\\^|\\$|\\*|\\+|\\{|\\}|\\?).*/;\n\n// eslint-disable-next-line sonarjs/cognitive-complexity\nexport function queryToFilters(query: string): Filters {\n  // 'process_cpu:cpu:nanoseconds:cpu:nanoseconds{service_name=\"ebpf/gcp-logs-ops/grafana-agent\", namespace=\"gcp-logs-ops\"}'\n  if (!query) {\n    return [];\n  }\n\n  const rawLabels = query.match(LABELS_REGEX);\n  // [_, 'service_name=\"ebpf/gcp-logs-ops/grafana-agent\", namespace=\"gcp-logs-ops\"']\n  if (!rawLabels) {\n    return [];\n  }\n\n  const rawFilters = parseRawFilters(rawLabels[1]);\n\n  // [[service_name, =, ebpf/gcp-logs-ops/grafana-agent], [namespace, =, gcp-logs-ops]]\n\n  return (rawFilters as string[][])\n    .filter(([attribute]) => attribute !== 'service_name')\n    .map(([attribute, operator, value]) => {\n      const filter = {\n        id: nanoid(10),\n        type: FilterKind['attribute-operator-value'],\n        active: true,\n        attribute: { value: attribute, label: attribute },\n        operator: { value: operator, label: operator },\n        value: { value: value, label: value },\n      };\n\n      const shouldConvertToIsEmptyOperator = operator === OperatorKind['='] && value === '';\n      if (shouldConvertToIsEmptyOperator) {\n        return buildIsEmptyFilter(filter);\n      }\n\n      const shouldConvertToInNotInOperator =\n        [OperatorKind['=~'], OperatorKind['!~']].includes(operator as OperatorKind) && !REGEX_CHARS_REGEX.test(value);\n\n      if (shouldConvertToInNotInOperator) {\n        return {\n          ...filter,\n          operator:\n            operator === OperatorKind['=~']\n              ? { value: OperatorKind.in, label: 'in' }\n              : { value: OperatorKind['not-in'], label: 'not in' },\n          value: {\n            value: value,\n            label: value\n              .split('|')\n              .map((v) => v.trim())\n              .join(', '),\n          },\n        };\n      }\n\n      return filter;\n    });\n}\n","import { FilterKind, Filters } from '../types';\n\nexport const toggleCompleteFilters = (filters: Filters, active: boolean): Filters =>\n  filters.map((filter) => (filter.type !== FilterKind.partial ? { ...filter, active } : filter)) as Filters;\n","import { nanoid } from 'nanoid';\nimport { assign } from 'xstate';\n\nimport { LabelsApiClient } from '../../../../pages/ProfilesExplorerView/infrastructure/labels/http/LabelsApiClient';\nimport { labelsRepository } from '../../../infrastructure/labels/labelsRepository';\nimport { areFiltersEqual } from './helpers/areFiltersEqual';\nimport { buildIsEmptyFilter } from './helpers/buildIsEmptyFilter';\nimport { filtersToQuery } from './helpers/filtersToQuery';\nimport { getLastFilter } from './helpers/getLastFilter';\nimport { isMultipleValuesOperator } from './helpers/isMultipleValuesOperator';\nimport { isPartialFilter } from './helpers/isPartialFilter';\nimport { isEditingOperatorMode } from './helpers/isSwitchingOperatorMode';\nimport { queryToFilters } from './helpers/queryToFilters';\nimport { toggleCompleteFilters } from './helpers/toggleCompleteFilters';\nimport {\n  ChangeInputParamsEvent,\n  EditEvent,\n  FilterKind,\n  FilterPartKind,\n  Filters,\n  OperatorKind,\n  QueryBuilderContext,\n  RemoveFilterEvent,\n  SelectEvent,\n} from './types';\n\nfunction updateFiltersAndQuery(newFilters: Filters, context: QueryBuilderContext) {\n  const isQueryUpToDate = areFiltersEqual(newFilters, queryToFilters(context.inputParams.query));\n\n  return {\n    filters: isQueryUpToDate ? toggleCompleteFilters(newFilters, true) : newFilters,\n    query: filtersToQuery(context.query, newFilters),\n    isQueryUpToDate,\n  };\n}\n\nexport const actions: any = {\n  cancelAllLoad: () => {\n    labelsRepository.cancel('Discarded by user');\n  },\n  // FILTER ATTRIBUTES\n  setFilterAttribute: assign((context: QueryBuilderContext, event: SelectEvent) => {\n    const newFilters = [\n      ...context.filters,\n      { id: nanoid(10), type: FilterKind.partial, active: false, attribute: event.data },\n    ] as Filters;\n\n    return {\n      ...context,\n      filters: newFilters,\n      isQueryUpToDate: areFiltersEqual(newFilters, queryToFilters(context.inputParams.query)),\n    };\n  }),\n  editFilterAttribute: assign((context: QueryBuilderContext, event: SelectEvent) => {\n    if (context.edition === null) {\n      throw new Error('Cannot edit filter attribute without edition data!');\n    }\n\n    const { filterId } = context.edition;\n\n    const newFilters = context.filters.map((filter) =>\n      filter.id === filterId\n        ? {\n            ...filter,\n            attribute: event.data,\n            operator: undefined,\n            value: undefined,\n          }\n        : filter\n    ) as Filters;\n\n    return {\n      ...context,\n      filters: newFilters,\n      // note: we can only edit the attribute of partial filters, so no need to rebuild the query here\n      isQueryUpToDate: areFiltersEqual(newFilters, queryToFilters(context.inputParams.query)),\n      edition: null,\n    };\n  }),\n  // FILTER OPERATORS\n  setFilterOperator: assign((context: QueryBuilderContext, event: SelectEvent) => {\n    const newFilters = context.filters.map((filter) => {\n      if (!isPartialFilter(filter)) {\n        return filter;\n      }\n\n      const newOperator = event.data;\n\n      if (newOperator.value === OperatorKind['is-empty']) {\n        return buildIsEmptyFilter(filter);\n      }\n\n      return {\n        ...filter,\n        operator: newOperator,\n        value: undefined,\n      };\n    }) as Filters;\n\n    return {\n      ...context,\n      ...updateFiltersAndQuery(newFilters, context),\n    };\n  }),\n  // eslint-disable-next-line sonarjs/cognitive-complexity\n  editFilterOperator: assign((context: QueryBuilderContext, event: SelectEvent) => {\n    if (context.edition === null) {\n      throw new Error('Cannot edit filter operator without edition data!');\n    }\n\n    const { filterId } = context.edition;\n    const newOperator = event.data;\n    let newEdition = null;\n\n    const newFilters = context.filters.map((filter) => {\n      const previousOperator = filter.operator!.value;\n\n      if (filter.id !== filterId || previousOperator === newOperator.value) {\n        return filter;\n      }\n\n      if (newOperator.value === OperatorKind['is-empty']) {\n        return buildIsEmptyFilter({\n          ...filter,\n          active: false,\n        });\n      }\n\n      if (previousOperator === OperatorKind['is-empty']) {\n        filter.value = { value: '(no value)', label: '(no value)' };\n      }\n\n      if (!isPartialFilter(filter) && isEditingOperatorMode(previousOperator, newOperator.value)) {\n        newEdition = { ...context.edition, part: FilterPartKind.value };\n      }\n\n      return {\n        ...filter,\n        operator: newOperator,\n        value:\n          isMultipleValuesOperator(previousOperator) && !isMultipleValuesOperator(newOperator.value) && filter.value\n            ? {\n                value: filter.value.value.split('|').shift(),\n                label: filter.value.label.split(', ').shift(),\n              }\n            : filter.value,\n        active: false,\n      };\n    }) as Filters;\n\n    return {\n      ...context,\n      ...updateFiltersAndQuery(newFilters, context),\n      edition: newEdition,\n    };\n  }),\n  // FILTER VALUES\n  setFilterValue: assign((context: QueryBuilderContext, event: SelectEvent) => {\n    const newFilters = context.filters.map((filter) =>\n      isPartialFilter(filter)\n        ? {\n            ...filter,\n            type: FilterKind['attribute-operator-value'],\n            active: false,\n            value: event.data,\n          }\n        : filter\n    ) as Filters;\n\n    return {\n      ...context,\n      ...updateFiltersAndQuery(newFilters, context),\n    };\n  }),\n  editFilterValue: assign((context: QueryBuilderContext, event: SelectEvent) => {\n    if (context.edition === null) {\n      throw new Error('Cannot edit filter value without edition data!');\n    }\n\n    const { filterId } = context.edition;\n\n    const newFilters = context.filters.map((filter) =>\n      filter.id === filterId\n        ? {\n            ...filter,\n            type: FilterKind['attribute-operator-value'],\n            active: false,\n            value: event.data,\n          }\n        : filter\n    ) as Filters;\n\n    return {\n      ...context,\n      ...updateFiltersAndQuery(newFilters, context),\n      edition: null,\n    };\n  }),\n  // FILTER REMOVAL\n  removeFilter: assign((context: QueryBuilderContext, event: RemoveFilterEvent) => {\n    const filterId = event.data;\n    const newFilters = toggleCompleteFilters(context.filters.filter(({ id }) => id !== filterId) as Filters, false);\n\n    return {\n      ...context,\n      ...updateFiltersAndQuery(newFilters, context),\n    };\n  }),\n  removeLastFilter: assign((context: QueryBuilderContext) => {\n    const { filters } = context;\n\n    const lastFilter = getLastFilter(filters);\n    if (!lastFilter) {\n      return context;\n    }\n\n    if (isPartialFilter(lastFilter) && lastFilter.operator) {\n      const newFilters = filters.slice(0, filters.length - 1).concat({ ...lastFilter, operator: undefined }) as Filters;\n\n      return {\n        ...context,\n        filters: newFilters,\n        // query doesn't have to change\n        isQueryUpToDate: true,\n      };\n    }\n\n    const newFilters = filters.slice(0, filters.length - 1).map((filter) => ({ ...filter, active: false })) as Filters;\n\n    return {\n      ...context,\n      ...updateFiltersAndQuery(newFilters, context),\n    };\n  }),\n  // MISC\n  setEdition: assign({ edition: (context, event: EditEvent) => event.data }),\n  changeInputParams: assign((context: QueryBuilderContext, event: ChangeInputParamsEvent) => {\n    // TODO: remove this condition after migrating the legacy comparison pages to Scenes\n    // because dataSourceUid will always be provided\n    if (event.data.dataSourceUid) {\n      labelsRepository.setApiClient(new LabelsApiClient({ dataSourceUid: event.data.dataSourceUid }));\n    }\n\n    return {\n      inputParams: event.data,\n      query: event.data.query,\n      // See also buildStateMachine() in domain/stateMachine.ts\n      filters: queryToFilters(event.data.query),\n      isQueryUpToDate: true,\n    };\n  }),\n  activateFilters: assign((context: QueryBuilderContext) => ({\n    ...context,\n    ...updateFiltersAndQuery(context.filters, context),\n  })),\n};\n","import { invariant } from '../../../../types/helpers/invariant';\nimport { Filter, QueryBuilderContext } from '../types';\n\nexport function getFilterUnderEdition(context: QueryBuilderContext): Filter {\n  const { edition, filters } = context;\n\n  invariant(edition !== null, '\"edition\" is null!');\n\n  const filter = filters.find(({ id }) => id === edition.filterId);\n\n  invariant(filter !== undefined, 'Cannot find the filter under edition!');\n\n  return filter;\n}\n","import { getFilterUnderEdition } from './helpers/getFilterUnderEdition';\nimport { getLastFilter } from './helpers/getLastFilter';\nimport { isPartialFilter } from './helpers/isPartialFilter';\nimport { isSwitchingOperatorMode } from './helpers/isSwitchingOperatorMode';\nimport { EditEvent, FilterPartKind, QueryBuilderContext, QueryBuilderEvent, SelectEvent } from './types';\n\ntype CondFn<TContext, TEvent> = (context: TContext, event: TEvent) => boolean;\ntype Guards<TContext, TEvent> = Record<string, CondFn<TContext, TEvent>>;\n\nexport const guards: Guards<QueryBuilderContext, QueryBuilderEvent> = {\n  shouldSuggestAttributes: (context) => {\n    const lastFilter = getLastFilter(context.filters);\n    return !lastFilter || !isPartialFilter(lastFilter);\n  },\n  shouldSuggestOperators: (context) => {\n    return !getLastFilter(context.filters)?.operator;\n  },\n  shouldSuggestValues: (context) => {\n    const lastFilter = getLastFilter(context.filters);\n    return Boolean(lastFilter?.operator && !lastFilter?.value);\n  },\n  // edition only\n  isEditing: (context) => context.edition !== null,\n  shouldSuggestValuesAfterOperatorEdition: (context, event) => {\n    if (!context.edition) {\n      return false;\n    }\n\n    return isSwitchingOperatorMode(getFilterUnderEdition(context), (event as SelectEvent).data.value);\n  },\n  shouldNotSuggestValuesAfterOperatorEdition: (context, event) => {\n    if (!context.edition) {\n      return false;\n    }\n\n    return !isSwitchingOperatorMode(getFilterUnderEdition(context), (event as SelectEvent).data.value);\n  },\n  // after completion\n  hasPartialFilter: (context) => {\n    const lastFilter = getLastFilter(context.filters);\n    return Boolean(lastFilter && isPartialFilter(lastFilter));\n  },\n  shouldEditAttribute: (context, event) => (event as EditEvent).data.part === FilterPartKind.attribute,\n  shouldEditOperator: (context, event) => (event as EditEvent).data.part === FilterPartKind.operator,\n  shouldEditValue: (context, event) => (event as EditEvent).data.part === FilterPartKind.value,\n};\n","import { Suggestions } from '../domain/types';\n\nclass OperatorsRepository {\n  async list(): Promise<Suggestions> {\n    return [\n      { value: '=', label: '=' },\n      { value: '!=', label: '!=' },\n      { value: 'is-empty', label: 'is empty' },\n      { value: 'in', label: 'in', description: 'Is one of' },\n      { value: 'not-in', label: 'not in', description: 'Is not one of' },\n      { value: '=~', label: '=~', description: 'Matches regex' },\n      { value: '!~', label: '!~', description: 'Does not match regex' },\n    ];\n  }\n}\n\nexport const operatorsRepository = new OperatorsRepository();\n","export const isPrivateLabel = (label: string) => label.startsWith('__');\n","import { logger } from '@shared/infrastructure/tracking/logger';\n\nimport { labelsRepository } from '../../../infrastructure/labels/labelsRepository';\nimport { operatorsRepository } from '../infrastructure/operatorsRepository';\nimport { filtersToQuery } from './helpers/filtersToQuery';\nimport { getLastFilter } from './helpers/getLastFilter';\nimport { isPrivateLabel } from './helpers/isPrivateLabel';\nimport { FilterKind, Filters, QueryBuilderContext, QueryBuilderEvent, Suggestions } from './types';\n\ntype ServiceFn<TContext, TEvent> = (context: TContext, event: TEvent) => Promise<Suggestions | Error>;\ntype Services<TContext, TEvent> = Record<string, ServiceFn<TContext, TEvent>>;\n\nfunction handleError(error: Error, info: string) {\n  const isAbortError = error instanceof DOMException && error.name === 'AbortError';\n  if (isAbortError) {\n    return [];\n  }\n\n  logger.error(error, { info });\n  throw error;\n}\n\nexport const services: Services<QueryBuilderContext, QueryBuilderEvent> = {\n  fetchLabels: async (context) => {\n    const { from, to } = context.inputParams;\n\n    try {\n      const labels = await labelsRepository.listLabels({ query: context.query, from, to });\n\n      const publicLabels: Suggestions = [];\n      const privateLabels: Suggestions = [];\n\n      // place private labels at the bottom of the suggestions list\n      labels.forEach((label) => {\n        if (isPrivateLabel(label.value)) {\n          privateLabels.push(label);\n        } else {\n          publicLabels.push(label);\n        }\n      });\n\n      return [...publicLabels, ...privateLabels];\n    } catch (error) {\n      return handleError(error as Error, 'Error while fetching labels!');\n    }\n  },\n  fetchOperators: async () => {\n    try {\n      return await operatorsRepository.list();\n    } catch (error) {\n      return handleError(error as Error, 'Error while fetching operators!');\n    }\n  },\n  // TODO: refactor indeed\n  // eslint-disable-next-line sonarjs/cognitive-complexity\n  fetchLabelValues: async (context) => {\n    let { query, edition, suggestions } = context;\n    let targetFilter;\n\n    try {\n      if (edition) {\n        const filters = context.filters.filter((filter) => {\n          if (filter.id === edition!.filterId) {\n            targetFilter = filter;\n            return false;\n          }\n\n          return true;\n        }) as Filters;\n\n        if (!targetFilter) {\n          throw new Error(`Impossible to edit filter id=\"${edition.filterId}\": no filter found!`);\n        }\n\n        query = filtersToQuery(query, filters);\n      } else {\n        targetFilter = getLastFilter(context.filters);\n\n        if (targetFilter?.type !== FilterKind.partial) {\n          throw new Error('Impossible to load label values: no partial filter found!');\n        }\n      }\n\n      if (suggestions.disabled) {\n        return [];\n      }\n\n      const labelId = targetFilter.attribute.value;\n      const { from, to } = context.inputParams;\n\n      return await labelsRepository.listLabelValues({ label: labelId, query, from, to });\n    } catch (error) {\n      return handleError(error as Error, 'Error while fetching label values!');\n    }\n  },\n};\n","import { State, StateNodeConfig } from 'xstate';\n\nimport { QueryBuilderContext, QueryBuilderEvent } from '../types';\n\nexport const autoSuggestProxy: StateNodeConfig<\n  QueryBuilderContext,\n  State<QueryBuilderContext, QueryBuilderEvent>,\n  QueryBuilderEvent\n> = {\n  // epsilon transition to automatically suggests missing partial filter parts\n  always: [\n    {\n      cond: 'shouldSuggestOperators',\n      target: 'loadOperators',\n    },\n    {\n      cond: 'shouldSuggestValues',\n      target: 'loadLabelValues',\n    },\n    { target: 'idle' },\n  ],\n};\n","export const MESSAGES = {\n  FILTER_ADD: 'Filter by label values...',\n  SELECT_LABEL: 'Select a label...',\n  SELECT_OPERATOR: 'Select an operator...',\n  SELECT_VALUE: 'Select a value...',\n  SELECT_VALUES: 'Select values...',\n  TYPE_VALUE: 'Type a regex...',\n  LOADING: 'Loading...',\n  ERROR_LOAD: 'An unexpected error occurred while loading! Please try again.',\n  SUGGESTIONS_NONE: 'No suggestions available.',\n  SUGGESTIONS_DISABLED: 'Suggestions are disabled for this label.',\n};\n","import { OperatorKind } from '../types';\n\nexport const isRegexOperator = (operator: string | OperatorKind) =>\n  operator === OperatorKind['=~'] || operator === OperatorKind['!~'];\n","import { assign, State, StateNodeConfig } from 'xstate';\n\nimport { MESSAGES } from '../../ui/constants';\nimport { getLastFilter } from '../helpers/getLastFilter';\nimport { isMultipleValuesOperator } from '../helpers/isMultipleValuesOperator';\nimport { isPartialFilter } from '../helpers/isPartialFilter';\nimport { isRegexOperator } from '../helpers/isRegexOperator';\nimport { defaultContext } from '../stateMachine';\nimport { QueryBuilderContext, QueryBuilderEvent } from '../types';\n\nexport const idle: StateNodeConfig<\n  QueryBuilderContext,\n  State<QueryBuilderContext, QueryBuilderEvent>,\n  QueryBuilderEvent\n> = {\n  entry: [\n    'cancelAllLoad',\n    assign({\n      // eslint-disable-next-line sonarjs/cognitive-complexity\n      suggestions: (context) => {\n        let placeholder = MESSAGES.FILTER_ADD;\n        let allowCustomValue = false;\n        const lastFilter = getLastFilter(context.filters);\n\n        if (lastFilter && isPartialFilter(lastFilter)) {\n          if (!lastFilter.operator) {\n            placeholder = MESSAGES.SELECT_OPERATOR;\n          } else {\n            allowCustomValue = isRegexOperator(lastFilter.operator.value);\n\n            placeholder = isMultipleValuesOperator(lastFilter.operator.value)\n              ? MESSAGES.SELECT_VALUES\n              : allowCustomValue\n              ? MESSAGES.TYPE_VALUE\n              : MESSAGES.SELECT_VALUE;\n          }\n        }\n\n        return {\n          ...defaultContext.suggestions,\n          placeholder,\n          allowCustomValue,\n        };\n      },\n      edition: null,\n    }),\n  ],\n  on: {\n    START_INPUT: [\n      {\n        cond: 'shouldSuggestAttributes',\n        target: 'loadLabels',\n      },\n      {\n        cond: 'shouldSuggestOperators',\n        target: 'loadOperators',\n      },\n      {\n        cond: 'shouldSuggestValues',\n        target: 'loadLabelValues',\n      },\n    ],\n    EDIT_FILTER: [\n      {\n        cond: 'shouldEditAttribute',\n        target: 'loadLabels',\n        actions: ['setEdition'],\n      },\n      {\n        cond: 'shouldEditOperator',\n        target: 'loadOperators',\n        actions: ['setEdition'],\n      },\n      {\n        cond: 'shouldEditValue',\n        target: 'loadLabelValues',\n        actions: ['setEdition'],\n      },\n    ],\n    REMOVE_FILTER: [\n      {\n        cond: 'hasPartialFilter',\n        target: 'autoSuggestProxy',\n        actions: ['removeFilter'],\n      },\n      {\n        target: 'idle',\n        actions: ['removeFilter'],\n      },\n    ],\n    REMOVE_LAST_FILTER: {\n      target: 'idle',\n      actions: ['removeLastFilter'],\n    },\n    CHANGE_INPUT_PARAMS: {\n      target: 'idle',\n      actions: ['changeInputParams'],\n    },\n    EXECUTE_QUERY: {\n      target: 'idle',\n      actions: ['activateFilters'],\n    },\n  },\n};\n","import { assign, State, StateNodeConfig } from 'xstate';\n\nimport { MESSAGES } from '../../ui/constants';\nimport { defaultContext } from '../stateMachine';\nimport { QueryBuilderContext, QueryBuilderEvent, SuggestionKind, Suggestions } from '../types';\n\nexport const loadLabels: StateNodeConfig<\n  QueryBuilderContext,\n  State<QueryBuilderContext, QueryBuilderEvent>,\n  QueryBuilderEvent\n> = {\n  entry: assign({\n    suggestions: () => ({\n      ...defaultContext.suggestions,\n      isVisible: true,\n      isLoading: true,\n    }),\n  }),\n  invoke: {\n    id: 'fetchLabels',\n    src: 'fetchLabels',\n    onDone: {\n      target: 'displayLabels',\n      actions: assign({\n        suggestions: (context, event) => ({\n          ...context.suggestions,\n          items: (event.data as Suggestions).filter(\n            ({ value }) => !context.filters.some((filter) => filter.attribute?.value === value)\n          ),\n          isLoading: false,\n        }),\n      }),\n    },\n    onError: {\n      target: 'displayLabels',\n      actions: assign({\n        suggestions: (context, event) => ({\n          ...context.suggestions,\n          isLoading: false,\n          error: event.data,\n        }),\n      }),\n    },\n  },\n  on: {\n    DISCARD_SUGGESTIONS: 'idle',\n  },\n};\n\nexport const displayLabels: StateNodeConfig<\n  QueryBuilderContext,\n  State<QueryBuilderContext, QueryBuilderEvent>,\n  QueryBuilderEvent\n> = {\n  entry: assign({\n    suggestions: (context) => ({\n      ...context.suggestions,\n      type: SuggestionKind.attribute,\n      isVisible: true,\n      placeholder: MESSAGES.SELECT_LABEL,\n    }),\n  }),\n  on: {\n    DISCARD_SUGGESTIONS: 'idle',\n    SELECT_SUGGESTION: [\n      {\n        cond: 'isEditing',\n        target: 'loadOperators',\n        actions: ['editFilterAttribute'],\n      },\n      {\n        target: 'loadOperators',\n        actions: ['setFilterAttribute'],\n      },\n    ],\n    REMOVE_LAST_FILTER: {\n      target: 'idle',\n      actions: ['removeLastFilter'],\n    },\n  },\n};\n","import { assign, State, StateNodeConfig } from 'xstate';\n\nimport { invariant } from '../../../../types/helpers/invariant';\nimport { MESSAGES } from '../../ui/constants';\nimport { getFilterUnderEdition } from '../helpers/getFilterUnderEdition';\nimport { getLastFilter } from '../helpers/getLastFilter';\nimport { isMultipleValuesOperator } from '../helpers/isMultipleValuesOperator';\nimport { isPrivateLabel } from '../helpers/isPrivateLabel';\nimport { isRegexOperator } from '../helpers/isRegexOperator';\nimport { defaultContext } from '../stateMachine';\nimport { QueryBuilderContext, QueryBuilderEvent, SuggestionKind } from '../types';\n\nexport const loadLabelValues: StateNodeConfig<\n  QueryBuilderContext,\n  State<QueryBuilderContext, QueryBuilderEvent>,\n  QueryBuilderEvent\n> = {\n  entry: assign({\n    suggestions: (context) => {\n      const targetFilter = context.edition ? getFilterUnderEdition(context) : getLastFilter(context.filters);\n\n      invariant(typeof targetFilter?.operator !== undefined, 'No operator for the target filter!');\n\n      return {\n        ...defaultContext.suggestions,\n        disabled:\n          // don't fetch for these operators, an input will appear in the UI instead of a select\n          ['=~', '!~'].includes(targetFilter!.operator!.value) ||\n          // See https://github.com/grafana/pyroscope-app-plugin/issues/335\n          isPrivateLabel(targetFilter!.attribute!.value),\n        isVisible: true,\n        isLoading: true,\n      };\n    },\n  }),\n  invoke: {\n    id: 'fetchLabelValues',\n    src: 'fetchLabelValues',\n    onDone: {\n      target: 'displayLabelValues',\n      actions: assign({\n        suggestions: (context, event) => ({\n          ...context.suggestions,\n          items: event.data,\n          isLoading: false,\n        }),\n      }),\n    },\n    onError: {\n      target: 'displayLabelValues',\n      actions: assign({\n        suggestions: (context, event) => ({\n          ...context.suggestions,\n          items: [],\n          isLoading: false,\n          error: event.data,\n        }),\n      }),\n    },\n  },\n  on: {\n    DISCARD_SUGGESTIONS: 'idle',\n  },\n};\n\nexport const displayLabelValues: StateNodeConfig<\n  QueryBuilderContext,\n  State<QueryBuilderContext, QueryBuilderEvent>,\n  QueryBuilderEvent\n> = {\n  entry: assign({\n    // eslint-disable-next-line sonarjs/cognitive-complexity\n    suggestions: (context) => {\n      const targetFilter = context.edition ? getFilterUnderEdition(context) : getLastFilter(context.filters);\n\n      invariant(typeof targetFilter?.operator !== undefined, 'No operator for the target filter!');\n\n      const targetOperator = targetFilter!.operator!.value;\n\n      const allowCustomValue =\n        isRegexOperator(targetOperator) ||\n        // See https://github.com/grafana/pyroscope-app-plugin/issues/335\n        context.suggestions.disabled;\n\n      const multiple = isMultipleValuesOperator(targetOperator);\n\n      let placeholder: string;\n\n      if (allowCustomValue) {\n        placeholder = MESSAGES.TYPE_VALUE;\n      } else {\n        placeholder = multiple ? MESSAGES.SELECT_VALUES : MESSAGES.SELECT_VALUE;\n      }\n\n      let noOptionsMessage: string;\n\n      if (context.suggestions.error) {\n        noOptionsMessage = MESSAGES.ERROR_LOAD;\n      } else {\n        noOptionsMessage = context.suggestions.disabled ? MESSAGES.SUGGESTIONS_DISABLED : MESSAGES.SUGGESTIONS_NONE;\n      }\n\n      return {\n        ...context.suggestions,\n        type: SuggestionKind.value,\n        isVisible: true,\n        placeholder,\n        noOptionsMessage,\n        allowCustomValue,\n        multiple,\n      };\n    },\n  }),\n  on: {\n    DISCARD_SUGGESTIONS: 'idle',\n    SELECT_SUGGESTION: [\n      {\n        cond: 'isEditing',\n        target: 'autoSuggestProxy',\n        actions: ['editFilterValue'],\n      },\n      {\n        target: 'idle',\n        actions: ['setFilterValue'],\n      },\n    ],\n    REMOVE_LAST_FILTER: {\n      target: 'loadOperators',\n      actions: ['removeLastFilter'],\n    },\n  },\n};\n","import { assign, State, StateNodeConfig } from 'xstate';\n\nimport { MESSAGES } from '../../ui/constants';\nimport { defaultContext } from '../stateMachine';\nimport { QueryBuilderContext, QueryBuilderEvent, SuggestionKind } from '../types';\n\nexport const loadOperators: StateNodeConfig<\n  QueryBuilderContext,\n  State<QueryBuilderContext, QueryBuilderEvent>,\n  QueryBuilderEvent\n> = {\n  entry: assign({\n    suggestions: () => ({\n      ...defaultContext.suggestions,\n      isVisible: true,\n      isLoading: true,\n    }),\n  }),\n  invoke: {\n    id: 'fetchOperators',\n    src: 'fetchOperators',\n    onDone: {\n      target: 'displayOperators',\n      actions: assign({\n        suggestions: (context, event) => ({\n          ...context.suggestions,\n          items: event.data,\n          isLoading: false,\n        }),\n      }),\n    },\n    onError: {\n      target: 'displayOperators',\n      actions: assign({\n        suggestions: (context, event) => ({\n          ...context.suggestions,\n          items: [],\n          isLoading: false,\n          error: event.data,\n        }),\n      }),\n    },\n  },\n  on: {\n    DISCARD_SUGGESTIONS: 'idle',\n  },\n};\n\nexport const displayOperators: StateNodeConfig<\n  QueryBuilderContext,\n  State<QueryBuilderContext, QueryBuilderEvent>,\n  QueryBuilderEvent\n> = {\n  entry: assign({\n    suggestions: (context) => ({\n      ...context.suggestions,\n      type: SuggestionKind.operator,\n      isVisible: true,\n      placeholder: MESSAGES.SELECT_OPERATOR,\n      allowCustomValue: false,\n      multiple: false,\n    }),\n  }),\n  on: {\n    DISCARD_SUGGESTIONS: 'idle',\n    SELECT_SUGGESTION: [\n      // edition\n      {\n        cond: 'shouldSuggestValuesAfterOperatorEdition',\n        target: 'loadLabelValues',\n        actions: ['editFilterOperator'],\n      },\n      {\n        cond: 'shouldNotSuggestValuesAfterOperatorEdition',\n        target: 'autoSuggestProxy',\n        actions: ['editFilterOperator'],\n      },\n      // no edition\n      {\n        cond: 'hasPartialFilter',\n        target: 'autoSuggestProxy',\n        actions: ['setFilterOperator'],\n      },\n      {\n        target: 'loadLabelValues',\n        actions: ['setFilterOperator'],\n      },\n    ],\n    REMOVE_LAST_FILTER: {\n      target: 'loadLabels',\n      actions: ['removeLastFilter'],\n    },\n  },\n};\n","import { createMachine, interpret, Interpreter, type MachineConfig, type MachineOptions } from 'xstate';\n\nimport { actions } from './actions';\nimport { guards } from './guards';\nimport { queryToFilters } from './helpers/queryToFilters';\nimport { services } from './services';\nimport { autoSuggestProxy } from './states/autoSuggestProxy';\nimport { idle } from './states/idle';\nimport { displayLabels, loadLabels } from './states/loadLabels';\nimport { displayLabelValues, loadLabelValues } from './states/loadLabelValues';\nimport { displayOperators, loadOperators } from './states/loadOperators';\nimport { InputParams, QueryBuilderContext, QueryBuilderEvent, QueryBuilderSchema } from './types';\n\nexport const defaultContext: QueryBuilderContext = Object.freeze({\n  inputParams: {\n    query: '',\n    from: 0,\n    to: 0,\n  },\n  query: '',\n  filters: [],\n  isQueryUpToDate: true,\n  edition: null,\n  suggestions: {\n    type: null,\n    items: [],\n    isVisible: false,\n    isLoading: false,\n    error: null,\n    placeholder: '',\n    noOptionsMessage: '',\n    allowCustomValue: false,\n    multiple: false,\n    disabled: false,\n  },\n});\n\nconst config = (\n  context: QueryBuilderContext\n): MachineConfig<QueryBuilderContext, QueryBuilderSchema, QueryBuilderEvent> => ({\n  id: 'query-builder',\n  initial: 'idle',\n  context,\n  predictableActionArguments: true,\n  states: {\n    idle,\n    loadLabels,\n    displayLabels,\n    loadOperators,\n    displayOperators,\n    loadLabelValues,\n    displayLabelValues,\n    autoSuggestProxy,\n  },\n});\n\nconst options: MachineOptions<QueryBuilderContext, QueryBuilderEvent> = {\n  guards,\n  services,\n  actions,\n};\n\nexport type Actor = Interpreter<QueryBuilderContext, QueryBuilderSchema, QueryBuilderEvent>;\n\nexport function buildStateMachine(inputParams: InputParams) {\n  const { query } = inputParams;\n\n  const initialContext: QueryBuilderContext = {\n    ...defaultContext,\n    inputParams,\n    query,\n    // See changeInputParams() in domain/actions.ts\n    filters: queryToFilters(query),\n  };\n\n  const stateMachine = createMachine(config(initialContext), options);\n\n  const actor = interpret(stateMachine) as unknown as Actor;\n\n  return { actor, initialContext };\n}\n","const collator = new Intl.Collator('en', { sensitivity: 'case' });\n\nexport const localeCompare = collator.compare;\n","import { css } from '@emotion/css';\nimport { SelectableValue } from '@grafana/data';\nimport { MultiSelect, useStyles2 } from '@grafana/ui';\nimport { localeCompare } from '@shared/domain/localeCompare';\nimport React, { useCallback, useMemo, useState } from 'react';\n\nimport { Suggestion, Suggestions } from '../../domain/types';\nimport { MESSAGES } from '../constants';\n\ntype MultipleEditionSelectProps = {\n  selection: Suggestion;\n  suggestions: any;\n  onCloseMenu: (values: Suggestions) => void;\n};\n\nconst placeSelectedValuesFirst = (values: Suggestions) => (a: Suggestion, b: Suggestion) => {\n  const aIsSelected = values.some((v) => v.value === a.value);\n  const bIsSelected = values.some((v) => v.value === b.value);\n\n  if (aIsSelected && bIsSelected) {\n    return localeCompare(a.value, b.value);\n  }\n\n  if (bIsSelected) {\n    return +1;\n  }\n\n  if (aIsSelected) {\n    return -1;\n  }\n\n  return 0;\n};\n\nexport function MultipleEditionSelect({ selection, suggestions, onCloseMenu }: MultipleEditionSelectProps) {\n  const styles = useStyles2(getStyles);\n\n  const defaultValue = useMemo(() => {\n    const selectionValues = selection.value.split('|');\n    const selectionLabels = selection.label.split(', ');\n    return selectionValues.map((v, i) => ({ value: v, label: selectionLabels[i] }));\n  }, [selection]);\n\n  const [values, setValues] = useState<Suggestions>(defaultValue);\n\n  // we don't sort when values change so that, for long lists, the user keeps the context they're in\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const sortedOptions = useMemo(() => suggestions.items.sort(placeSelectedValuesFirst(values)), [suggestions.items]);\n\n  const onChange = useCallback((newValues: Array<SelectableValue<string>>) => {\n    setValues(newValues.map(({ value = '', label = '' }) => ({ value, label })));\n  }, []);\n\n  const onInternalCloseMenu = useCallback(() => {\n    onCloseMenu(values);\n  }, [onCloseMenu, values]);\n\n  return (\n    <MultiSelect\n      className={styles.editionSelect}\n      placeholder={suggestions.placeholder}\n      loadingMessage={MESSAGES.LOADING}\n      closeMenuOnSelect={false}\n      hideSelectedOptions={false}\n      backspaceRemovesValue\n      // auto focus required when switching from another operator type\n      autoFocus\n      value={values}\n      onChange={onChange}\n      onCloseMenu={onInternalCloseMenu}\n      options={sortedOptions}\n      isOpen\n      isLoading={suggestions.isLoading}\n      invalid={Boolean(suggestions.error)}\n      noOptionsMessage={suggestions.noOptionsMessage}\n    />\n  );\n}\n\nconst getStyles = () => ({\n  editionSelect: css`\n    position: absolute;\n    z-index: 1;\n\n    [aria-label='Remove'] svg {\n      display: none;\n    }\n  `,\n});\n","import { css, cx } from '@emotion/css';\nimport { SelectableValue } from '@grafana/data';\nimport { Input, useStyles2 } from '@grafana/ui';\nimport React, { useEffect, useRef, useState } from 'react';\n\ntype SingleEditionInputProps = {\n  placeholder: string;\n  onChange: (suggestion: SelectableValue<string>) => void;\n  onBlur: () => void;\n  defaultValue?: string;\n  onFocus?: () => void;\n};\n\nexport function SingleEditionInput({ placeholder, defaultValue, onFocus, onChange, onBlur }: SingleEditionInputProps) {\n  const styles = useStyles2(getStyles);\n\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [invalid, setInvalid] = useState(false);\n\n  const onKeyUp = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    const value = (e.target as HTMLInputElement).value.trim();\n\n    // TODO: introduce an \"is empty\" value to handle this case (so that the filter will be synced in the URL)?\n    // see https://github.com/grafana/explore-profiles/pull/205\n    if (e.code === 'Enter') {\n      if (value) {\n        onChange({ value, label: value });\n      } else {\n        setInvalid(true);\n      }\n    }\n  };\n\n  const onInternalBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n    const value = (e.target as HTMLInputElement).value.trim();\n\n    // TODO: introduce an \"is empty\" value to handle this case (so that the filter will be synced in the URL)?\n    // see https://github.com/grafana/explore-profiles/pull/205\n    if (value) {\n      onChange({ value, label: value });\n    } else {\n      onBlur();\n    }\n  };\n\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, []);\n\n  return (\n    <Input\n      ref={inputRef}\n      className={cx(defaultValue && styles.edition)}\n      invalid={invalid}\n      placeholder={placeholder}\n      defaultValue={defaultValue}\n      onFocus={onFocus}\n      onKeyUp={onKeyUp}\n      onBlur={onInternalBlur}\n    />\n  );\n}\n\nconst getStyles = () => ({\n  edition: css`\n    position: absolute;\n    z-index: 1;\n  `,\n});\n","import { css } from '@emotion/css';\nimport { SelectableValue } from '@grafana/data';\nimport { Select, useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { Suggestion } from '../../domain/types';\nimport { MESSAGES } from '../constants';\nimport { SingleEditionInput } from '../inputs/SingleEditionInput';\n\nconst getStyles = () => ({\n  editionSelect: css`\n    position: absolute;\n    z-index: 1;\n    min-width: 160px;\n    box-shadow: none;\n\n    & input:focus {\n      outline: none !important;\n    }\n  `,\n});\n\ntype EditionSelectProps = {\n  selection: Suggestion;\n  suggestions: any;\n  onChange: (suggestion: SelectableValue<string>) => void;\n  onCloseMenu: () => void;\n};\n\nexport function SingleEditionSelect({ selection, suggestions, onChange, onCloseMenu }: EditionSelectProps) {\n  const styles = useStyles2(getStyles);\n\n  if (suggestions.allowCustomValue) {\n    return (\n      <SingleEditionInput\n        defaultValue={selection.value}\n        placeholder={suggestions.placeholder}\n        onChange={onChange}\n        onBlur={onCloseMenu}\n      />\n    );\n  }\n\n  return (\n    <Select\n      className={styles.editionSelect}\n      placeholder={suggestions.placeholder}\n      loadingMessage={MESSAGES.LOADING}\n      closeMenuOnSelect={false}\n      autoFocus\n      value={selection.value}\n      onChange={onChange}\n      onCloseMenu={onCloseMenu}\n      options={suggestions.items}\n      isOpen\n      isLoading={suggestions.isLoading}\n      invalid={Boolean(suggestions.error)}\n      noOptionsMessage={suggestions.noOptionsMessage}\n    />\n  );\n}\n","import { cx } from '@emotion/css';\nimport { Tag, useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { CompleteFilter, FilterPartKind } from '../../domain/types';\nimport { getStyles } from './Chiclet';\n\ntype ChicletAttributeOperatorValueProps = {\n  filter: CompleteFilter;\n  onClick: (event: React.MouseEvent<HTMLElement>, filter: CompleteFilter, part: FilterPartKind) => void;\n  onRemove: (event: React.MouseEvent<HTMLElement>, filter: CompleteFilter) => void;\n};\n\nconst noOp = () => {};\n\nexport const ChicletAttributeOperator = ({ filter, onClick, onRemove }: ChicletAttributeOperatorValueProps) => {\n  const styles = useStyles2(getStyles);\n\n  const { attribute, operator, active } = filter;\n  const className = active ? styles.chiclet : cx(styles.chiclet, styles.inactiveChiclet);\n\n  return (\n    <div className={className} aria-label=\"Filter\">\n      <Tag aria-label=\"Filter label\" className={styles.chicletAttribute} name={attribute.label} onClick={noOp} />\n\n      <Tag\n        aria-label=\"Filter operator\"\n        className={styles.chicletOperator}\n        name={operator.label}\n        onClick={(name, e) => onClick(e, filter, FilterPartKind.operator)}\n        tabIndex={0}\n      />\n\n      <Tag\n        aria-label=\"Remove filter\"\n        className={styles.chicletRemoveButton}\n        icon=\"times\"\n        name=\"\"\n        onClick={(name, e) => onRemove(e, filter)}\n        tabIndex={0}\n      />\n    </div>\n  );\n};\n","import { cx } from '@emotion/css';\nimport { Tag, Tooltip, useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { CompleteFilter, FilterPartKind } from '../../domain/types';\nimport { getStyles } from './Chiclet';\n\ntype ChicletAttributeOperatorValueProps = {\n  filter: CompleteFilter;\n  onClick: (event: React.MouseEvent<HTMLElement>, filter: CompleteFilter, part: FilterPartKind) => void;\n  onRemove: (event: React.MouseEvent<HTMLElement>, filter: CompleteFilter) => void;\n};\n\nconst noOp = () => {};\n\nexport const ChicletAttributeOperatorValue = ({ filter, onClick, onRemove }: ChicletAttributeOperatorValueProps) => {\n  const styles = useStyles2(getStyles);\n\n  const { attribute, operator, value, active } = filter;\n  const className = active ? styles.chiclet : cx(styles.chiclet, styles.inactiveChiclet);\n\n  return (\n    <div className={className} aria-label=\"Filter\">\n      <Tag aria-label=\"Filter label\" className={styles.chicletAttribute} name={attribute.label} onClick={noOp} />\n\n      <Tag\n        aria-label=\"Filter operator\"\n        className={styles.chicletOperator}\n        name={operator.label}\n        onClick={(name, e) => onClick(e, filter, FilterPartKind.operator)}\n        tabIndex={0}\n      />\n\n      <Tooltip content={value.label}>\n        <Tag\n          aria-label=\"Filter value\"\n          name={value.label}\n          className={styles.chicletValue}\n          onClick={(name, e) => onClick(e, filter, FilterPartKind.value)}\n          tabIndex={0}\n        />\n      </Tooltip>\n\n      <Tag\n        aria-label=\"Remove filter\"\n        className={styles.chicletRemoveButton}\n        icon=\"times\"\n        name=\"\"\n        onClick={(name, e) => onRemove(e, filter)}\n        tabIndex={0}\n      />\n    </div>\n  );\n};\n","import { cx } from '@emotion/css';\nimport { Tag, useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { FilterPartKind, PartialFilter } from '../../domain/types';\nimport { getStyles } from './Chiclet';\n\ntype PartialChicletProps = {\n  filter: PartialFilter;\n  onClick: (event: React.MouseEvent<HTMLElement>, filter: PartialFilter, part: FilterPartKind) => void;\n};\n\nexport const PartialChiclet = ({ filter, onClick }: PartialChicletProps) => {\n  const styles = useStyles2(getStyles);\n\n  const { attribute, operator } = filter;\n  if (!attribute && !operator) {\n    return null;\n  }\n\n  return (\n    <div className={cx(styles.chiclet, styles.partialChiclet)} aria-label=\"Partial filter\">\n      <Tag\n        colorIndex={9}\n        name={attribute.label}\n        title={`Edit \"${attribute.label}\"`}\n        onClick={(name, e) => onClick(e, filter, FilterPartKind.attribute)}\n        tabIndex={0}\n      />\n\n      {operator && (\n        <Tag\n          colorIndex={9}\n          name={operator.label}\n          title={`Edit \"${operator.label}\"`}\n          className={styles.chicletOperator}\n          onClick={(name, e) => onClick(e, filter, FilterPartKind.operator)}\n          tabIndex={0}\n        />\n      )}\n    </div>\n  );\n};\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport React, { memo } from 'react';\n\nimport { CompleteFilter, Filter, FilterKind, FilterPartKind } from '../../domain/types';\nimport { ChicletAttributeOperator } from './ChicletAttributeOperator';\nimport { ChicletAttributeOperatorValue } from './ChicletAttributeOperatorValue';\nimport { PartialChiclet } from './PartialChiclet';\n\ntype ChicletProps = {\n  filter: Filter;\n  onClick: (event: React.MouseEvent<HTMLElement>, filter: Filter, part: FilterPartKind) => void;\n  onRemove: (event: React.MouseEvent<HTMLElement>, filter: CompleteFilter) => void;\n};\n\nconst activeBackgroundColor = 'rgb(61, 113, 217)';\nconst activeTextColor = '#fff';\nconst inactiveBorderColor = '#4a4b52';\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  chiclet: css`\n    display: flex;\n    align-items: center;\n    border: 1px solid ${activeBackgroundColor};\n    border-radius: 2px;\n\n    & > button {\n      height: 30px;\n      background-color: ${theme.colors.background.primary};\n      color: ${theme.colors.text.maxContrast};\n    }\n\n    & > :first-child {\n      background-color: ${activeBackgroundColor};\n      color: ${activeTextColor};\n      border-radius: 0;\n\n      &:hover {\n        cursor: not-allowed !important;\n      }\n    }\n\n    & > :last-child {\n      border-left: 1px solid ${activeBackgroundColor};\n      border-top-left-radius: 0;\n      border-bottom-left-radius: 0;\n    }\n  `,\n  partialChiclet: css`\n    border-color: ${inactiveBorderColor};\n    border-right: 0;\n    border-top-right-radius: 0;\n    border-bottom-right-radius: 0;\n\n    & > :first-child {\n      background-color: ${theme.colors.background.secondary};\n      color: ${theme.colors.text.maxContrast};\n      border-radius: 0;\n      border-left: 0;\n\n      &:hover {\n        cursor: pointer !important;\n      }\n    }\n\n    & > :last-child {\n      border-color: ${inactiveBorderColor};\n      color: ${theme.colors.text.maxContrast};\n    }\n  `,\n  inactiveChiclet: css`\n    border-color: ${inactiveBorderColor};\n\n    & > button {\n      color: ${theme.colors.text.maxContrast};\n    }\n\n    & > :first-child {\n      background-color: ${theme.colors.background.secondary};\n      color: ${theme.colors.text.maxContrast};\n    }\n\n    & > :last-child {\n      border-color: ${inactiveBorderColor};\n    }\n  `,\n  chicletAttribute: css`\n    &:hover {\n      opacity: 1 !important;\n    }\n  `,\n  chicletOperator: css`\n    &:hover {\n      background-color: ${theme.colors.background.secondary};\n    }\n  `,\n  chicletValue: css`\n    flex-grow: 1;\n    text-align: left;\n    max-width: 420px;\n    text-overflow: ellipsis;\n    text-wrap: nowrap;\n    overflow: hidden;\n\n    &:hover {\n      background-color: ${theme.colors.background.secondary};\n    }\n  `,\n  chicletRemoveButton: css`\n    &:hover {\n      background-color: ${theme.colors.background.secondary};\n    }\n\n    & svg {\n      width: 12px;\n      height: 12px;\n    }\n  `,\n});\n\nconst ChicletComponent = ({ filter, onClick, onRemove }: ChicletProps) => {\n  switch (filter.type) {\n    case FilterKind.partial:\n      return <PartialChiclet filter={filter} onClick={onClick} />;\n\n    case FilterKind['attribute-operator-value']:\n      return <ChicletAttributeOperatorValue filter={filter as CompleteFilter} onClick={onClick} onRemove={onRemove} />;\n\n    case FilterKind['attribute-operator']:\n      return <ChicletAttributeOperator filter={filter as CompleteFilter} onClick={onClick} onRemove={onRemove} />;\n\n    default:\n      throw new TypeError(`Unsupported filter type \"${filter.type}\" (${JSON.stringify(filter)})!`);\n  }\n};\n\nexport const Chiclet = memo(\n  ChicletComponent,\n  (prevProps, nextProps) => JSON.stringify(prevProps.filter) === JSON.stringify(nextProps.filter)\n);\n","import { css } from '@emotion/css';\nimport { SelectableValue } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport React, { memo } from 'react';\n\nimport {\n  CompleteFilter,\n  Edition,\n  Filter,\n  FilterPartKind,\n  Filters,\n  QueryBuilderContext,\n  Suggestion,\n  Suggestions,\n} from '../../domain/types';\nimport { MultipleEditionSelect } from '../selects/MultipleEditionSelect';\nimport { SingleEditionSelect } from '../selects/SingleEditionSelect';\nimport { Chiclet } from './Chiclet';\n\nconst getStyles = () => ({\n  chicletsList: css`\n    display: flex;\n    align-items: center;\n    flex-wrap: wrap;\n    gap: 4px;\n  `,\n  editChicletContainer: css`\n    position: relative;\n  `,\n});\n\ntype ChicletsListProps = {\n  filters: Filters;\n  onClickChiclet: (event: React.MouseEvent<HTMLElement>, filter: Filter, part: FilterPartKind) => void;\n  onRemoveChiclet: (event: React.MouseEvent<HTMLElement>, filter: CompleteFilter) => void;\n  edition: Edition | null;\n  suggestions: QueryBuilderContext['suggestions'];\n  onChangeSingleSuggestion: (suggestion: SelectableValue<string>) => void;\n  onCloseSingleSuggestionsMenu: () => void;\n  onCloseMultipleSuggestionsMenu: (values: Suggestions) => void;\n};\n\nfunction ChicletsListComponent({\n  filters,\n  onClickChiclet,\n  onRemoveChiclet,\n  edition,\n  suggestions,\n  onChangeSingleSuggestion,\n  onCloseSingleSuggestionsMenu,\n  onCloseMultipleSuggestionsMenu,\n}: ChicletsListProps) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.chicletsList} data-testid=\"filtersList\">\n      {filters.map((filter) => (\n        <div key={filter.id} className={styles.editChicletContainer}>\n          <Chiclet filter={filter} onClick={onClickChiclet} onRemove={onRemoveChiclet} />\n\n          {edition?.filterId === filter.id ? (\n            !suggestions.multiple ? (\n              <SingleEditionSelect\n                // we add a key to force to unmount the component. this prevents the operator to stick when editing label values\n                key={edition.part}\n                selection={filter[edition.part] as Suggestion}\n                suggestions={suggestions}\n                onChange={onChangeSingleSuggestion}\n                onCloseMenu={onCloseSingleSuggestionsMenu}\n              />\n            ) : (\n              <MultipleEditionSelect\n                selection={filter[edition.part] as Suggestion}\n                suggestions={suggestions}\n                onCloseMenu={onCloseMultipleSuggestionsMenu}\n              />\n            )\n          ) : null}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport const ChicletsList = memo(ChicletsListComponent);\n","import { css } from '@emotion/css';\nimport { SelectableValue } from '@grafana/data';\nimport { Select, useStyles2 } from '@grafana/ui';\nimport React, { useEffect, useState } from 'react';\n\nimport { MESSAGES } from '../constants';\nimport { SingleEditionInput } from '../inputs/SingleEditionInput';\n\nexport const getStyles = () => ({\n  select: css`\n    border-top-right-radius: 0;\n    border-bottom-right-radius: 0;\n  `,\n});\n\ntype SingleSelectProps = {\n  suggestions: any;\n  onFocus: () => void;\n  onChange: (suggestion: SelectableValue<string>) => void;\n  onKeyDown: (event: any) => void;\n  onCloseMenu: () => void;\n};\n\n// we use this hack to force the select to open after (e.g.) editing an existing attribute\n// in this case, regardless that the `isOpen` prop of the <Select /> component is true\n// the dropdown does not appear on the UI\n// it seems it's a bug from the <Select /> component itself\n// TODO: report it!\nfunction useEnsureIsOpenHack(isVisible: boolean) {\n  const [isOpen, setIsOpen] = useState(false);\n\n  useEffect(() => {\n    if (isVisible && !isOpen) {\n      setTimeout(() => setIsOpen(true), 0);\n      return;\n    }\n\n    if (isVisible !== isOpen) {\n      setIsOpen(isVisible);\n    }\n  }, [isOpen, isVisible]);\n\n  return isOpen;\n}\n\nexport function SingleSelect({ suggestions, onFocus, onChange, onKeyDown, onCloseMenu }: SingleSelectProps) {\n  const styles = useStyles2(getStyles);\n  const isOpen = useEnsureIsOpenHack(suggestions.isVisible);\n\n  if (suggestions.allowCustomValue) {\n    return (\n      <SingleEditionInput\n        placeholder={suggestions.placeholder}\n        onFocus={onFocus}\n        onChange={onChange}\n        onBlur={onCloseMenu}\n      />\n    );\n  }\n\n  return (\n    <Select\n      className={styles.select}\n      placeholder={suggestions.placeholder}\n      loadingMessage={MESSAGES.LOADING}\n      closeMenuOnSelect={false}\n      value={null}\n      onFocus={onFocus}\n      onKeyDown={onKeyDown}\n      onChange={onChange}\n      onCloseMenu={onCloseMenu}\n      options={suggestions.items}\n      isOpen={isOpen}\n      isLoading={suggestions.isLoading}\n      invalid={Boolean(suggestions.error)}\n      noOptionsMessage={suggestions.noOptionsMessage}\n    />\n  );\n}\n","import { Select, useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { MESSAGES } from '../constants';\nimport { getStyles } from './SingleSelect';\n\nconst noOp = () => {};\n\nexport function DisabledSelect() {\n  const styles = useStyles2(getStyles);\n\n  return <Select disabled className={styles.select} placeholder={MESSAGES.FILTER_ADD} onChange={noOp} />;\n}\n","import { css } from '@emotion/css';\nimport { SelectableValue } from '@grafana/data';\nimport { MultiSelect, useStyles2 } from '@grafana/ui';\nimport React, { useCallback, useState } from 'react';\n\nimport { Suggestions } from '../../domain/types';\nimport { MESSAGES } from '../constants';\n\ntype MultipleSelectProps = {\n  suggestions: any;\n  onFocus: () => void;\n  onKeyDown: (event: any, values: Suggestions) => void;\n  onCloseMenu: (values: Suggestions) => void;\n};\n\nexport function MultipleSelect({ suggestions, onFocus, onKeyDown, onCloseMenu }: MultipleSelectProps) {\n  const styles = useStyles2(getStyles);\n  const [values, setValues] = useState<Suggestions>([]);\n\n  const onChange = useCallback((newValues: Array<SelectableValue<string>>) => {\n    setValues(newValues.map(({ value = '', label = '' }) => ({ value, label })));\n  }, []);\n\n  const onInternalKeyDown = useCallback(\n    (event: any) => {\n      onKeyDown(event, values);\n    },\n    [onKeyDown, values]\n  );\n\n  const onInternalCloseMenu = useCallback(() => {\n    onCloseMenu(values);\n  }, [onCloseMenu, values]);\n\n  return (\n    <MultiSelect\n      className={styles.select}\n      placeholder={suggestions.placeholder}\n      loadingMessage={MESSAGES.LOADING}\n      closeMenuOnSelect={false}\n      hideSelectedOptions={false}\n      backspaceRemovesValue\n      // auto focus required when switching from another operator type\n      autoFocus\n      value={values}\n      onFocus={onFocus}\n      onKeyDown={onInternalKeyDown}\n      onChange={onChange}\n      onCloseMenu={onInternalCloseMenu}\n      options={suggestions.items}\n      isOpen={suggestions.isVisible}\n      isLoading={suggestions.isLoading}\n      invalid={Boolean(suggestions.error)}\n      noOptionsMessage={suggestions.noOptionsMessage}\n    />\n  );\n}\n\nconst getStyles = () => ({\n  select: css`\n    [aria-label='Remove'] svg {\n      display: none;\n    }\n  `,\n});\n","import { css, cx } from '@emotion/css';\nimport { SelectableValue } from '@grafana/data';\nimport { Button, useStyles2 } from '@grafana/ui';\nimport { usePrevious } from '@shared/components/QueryBuilder/ui/hooks';\nimport React, { memo, useCallback, useEffect } from 'react';\nimport { StateListener } from 'xstate/lib/interpreter';\n\nimport { Actor } from './domain/stateMachine';\nimport {\n  CompleteFilter,\n  CompleteFilters,\n  Filter,\n  FilterPartKind,\n  QueryBuilderContext,\n  QueryBuilderEvent,\n  Suggestions,\n} from './domain/types';\nimport { useStateMachine } from './domain/useStateMachine';\nimport { ChicletsList } from './ui/chiclets/ChicletsList';\nimport { DisabledSelect } from './ui/selects/DisabledSelect';\nimport { MultipleSelect } from './ui/selects/MultipleSelect';\nimport { SingleSelect } from './ui/selects/SingleSelect';\n\nconst getStyles = () => ({\n  queryBuilder: css`\n    display: flex;\n    justify-content: flex-start;\n    align-items: flex-end;\n    flex-wrap: wrap;\n    gap: 4px;\n    width: 100%;\n  `,\n  controls: css`\n    display: flex;\n    align-self: flex-start;\n    flex-grow: 1;\n  `,\n  executeButton: css`\n    border-top-left-radius: 0;\n    border-bottom-left-radius: 0;\n  `,\n});\n\nexport type QueryBuilderProps = {\n  id: string;\n  // TODO: after migrate the legacy comparison pages to Scenes, dataSourceUid will be mandatory\n  dataSourceUid?: string;\n  query: string;\n  from: number;\n  to: number;\n  onChangeQuery: (newQuery: string, filters: CompleteFilters) => void;\n  className?: string;\n  autoExecute?: boolean;\n};\n\nfunction QueryBuilderComponent(props: QueryBuilderProps) {\n  const styles = useStyles2(getStyles);\n\n  const { actor, internalProps } = useStateMachine(props);\n  const { filters, edition, isQueryUpToDate, suggestions } = internalProps;\n\n  const { onClickChiclet, onRemoveChiclet } = useChicletHandlers(actor);\n\n  const {\n    onFocus,\n    onChangeSingleSuggestion,\n    onSingleSelectKeyDown,\n    onCloseSingleMenu,\n    onMultipleSelectKeyDown,\n    onCloseMultipleMenu,\n  } = useSelectHandlers(actor, suggestions, props.id);\n\n  const onClickExecute = useCallback(() => {\n    actor.send({ type: 'EXECUTE_QUERY' });\n  }, [actor]);\n\n  useEffect(() => {\n    if (!props.autoExecute) {\n      return;\n    }\n\n    const onTransition: StateListener<QueryBuilderContext, QueryBuilderEvent> = ({ value, context, event }) => {\n      if (value === 'idle' && !context.isQueryUpToDate && event.type !== 'EXECUTE_QUERY') {\n        actor.send({ type: 'EXECUTE_QUERY' });\n      }\n    };\n\n    actor.onTransition(onTransition);\n\n    return () => {\n      actor.off(onTransition);\n    };\n  }, [actor, props.autoExecute]);\n\n  return (\n    <div id={props.id} className={cx(styles.queryBuilder, props.className)}>\n      {filters.length > 0 ? (\n        <ChicletsList\n          filters={filters}\n          onClickChiclet={onClickChiclet}\n          onRemoveChiclet={onRemoveChiclet}\n          edition={edition}\n          suggestions={suggestions}\n          onChangeSingleSuggestion={onChangeSingleSuggestion}\n          onCloseSingleSuggestionsMenu={onCloseSingleMenu}\n          onCloseMultipleSuggestionsMenu={onCloseMultipleMenu}\n        />\n      ) : null}\n\n      <div className={styles.controls}>\n        {edition ? (\n          <DisabledSelect />\n        ) : suggestions.multiple ? (\n          <MultipleSelect\n            suggestions={suggestions}\n            onFocus={onFocus}\n            onKeyDown={onMultipleSelectKeyDown}\n            onCloseMenu={onCloseMultipleMenu}\n          />\n        ) : (\n          <SingleSelect\n            suggestions={suggestions}\n            onFocus={onFocus}\n            onChange={onChangeSingleSuggestion}\n            onKeyDown={onSingleSelectKeyDown}\n            onCloseMenu={onCloseSingleMenu}\n          />\n        )}\n\n        {!props.autoExecute && (\n          <Button\n            onClick={onClickExecute}\n            tooltip={!isQueryUpToDate ? 'Execute new query' : 'Nothing to execute, all filters applied'}\n            className={styles.executeButton}\n            disabled={isQueryUpToDate}\n          >\n            Execute\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n}\n\nfunction useChicletHandlers(actor: Actor) {\n  const onClickChiclet = useCallback(\n    (event: any, filter: Filter, part: FilterPartKind) => {\n      actor.send({ type: 'EDIT_FILTER', data: { filterId: filter.id, part } });\n    },\n    [actor]\n  );\n\n  const onRemoveChiclet = useCallback(\n    (event: any, filter: CompleteFilter) => {\n      actor.send({ type: 'REMOVE_FILTER', data: filter.id });\n    },\n    [actor]\n  );\n\n  return {\n    onClickChiclet,\n    onRemoveChiclet,\n  };\n}\n\n// eslint-disable-next-line sonarjs/cognitive-complexity\nfunction useSelectHandlers(actor: Actor, suggestions: QueryBuilderContext['suggestions'], queryBuilderId: string) {\n  /* single & multiple */\n  const onFocus = useCallback(() => {\n    actor.send({ type: 'START_INPUT' });\n  }, [actor]);\n\n  /* single only */\n  const onChangeSingleSuggestion = useCallback(\n    (suggestion: SelectableValue<string>) => {\n      const { value = '', label = '' } = suggestion;\n\n      actor.send({ type: 'SELECT_SUGGESTION', data: { value, label } });\n    },\n    [actor]\n  );\n\n  const onSingleSelectKeyDown = useCallback(\n    (event: any) => {\n      if (event.code === 'Backspace' && !event.target.value) {\n        actor.send({ type: 'REMOVE_LAST_FILTER' });\n      }\n    },\n    [actor]\n  );\n\n  const onCloseSingleMenu = useCallback(() => {\n    actor.send({ type: 'DISCARD_SUGGESTIONS' });\n  }, [actor]);\n\n  /* multiple only */\n  const onMultipleSelectKeyDown = useCallback(\n    (event: any, values: Suggestions) => {\n      if (event.code === 'Backspace' && !event.target.value && !values.length) {\n        actor.send({ type: 'REMOVE_LAST_FILTER' });\n      }\n    },\n\n    [actor]\n  );\n\n  const onCloseMultipleMenu = useCallback(\n    (values: Suggestions) => {\n      if (values.length) {\n        actor.send({\n          type: 'SELECT_SUGGESTION',\n          data: { value: values.map((v) => v.value).join('|'), label: values.map((v) => v.label).join(', ') },\n        });\n      } else {\n        actor.send({ type: 'DISCARD_SUGGESTIONS' });\n      }\n    },\n    [actor]\n  );\n\n  /* misc */\n\n  const previousSuggestionsIsVisible = usePrevious(suggestions.isVisible);\n\n  useEffect(() => {\n    if (!suggestions.isVisible && previousSuggestionsIsVisible) {\n      // ensures that the input is blurred when a filter has been completed.\n      // we could have used blurInputOnSelect but this allows us to handle properly the case of\n      // editing a complete filter operator from (e.g.) =~ to = (and vice-versa).\n      // indeed, in such cases, we know if the input should be blurred only after selecting a\n      // suggestion, when the select is already rendered.\n      (document.querySelector(`#${queryBuilderId} input`) as HTMLInputElement)?.blur();\n    }\n  }, [suggestions.isVisible, previousSuggestionsIsVisible, queryBuilderId]);\n\n  return {\n    onFocus,\n    onChangeSingleSuggestion,\n    onSingleSelectKeyDown,\n    onMultipleSelectKeyDown,\n    onCloseSingleMenu,\n    onCloseMultipleMenu,\n  };\n}\n\nexport const QueryBuilder = memo(QueryBuilderComponent);\n","import { useEffect, useMemo, useState } from 'react';\n\nimport { QueryBuilderProps } from '../QueryBuilder';\nimport { buildStateMachine } from './stateMachine';\nimport { CompleteFilters, QueryBuilderContext } from './types';\n\nexport function useStateMachine({ dataSourceUid, query, from, to, onChangeQuery }: QueryBuilderProps) {\n  const { actor, initialContext } = useMemo(\n    () => buildStateMachine({ query, from, to }),\n    // We don't want to build a new state machine when the props change, props change is handheld via the CHANGE_INPUT_PARAMS action below\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  );\n\n  useEffect(() => {\n    actor.send({ type: 'CHANGE_INPUT_PARAMS', data: { dataSourceUid, query, from, to } });\n  }, [actor, dataSourceUid, query, from, to]);\n\n  const [internalProps, setInternalProps] = useState<QueryBuilderContext>(initialContext);\n\n  useEffect(() => {\n    actor.start();\n\n    // actor.subscribe(({ value: state, event, context }) => {\n    //   logger.debug('*** %o', JSON.stringify(event));\n    //   logger.debug('***', JSON.stringify(context, null, 1));\n    //   logger.debug('*** ---------------------> \"%s\"', state);\n    actor.subscribe(({ event, context }) => {\n      if (event.type === 'EXECUTE_QUERY') {\n        onChangeQuery(context.query, context.filters as CompleteFilters);\n      }\n\n      setInternalProps(context);\n    });\n\n    return () => {\n      actor.stop();\n    };\n    // onChangeQuery is not a stable prop, we omit it to prevent multiple machine initializations that would end up in a broken UI\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [actor]);\n\n  return { actor, internalProps };\n}\n","/**\n * This is the same use react-use: usePrevious()\n * If more react-use like hooks are needed, we can consider adding react-use as a dependency\n */\nimport { useEffect, useRef } from 'react';\n\nexport function usePrevious<T>(state: T): T | undefined {\n  const ref = useRef<T>();\n\n  useEffect(() => {\n    ref.current = state;\n  });\n\n  return ref.current;\n}\n","import PROFILE_METRICS from './profile-metrics.json';\n\nexport type ProfileMetricId = keyof typeof PROFILE_METRICS;\n\nexport type ProfileMetric = {\n  id: ProfileMetricId;\n  description: string;\n  type: string;\n  group: string;\n  unit: string; // TODO: enum\n};\n\nexport function getProfileMetric(profileMetricId: ProfileMetricId): ProfileMetric {\n  if (PROFILE_METRICS[profileMetricId]) {\n    return PROFILE_METRICS[profileMetricId] as ProfileMetric;\n  }\n\n  const [group = '?', type = '?'] = profileMetricId ? profileMetricId.split(':') : [];\n\n  // TODO: add missing metrics (e.g. godeltaprof are not yet defined)\n  // logger.warn(`No profile metric found for id \"${profileMetricId}\"`);\n\n  return {\n    id: profileMetricId,\n    description: '',\n    type,\n    group,\n    unit: 'short',\n  };\n}\n","type DataSourceDef = {\n  type: string;\n  uid: string;\n};\n\nexport const PYROSCOPE_DATA_SOURCE: DataSourceDef = Object.freeze({\n  type: 'grafana-pyroscope-datasource',\n  uid: '$dataSource', // interpolated variable\n});\n\n/* Runtime data sources */\n\nexport const PYROSCOPE_SERIES_DATA_SOURCE: DataSourceDef = Object.freeze({\n  type: 'grafana-pyroscope-series-datasource',\n  uid: 'grafana-pyroscope-series-datasource',\n});\n\nexport const PYROSCOPE_FAVORITES_DATA_SOURCE: DataSourceDef = Object.freeze({\n  type: 'grafana-pyroscope-favorites-datasource',\n  uid: 'grafana-pyroscope-favorites-datasource',\n});\n\nexport const PYROSCOPE_LABELS_DATA_SOURCE: DataSourceDef = Object.freeze({\n  type: 'grafana-pyroscope-labels-datasource',\n  uid: 'grafana-pyroscope-labels-datasource',\n});\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2, VariableRefresh } from '@grafana/data';\nimport { MultiValueVariable, QueryVariable, SceneComponentProps, VariableValueOption } from '@grafana/scenes';\nimport { Cascader, CascaderOption, Icon, Tooltip, useStyles2 } from '@grafana/ui';\nimport { localeCompare } from '@shared/domain/localeCompare';\nimport { prepareHistoryEntry } from '@shared/domain/prepareHistoryEntry';\nimport { reportInteraction } from '@shared/domain/reportInteraction';\nimport { getProfileMetric, ProfileMetricId } from '@shared/infrastructure/profile-metrics/getProfileMetric';\nimport { nanoid } from 'nanoid';\nimport React, { useMemo } from 'react';\nimport { lastValueFrom } from 'rxjs';\n\nimport { PYROSCOPE_SERIES_DATA_SOURCE } from '../../infrastructure/pyroscope-data-sources';\n\ntype ProfileMetricOptions = Array<{\n  value: string;\n  label: string;\n  type: string;\n  group: string;\n}>;\n\ntype ProfileMetricVariableState = {\n  query: string;\n  skipUrlSync: boolean;\n};\n\nexport class ProfileMetricVariable extends QueryVariable {\n  static DEFAULT_VALUE = 'process_cpu:cpu:nanoseconds:cpu:nanoseconds';\n\n  // hack: subscribe to changes of dataSource only\n  static QUERY_DEFAULT = '$dataSource and all profile metrics';\n\n  // hack: subscribe to changes of dataSource and serviceName to avoid showing options that don't have any data associated\n  static QUERY_SERVICE_NAME_DEPENDENT = '$dataSource and only $serviceName profile metrics';\n\n  constructor(state?: ProfileMetricVariableState) {\n    super({\n      key: 'profileMetricId',\n      name: 'profileMetricId',\n      label: 'Profile type',\n      datasource: PYROSCOPE_SERIES_DATA_SOURCE,\n      query: ProfileMetricVariable.QUERY_DEFAULT,\n      loading: true,\n      refresh: VariableRefresh.onTimeRangeChanged,\n      ...state,\n    });\n\n    this.changeValueTo = this.changeValueTo.bind(this);\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  onActivate() {\n    if (!this.state.value) {\n      this.setState({ value: ProfileMetricVariable.DEFAULT_VALUE });\n    }\n  }\n\n  async update(force = false) {\n    if (!force && this.state.loading) {\n      return;\n    }\n\n    let options: VariableValueOption[] = [];\n    let error = null;\n\n    this.setState({ loading: true, options: [], error: null });\n\n    try {\n      options = await lastValueFrom(this.getValueOptions({}));\n    } catch (e) {\n      error = e;\n    } finally {\n      this.setState({ loading: false, options, error });\n    }\n  }\n\n  static buildCascaderOptions(options: ProfileMetricOptions): CascaderOption[] {\n    const optionsMap = new Map();\n\n    for (const { value } of options) {\n      const profileMetric = getProfileMetric(value as ProfileMetricId);\n      const { group, type } = profileMetric;\n\n      const nameSpaceServices = optionsMap.get(group) || {\n        value: group,\n        label: group,\n        items: [],\n      };\n\n      const items = nameSpaceServices.items || [];\n\n      items.push({\n        value,\n        label: type,\n      });\n\n      nameSpaceServices.items = items;\n\n      optionsMap.set(group, nameSpaceServices);\n    }\n\n    return Array.from(optionsMap.values()).sort((a, b) => localeCompare(b.label, a.label));\n  }\n\n  onSelect = (newValue: string) => {\n    reportInteraction('g_pyroscope_app_profile_metric_selected');\n\n    if (!this.state.skipUrlSync) {\n      prepareHistoryEntry();\n    }\n    this.changeValueTo(newValue);\n  };\n\n  static Component = ({ model }: SceneComponentProps<MultiValueVariable & { onSelect?: any }>) => {\n    const styles = useStyles2(getStyles);\n    const { loading, value, options, error } = model.useState();\n\n    const cascaderOptions = useMemo(() => {\n      return ProfileMetricVariable.buildCascaderOptions(options as ProfileMetricOptions);\n    }, [options]);\n\n    if (error) {\n      return (\n        <Tooltip theme=\"error\" content={error.toString()}>\n          <Icon className={styles.iconError} name=\"exclamation-triangle\" size=\"xl\" />\n        </Tooltip>\n      );\n    }\n\n    return (\n      <Cascader\n        // we add a key to ensure that the Cascader selects the initial value or available options properly when landing on the page\n        // and when switching exploration types, because the value might also be changed after the component has been rendered by SceneProfilesExplorer\n        key={nanoid(5)}\n        aria-label=\"Profile metrics list\"\n        width={24}\n        separator=\"/\"\n        displayAllSelectedLevels\n        placeholder={loading ? 'Loading...' : `Select a profile metric (${options.length})`}\n        options={cascaderOptions}\n        initialValue={value as string}\n        changeOnSelect={false}\n        onSelect={model.onSelect}\n      />\n    );\n  };\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  iconError: css`\n    height: 32px;\n    align-self: center;\n    color: ${theme.colors.error.text};\n  `,\n});\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2, VariableRefresh } from '@grafana/data';\nimport { MultiValueVariable, QueryVariable, SceneComponentProps, VariableValueOption } from '@grafana/scenes';\nimport { Cascader, Icon, Tooltip, useStyles2 } from '@grafana/ui';\nimport { prepareHistoryEntry } from '@shared/domain/prepareHistoryEntry';\nimport { reportInteraction } from '@shared/domain/reportInteraction';\nimport { userStorage } from '@shared/infrastructure/userStorage';\nimport { nanoid } from 'nanoid';\nimport React, { useMemo } from 'react';\nimport { lastValueFrom } from 'rxjs';\n\nimport { PYROSCOPE_SERIES_DATA_SOURCE } from '../../../infrastructure/pyroscope-data-sources';\nimport { buildServiceNameCascaderOptions } from './domain/useBuildServiceNameOptions';\n\ntype ServiceNameVariableState = {\n  query: string;\n  skipUrlSync: boolean;\n};\n\nexport class ServiceNameVariable extends QueryVariable {\n  // hack: subscribe to changes of dataSource only\n  static QUERY_DEFAULT = '$dataSource and all services';\n\n  // hack: subscribe to changes of dataSource and profileMetricId\n  static QUERY_PROFILE_METRIC_DEPENDENT = '$dataSource and only $profileMetricId services';\n\n  constructor(state?: ServiceNameVariableState) {\n    super({\n      key: 'serviceName',\n      name: 'serviceName',\n      label: 'Service',\n      datasource: PYROSCOPE_SERIES_DATA_SOURCE,\n      query: ServiceNameVariable.QUERY_DEFAULT,\n      loading: true,\n      refresh: VariableRefresh.onTimeRangeChanged,\n      ...state,\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  onActivate() {\n    const { serviceName: serviceNameFromStorage } = userStorage.get(userStorage.KEYS.PROFILES_EXPLORER) || {};\n\n    if (serviceNameFromStorage && !this.state.value) {\n      this.setState({ value: serviceNameFromStorage });\n    }\n\n    this.subscribeToState((newState, prevState) => {\n      if (newState.value && newState.value !== prevState.value) {\n        const storage = userStorage.get(userStorage.KEYS.PROFILES_EXPLORER) || {};\n        storage.serviceName = newState.value;\n        userStorage.set(userStorage.KEYS.PROFILES_EXPLORER, storage);\n      }\n    });\n  }\n\n  async update() {\n    if (this.state.loading) {\n      return;\n    }\n\n    let options: VariableValueOption[] = [];\n    let error = null;\n\n    this.setState({ loading: true, options: [], error: null });\n\n    try {\n      options = await lastValueFrom(this.getValueOptions({}));\n    } catch (e) {\n      error = e;\n    } finally {\n      this.setState({ loading: false, options, error });\n    }\n  }\n\n  selectNewValue = (newValue: string) => {\n    reportInteraction('g_pyroscope_app_service_name_selected');\n\n    if (!this.state.skipUrlSync) {\n      prepareHistoryEntry();\n    }\n\n    this.changeValueTo(newValue);\n  };\n\n  static Component = ({ model }: SceneComponentProps<MultiValueVariable & { selectNewValue?: any }>) => {\n    const styles = useStyles2(getStyles);\n    const { loading, value, options, error } = model.useState();\n\n    const cascaderOptions = useMemo(\n      () => buildServiceNameCascaderOptions(options.map(({ label }) => label)),\n      [options]\n    );\n\n    if (error) {\n      return (\n        <Tooltip theme=\"error\" content={error.toString()}>\n          <Icon className={styles.iconError} name=\"exclamation-triangle\" size=\"xl\" />\n        </Tooltip>\n      );\n    }\n\n    return (\n      <Cascader\n        // we add a key to ensure that the Cascader selects the initial value properly when landing on the page\n        // and when switching exploration types, because the value might also be changed after the component has been rendered by SceneProfilesExplorer\n        // (e.g. in SceneExploreServiceProfileTypes)\n        // it's also required for supporting the Investigations app when opening a link with a different data source\n        // than the one currently selected\n        key={nanoid(5)}\n        aria-label=\"Services list\"\n        width={32}\n        separator=\"/\"\n        displayAllSelectedLevels\n        placeholder={loading ? 'Loading services...' : `Select a service (${options.length})`}\n        options={cascaderOptions}\n        initialValue={value as string}\n        changeOnSelect={false}\n        onSelect={model.selectNewValue}\n      />\n    );\n  };\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  iconError: css`\n    height: 32px;\n    align-self: center;\n    color: ${theme.colors.error.text};\n  `,\n});\n","import { CascaderOption } from '@grafana/ui';\n\n// eslint-disable-next-line sonarjs/cognitive-complexity\nexport function buildServiceNameCascaderOptions(serviceNames: string[]) {\n  const options: CascaderOption[] = [];\n\n  for (const serviceId of serviceNames) {\n    // serviceId = ebpf/agent-logs/agent ; parts = [ebpf,agent-logs,agent]\n    const parts = serviceId.split('/');\n\n    let currentPart: string;\n    const currentValues = [];\n    let currentOptions = options;\n\n    for (let level = 0; level < parts.length; level += 1) {\n      currentPart = parts[level];\n      currentValues.push(currentPart);\n      const value = currentValues.join('/');\n\n      const existingOption = currentOptions.find((o) => o.value === value);\n\n      if (existingOption) {\n        currentOptions = existingOption.items as CascaderOption[];\n      } else {\n        const newOption = {\n          value,\n          label: currentPart,\n          // setting items only for non-terminal nodes is required by the Cascader component\n          // without it, the initial value would not be properly set in the UI\n          items: level < parts.length - 1 ? [] : undefined,\n        };\n\n        currentOptions.push(newOption);\n        currentOptions = newOption.items || [];\n      }\n    }\n  }\n\n  return options;\n}\n","import { sceneGraph, SceneObject } from '@grafana/scenes';\nimport { useMemo } from 'react';\n\nimport { FiltersVariable } from './variables/FiltersVariable/FiltersVariable';\nimport { ProfileMetricVariable } from './variables/ProfileMetricVariable';\nimport { ServiceNameVariable } from './variables/ServiceNameVariable/ServiceNameVariable';\n\nexport function useBuildPyroscopeQuery(sceneObject: SceneObject, filterKey: string) {\n  const { value: serviceName } = sceneGraph\n    .findByKeyAndType(sceneObject, 'serviceName', ServiceNameVariable)\n    .useState();\n\n  const { value: profileMetricId } = sceneGraph\n    .findByKeyAndType(sceneObject, 'profileMetricId', ProfileMetricVariable)\n    .useState();\n\n  const { filterExpression } = sceneGraph.findByKeyAndType(sceneObject, filterKey, FiltersVariable).useState();\n\n  return useMemo(\n    () => `${profileMetricId}{service_name=\"${serviceName}\",${filterExpression}}`,\n    [filterExpression, profileMetricId, serviceName]\n  );\n}\n","import { DataSourceVariable } from '@grafana/scenes';\nimport { ApiClient } from '@shared/infrastructure/http/ApiClient';\nimport { userStorage } from '@shared/infrastructure/userStorage';\n\nexport class ProfilesDataSourceVariable extends DataSourceVariable {\n  constructor() {\n    super({\n      pluginId: 'grafana-pyroscope-datasource',\n      key: 'dataSource',\n      name: 'dataSource',\n      label: 'Data source',\n      skipUrlSync: true,\n      // we ensure that we'll always have the expected default data source (when the \"var-dataSource\" URL search param is missing, incorrect, etc.)\n      value: ApiClient.selectDefaultDataSource().uid,\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  onActivate() {\n    this.setState({ skipUrlSync: false });\n\n    this.subscribeToState((newState, prevState) => {\n      if (newState.value && newState.value !== prevState.value) {\n        const storage = userStorage.get(userStorage.KEYS.PROFILES_EXPLORER) || {};\n        storage.dataSource = newState.value;\n        userStorage.set(userStorage.KEYS.PROFILES_EXPLORER, storage);\n      }\n    });\n  }\n}\n","import { AdHocVariableFilter } from '@grafana/data';\nimport { CompleteFilter, OperatorKind } from '@shared/components/QueryBuilder/domain/types';\n\nexport const convertPyroscopeToVariableFilter = (filter: CompleteFilter): AdHocVariableFilter => {\n  let newOperator = filter.operator.value;\n\n  if (filter.operator.value === OperatorKind['in']) {\n    newOperator = OperatorKind['=~'];\n  } else if (filter.operator.value === OperatorKind['not-in']) {\n    newOperator = OperatorKind['!~'];\n  }\n\n  return {\n    key: filter.attribute.value,\n    operator: newOperator,\n    value: filter.value.value,\n  };\n};\n\nfunction searchForFilter(filters: AdHocVariableFilter[], filterKey: string) {\n  let found: AdHocVariableFilter | undefined;\n\n  const filtersWithoutFound = filters.filter((f) => {\n    if (f.key === filterKey) {\n      found = f;\n      return false;\n    }\n\n    return true;\n  });\n\n  return { found, filtersWithoutFound };\n}\n\nconst addToFilters = (filters: AdHocVariableFilter[], filterToAdd: AdHocVariableFilter) => [...filters, filterToAdd];\n\nexport function includeLabelValue(\n  filters: AdHocVariableFilter[],\n  filterForInclude: AdHocVariableFilter\n): AdHocVariableFilter[] {\n  const { found, filtersWithoutFound } = searchForFilter(filters, filterForInclude.key);\n\n  if (!found) {\n    return addToFilters(filters, { ...filterForInclude, operator: '=~' });\n  }\n\n  if (['!~', '!='].includes(found.operator)) {\n    return addToFilters(filtersWithoutFound, { ...filterForInclude, operator: '=~' });\n  }\n\n  const foundValues = new Set(found.value.split('|'));\n\n  if (found.operator === '=~') {\n    return addToFilters(filtersWithoutFound, {\n      ...found,\n      value: Array.from(foundValues.add(filterForInclude.value)).join('|'),\n    });\n  }\n\n  // found.operator is '='\n  return found.value === filterForInclude.value\n    ? filters\n    : addToFilters(filtersWithoutFound, {\n        ...filterForInclude,\n        operator: '=~',\n        value: Array.from(foundValues.add(filterForInclude.value)).join('|'),\n      });\n}\n\nexport function excludeLabelValue(\n  filters: AdHocVariableFilter[],\n  filterForExclude: AdHocVariableFilter\n): AdHocVariableFilter[] {\n  const { found, filtersWithoutFound } = searchForFilter(filters, filterForExclude.key);\n\n  if (!found) {\n    return addToFilters(filters, { ...filterForExclude, operator: '!~' });\n  }\n\n  if (['=~', '='].includes(found.operator)) {\n    return addToFilters(filtersWithoutFound, { ...filterForExclude, operator: '!~' });\n  }\n\n  const foundValues = new Set(found.value.split('|'));\n\n  if (found.operator === '!~') {\n    return addToFilters(filtersWithoutFound, {\n      ...found,\n      value: Array.from(foundValues.add(filterForExclude.value)).join('|'),\n    });\n  }\n\n  // found.operator is '!='\n  return found.value === filterForExclude.value\n    ? filters\n    : addToFilters(filtersWithoutFound, {\n        ...filterForExclude,\n        operator: '!~',\n        value: Array.from(foundValues.add(filterForExclude.value)).join('|'),\n      });\n}\n\nexport function clearLabelValue(\n  filters: AdHocVariableFilter[],\n  filterForClear: AdHocVariableFilter\n): AdHocVariableFilter[] {\n  const { found, filtersWithoutFound } = searchForFilter(filters, filterForClear.key);\n\n  if (!found) {\n    return filters;\n  }\n\n  const filteredValues = found.value.split('|').filter((v) => v !== filterForClear.value);\n\n  if (filteredValues.length > 0) {\n    return addToFilters(filtersWithoutFound, {\n      ...found,\n      value: filteredValues.join('|'),\n    });\n  }\n\n  return [...filtersWithoutFound];\n}\n\nexport const isFilterValid = (filter: AdHocVariableFilter) => filter.operator in OperatorKind;\n","import { AdHocFiltersVariable, SceneComponentProps, sceneGraph, SceneObject } from '@grafana/scenes';\nimport { CompleteFilters, OperatorKind } from '@shared/components/QueryBuilder/domain/types';\nimport { QueryBuilder } from '@shared/components/QueryBuilder/QueryBuilder';\nimport { reportInteraction } from '@shared/domain/reportInteraction';\nimport { uniq } from 'lodash';\nimport React from 'react';\n\nimport { useBuildPyroscopeQuery } from '../../useBuildPyroscopeQuery';\nimport { ProfilesDataSourceVariable } from '../ProfilesDataSourceVariable';\nimport { convertPyroscopeToVariableFilter, isFilterValid } from './filters-ops';\n\nexport class FiltersVariable extends AdHocFiltersVariable {\n  static DEFAULT_VALUE = [];\n\n  constructor({ key }: { key: string }) {\n    super({\n      key,\n      name: key,\n      label: 'Filters',\n      filters: FiltersVariable.DEFAULT_VALUE,\n      expressionBuilder: (filters) =>\n        filters\n          // after parsing the URL search parameters the filters might end up having an invalid operator, which in turn, will\n          // generate an invalid query that will make the API requests fail - we prevent this to happen by sanitizing the filters here\n          .filter(isFilterValid)\n          .map(({ key, operator, value }) =>\n            operator === OperatorKind['is-empty'] ? `${key}=\"\"` : `${key}${operator}\"${value}\"`\n          )\n          .join(','),\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  reset() {\n    this.setState({ filters: FiltersVariable.DEFAULT_VALUE });\n  }\n\n  static resetAll(sceneObject: SceneObject) {\n    ['filters', 'filtersBaseline', 'filtersComparison'].forEach((filterKey) => {\n      sceneGraph.findByKeyAndType(sceneObject, filterKey, FiltersVariable).reset();\n    });\n  }\n\n  onActivate() {\n    // VariableDependencyConfig does not work :man_shrug: (never called)\n    const dataSourceSub = sceneGraph\n      .findByKeyAndType(this, 'dataSource', ProfilesDataSourceVariable)\n      .subscribeToState(() => {\n        this.reset();\n      });\n\n    return () => {\n      dataSourceSub.unsubscribe();\n    };\n  }\n\n  onChangeQuery = (query: string, filters: CompleteFilters) => {\n    reportInteraction('g_pyroscope_app_filters_changed', {\n      name: this.state.name,\n      count: filters.length,\n      operators: uniq(filters.map((f) => f.operator.label)),\n    });\n\n    this.setState({\n      filters: filters.map(convertPyroscopeToVariableFilter),\n    });\n  };\n\n  static Component = ({ model }: SceneComponentProps<AdHocFiltersVariable & { onChangeQuery?: any }>) => {\n    const { key } = model.useState();\n\n    const query = useBuildPyroscopeQuery(model, key as string);\n\n    const { value: dataSourceUid } = sceneGraph\n      .findByKeyAndType(model, 'dataSource', ProfilesDataSourceVariable)\n      .useState();\n\n    const { from, to } = sceneGraph.getTimeRange(model).state.value;\n\n    return (\n      <QueryBuilder\n        id={`query-builder-${key}`}\n        autoExecute\n        dataSourceUid={dataSourceUid as string}\n        query={query}\n        from={from.unix() * 1000}\n        to={to.unix() * 1000}\n        onChangeQuery={model.onChangeQuery}\n      />\n    );\n  };\n}\n","import { sceneGraph, SceneObject } from '@grafana/scenes';\n\nexport function getSceneVariableValue(sceneObject: SceneObject, variableName: string): string {\n  return sceneGraph.lookupVariable(variableName, sceneObject)?.getValue() as string;\n}\n","import {\n  SceneComponentProps,\n  SceneObjectBase,\n  SceneObjectState,\n  SceneObjectUrlSyncConfig,\n  SceneObjectUrlValues,\n} from '@grafana/scenes';\nimport { RadioButtonGroup } from '@grafana/ui';\nimport { reportInteraction } from '@shared/domain/reportInteraction';\nimport React from 'react';\n\nexport enum PanelType {\n  TIMESERIES = 'time-series',\n  BARGAUGE = 'bar-gauge',\n  TABLE = 'table',\n  HISTOGRAM = 'histogram',\n}\n\nexport interface ScenePanelTypeSwitcherState extends SceneObjectState {\n  panelType: PanelType;\n  onChange?: (panelType: PanelType) => void;\n}\n\nexport class ScenePanelTypeSwitcher extends SceneObjectBase<ScenePanelTypeSwitcherState> {\n  protected _urlSync = new SceneObjectUrlSyncConfig(this, { keys: ['panelType'] });\n\n  static OPTIONS = [\n    { label: 'Time series', value: PanelType.TIMESERIES, icon: 'heart-rate' },\n    { label: 'Totals', value: PanelType.BARGAUGE, icon: 'align-left' },\n    { label: 'Maxima', value: PanelType.TABLE, icon: 'angle-double-up' },\n    { label: 'Histograms', value: PanelType.HISTOGRAM, icon: 'graph-bar' },\n  ];\n\n  static DEFAULT_PANEL_TYPE = PanelType.TIMESERIES;\n\n  constructor() {\n    super({\n      key: 'panel-type-switcher',\n      panelType: ScenePanelTypeSwitcher.DEFAULT_PANEL_TYPE,\n    });\n  }\n\n  getUrlState() {\n    return {\n      panelType: this.state.panelType,\n    };\n  }\n\n  updateFromUrl(values: SceneObjectUrlValues) {\n    const stateUpdate: Partial<ScenePanelTypeSwitcherState> = {};\n\n    if (typeof values.panelType === 'string' && values.panelType !== this.state.panelType) {\n      stateUpdate.panelType = Object.values(PanelType).includes(values.panelType as PanelType)\n        ? (values.panelType as PanelType)\n        : ScenePanelTypeSwitcher.DEFAULT_PANEL_TYPE;\n    }\n\n    this.setState(stateUpdate);\n  }\n\n  reset() {\n    this.setState({ panelType: ScenePanelTypeSwitcher.DEFAULT_PANEL_TYPE });\n  }\n\n  onChange = (panelType: PanelType) => {\n    reportInteraction('g_pyroscope_app_panel_type_changed', { panelType });\n\n    this.setState({ panelType });\n  };\n\n  static Component = ({ model }: SceneComponentProps<ScenePanelTypeSwitcher>) => {\n    const { panelType } = model.useState();\n\n    return (\n      <RadioButtonGroup\n        aria-label=\"Panel type switcher\"\n        options={ScenePanelTypeSwitcher.OPTIONS}\n        value={panelType}\n        onChange={model.onChange}\n        fullWidth={false}\n      />\n    );\n  };\n}\n","import { config } from '@grafana/runtime';\n\nexport function getColorByIndex(index: number) {\n  const visTheme = config.theme2.visualization;\n  return visTheme.getColorByName(visTheme.palette[index % 8]);\n}\n","import { Field } from '@grafana/data';\n\nexport const getSeriesLabelFieldName = (metricField: Field, label?: string) =>\n  metricField.labels?.[label as string] || '(no value)'; // metricField.labels can be empty when the ingested profiles do not have a label value set\n","import { DataFrame } from '@grafana/data';\n\nexport const getSeriesStatsValue = (series: DataFrame, displayName: string) =>\n  series.meta?.stats?.find((s) => s.displayName === displayName)?.value;\n","type ParsedQuery = {\n  serviceId: string;\n  profileMetricId: string;\n  labelsSelector: string;\n  labels: string[];\n};\n\nexport function parseQuery(query: string): ParsedQuery {\n  const [, serviceId = ''] = query.match(/.+\\{.*service_name=\"([^\"]+)\".*\\}/) || [];\n  const [, profileMetricId = ''] = query.match(/([^{]+)\\{.*}/) || [];\n\n  const labelsSelector = query.substring(query.indexOf('{'));\n\n  const labels = labelsSelector\n    .replace(/(\\{|\\})/, '')\n    .split(',')\n    .map((m) => m.match(/\\W*([^=!~]+)(=|!=|=~|!~)\"(.*)\"/)?.[0])\n    .filter((label) => label && !label.includes('service_name')) as string[];\n\n  return { serviceId, profileMetricId, labelsSelector, labels };\n}\n\ntype BuildQueryParams = {\n  serviceId: string;\n  profileMetricId: string;\n  labels?: string[];\n};\n\nexport const buildQuery = ({ serviceId, profileMetricId, labels }: BuildQueryParams): string =>\n  labels?.length\n    ? `${profileMetricId}{service_name=\"${serviceId}\",${labels.join()}}`\n    : `${profileMetricId}{service_name=\"${serviceId}\"}`;\n","import { LoadingState } from '@grafana/data';\nimport { sceneGraph, SceneQueryRunner } from '@grafana/scenes';\nimport { parseQuery } from '@shared/domain/url-params/parseQuery';\nimport { logger } from '@shared/infrastructure/tracking/logger';\n\nexport function withPreventInvalidQuery(queryRunner: SceneQueryRunner) {\n  queryRunner.addActivationHandler(() => {\n    const { profileTypeId, labelSelector } = queryRunner.state.queries[0];\n\n    if (!profileTypeId) {\n      queryRunner.setState({\n        queries: [{ refId: 'null' }],\n        data: buildErrorData(queryRunner, 'Missing profile type!'),\n      });\n      return;\n    }\n\n    if (!labelSelector) {\n      queryRunner.setState({\n        queries: [{ refId: 'null' }],\n        data: buildErrorData(queryRunner, 'Missing label selector!'),\n      });\n      return;\n    }\n\n    if (!sceneGraph.interpolate(queryRunner, '$profileMetricId')) {\n      queryRunner.setState({\n        queries: [{ refId: 'null' }],\n        data: buildErrorData(queryRunner, 'Missing profile type!'),\n      });\n      return;\n    }\n\n    const parsed = parseQuery(sceneGraph.interpolate(queryRunner, `$profileTypeId${labelSelector})`));\n\n    if (!parsed.serviceId) {\n      queryRunner.setState({\n        queries: [{ refId: 'null' }],\n        data: buildErrorData(queryRunner, 'Missing service name!'),\n      });\n    }\n  });\n\n  return queryRunner;\n}\n\nfunction buildErrorData(queryRunner: SceneQueryRunner, errorMsg: string) {\n  const error = new Error(errorMsg);\n\n  logger.error(error);\n\n  return {\n    state: LoadingState.Error,\n    errors: [error],\n    series: [],\n    timeRange: sceneGraph.getTimeRange(queryRunner).state.value,\n  };\n}\n","import { SceneQueryRunner } from '@grafana/scenes';\n\nimport { PYROSCOPE_DATA_SOURCE } from '../pyroscope-data-sources';\nimport { withPreventInvalidQuery } from '../withPreventInvalidQuery';\nimport { TimeSeriesQueryRunnerParams } from './TimeSeriesQueryRunnerParams';\n\nexport type TimeSeriesQuery = {\n  refId: string;\n  queryType: 'metrics';\n  profileTypeId: string;\n  labelSelector: string;\n  groupBy: string[];\n};\n\nexport function buildTimeSeriesQueryRunner(\n  { serviceName, profileMetricId, groupBy, filters }: TimeSeriesQueryRunnerParams,\n  limit?: number\n) {\n  const completeFilters = filters ? [...filters] : [];\n  completeFilters.unshift({ key: 'service_name', operator: '=', value: serviceName || '$serviceName' });\n\n  const selector = completeFilters.map(({ key, operator, value }) => `${key}${operator}\"${value}\"`).join(',');\n\n  const queryRunner = new SceneQueryRunner({\n    datasource: PYROSCOPE_DATA_SOURCE,\n    queries: [\n      {\n        refId: `${profileMetricId || '$profileMetricId'}-${selector}-${groupBy?.label || 'no-group-by'}`,\n        queryType: 'metrics',\n        profileTypeId: profileMetricId || '$profileMetricId',\n        labelSelector: `{${selector},$filters}`,\n        groupBy: groupBy?.label ? [groupBy.label] : [],\n        limit,\n      },\n    ],\n  });\n\n  return withPreventInvalidQuery(queryRunner);\n}\n","import { DataFrame } from '@grafana/data';\nimport { merge } from 'lodash';\nimport { map, Observable } from 'rxjs';\n\n// General note: because (e.g.) SceneLabelValuesTimeseries sets the data provider in its constructor, data can come as undefined, hence all the optional chaining operators\n// in the transformers below\n\nexport const addRefId = () => (source: Observable<DataFrame[]>) =>\n  source.pipe(map((data: DataFrame[]) => data?.map((d, i) => merge(d, { refId: `${d.refId}-${i}` }))));\n\nexport const addStats = () => (source: Observable<DataFrame[]>) =>\n  source.pipe(\n    map((data: DataFrame[]) => {\n      const totalSeriesCount = data?.length;\n\n      // TODO: in case of a groupBy query, find a way to always add a rank to each label value (based on allValuesSum) so that we can use it as startColorIndex to\n      // always display each series consistently in the same color regardless of it's timseries, bar gauges with sums, or tables with maxima\n      return data?.map((d) => {\n        let maxValue = Number.NEGATIVE_INFINITY;\n\n        const allValuesSum = d.fields\n          ?.find((field) => field.type === 'number')\n          ?.values.reduce((acc: number, value: number) => {\n            if (value > maxValue) {\n              maxValue = value;\n            }\n            return acc + value;\n          }, 0);\n\n        return merge(d, {\n          meta: {\n            stats: [\n              {\n                displayName: 'totalSeriesCount',\n                value: totalSeriesCount,\n              },\n              {\n                displayName: 'allValuesSum',\n                value: allValuesSum,\n              },\n              {\n                displayName: 'maxValue',\n                value: maxValue,\n              },\n            ],\n          },\n        });\n      });\n    })\n  );\n","import { DataFrame, FieldMatcherID, LoadingState, ThresholdsMode, VizOrientation } from '@grafana/data';\nimport {\n  PanelBuilders,\n  SceneComponentProps,\n  SceneDataTransformer,\n  SceneObjectBase,\n  SceneObjectState,\n  VizPanel,\n  VizPanelState,\n} from '@grafana/scenes';\nimport { BarGaugeDisplayMode, BarGaugeNamePlacement, BarGaugeSizing, BarGaugeValueMode } from '@grafana/schema';\nimport React from 'react';\n\nimport { EventTimeseriesDataReceived } from '../domain/events/EventTimeseriesDataReceived';\nimport { getColorByIndex } from '../helpers/getColorByIndex';\nimport { getSeriesLabelFieldName } from '../infrastructure/helpers/getSeriesLabelFieldName';\nimport { getSeriesStatsValue } from '../infrastructure/helpers/getSeriesStatsValue';\nimport { buildTimeSeriesQueryRunner } from '../infrastructure/timeseries/buildTimeSeriesQueryRunner';\nimport { addRefId, addStats } from './SceneByVariableRepeaterGrid/infrastructure/data-transformations';\nimport { GridItemData } from './SceneByVariableRepeaterGrid/types/GridItemData';\n\ninterface SceneLabelValuesBarGaugeState extends SceneObjectState {\n  body: VizPanel;\n}\n\nexport class SceneLabelValuesBarGauge extends SceneObjectBase<SceneLabelValuesBarGaugeState> {\n  constructor({\n    item,\n    headerActions,\n  }: {\n    item: GridItemData;\n    headerActions: (item: GridItemData) => VizPanelState['headerActions'];\n  }) {\n    super({\n      key: 'bar-gauge-label-values',\n      body: PanelBuilders.bargauge()\n        .setTitle(item.label)\n        .setData(\n          new SceneDataTransformer({\n            $data: buildTimeSeriesQueryRunner(item.queryRunnerParams),\n            transformations: [addRefId, addStats],\n          })\n        )\n        .setHeaderActions(headerActions(item))\n        .build(),\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this, item));\n  }\n\n  onActivate(item: GridItemData) {\n    const { body } = this.state;\n\n    const sub = (body.state.$data as SceneDataTransformer)!.subscribeToState((newState) => {\n      if (newState.data?.state !== LoadingState.Done) {\n        return;\n      }\n\n      const { series } = newState.data;\n\n      if (series?.length) {\n        body.setState(this.getConfig(item, series));\n      }\n\n      // we publish the event only after setting the new config so that the subscribers can modify it\n      this.publishEvent(new EventTimeseriesDataReceived({ series }), true);\n    });\n\n    return () => {\n      sub.unsubscribe();\n    };\n  }\n\n  getConfig(item: GridItemData, series: DataFrame[]) {\n    let max = Number.NEGATIVE_INFINITY;\n\n    for (const s of series) {\n      const allValuesSum = getSeriesStatsValue(s, 'allValuesSum') || 0;\n\n      if (allValuesSum > max) {\n        max = allValuesSum;\n      }\n    }\n\n    const groupByLabel = item.queryRunnerParams.groupBy?.label;\n\n    const description = groupByLabel ? 'This panel displays aggregate values over the current time period' : undefined;\n\n    return {\n      title: series.length > 1 ? `${item.label} (${series.length})` : item.label,\n      description,\n      options: {\n        reduceOptions: { values: false, calcs: ['sum'] },\n        orientation: VizOrientation.Horizontal,\n        displayMode: BarGaugeDisplayMode.Gradient,\n        valueMode: BarGaugeValueMode.Text,\n        showUnfilled: true,\n        sizing: BarGaugeSizing.Manual,\n        text: { titleSize: 13, valueSize: 13 },\n        namePlacement: BarGaugeNamePlacement.Top,\n        minVizHeight: 36,\n        maxVizHeight: 36,\n        legend: {\n          showLegend: false,\n        },\n      },\n      fieldConfig: {\n        defaults: {\n          // we force the label value because the overrides don't seem to work when we receive a single serie\n          displayName: series.length === 1 ? groupByLabel : undefined,\n          min: 0,\n          max,\n          thresholds: {\n            mode: ThresholdsMode.Percentage,\n            steps: [],\n          },\n        },\n        overrides: this.getOverrides(item, series),\n      },\n    };\n  }\n\n  getOverrides(item: GridItemData, series: DataFrame[]) {\n    const { index: startColorIndex, queryRunnerParams } = item;\n    const groupByLabel = queryRunnerParams.groupBy?.label;\n\n    return series.map((s, i) => ({\n      matcher: { id: FieldMatcherID.byFrameRefID, options: s.refId },\n      properties: [\n        {\n          id: 'displayName',\n          value: getSeriesLabelFieldName(s.fields[1], groupByLabel),\n        },\n        {\n          id: 'color',\n          value: { mode: 'fixed', fixedColor: getColorByIndex(startColorIndex + i) },\n        },\n      ],\n    }));\n  }\n\n  static Component({ model }: SceneComponentProps<SceneLabelValuesBarGauge>) {\n    const { body } = model.useState();\n\n    return <body.Component model={body} />;\n  }\n}\n","import { DataFrame, getValueFormat } from '@grafana/data';\n\nimport { getSeriesStatsValue } from '../infrastructure/helpers/getSeriesStatsValue';\n\nexport function formatSingleSeriesDisplayName(label: string, s: DataFrame) {\n  const metricFieldUnit = s.fields[1].config.unit;\n\n  const allValuesSum = getSeriesStatsValue(s, 'allValuesSum') || 0;\n  const allValuesSumFormatted = getValueFormat(metricFieldUnit)(allValuesSum);\n\n  const maxValue = getSeriesStatsValue(s, 'maxValue') || 0;\n  const maxValueFormatted = getValueFormat(metricFieldUnit)(maxValue);\n\n  return `total ${label} = ${allValuesSumFormatted.text}${allValuesSumFormatted.suffix} / max = ${maxValueFormatted.text}${maxValueFormatted.suffix}`;\n}\n","import { DataFrame, FieldMatcherID, LoadingState } from '@grafana/data';\nimport {\n  PanelBuilders,\n  SceneComponentProps,\n  SceneDataTransformer,\n  SceneObjectBase,\n  SceneObjectState,\n  VizPanel,\n  VizPanelState,\n} from '@grafana/scenes';\nimport { SortOrder } from '@grafana/schema';\nimport { LegendDisplayMode, TooltipDisplayMode, VizLegendOptions } from '@grafana/ui';\nimport React from 'react';\n\nimport { EventTimeseriesDataReceived } from '../domain/events/EventTimeseriesDataReceived';\nimport { formatSingleSeriesDisplayName } from '../helpers/formatSingleSeriesDisplayName';\nimport { getColorByIndex } from '../helpers/getColorByIndex';\nimport { getSeriesLabelFieldName } from '../infrastructure/helpers/getSeriesLabelFieldName';\nimport { buildTimeSeriesQueryRunner } from '../infrastructure/timeseries/buildTimeSeriesQueryRunner';\nimport { addRefId, addStats } from './SceneByVariableRepeaterGrid/infrastructure/data-transformations';\nimport { GridItemData } from './SceneByVariableRepeaterGrid/types/GridItemData';\n\ninterface SceneLabelValuesHistogramState extends SceneObjectState {\n  body: VizPanel;\n  legendPlacement: VizLegendOptions['placement'];\n}\n\nexport class SceneLabelValuesHistogram extends SceneObjectBase<SceneLabelValuesHistogramState> {\n  constructor({\n    item,\n    headerActions,\n    legendPlacement,\n  }: {\n    item: GridItemData;\n    headerActions: (item: GridItemData) => VizPanelState['headerActions'];\n    legendPlacement?: SceneLabelValuesHistogramState['legendPlacement'];\n  }) {\n    super({\n      key: 'histogram-label-values',\n      legendPlacement: legendPlacement || 'bottom',\n      body: PanelBuilders.histogram()\n        .setTitle(item.label)\n        .setData(\n          new SceneDataTransformer({\n            $data: buildTimeSeriesQueryRunner(item.queryRunnerParams),\n            transformations: [addRefId, addStats],\n          })\n        )\n        .setHeaderActions(headerActions(item))\n        .build(),\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this, item));\n  }\n\n  onActivate(item: GridItemData) {\n    const { body } = this.state;\n\n    const sub = (body.state.$data as SceneDataTransformer)!.subscribeToState((newState) => {\n      if (newState.data?.state !== LoadingState.Done) {\n        return;\n      }\n\n      const { series } = newState.data;\n\n      if (series?.length) {\n        body.setState(this.getConfig(item, series));\n      }\n\n      // we publish the event only after setting the new config so that the subscribers can modify it\n      this.publishEvent(new EventTimeseriesDataReceived({ series }), true);\n    });\n\n    return () => {\n      sub.unsubscribe();\n    };\n  }\n\n  getConfig(item: GridItemData, series: DataFrame[]) {\n    const { legendPlacement } = this.state;\n    const groupByLabel = item.queryRunnerParams.groupBy?.label;\n\n    return {\n      title: series.length > 1 ? `${item.label} (${series.length})` : item.label,\n      options: {\n        tooltip: {\n          mode: TooltipDisplayMode.Single,\n          sort: SortOrder.None,\n        },\n        legend: {\n          showLegend: true,\n          displayMode: LegendDisplayMode.List,\n          placement: legendPlacement,\n          calcs: [],\n        },\n      },\n      fieldConfig: {\n        defaults: {\n          // we force the label value because the overrides don't seem to work when we receive a single serie\n          displayName: series.length === 1 ? groupByLabel : undefined,\n          custom: {\n            lineWidth: 1,\n          },\n        },\n        overrides: this.getOverrides(item, series),\n      },\n    };\n  }\n\n  getOverrides(item: GridItemData, series: DataFrame[]) {\n    const { index: startColorIndex, queryRunnerParams } = item;\n    const groupByLabel = queryRunnerParams.groupBy?.label;\n\n    return series.map((s, i) => {\n      const metricField = s.fields[1];\n      let displayName = groupByLabel ? getSeriesLabelFieldName(metricField, groupByLabel) : metricField.name;\n\n      if (series.length === 1) {\n        displayName = formatSingleSeriesDisplayName(displayName, s);\n      }\n\n      return {\n        matcher: { id: FieldMatcherID.byFrameRefID, options: s.refId },\n        properties: [\n          {\n            id: 'displayName',\n            value: displayName,\n          },\n          {\n            id: 'color',\n            value: { mode: 'fixed', fixedColor: getColorByIndex(startColorIndex + i) },\n          },\n        ],\n      };\n    });\n  }\n\n  static Component({ model }: SceneComponentProps<SceneLabelValuesHistogram>) {\n    const { body } = model.useState();\n\n    return <body.Component model={body} />;\n  }\n}\n","import { css } from '@emotion/css';\nimport { DataFrame, DataTransformerID, LoadingState } from '@grafana/data';\nimport {\n  PanelBuilders,\n  SceneComponentProps,\n  SceneDataTransformer,\n  sceneGraph,\n  SceneObjectBase,\n  SceneObjectState,\n  VizPanel,\n  VizPanelState,\n} from '@grafana/scenes';\nimport { useStyles2 } from '@grafana/ui';\nimport { getProfileMetric, ProfileMetricId } from '@shared/infrastructure/profile-metrics/getProfileMetric';\nimport React from 'react';\n\nimport { EventTimeseriesDataReceived } from '../domain/events/EventTimeseriesDataReceived';\nimport { ProfileMetricVariable } from '../domain/variables/ProfileMetricVariable';\nimport { getColorByIndex } from '../helpers/getColorByIndex';\nimport { buildTimeSeriesQueryRunner } from '../infrastructure/timeseries/buildTimeSeriesQueryRunner';\nimport { GridItemData } from './SceneByVariableRepeaterGrid/types/GridItemData';\n\ninterface SceneLabelValuesTableState extends SceneObjectState {\n  body: VizPanel;\n}\n\nexport class SceneLabelValuesTable extends SceneObjectBase<SceneLabelValuesTableState> {\n  constructor({\n    item,\n    headerActions,\n  }: {\n    item: GridItemData;\n    headerActions: (item: GridItemData) => VizPanelState['headerActions'];\n  }) {\n    super({\n      key: 'table-label-values',\n      body: PanelBuilders.table()\n        .setTitle(item.label)\n        .setData(\n          new SceneDataTransformer({\n            $data: buildTimeSeriesQueryRunner(item.queryRunnerParams),\n            transformations: [\n              {\n                id: DataTransformerID.reduce,\n                options: {\n                  reducers: ['max'],\n                  labelsToFields: true,\n                },\n              },\n              {\n                id: DataTransformerID.filterFieldsByName,\n                options: {\n                  exclude: {\n                    names: ['Field'],\n                  },\n                },\n              },\n              {\n                id: DataTransformerID.renameByRegex,\n                options: {\n                  regex: 'Max',\n                  renamePattern: 'max',\n                },\n              },\n              {\n                id: DataTransformerID.sortBy,\n                options: {\n                  sort: [\n                    {\n                      field: 'max',\n                      desc: true,\n                    },\n                  ],\n                },\n              },\n            ],\n          })\n        )\n        .setHeaderActions(headerActions(item))\n        .build(),\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this, item));\n  }\n\n  onActivate(item: GridItemData) {\n    const { body } = this.state;\n\n    const sub = (body.state.$data as SceneDataTransformer)!.subscribeToState((newState) => {\n      if (newState.data?.state !== LoadingState.Done) {\n        return;\n      }\n\n      const { series } = newState.data;\n\n      if (series?.length) {\n        body.setState(this.getConfig(item, series));\n      }\n\n      // we publish the event only after setting the new config so that the subscribers can modify it\n      this.publishEvent(new EventTimeseriesDataReceived({ series }), true);\n    });\n\n    return () => {\n      sub.unsubscribe();\n    };\n  }\n\n  getConfig(item: GridItemData, series: DataFrame[]) {\n    const cardinality = series[0].fields[0].values.length;\n\n    const profileMetricId = sceneGraph.findByKeyAndType(this, 'profileMetricId', ProfileMetricVariable).state\n      .value as ProfileMetricId;\n    const unitValue = getProfileMetric(profileMetricId).unit;\n\n    return {\n      title: cardinality > 1 ? `${item.label} (${cardinality})` : item.label,\n      fieldConfig: {\n        defaults: {\n          custom: {\n            filterable: true,\n            cellOptions: {},\n          },\n        },\n        overrides: [\n          {\n            matcher: {\n              id: 'byName',\n              options: 'max',\n            },\n            properties: [\n              {\n                id: 'unit',\n                value: unitValue,\n              },\n              {\n                id: 'custom.width',\n                value: 100,\n              },\n            ],\n          },\n        ],\n      },\n    };\n  }\n\n  static Component({ model }: SceneComponentProps<SceneLabelValuesTable>) {\n    const styles = useStyles2(getStyles); // eslint-disable-line react-hooks/rules-of-hooks\n    const { body } = model.useState();\n\n    return (\n      <span className={styles.container}>\n        <body.Component model={body} />\n      </span>\n    );\n  }\n}\n\nconst getStyles = () => ({\n  // couldn't find a better way just by configuring the table panel :man_shrug:\n  container: css`\n    [data-testid='data-testid table body'] [role='row']:first-child {\n      color: ${getColorByIndex(3)};\n      font-weight: 500;\n    }\n  `,\n});\n","import { TimeRange } from '@grafana/data';\n\nexport function computeRoundedTimeRange(timeRange: TimeRange) {\n  // round to 10s\n  return {\n    from: Math.floor((timeRange.from.valueOf() || 0) / 10000) * 10000,\n    to: Math.floor((timeRange.to.valueOf() || 0) / 10000) * 10000,\n  };\n}\n","import {\n  DataQueryResponse,\n  FieldType,\n  LegacyMetricFindQueryOptions,\n  LoadingState,\n  MetricFindValue,\n  TestDataSourceResponse,\n  TimeRange,\n} from '@grafana/data';\nimport { RuntimeDataSource, sceneGraph } from '@grafana/scenes';\nimport { isPrivateLabel } from '@shared/components/QueryBuilder/domain/helpers/isPrivateLabel';\nimport { labelsRepository } from '@shared/infrastructure/labels/labelsRepository';\nimport { logger } from '@shared/infrastructure/tracking/logger';\nimport pLimit from 'p-limit';\n\nimport { GroupByVariable } from '../../domain/variables/GroupByVariable/GroupByVariable';\nimport { computeRoundedTimeRange } from '../../helpers/computeRoundedTimeRange';\nimport { PYROSCOPE_LABELS_DATA_SOURCE } from '../pyroscope-data-sources';\nimport { LabelsApiClient } from './http/LabelsApiClient';\n\nconst MAX_CONCURRENT_LABEL_VALUES_REQUESTS = 20;\nconst limit = pLimit(MAX_CONCURRENT_LABEL_VALUES_REQUESTS);\n\nexport class LabelsDataSource extends RuntimeDataSource {\n  static MAX_TIMESERIES_LABEL_VALUES = 10;\n\n  constructor() {\n    super(PYROSCOPE_LABELS_DATA_SOURCE.type, PYROSCOPE_LABELS_DATA_SOURCE.uid);\n  }\n\n  async query(): Promise<DataQueryResponse> {\n    return {\n      state: LoadingState.Done,\n      data: [\n        {\n          name: 'Labels',\n          fields: [\n            {\n              name: 'Label',\n              type: FieldType.other,\n              values: [],\n              config: {},\n            },\n          ],\n          length: 0,\n        },\n      ],\n    };\n  }\n\n  getParams(options: LegacyMetricFindQueryOptions) {\n    const { scopedVars, range } = options;\n    const sceneObject = scopedVars?.__sceneObject?.value as GroupByVariable;\n\n    const dataSourceUid = sceneGraph.interpolate(sceneObject, '$dataSource');\n    const serviceName = sceneGraph.interpolate(sceneObject, '$serviceName');\n    const profileMetricId = sceneGraph.interpolate(sceneObject, '$profileMetricId');\n\n    // we could interpolate ad hoc filters, but the Labels exploration type would reload all labels each time they are modified\n    // const filters = sceneGraph.interpolate(sceneObject, '$filters');\n    // const pyroscopeQuery = `${profileMetricId}{service_name=\"${serviceName}\",${filters}}`;\n    const query = `${profileMetricId}{service_name=\"${serviceName}\"}`;\n\n    const { from, to } = computeRoundedTimeRange(range as TimeRange);\n\n    return {\n      dataSourceUid,\n      serviceName,\n      profileMetricId,\n      query,\n      from,\n      to,\n    };\n  }\n\n  async fetchLabels(dataSourceUid: string, query: string, from: number, to: number, variableName?: string) {\n    labelsRepository.setApiClient(new LabelsApiClient({ dataSourceUid }));\n\n    try {\n      return await labelsRepository.listLabels({ query, from, to });\n    } catch (error) {\n      logger.error(error as Error, {\n        info: 'Error while loading Pyroscope label names!',\n        variableName: variableName || '',\n      });\n\n      throw error;\n    }\n  }\n\n  async fetchLabelValues(\n    index: number,\n    query: string,\n    from: number,\n    to: number,\n    labelName: string,\n    variableName?: string\n  ) {\n    let values;\n\n    try {\n      values = await labelsRepository.listLabelValues({ query, from, to, label: labelName });\n    } catch (error) {\n      logger.error(error as Error, {\n        info: 'Error while loading Pyroscope label values!',\n        variableName: variableName || '',\n      });\n    }\n\n    const count = values ? values.length : -1;\n\n    return {\n      value: {\n        value: labelName,\n        groupBy: {\n          label: labelName,\n          values: values || [],\n        },\n      },\n      text: `${labelName} (${count > -1 ? count : '?'})`,\n      count,\n    };\n  }\n\n  async metricFindQuery(_: string, options: LegacyMetricFindQueryOptions): Promise<MetricFindValue[]> {\n    const sceneObject = options.scopedVars?.__sceneObject?.value as GroupByVariable;\n\n    // save bandwidth\n    // TODO: remove this when we can declare the GroupByVariable in the Scene it's used\n    // without messing up the variable URL sync\n    if (!sceneObject.isActive) {\n      return [];\n    }\n\n    const { dataSourceUid, serviceName, profileMetricId, query, from, to } = this.getParams(options);\n\n    if (!serviceName || !profileMetricId) {\n      logger.warn(\n        'LabelsDataSource: either serviceName=\"%s\" and/or profileMetricId=\"%s\" is empty! Discarding request.',\n        serviceName,\n        profileMetricId\n      );\n      return [];\n    }\n\n    const labels = await this.fetchLabels(dataSourceUid, query, from, to, options.variable?.name);\n\n    const labelsWithValuesAndCount = await Promise.all(\n      labels\n        .filter(({ value }) => !isPrivateLabel(value))\n        .map(({ value }, index) =>\n          limit(() => this.fetchLabelValues(index, query, from, to, value, options.variable?.name))\n        )\n    );\n\n    const sortedLabels = labelsWithValuesAndCount\n      .sort((a, b) => b.count - a.count)\n      .map(({ value, text }, index) => {\n        return {\n          // TODO: check if there's a better way\n          value: JSON.stringify({ ...value, index }),\n          text,\n        };\n      });\n\n    return [\n      // we do this here because GroupByVariable may set its default value to the 1st element automatically\n      {\n        value: 'all',\n        text: 'All',\n      },\n      ...sortedLabels,\n    ];\n  }\n\n  async testDatasource(): Promise<TestDataSourceResponse> {\n    return {\n      status: 'success',\n      message: 'OK',\n    };\n  }\n}\n","import { getProfileMetric, ProfileMetricId } from '@shared/infrastructure/profile-metrics/getProfileMetric';\n\nexport function getProfileMetricLabel(profileMetricId: string) {\n  const profileMetric = getProfileMetric(profileMetricId as ProfileMetricId);\n  return `${profileMetric.type} (${profileMetric.group})`;\n}\n","import { PanelMenuItem, PluginExtensionLink } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport {\n  SceneComponentProps,\n  SceneDataQuery,\n  sceneGraph,\n  SceneObjectBase,\n  SceneObjectState,\n  SceneQueryRunner,\n  VizPanelMenu,\n} from '@grafana/scenes';\nimport { ScaleDistribution, ScaleDistributionConfig } from '@grafana/schema';\nimport PyroscopeLogo from '@img/logo.svg';\nimport { parseQuery } from '@shared/domain/url-params/parseQuery';\nimport { nanoid } from 'nanoid';\nimport React, { useEffect, useMemo } from 'react';\n\nimport {\n  INVESTIGATIONS_APP_ID,\n  INVESTIGATIONS_EXTENSTION_POINT_ID,\n  useGetPluginExtensionLink,\n} from '../../domain/useGetPluginExtensionLink';\nimport { getExploreUrl } from '../../helpers/getExploreUrl';\nimport { getProfileMetricLabel } from '../../infrastructure/series/helpers/getProfileMetricLabel';\nimport { TimeSeriesQuery } from '../../infrastructure/timeseries/buildTimeSeriesQueryRunner';\nimport { SceneLabelValuesTimeseries } from './SceneLabelValuesTimeseries';\n\ninterface SceneTimeseriesMenuState extends SceneObjectState {\n  items?: PanelMenuItem[];\n  scaleType?: ScaleDistribution;\n}\n\nconst SCALE_TYPES = [\n  {\n    text: 'Linear',\n    scaleDistribution: { type: ScaleDistribution.Linear },\n  },\n  {\n    text: 'Log2',\n    scaleDistribution: { type: ScaleDistribution.Log, log: 2 },\n  },\n];\n\nexport class SceneTimeseriesMenu extends SceneObjectBase<SceneTimeseriesMenuState> {\n  constructor(state: SceneTimeseriesMenuState) {\n    super({\n      scaleType: ScaleDistribution.Linear,\n      ...state,\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  onActivate() {\n    this.setState({ items: this.buildMenuItems() });\n  }\n\n  buildMenuItems(addToInvestigationLink?: PluginExtensionLink): PanelMenuItem[] {\n    const { items, scaleType } = this.state;\n\n    const menuItems: PanelMenuItem[] = [\n      {\n        text: 'Scale type',\n        type: 'group',\n        subMenu: SCALE_TYPES.map((option) => ({\n          text: `${scaleType === option.scaleDistribution.type ? '✔ ' : ''}${option.text}`,\n          onClick: () => this.onClickScaleOption(option),\n        })),\n      },\n      {\n        type: 'divider',\n        text: '',\n      },\n      {\n        iconClassName: 'compass',\n        text: 'Open in Explore',\n        onClick: () => this.onClickExplore(),\n      },\n    ];\n\n    if (addToInvestigationLink) {\n      menuItems.push({\n        iconClassName: 'plus-square',\n        text: 'Add to investigation (beta)',\n        onClick: () => {\n          addToInvestigationLink.onClick!();\n        },\n      });\n    } else {\n      const existingAddToInvestigationItem = items?.find((i) => i.text.includes('Add to investigation'));\n\n      if (existingAddToInvestigationItem) {\n        menuItems.push({ ...existingAddToInvestigationItem });\n      }\n    }\n\n    return menuItems;\n  }\n\n  onClickScaleOption(option: PanelMenuItem & { scaleDistribution: ScaleDistributionConfig }) {\n    const { scaleDistribution, text } = option;\n\n    reportInteraction('g_pyroscope_app_timeseries_scale_changed', { scale: scaleDistribution.type });\n\n    const timeseries = sceneGraph.getAncestor(this, SceneLabelValuesTimeseries);\n\n    timeseries.changeScale(scaleDistribution, text);\n\n    this.setState({\n      scaleType: scaleDistribution.type,\n      items: this.buildMenuItems(),\n    });\n  }\n\n  onClickExplore() {\n    reportInteraction('g_pyroscope_app_open_in_explore_clicked');\n\n    const rawTimeRange = sceneGraph.getTimeRange(this).state.value.raw;\n    const query = this.getInterpolatedQuery();\n    const datasource = sceneGraph.interpolate(this, '${dataSource}');\n\n    const exploreUrl = getExploreUrl(rawTimeRange, query, datasource);\n\n    window.open(exploreUrl, '_blank');\n  }\n\n  getInterpolatedQuery() {\n    const timeseries = sceneGraph.getAncestor(this, SceneLabelValuesTimeseries);\n    const queryRunner = timeseries.state.body.state.$data?.state.$data as SceneQueryRunner;\n    const nonInterpolatedQuery = queryRunner?.state.queries[0] as SceneDataQuery;\n\n    return Object.entries(nonInterpolatedQuery)\n      .map(([key, value]) => [key, typeof value === 'string' ? sceneGraph.interpolate(this, value) : value])\n      .reduce(\n        (acc, [key, value]) => ({\n          ...acc,\n          [key]: value,\n        }),\n        {}\n      ) as TimeSeriesQuery;\n  }\n\n  useGetInvestigationPluginLinkContext() {\n    const { refId, queryType, profileTypeId, labelSelector, groupBy } = this.getInterpolatedQuery();\n\n    const parsedQuery = parseQuery(`${profileTypeId}${labelSelector}`);\n    const titleParts = [parsedQuery.serviceId, getProfileMetricLabel(parsedQuery.profileMetricId)];\n\n    if (groupBy?.length) {\n      titleParts.push(groupBy[0]);\n    }\n\n    if (parsedQuery.labels.length) {\n      titleParts.push(parsedQuery.labels.join(', '));\n    }\n\n    const title = titleParts.join(' · ');\n    const datasource = sceneGraph.interpolate(this, '${dataSource}');\n    const timeRange = sceneGraph.getTimeRange(this).state.value;\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    return useMemo(() => {\n      return {\n        id: nanoid(),\n        origin: 'Explore Profiles',\n        url: window.location.href,\n        logoPath: PyroscopeLogo,\n        title,\n        type: 'timeseries',\n        timeRange: { ...timeRange },\n        queries: [{ refId, queryType, profileTypeId, labelSelector, groupBy }],\n        datasource,\n      };\n    }, [datasource, groupBy, labelSelector, profileTypeId, queryType, refId, timeRange, title]);\n  }\n\n  useUpdateMenuItems() {\n    const context = this.useGetInvestigationPluginLinkContext();\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const link = useGetPluginExtensionLink({\n      extensionPointId: INVESTIGATIONS_EXTENSTION_POINT_ID,\n      context,\n      pluginId: INVESTIGATIONS_APP_ID,\n    });\n\n    // wrapped in a useEffect to prevent a warning when clicking on the \"Add to investigation\" link\n    // (\"Cannot update a component while rendering a different component\")\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useEffect(() => {\n      if (link) {\n        this.setState({ items: this.buildMenuItems(link) });\n      }\n    }, [link]);\n  }\n\n  static Component({ model }: SceneComponentProps<SceneTimeseriesMenu>) {\n    model.useUpdateMenuItems();\n\n    return <VizPanelMenu.Component model={model as unknown as VizPanelMenu} />;\n  }\n}\n","import { RawTimeRange, toURLRange, urlUtil } from '@grafana/data';\nimport { config } from '@grafana/runtime';\n\nimport { TimeSeriesQuery } from '../infrastructure/timeseries/buildTimeSeriesQueryRunner';\n\nexport function getExploreUrl(rawTimeRange: RawTimeRange, query: TimeSeriesQuery, datasource: string): string {\n  const exploreState = JSON.stringify({\n    ['pyroscope-explore']: {\n      range: toURLRange(rawTimeRange),\n      queries: [{ ...query, datasource }],\n      panelsState: {},\n      datasource,\n    },\n  });\n\n  const subUrl = config.appSubUrl ?? '';\n\n  return urlUtil.renderUrl(`${subUrl}/explore`, {\n    panes: exploreState,\n    schemaVersion: 1,\n  });\n}\n","import { PluginExtensionLink } from '@grafana/data';\nimport { usePluginLinks } from '@grafana/runtime';\n\nexport const INVESTIGATIONS_EXTENSTION_POINT_ID = 'grafana-pyroscope-app/exploration/v1';\nexport const INVESTIGATIONS_APP_ID = 'grafana-explorations-app';\n\ntype UseGetPluginLinkParams = {\n  extensionPointId: string;\n  context?: object | Record<string | symbol, unknown>;\n  pluginId: string;\n};\n\nexport function useGetPluginExtensionLink({\n  extensionPointId,\n  context,\n  pluginId,\n}: UseGetPluginLinkParams): PluginExtensionLink | undefined {\n  const pluginLinks = usePluginLinks({ extensionPointId, context });\n\n  const [link] = pluginLinks.links.filter((link) => link.pluginId === pluginId);\n\n  return link;\n}\n","import { DataFrame, FieldMatcherID, LoadingState } from '@grafana/data';\nimport {\n  PanelBuilders,\n  SceneComponentProps,\n  SceneDataProvider,\n  SceneDataTransformer,\n  SceneObjectBase,\n  SceneObjectState,\n  SceneQueryRunner,\n  VizPanel,\n  VizPanelMenu,\n  VizPanelState,\n} from '@grafana/scenes';\nimport { GraphGradientMode, ScaleDistribution, ScaleDistributionConfig, SortOrder } from '@grafana/schema';\nimport { LegendDisplayMode, TooltipDisplayMode, VizLegendOptions } from '@grafana/ui';\nimport { isEqual, merge } from 'lodash';\nimport React from 'react';\n\nimport { EventTimeseriesDataReceived } from '../../domain/events/EventTimeseriesDataReceived';\nimport { formatSingleSeriesDisplayName } from '../../helpers/formatSingleSeriesDisplayName';\nimport { getColorByIndex } from '../../helpers/getColorByIndex';\nimport { getSeriesLabelFieldName } from '../../infrastructure/helpers/getSeriesLabelFieldName';\nimport { LabelsDataSource } from '../../infrastructure/labels/LabelsDataSource';\nimport { buildTimeSeriesQueryRunner } from '../../infrastructure/timeseries/buildTimeSeriesQueryRunner';\nimport { addRefId, addStats } from '../SceneByVariableRepeaterGrid/infrastructure/data-transformations';\nimport { GridItemData } from '../SceneByVariableRepeaterGrid/types/GridItemData';\nimport { SceneTimeseriesMenu } from './SceneTimeseriesMenu';\n\ninterface SceneLabelValuesTimeseriesState extends SceneObjectState {\n  item: GridItemData;\n  headerActions: (item: GridItemData) => VizPanelState['headerActions'];\n  body: VizPanel;\n  displayAllValues: boolean;\n  legendPlacement: VizLegendOptions['placement'];\n  overrides?: (series: DataFrame[]) => VizPanelState['fieldConfig']['overrides'];\n}\n\nexport class SceneLabelValuesTimeseries extends SceneObjectBase<SceneLabelValuesTimeseriesState> {\n  constructor({\n    item,\n    headerActions,\n    displayAllValues,\n    legendPlacement,\n    data,\n    overrides,\n  }: {\n    item: SceneLabelValuesTimeseriesState['item'];\n    headerActions: SceneLabelValuesTimeseriesState['headerActions'];\n    displayAllValues?: SceneLabelValuesTimeseriesState['displayAllValues'];\n    legendPlacement?: SceneLabelValuesTimeseriesState['legendPlacement'];\n    data?: SceneDataTransformer;\n    overrides?: SceneLabelValuesTimeseriesState['overrides'];\n  }) {\n    super({\n      key: 'timeseries-label-values',\n      item,\n      headerActions,\n      displayAllValues: Boolean(displayAllValues),\n      legendPlacement: legendPlacement || 'bottom',\n      overrides,\n      body: PanelBuilders.timeseries()\n        .setTitle(item.label)\n        .setData(\n          data ||\n            new SceneDataTransformer({\n              $data: buildTimeSeriesQueryRunner(\n                item.queryRunnerParams,\n                displayAllValues ? undefined : LabelsDataSource.MAX_TIMESERIES_LABEL_VALUES\n              ),\n              transformations: [addRefId, addStats],\n            })\n        )\n        .setHeaderActions(headerActions(item))\n        .setMenu(new SceneTimeseriesMenu({}) as unknown as VizPanelMenu)\n        .build(),\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  onActivate() {\n    const { body } = this.state;\n\n    const sub = (body.state.$data as SceneDataProvider).subscribeToState((newState, prevState) => {\n      if (newState.data?.state !== LoadingState.Done) {\n        return;\n      }\n\n      // ensure we retain the previous annotations, if they exist\n      if (!newState.data.annotations?.length && prevState.data?.annotations?.length) {\n        newState.data.annotations = prevState.data.annotations;\n      }\n\n      const { series } = newState.data;\n\n      if (series?.length) {\n        const config = this.state.displayAllValues ? this.getAllValuesConfig(series) : this.getConfig(series);\n        body.setState(merge({}, body.state, config));\n      }\n\n      // we publish the event only after setting the new config so that the subscribers can modify it\n      // (e.g. sync y-axis in SceneExploreDiffFlameGraphs.tsx)\n      this.publishEvent(new EventTimeseriesDataReceived({ series }), true);\n    });\n\n    return () => {\n      sub.unsubscribe();\n    };\n  }\n\n  getConfig(series: DataFrame[]) {\n    const { body, item, legendPlacement } = this.state;\n    let { title } = body.state;\n    let description;\n\n    if (item.queryRunnerParams.groupBy?.label) {\n      title = series.length > 1 ? `${item.label} (${series.length})` : item.label;\n      description = this.buildDescription(item.queryRunnerParams.groupBy!);\n    }\n\n    return {\n      title,\n      description,\n      options: {\n        tooltip: {\n          mode: 'single',\n          sort: 'none',\n        },\n        legend: {\n          showLegend: true,\n          displayMode: 'list',\n          placement: legendPlacement,\n        },\n      },\n      fieldConfig: {\n        defaults: {\n          min: 0,\n          custom: {\n            fillOpacity: series.length >= LabelsDataSource.MAX_TIMESERIES_LABEL_VALUES ? 0 : 9,\n            gradientMode: series.length === 1 ? GraphGradientMode.None : GraphGradientMode.Opacity,\n            pointSize: 3,\n          },\n        },\n        overrides: this.getOverrides(series),\n      },\n    };\n  }\n\n  buildDescription(groupBy: GridItemData['queryRunnerParams']['groupBy']) {\n    if (!groupBy) {\n      return '';\n    }\n\n    // this case is for favorites: they are stored in localStorage without the `values` array\n    if (!groupBy!.values) {\n      return `Showing only ${LabelsDataSource.MAX_TIMESERIES_LABEL_VALUES} series to preserve readability. To view all the series, click on the expand icon on this panel.`;\n    }\n\n    if (groupBy!.values.length > LabelsDataSource.MAX_TIMESERIES_LABEL_VALUES) {\n      return `Showing only ${LabelsDataSource.MAX_TIMESERIES_LABEL_VALUES} out of ~${\n        groupBy!.values.length\n      } series to preserve readability. To view all the series for the current filters, click on the expand icon on this panel.`;\n    }\n\n    return '';\n  }\n\n  getAllValuesConfig(series: DataFrame[]) {\n    const { legendPlacement } = this.state;\n\n    return {\n      options: {\n        tooltip: {\n          mode: TooltipDisplayMode.Single,\n          sort: SortOrder.None,\n        },\n        legend: {\n          showLegend: true,\n          displayMode: LegendDisplayMode.List,\n          placement: legendPlacement,\n          calcs: [],\n        },\n      },\n      fieldConfig: {\n        defaults: {\n          min: 0,\n          custom: {\n            fillOpacity: 0,\n            pointSize: 5,\n          },\n        },\n        overrides: this.getOverrides(series),\n      },\n    };\n  }\n\n  getOverrides(series: DataFrame[]) {\n    if (this.state.overrides) {\n      return this.state.overrides(series);\n    }\n\n    const { item } = this.state;\n    const groupByLabel = item.queryRunnerParams.groupBy?.label;\n\n    return series.map((s, i) => {\n      const metricField = s.fields[1];\n      let displayName = groupByLabel ? getSeriesLabelFieldName(metricField, groupByLabel) : metricField.name;\n\n      if (series.length === 1) {\n        displayName = formatSingleSeriesDisplayName(displayName, s);\n      }\n\n      return {\n        matcher: { id: FieldMatcherID.byFrameRefID, options: s.refId },\n        properties: [\n          {\n            id: 'displayName',\n            value: displayName,\n          },\n          {\n            id: 'color',\n            value: { mode: 'fixed', fixedColor: getColorByIndex(item.index + i) },\n          },\n        ],\n      };\n    });\n  }\n\n  updateItem(partialItem: Partial<GridItemData>) {\n    const { item, headerActions, body } = this.state;\n    const updatedItem = merge({}, item, partialItem);\n\n    if (partialItem.queryRunnerParams?.hasOwnProperty('groupBy')) {\n      if (partialItem.queryRunnerParams.groupBy === undefined) {\n        delete updatedItem.queryRunnerParams.groupBy;\n      } else {\n        // we completely replace groupBy because merge() above concatenates groupBy.values\n        updatedItem.queryRunnerParams.groupBy = partialItem.queryRunnerParams.groupBy;\n      }\n    }\n\n    if (\n      partialItem.queryRunnerParams?.hasOwnProperty('filters') &&\n      partialItem.queryRunnerParams.filters === undefined\n    ) {\n      delete updatedItem.queryRunnerParams.filters;\n    }\n\n    this.setState({ item: updatedItem });\n\n    body.setState({\n      title: partialItem.label,\n      description: this.buildDescription(updatedItem.queryRunnerParams.groupBy),\n      headerActions: headerActions(updatedItem),\n    });\n\n    if (!isEqual(item.queryRunnerParams, updatedItem.queryRunnerParams)) {\n      const { queries } = buildTimeSeriesQueryRunner(\n        updatedItem.queryRunnerParams,\n        LabelsDataSource.MAX_TIMESERIES_LABEL_VALUES\n      ).state;\n\n      const queryRunner = body.state.$data?.state.$data as SceneQueryRunner;\n\n      // this allows us not to have to subscribe to the data provider changes as we do in onActivate() above\n      queryRunner?.setState({ queries });\n      queryRunner?.runQueries();\n    }\n  }\n\n  changeScale(scaleDistribution: ScaleDistributionConfig, axisLabel: string) {\n    const { body } = this.state;\n\n    body.clearFieldConfigCache();\n\n    body.setState({\n      fieldConfig: merge({}, body.state.fieldConfig, {\n        defaults: {\n          custom: {\n            scaleDistribution,\n            axisLabel: scaleDistribution.type !== ScaleDistribution.Linear ? axisLabel : '',\n          },\n        },\n      }),\n    });\n  }\n\n  static Component({ model }: SceneComponentProps<SceneLabelValuesTimeseries>) {\n    const { body } = model.useState();\n\n    return <body.Component model={body} />;\n  }\n}\n","import { PanelType } from '../components/SceneByVariableRepeaterGrid/components/ScenePanelTypeSwitcher';\nimport { SceneLabelValuesBarGauge } from '../components/SceneLabelValuesBarGauge';\nimport { SceneLabelValuesHistogram } from '../components/SceneLabelValuesHistogram';\nimport { SceneLabelValuesTable } from '../components/SceneLabelValuesTable';\nimport { SceneLabelValuesTimeseries } from '../components/SceneLabelValuesTimeseries/SceneLabelValuesTimeseries';\n\nexport function vizPanelBuilder(panelType: PanelType, options: any) {\n  switch (panelType) {\n    case PanelType.BARGAUGE:\n      return new SceneLabelValuesBarGauge(options);\n\n    case PanelType.TABLE:\n      return new SceneLabelValuesTable(options);\n\n    case PanelType.HISTOGRAM:\n      return new SceneLabelValuesHistogram(options);\n\n    case PanelType.TIMESERIES:\n    default:\n      return new SceneLabelValuesTimeseries(options);\n  }\n}\n","import { throttle } from 'lodash';\nimport { useEffect, useState } from 'react';\n\ninterface MousePosition {\n  x: number | null;\n  y: number | null;\n}\n\n// For performance reasons, we throttle the mouse position updates\nconst DEFAULT_THROTTLE_INTERVAL_MS = 50;\n\nconst useMousePosition = (throttleInterval = DEFAULT_THROTTLE_INTERVAL_MS) => {\n  const [mousePosition, setMousePosition] = useState<MousePosition>({ x: null, y: null });\n\n  useEffect(() => {\n    const updateMousePosition = throttle((event: MouseEvent) => {\n      setMousePosition({ x: event.clientX, y: event.clientY });\n    }, throttleInterval);\n    window.addEventListener('mousemove', updateMousePosition);\n\n    return () => {\n      window.removeEventListener('mousemove', updateMousePosition);\n    };\n  }, [throttleInterval]);\n\n  return mousePosition;\n};\n\nexport default useMousePosition;\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2, useTheme2 } from '@grafana/ui';\nimport React, { SVGProps } from 'react';\nimport SVG from 'react-inlinesvg';\n\nimport dark404 from './img/grot-404-dark.svg';\nimport light404 from './img/grot-404-light.svg';\nimport useMousePosition from './useMousePosition';\n\nconst MIN_ARM_ROTATION = -20;\nconst MAX_ARM_ROTATION = 5;\nconst MIN_ARM_TRANSLATION = -5;\nconst MAX_ARM_TRANSLATION = 5;\n\ninterface Props {\n  width?: SVGProps<SVGElement>['width'];\n  height?: SVGProps<SVGElement>['height'];\n  show404?: boolean;\n}\n\nexport const GrotNotFound = ({ width = 'auto', height, show404 = false }: Props) => {\n  const theme = useTheme2();\n  const { x, y } = useMousePosition();\n  const styles = useStyles2(getStyles, x, y, show404);\n  return (\n    <SVG\n      src={(theme.isDark ? dark404 : light404) as unknown as string}\n      className={styles.svg}\n      height={height}\n      width={width}\n    />\n  );\n};\n\nGrotNotFound.displayName = 'GrotNotFound';\n\nconst getStyles = (theme: GrafanaTheme2, xPos: number | null, yPos: number | null, show404: boolean) => {\n  const { innerWidth, innerHeight } = window;\n  const heightRatio = yPos && yPos / innerHeight;\n  const widthRatio = xPos && xPos / innerWidth;\n  const rotation = heightRatio !== null ? getIntermediateValue(heightRatio, MIN_ARM_ROTATION, MAX_ARM_ROTATION) : 0;\n  const translation =\n    widthRatio !== null ? getIntermediateValue(widthRatio, MIN_ARM_TRANSLATION, MAX_ARM_TRANSLATION) : 0;\n\n  return {\n    svg: css({\n      '#grot-404-arm, #grot-404-magnifier': {\n        transform: `rotate(${rotation}deg) translateX(${translation}%)`,\n        transformOrigin: 'center',\n        transition: 'transform 50ms linear',\n      },\n      '#grot-404-text': {\n        display: show404 ? 'block' : 'none',\n      },\n    }),\n  };\n};\n\n/**\n * Given a start value, end value, and a ratio, return the intermediate value\n * Works with negative and inverted start/end values\n */\nconst getIntermediateValue = (ratio: number, start: number, end: number) => {\n  const value = ratio * (end - start) + start;\n  return value;\n};\n","import { css } from '@emotion/css';\nimport { Box, Stack, Text, useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { GrotNotFound } from './GrotNotFound';\n\ninterface Props {\n  message: string;\n}\n\nexport const EmptyState = ({ message }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.container}>\n      <Box paddingY={8}>\n        <Stack direction=\"column\" alignItems=\"center\" gap={3}>\n          <GrotNotFound width={300} />\n          <Text variant=\"h5\">{message}</Text>\n        </Stack>\n      </Box>\n    </div>\n  );\n};\n\nEmptyState.displayName = 'EmptyState';\n\nfunction getStyles() {\n  return {\n    container: css({\n      width: '100%',\n      display: 'flex',\n      justifyContent: 'space-evenly',\n      flexDirection: 'column',\n    }),\n  };\n}\n","import { SceneComponentProps, SceneObjectBase, SceneObjectState } from '@grafana/scenes';\nimport React from 'react';\n\nimport { EmptyState } from './ui/EmptyState';\n\ninterface SceneEmptyStateState extends SceneObjectState {\n  message: string;\n}\n\nexport class SceneEmptyState extends SceneObjectBase<SceneEmptyStateState> {\n  public static Component = ({ model }: SceneComponentProps<SceneEmptyState>) => {\n    const { message } = model.useState();\n    return <EmptyState message={message} />;\n  };\n}\n","import { SceneComponentProps, SceneObjectBase, SceneObjectState } from '@grafana/scenes';\nimport { Alert } from '@grafana/ui';\nimport React from 'react';\n\ninterface SceneErrorStateState extends SceneObjectState {\n  message: string;\n}\n\nexport class SceneErrorState extends SceneObjectBase<SceneErrorStateState> {\n  public static Component = ({ model }: SceneComponentProps<SceneErrorState>) => {\n    const { message } = model.useState();\n    return (\n      <Alert title=\"Query error!\" severity=\"error\">\n        {message}\n      </Alert>\n    );\n  };\n}\n","import {\n  SceneComponentProps,\n  SceneObjectBase,\n  SceneObjectState,\n  SceneObjectUrlSyncConfig,\n  SceneObjectUrlValues,\n} from '@grafana/scenes';\nimport { RadioButtonGroup } from '@grafana/ui';\nimport { reportInteraction } from '@shared/domain/reportInteraction';\nimport React from 'react';\n\nexport enum LayoutType {\n  GRID = 'grid',\n  ROWS = 'rows',\n}\n\nexport interface SceneLayoutSwitcherState extends SceneObjectState {\n  layout: LayoutType;\n  onChange?: (layout: LayoutType) => void;\n}\n\nexport class SceneLayoutSwitcher extends SceneObjectBase<SceneLayoutSwitcherState> {\n  protected _urlSync = new SceneObjectUrlSyncConfig(this, { keys: ['layout'] });\n\n  static OPTIONS = [\n    { label: 'Grid', value: LayoutType.GRID },\n    { label: 'Rows', value: LayoutType.ROWS },\n  ];\n\n  static DEFAULT_LAYOUT = LayoutType.GRID;\n\n  constructor() {\n    super({\n      key: 'layout-switcher',\n      layout: SceneLayoutSwitcher.DEFAULT_LAYOUT,\n    });\n  }\n\n  getUrlState() {\n    return {\n      layout: this.state.layout,\n    };\n  }\n\n  updateFromUrl(values: SceneObjectUrlValues) {\n    const stateUpdate: Partial<SceneLayoutSwitcherState> = {};\n\n    if (typeof values.layout === 'string' && values.layout !== this.state.layout) {\n      stateUpdate.layout = Object.values(LayoutType).includes(values.layout as LayoutType)\n        ? (values.layout as LayoutType)\n        : SceneLayoutSwitcher.DEFAULT_LAYOUT;\n    }\n\n    this.setState(stateUpdate);\n  }\n\n  onChange = (layout: LayoutType) => {\n    reportInteraction('g_pyroscope_app_layout_changed', { layout });\n\n    this.setState({ layout });\n  };\n\n  static Component = ({ model }: SceneComponentProps<SceneLayoutSwitcher>) => {\n    const { layout } = model.useState();\n\n    return (\n      <RadioButtonGroup\n        aria-label=\"Layout switcher\"\n        options={SceneLayoutSwitcher.OPTIONS}\n        value={layout}\n        onChange={model.onChange}\n        fullWidth={false}\n      />\n    );\n  };\n}\n","import {\n  SceneComponentProps,\n  SceneObjectBase,\n  SceneObjectState,\n  SceneObjectUrlSyncConfig,\n  SceneObjectUrlValues,\n} from '@grafana/scenes';\nimport { InlineSwitch } from '@grafana/ui';\nimport { reportInteraction } from '@shared/domain/reportInteraction';\nimport React from 'react';\n\nexport interface SceneNoDataSwitcherState extends SceneObjectState {\n  hideNoData: string;\n  onChange?: (hideNoData: string) => void;\n}\n\nexport class SceneNoDataSwitcher extends SceneObjectBase<SceneNoDataSwitcherState> {\n  protected _urlSync = new SceneObjectUrlSyncConfig(this, { keys: ['hideNoData'] });\n\n  static DEFAULT_VALUE = 'off';\n\n  constructor() {\n    super({\n      key: 'no-data-switcher',\n      hideNoData: SceneNoDataSwitcher.DEFAULT_VALUE,\n    });\n  }\n\n  getUrlState() {\n    return {\n      hideNoData: this.state.hideNoData,\n    };\n  }\n\n  updateFromUrl(values: SceneObjectUrlValues) {\n    const stateUpdate: Partial<SceneNoDataSwitcherState> = {};\n\n    if (typeof values.hideNoData === 'string' && values.hideNoData !== this.state.hideNoData) {\n      stateUpdate.hideNoData = ['on', 'off'].includes(values.hideNoData)\n        ? values.hideNoData\n        : SceneNoDataSwitcher.DEFAULT_VALUE;\n    }\n\n    this.setState(stateUpdate);\n  }\n\n  onChange = (hideNoData: 'on' | 'off') => {\n    reportInteraction('g_pyroscope_app_hide_no_data_changed', { hideNoData });\n\n    this.setState({ hideNoData });\n  };\n\n  static Component = ({ model }: SceneComponentProps<SceneNoDataSwitcher>) => {\n    const { hideNoData } = model.useState();\n\n    return (\n      <InlineSwitch\n        data-testid=\"noDataSwitcher\"\n        showLabel\n        label=\"Hide panels without data\"\n        value={hideNoData === 'on'}\n        onChange={(event: React.ChangeEvent<HTMLInputElement>) => model.onChange(event.target.checked ? 'on' : 'off')}\n      />\n    );\n  };\n}\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport {\n  SceneComponentProps,\n  SceneObjectBase,\n  SceneObjectState,\n  SceneObjectUrlSyncConfig,\n  SceneObjectUrlValues,\n} from '@grafana/scenes';\nimport { Icon, IconButton, Input, Tag, useStyles2 } from '@grafana/ui';\nimport { reportInteraction } from '@shared/domain/reportInteraction';\nimport React from 'react';\n\nexport interface SceneQuickFilterState extends SceneObjectState {\n  placeholder: string;\n  searchText: string;\n  onChange?: (searchText: string) => void;\n  resultsCount: string;\n}\n\nexport class SceneQuickFilter extends SceneObjectBase<SceneQuickFilterState> {\n  protected _urlSync = new SceneObjectUrlSyncConfig(this, { keys: ['searchText'] });\n\n  static DEFAULT_SEARCH_TEXT = '';\n\n  static DEBOUNCE_DELAY = 250;\n\n  constructor({ placeholder }: { placeholder: string }) {\n    super({\n      key: 'quick-filter',\n      placeholder,\n      searchText: SceneQuickFilter.DEFAULT_SEARCH_TEXT,\n      resultsCount: '',\n    });\n  }\n\n  setPlaceholder(placeholder: string) {\n    this.setState({ placeholder });\n  }\n\n  setResultsCount(resultsCount: number) {\n    this.setState({ resultsCount: String(resultsCount) });\n  }\n\n  getUrlState() {\n    return {\n      searchText: this.state.searchText,\n    };\n  }\n\n  updateFromUrl(values: SceneObjectUrlValues) {\n    const stateUpdate: Partial<SceneQuickFilterState> = {};\n\n    if (typeof values.searchText === 'string' && values.searchText !== this.state.searchText) {\n      stateUpdate.searchText = values.searchText;\n    }\n\n    this.setState(stateUpdate);\n  }\n\n  onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ searchText: e.target.value });\n  };\n\n  reset() {\n    this.setState({ placeholder: '', searchText: '', resultsCount: '' });\n  }\n\n  clearSearchText = () => {\n    this.setState({ searchText: '' });\n  };\n\n  onFocus = () => {\n    reportInteraction('g_pyroscope_app_quick_filter_focused');\n  };\n\n  static Component = ({ model }: SceneComponentProps<SceneQuickFilter>) => {\n    const styles = useStyles2(getStyles);\n    const { placeholder, searchText, resultsCount } = model.useState();\n\n    return (\n      <Input\n        type=\"text\"\n        className=\"quick-filter\"\n        aria-label=\"Quick filter\"\n        placeholder={placeholder}\n        value={searchText}\n        prefix={<Icon name=\"search\" />}\n        suffix={\n          <>\n            {resultsCount !== '' && (\n              <Tag\n                className={styles.resultsCount}\n                name={resultsCount}\n                colorIndex={9}\n                data-testid=\"quick-filter-results-count\"\n              />\n            )}\n            <IconButton name=\"times\" aria-label=\"Clear search\" onClick={model.clearSearchText} />\n          </>\n        }\n        onChange={model.onChange}\n        onKeyDown={(e: React.KeyboardEvent<HTMLInputElement>) => {\n          if (e.key === 'Escape') {\n            model.clearSearchText();\n          }\n        }}\n        onFocus={model.onFocus}\n      />\n    );\n  };\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  resultsCount: css`\n    margin-right: ${theme.spacing(1)};\n    border-radius: 11px;\n    padding: 2px 8px;\n    color: ${theme.colors.text.primary};\n    background-color: ${theme.colors.background.secondary};\n  `,\n});\n","import {\n  AdHocVariableFilter,\n  DataQueryResponse,\n  FieldType,\n  LoadingState,\n  MetricFindValue,\n  TestDataSourceResponse,\n} from '@grafana/data';\nimport { RuntimeDataSource } from '@grafana/scenes';\nimport { userStorage } from '@shared/infrastructure/userStorage';\nimport { isEqual } from 'lodash';\n\nimport { PanelType } from '../../components/SceneByVariableRepeaterGrid/components/ScenePanelTypeSwitcher';\nimport { PYROSCOPE_FAVORITES_DATA_SOURCE } from '../pyroscope-data-sources';\nimport { getProfileMetricLabel } from '../series/helpers/getProfileMetricLabel';\n\nexport type Favorite = {\n  index: number; // for colouring purpose only\n  queryRunnerParams: {\n    serviceName: string;\n    profileMetricId: string;\n    groupBy?: {\n      label: string;\n    };\n    filters?: AdHocVariableFilter[];\n  };\n  panelType?: PanelType;\n};\n\nexport class FavoritesDataSource extends RuntimeDataSource {\n  static getAllFavorites() {\n    return userStorage.get(userStorage.KEYS.PROFILES_EXPLORER)?.favorites || [];\n  }\n\n  static areFavoritesEqual(f1: Favorite, f2: Favorite) {\n    return f1.panelType === f2.panelType && isEqual(f1.queryRunnerParams, f2.queryRunnerParams);\n  }\n\n  static exists(favorite: Favorite) {\n    return FavoritesDataSource.getAllFavorites().some((f: Favorite) =>\n      FavoritesDataSource.areFavoritesEqual(f, favorite)\n    );\n  }\n\n  static addFavorite(favorite: Favorite) {\n    const storage = userStorage.get(userStorage.KEYS.PROFILES_EXPLORER);\n    storage.favorites.push(favorite);\n    userStorage.set(userStorage.KEYS.PROFILES_EXPLORER, storage);\n  }\n\n  static removeFavorite(favorite: Favorite) {\n    const storage = userStorage.get(userStorage.KEYS.PROFILES_EXPLORER);\n    storage.favorites = storage.favorites.filter((f: Favorite) => !FavoritesDataSource.areFavoritesEqual(f, favorite));\n    userStorage.set(userStorage.KEYS.PROFILES_EXPLORER, storage);\n  }\n\n  constructor() {\n    super(PYROSCOPE_FAVORITES_DATA_SOURCE.type, PYROSCOPE_FAVORITES_DATA_SOURCE.uid);\n\n    const storage = userStorage.get(userStorage.KEYS.PROFILES_EXPLORER) || {};\n    storage.favorites ||= [];\n\n    // ensures backward compatibility for older favorites without panel type\n    storage.favorites = storage.favorites.map((f: Favorite) => ({\n      panelType: PanelType.TIMESERIES,\n      ...f,\n    }));\n\n    userStorage.set(userStorage.KEYS.PROFILES_EXPLORER, storage);\n  }\n\n  async query(): Promise<DataQueryResponse> {\n    return {\n      state: LoadingState.Done,\n      data: [\n        {\n          name: 'Favories',\n          fields: [\n            {\n              name: null,\n              type: FieldType.other,\n              values: [],\n              config: {},\n            },\n          ],\n          length: 0,\n        },\n      ],\n    };\n  }\n\n  async metricFindQuery(): Promise<MetricFindValue[]> {\n    return FavoritesDataSource.getAllFavorites().map((f: Favorite) => {\n      const { serviceName, profileMetricId, groupBy, filters } = f.queryRunnerParams || {};\n      const textParts = [serviceName, getProfileMetricLabel(profileMetricId)];\n\n      if (groupBy?.label) {\n        textParts.push(groupBy.label);\n      }\n\n      if (filters?.length) {\n        textParts.push(filters.map(({ key, operator, value }) => `${key}${operator}\"${value}\"`).join(', '));\n      }\n\n      return {\n        value: JSON.stringify({ value: JSON.stringify(f), ...f }),\n        text: textParts.join(' · '),\n      };\n    });\n  }\n\n  async testDatasource(): Promise<TestDataSourceResponse> {\n    return {\n      status: 'success',\n      message: 'OK',\n    };\n  }\n}\n","import { AdHocVariableFilter } from '@grafana/data';\nimport { sceneGraph, SceneObject } from '@grafana/scenes';\nimport { clone, defaults, uniqBy } from 'lodash';\n\nimport { GridItemData } from '../../components/SceneByVariableRepeaterGrid/types/GridItemData';\nimport { FiltersVariable } from '../../domain/variables/FiltersVariable/FiltersVariable';\nimport { getSceneVariableValue } from '../../helpers/getSceneVariableValue';\n\ntype InterpolatedQueryRunnerParams = GridItemData['queryRunnerParams'] & {\n  serviceName: string;\n  profileMetricId: string;\n  filters: AdHocVariableFilter[];\n};\n\nexport function interpolateQueryRunnerVariables(\n  sceneObject: SceneObject,\n  item: GridItemData\n): InterpolatedQueryRunnerParams {\n  const { queryRunnerParams } = item;\n\n  const interpolatedParams = defaults(clone(queryRunnerParams), {\n    serviceName: getSceneVariableValue(sceneObject, 'serviceName'),\n    profileMetricId: getSceneVariableValue(sceneObject, 'profileMetricId'),\n  });\n\n  // state.filters has the AdHocFilterWithLabels[] type so we get rid of keyLabel and valueLabel\n  const parsedFilters = (sceneGraph.lookupVariable('filters', sceneObject) as FiltersVariable).state.filters.map(\n    ({ key, operator, value }) => ({ key, operator, value })\n  );\n\n  interpolatedParams.filters = uniqBy(\n    [...(interpolatedParams.filters || []), ...parsedFilters],\n    ({ key, operator, value }) => `${key}${operator}${value}`\n  );\n\n  return interpolatedParams as InterpolatedQueryRunnerParams;\n}\n","import { css } from '@emotion/css';\nimport { SceneComponentProps, SceneObjectBase, SceneObjectState, VariableDependencyConfig } from '@grafana/scenes';\nimport { IconButton, useStyles2 } from '@grafana/ui';\nimport { reportInteraction } from '@shared/domain/reportInteraction';\nimport React from 'react';\n\nimport { GridItemData } from '../../components/SceneByVariableRepeaterGrid/types/GridItemData';\nimport { Favorite, FavoritesDataSource } from '../../infrastructure/favorites/FavoritesDataSource';\nimport { interpolateQueryRunnerVariables } from '../../infrastructure/helpers/interpolateQueryRunnerVariables';\n\ninterface FavActionState extends SceneObjectState {\n  item: GridItemData;\n  isFav?: boolean;\n  skipVariablesInterpolation?: boolean;\n}\n\nexport class FavAction extends SceneObjectBase<FavActionState> {\n  protected _variableDependency = new VariableDependencyConfig(this, {\n    variableNames: ['serviceName', 'profileMetricId', 'filters'],\n    onReferencedVariableValueChanged: () => {\n      this.update();\n    },\n  });\n\n  constructor(state: FavActionState) {\n    super(state);\n\n    this.addActivationHandler(() => this.update());\n  }\n\n  update() {\n    this.setState({ isFav: this.isStored() });\n  }\n\n  isStored() {\n    return FavoritesDataSource.exists(this.buildFavorite());\n  }\n\n  static buildFavorite(item: GridItemData): Favorite {\n    const { index, queryRunnerParams, panelType } = item;\n\n    const favorite: Favorite = {\n      index,\n      queryRunnerParams: {\n        serviceName: queryRunnerParams.serviceName as string,\n        profileMetricId: queryRunnerParams.profileMetricId as string,\n      },\n      panelType,\n    };\n\n    // we don't store values, we'll fetch all timeseries by using the `groupBy` parameter\n    if (queryRunnerParams.groupBy) {\n      favorite.queryRunnerParams.groupBy = {\n        label: queryRunnerParams.groupBy.label,\n      };\n    }\n\n    // we don't store filters if empty\n    if (queryRunnerParams.filters?.length) {\n      favorite.queryRunnerParams.filters = queryRunnerParams.filters;\n    }\n\n    return favorite;\n  }\n\n  buildFavorite(): Favorite {\n    const { item, skipVariablesInterpolation } = this.state;\n\n    return FavAction.buildFavorite({\n      index: item.index,\n      queryRunnerParams: skipVariablesInterpolation\n        ? item.queryRunnerParams\n        : interpolateQueryRunnerVariables(this, item),\n      panelType: item.panelType,\n    } as GridItemData);\n  }\n\n  public onClick = () => {\n    reportInteraction('g_pyroscope_app_fav_action_clicked', { favAfterClick: !this.state.isFav });\n\n    if (!this.state.isFav) {\n      FavoritesDataSource.addFavorite(this.buildFavorite());\n    } else {\n      FavoritesDataSource.removeFavorite(this.buildFavorite());\n    }\n\n    this.setState({ isFav: !this.state.isFav });\n  };\n\n  public static Component = ({ model }: SceneComponentProps<FavAction>) => {\n    const styles = useStyles2(getStyles);\n    const { isFav } = model.useState();\n\n    return (\n      <IconButton\n        className={isFav ? styles.favedButton : styles.notFavedbutton}\n        name={isFav ? 'favorite' : 'star'}\n        variant=\"secondary\"\n        size=\"sm\"\n        aria-label={isFav ? 'Unfavorite' : 'Favorite'}\n        tooltip={isFav ? 'Unfavorite' : 'Favorite'}\n        tooltipPlacement=\"top\"\n        onClick={model.onClick}\n      />\n    );\n  };\n}\n\nconst getStyles = () => ({\n  favedButton: css`\n    color: #f2cc0d;\n    margin: 0;\n  `,\n  notFavedbutton: css`\n    margin: 0;\n  `,\n});\n","import { localeCompare } from '@shared/domain/localeCompare';\n\nimport { FavAction } from '../../..//domain/actions/FavAction';\nimport { FavoritesDataSource } from '../../../infrastructure/favorites/FavoritesDataSource';\nimport { GridItemData } from '../types/GridItemData';\n\nexport const sortFavGridItems: (a: GridItemData, b: GridItemData) => number = function (a, b) {\n  const aIsFav = FavoritesDataSource.exists(FavAction.buildFavorite(a));\n  const bIsFav = FavoritesDataSource.exists(FavAction.buildFavorite(b));\n\n  if (aIsFav && bIsFav) {\n    return localeCompare(a.label, b.label);\n  }\n\n  if (bIsFav) {\n    return +1;\n  }\n\n  if (aIsFav) {\n    return -1;\n  }\n\n  return 0;\n};\n","import { DashboardCursorSync, VariableRefresh } from '@grafana/data';\nimport {\n  behaviors,\n  EmbeddedSceneState,\n  QueryVariable,\n  SceneComponentProps,\n  SceneCSSGridItem,\n  SceneCSSGridLayout,\n  sceneGraph,\n  SceneObjectBase,\n  VariableValueOption,\n  VizPanelState,\n} from '@grafana/scenes';\nimport { Spinner } from '@grafana/ui';\nimport { noOp } from '@shared/domain/noOp';\nimport { logger } from '@shared/infrastructure/tracking/logger';\nimport { debounce, isEqual } from 'lodash';\nimport React from 'react';\n\nimport { EventTimeseriesDataReceived } from '../../domain/events/EventTimeseriesDataReceived';\nimport { FiltersVariable } from '../../domain/variables/FiltersVariable/FiltersVariable';\nimport { getSceneVariableValue } from '../../helpers/getSceneVariableValue';\nimport { vizPanelBuilder } from '../../helpers/vizPanelBuilder';\nimport { SceneLabelValuesBarGauge } from '../SceneLabelValuesBarGauge';\nimport { SceneLabelValuesHistogram } from '../SceneLabelValuesHistogram';\nimport { SceneLabelValuesTable } from '../SceneLabelValuesTable';\nimport { SceneLabelValuesTimeseries } from '../SceneLabelValuesTimeseries/SceneLabelValuesTimeseries';\nimport { SceneEmptyState } from './components/SceneEmptyState/SceneEmptyState';\nimport { SceneErrorState } from './components/SceneErrorState/SceneErrorState';\nimport { LayoutType, SceneLayoutSwitcher, SceneLayoutSwitcherState } from './components/SceneLayoutSwitcher';\nimport { SceneNoDataSwitcher, SceneNoDataSwitcherState } from './components/SceneNoDataSwitcher';\nimport { ScenePanelTypeSwitcher } from './components/ScenePanelTypeSwitcher';\nimport { SceneQuickFilter, SceneQuickFilterState } from './components/SceneQuickFilter';\nimport { sortFavGridItems } from './domain/sortFavGridItems';\nimport { GridItemData } from './types/GridItemData';\n\ninterface SceneByVariableRepeaterGridState extends EmbeddedSceneState {\n  variableName: string;\n  items: GridItemData[];\n  headerActions: (item: GridItemData, items: GridItemData[]) => VizPanelState['headerActions'];\n  mapOptionToItem: (\n    option: VariableValueOption,\n    index: number,\n    variablesValues: Record<string, string>\n  ) => GridItemData | null;\n  sortItemsFn: (a: GridItemData, b: GridItemData) => number;\n  hideNoData: boolean;\n}\n\nconst GRID_TEMPLATE_COLUMNS = 'repeat(auto-fit, minmax(400px, 1fr))';\nconst GRID_TEMPLATE_ROWS = '1fr';\nconst GRID_AUTO_ROWS = '240px';\n\nexport class SceneByVariableRepeaterGrid extends SceneObjectBase<SceneByVariableRepeaterGridState> {\n  static buildGridItemKey(item: GridItemData) {\n    return `grid-item-${item.index}-${item.value}`;\n  }\n\n  static getGridColumnsTemplate(layout: LayoutType) {\n    return layout === LayoutType.ROWS ? GRID_TEMPLATE_ROWS : GRID_TEMPLATE_COLUMNS;\n  }\n\n  constructor({\n    key,\n    variableName,\n    headerActions,\n    mapOptionToItem,\n    sortItemsFn,\n  }: {\n    key: string;\n    variableName: SceneByVariableRepeaterGridState['variableName'];\n    headerActions: SceneByVariableRepeaterGridState['headerActions'];\n    mapOptionToItem: SceneByVariableRepeaterGridState['mapOptionToItem'];\n    sortItemsFn?: SceneByVariableRepeaterGridState['sortItemsFn'];\n  }) {\n    super({\n      key,\n      variableName,\n      items: [],\n      headerActions,\n      mapOptionToItem,\n      sortItemsFn: sortItemsFn || sortFavGridItems,\n      hideNoData: false,\n      body: new SceneCSSGridLayout({\n        templateColumns: SceneByVariableRepeaterGrid.getGridColumnsTemplate(SceneLayoutSwitcher.DEFAULT_LAYOUT),\n        autoRows: GRID_AUTO_ROWS,\n        isLazy: true,\n        $behaviors: [\n          new behaviors.CursorSync({\n            key: 'metricCrosshairSync',\n            sync: DashboardCursorSync.Crosshair,\n          }),\n        ],\n        children: [],\n      }),\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  onActivate() {\n    // here we try to emulate VariableDependencyConfig.onVariableUpdateCompleted\n    const variable = sceneGraph.lookupVariable(this.state.variableName, this) as QueryVariable & { update: () => void };\n\n    const variableSub = variable.subscribeToState((newState, prevState) => {\n      if (!newState.loading && prevState.loading) {\n        this.renderGridItems();\n      }\n    });\n\n    // if the variable is inactive, the data source will not fetch the options\n    // so we force an update here to be sure we have the latest values\n    variable.update();\n\n    const refreshSub = this.subscribeToRefreshClick();\n    const quickFilterSub = this.subscribeToQuickFilterChange();\n    const layoutChangeSub = this.subscribeToLayoutChange();\n    const hideNoDataSub = this.subscribeToHideNoDataChange();\n    const filtersSub = this.subscribeToFiltersChange();\n\n    return () => {\n      filtersSub.unsubscribe();\n      hideNoDataSub.unsubscribe();\n      layoutChangeSub.unsubscribe();\n      quickFilterSub.unsubscribe();\n      refreshSub.unsubscribe();\n\n      variableSub.unsubscribe();\n    };\n  }\n\n  subscribeToRefreshClick() {\n    const variable = sceneGraph.lookupVariable(this.state.variableName, this) as QueryVariable & { update: () => void };\n    const originalRefresh = variable.state.refresh;\n\n    variable.setState({ refresh: VariableRefresh.never });\n\n    const onClickRefresh = () => {\n      variable.update();\n    };\n\n    // start of hack, for a better UX: we disable the variable \"refresh\" option and we allow the user to reload the list only by clicking on the \"Refresh\" button\n    // if we don't do this, every time the time range changes (even with auto-refresh on),\n    // all the timeseries present on the screen would be re-created, resulting in blinking and a poor UX\n    const refreshButton = document.querySelector(\n      '[data-testid=\"data-testid RefreshPicker run button\"]'\n    ) as HTMLButtonElement;\n\n    if (!refreshButton) {\n      logger.error(\n        new Error('SceneByVariableRepeaterGrid: Refresh button not found! The list of items will never be updated.')\n      );\n    }\n\n    refreshButton?.addEventListener('click', onClickRefresh);\n    refreshButton?.setAttribute('title', 'Click to completely refresh all the panels present on the screen');\n    // end of hack\n\n    return {\n      unsubscribe() {\n        refreshButton?.removeAttribute('title');\n        refreshButton?.removeEventListener('click', onClickRefresh);\n        variable.setState({ refresh: originalRefresh });\n      },\n    };\n  }\n\n  subscribeToQuickFilterChange() {\n    const quickFilter = sceneGraph.findByKeyAndType(this, 'quick-filter', SceneQuickFilter);\n\n    this.subscribeToState((newState, prevState) => {\n      if (newState.items.length !== prevState.items.length) {\n        quickFilter.setResultsCount(newState.items.length);\n      }\n    });\n\n    const onChangeState = (newState: SceneQuickFilterState, prevState?: SceneQuickFilterState) => {\n      if (newState.searchText !== prevState?.searchText) {\n        this.renderGridItems();\n      }\n    };\n\n    return quickFilter.subscribeToState(debounce(onChangeState, SceneQuickFilter.DEBOUNCE_DELAY));\n  }\n\n  subscribeToLayoutChange() {\n    const layoutSwitcher = sceneGraph.findByKeyAndType(this, 'layout-switcher', SceneLayoutSwitcher);\n\n    const body = this.state.body as SceneCSSGridLayout;\n\n    const onChangeState = (newState: SceneLayoutSwitcherState, prevState?: SceneLayoutSwitcherState) => {\n      if (newState.layout !== prevState?.layout) {\n        body.setState({\n          templateColumns: SceneByVariableRepeaterGrid.getGridColumnsTemplate(newState.layout),\n        });\n      }\n    };\n\n    onChangeState(layoutSwitcher.state);\n\n    return layoutSwitcher.subscribeToState(onChangeState);\n  }\n\n  subscribeToHideNoDataChange() {\n    const noDataSwitcher = sceneGraph.findByKeyAndType(this, 'no-data-switcher', SceneNoDataSwitcher);\n\n    if (!noDataSwitcher.isActive) {\n      this.setState({ hideNoData: false });\n\n      return {\n        unsubscribe: noOp,\n      };\n    }\n\n    const onChangeState = (newState: SceneNoDataSwitcherState, prevState?: SceneNoDataSwitcherState) => {\n      if (newState.hideNoData !== prevState?.hideNoData) {\n        this.setState({ hideNoData: newState.hideNoData === 'on' });\n\n        // we force render because this.state.items certainly have not changed but we want to update the UI panels anyway\n        this.renderGridItems(true);\n      }\n    };\n\n    onChangeState(noDataSwitcher.state);\n\n    return noDataSwitcher.subscribeToState(onChangeState);\n  }\n\n  subscribeToFiltersChange() {\n    const filtersVariable = sceneGraph.findByKeyAndType(this, 'filters', FiltersVariable);\n    const noDataSwitcher = sceneGraph.findByKeyAndType(this, 'no-data-switcher', SceneNoDataSwitcher);\n\n    // the handler will be called each time a filter is added/removed/modified\n    return filtersVariable.subscribeToState(() => {\n      if (noDataSwitcher.state.hideNoData === 'on') {\n        // to be sure the list is updated we force render because the filters only influence the query made in each panel\n        this.renderGridItems(true);\n      }\n    });\n  }\n\n  buildItemsData(variable: QueryVariable) {\n    const { mapOptionToItem } = this.state;\n\n    const variableValues = {\n      serviceName: getSceneVariableValue(this, 'serviceName'),\n      profileMetricId: getSceneVariableValue(this, 'profileMetricId'),\n      panelType: sceneGraph.findByKeyAndType(this, 'panel-type-switcher', ScenePanelTypeSwitcher).state.panelType,\n    };\n\n    const items = variable.state.options\n      .map((option, i) => mapOptionToItem(option, i, variableValues))\n      .filter(Boolean) as GridItemData[];\n\n    return this.filterItems(items).sort(this.state.sortItemsFn);\n  }\n\n  shouldRenderItems(newItems: SceneByVariableRepeaterGridState['items']) {\n    const { items } = this.state;\n\n    if (!newItems.length || items.length !== newItems.length) {\n      return true;\n    }\n\n    return !isEqual(items, newItems);\n  }\n\n  renderGridItems(forceRender = false) {\n    const variable = sceneGraph.lookupVariable(this.state.variableName, this) as QueryVariable;\n\n    if (variable.state.loading) {\n      return;\n    }\n\n    if (variable.state.error) {\n      this.renderErrorState(variable.state.error);\n      return;\n    }\n\n    const newItems = this.buildItemsData(variable);\n\n    if (!forceRender && !this.shouldRenderItems(newItems)) {\n      return;\n    }\n\n    this.setState({ items: newItems });\n\n    if (!this.state.items.length) {\n      this.renderEmptyState();\n      return;\n    }\n\n    const gridItems = this.state.items.map((item) => {\n      const vizPanel = vizPanelBuilder(item.panelType, {\n        item,\n        headerActions: this.state.headerActions.bind(null, item, this.state.items),\n      });\n\n      if (this.state.hideNoData) {\n        this.setupHideNoData(vizPanel);\n      }\n\n      return new SceneCSSGridItem({\n        key: SceneByVariableRepeaterGrid.buildGridItemKey(item),\n        body: vizPanel,\n      });\n    });\n\n    (this.state.body as SceneCSSGridLayout).setState({\n      autoRows: GRID_AUTO_ROWS, // required to have the correct grid items height\n      children: gridItems,\n    });\n  }\n\n  setupHideNoData(\n    vizPanel: SceneLabelValuesTimeseries | SceneLabelValuesBarGauge | SceneLabelValuesHistogram | SceneLabelValuesTable\n  ) {\n    const sub = vizPanel.subscribeToEvent(EventTimeseriesDataReceived, (event) => {\n      if (event.payload.series?.length) {\n        return;\n      }\n\n      const gridItem = sceneGraph.getAncestor(vizPanel, SceneCSSGridItem);\n      const { key: gridItemKey } = gridItem.state;\n      const grid = sceneGraph.getAncestor(gridItem, SceneCSSGridLayout);\n\n      const filteredChildren = grid.state.children.filter((c) => c.state.key !== gridItemKey);\n\n      if (!filteredChildren.length) {\n        this.renderEmptyState();\n      } else {\n        grid.setState({ children: filteredChildren });\n      }\n    });\n\n    vizPanel.addActivationHandler(() => {\n      return () => {\n        sub.unsubscribe();\n      };\n    });\n  }\n\n  filterItems(items: SceneByVariableRepeaterGridState['items']) {\n    const quickFilterScene = sceneGraph.findByKeyAndType(this, 'quick-filter', SceneQuickFilter);\n    const { searchText } = quickFilterScene.state;\n\n    if (!searchText) {\n      return items;\n    }\n\n    const regexes = searchText\n      .split(',')\n      .map((t) => t.trim())\n      .filter(Boolean)\n      .map((r) => {\n        try {\n          return new RegExp(r);\n        } catch {\n          return null;\n        }\n      })\n      .filter(Boolean) as RegExp[];\n\n    return items.filter(({ label }) => regexes.some((r) => r.test(label)));\n  }\n\n  renderEmptyState() {\n    (this.state.body as SceneCSSGridLayout).setState({\n      autoRows: '480px',\n      children: [\n        new SceneCSSGridItem({\n          body: new SceneEmptyState({\n            message: 'No results',\n          }),\n        }),\n      ],\n    });\n  }\n\n  renderErrorState(error: Error) {\n    (this.state.body as SceneCSSGridLayout).setState({\n      autoRows: '480px',\n      children: [\n        new SceneCSSGridItem({\n          body: new SceneErrorState({\n            message: error.message || error.toString(),\n          }),\n        }),\n      ],\n    });\n  }\n\n  static Component({ model }: SceneComponentProps<SceneByVariableRepeaterGrid>) {\n    const { body, variableName } = model.useState();\n    const { loading } = (sceneGraph.lookupVariable(variableName, model) as QueryVariable)?.useState();\n\n    return loading ? <Spinner /> : <body.Component model={body} />;\n  }\n}\n","import { BusEventWithPayload } from '@grafana/data';\n\nimport { GridItemData } from '../../components/SceneByVariableRepeaterGrid/types/GridItemData';\n\nexport interface EventExpandPanelPayload {\n  item: GridItemData;\n}\n\nexport class EventExpandPanel extends BusEventWithPayload<EventExpandPanelPayload> {\n  public static type = 'expand-panel';\n}\n","import { BusEventWithPayload } from '@grafana/data';\n\nimport { GridItemData } from '../../components/SceneByVariableRepeaterGrid/types/GridItemData';\n\nexport interface EventSelectLabelPayload {\n  item: GridItemData;\n}\n\nexport class EventSelectLabel extends BusEventWithPayload<EventSelectLabelPayload> {\n  public static type = 'select-label';\n}\n","import { BusEventWithPayload } from '@grafana/data';\n\nimport { GridItemData } from '../../components/SceneByVariableRepeaterGrid/types/GridItemData';\n\nexport interface EventViewServiceFlameGraphPayload {\n  item: GridItemData;\n}\n\nexport class EventViewServiceFlameGraph extends BusEventWithPayload<EventViewServiceFlameGraphPayload> {\n  public static type = 'view-service-flame-graph';\n}\n","import { BusEventWithPayload } from '@grafana/data';\n\nimport { GridItemData } from '../../components/SceneByVariableRepeaterGrid/types/GridItemData';\n\nexport interface EventViewServiceLabelsPayload {\n  item: GridItemData;\n}\n\nexport class EventViewServiceLabels extends BusEventWithPayload<EventViewServiceLabelsPayload> {\n  public static type = 'view-service-labels';\n}\n","import { BusEventWithPayload } from '@grafana/data';\n\nimport { GridItemData } from '../../components/SceneByVariableRepeaterGrid/types/GridItemData';\n\nexport interface EventViewServiceProfilesPayload {\n  item: GridItemData;\n}\n\nexport class EventViewServiceProfiles extends BusEventWithPayload<EventViewServiceProfilesPayload> {\n  public static type = 'view-service-profiles';\n}\n","import { css } from '@emotion/css';\nimport { SceneComponentProps, SceneObject, SceneObjectBase, SceneObjectState } from '@grafana/scenes';\nimport { Button, IconName, useStyles2 } from '@grafana/ui';\nimport { reportInteraction } from '@shared/domain/reportInteraction';\nimport { getProfileMetric, ProfileMetricId } from '@shared/infrastructure/profile-metrics/getProfileMetric';\nimport { merge } from 'lodash';\nimport React from 'react';\n\nimport { GridItemData } from '../../components/SceneByVariableRepeaterGrid/types/GridItemData';\nimport { getSceneVariableValue } from '../../helpers/getSceneVariableValue';\nimport { interpolateQueryRunnerVariables } from '../../infrastructure/helpers/interpolateQueryRunnerVariables';\nimport { EventExpandPanel, EventExpandPanelPayload } from '../events/EventExpandPanel';\nimport { EventSelectLabel, EventSelectLabelPayload } from '../events/EventSelectLabel';\nimport { EventViewServiceFlameGraph, EventViewServiceFlameGraphPayload } from '../events/EventViewServiceFlameGraph';\nimport { EventViewServiceLabels, EventViewServiceLabelsPayload } from '../events/EventViewServiceLabels';\nimport { EventViewServiceProfiles, EventViewServiceProfilesPayload } from '../events/EventViewServiceProfiles';\n\ntype ActionType = 'expand-panel' | 'select-label' | 'view-flame-graph' | 'view-labels' | 'view-profiles';\n\ntype EventLookup = {\n  icon?: IconName;\n  label?: string;\n  ariaLabel?: string;\n  tooltip: (item: GridItemData, model: SceneObject) => string;\n  EventConstructor:\n    | (new (payload: EventExpandPanelPayload) => EventExpandPanel)\n    | (new (payload: EventSelectLabelPayload) => EventSelectLabel)\n    | (new (payload: EventViewServiceFlameGraphPayload) => EventViewServiceFlameGraph)\n    | (new (payload: EventViewServiceLabelsPayload) => EventViewServiceLabels)\n    | (new (payload: EventViewServiceProfilesPayload) => EventViewServiceProfiles);\n};\n\nconst Events = new Map<ActionType, EventLookup>([\n  [\n    'expand-panel',\n    Object.freeze({\n      ariaLabel: 'Expand panel',\n      icon: 'expand-arrows',\n      tooltip: () => 'Expand this panel to view all the data for the current filters',\n      EventConstructor: EventExpandPanel,\n    }),\n  ],\n  [\n    'select-label',\n    Object.freeze({\n      label: 'Select',\n      tooltip: ({ queryRunnerParams }) => `View \"${queryRunnerParams.groupBy?.label}\" values breakdown`,\n      EventConstructor: EventSelectLabel,\n    }),\n  ],\n  [\n    'view-flame-graph',\n    Object.freeze({\n      label: 'Flame graph',\n      tooltip: ({ queryRunnerParams }, model) => {\n        const serviceName = queryRunnerParams.serviceName || getSceneVariableValue(model, 'serviceName');\n        const profileMetricId = queryRunnerParams.profileMetricId || getSceneVariableValue(model, 'profileMetricId');\n        return `View the \"${getProfileMetric(profileMetricId as ProfileMetricId).type}\" flame graph of ${serviceName}`;\n      },\n      EventConstructor: EventViewServiceFlameGraph,\n    }),\n  ],\n  [\n    'view-labels',\n    Object.freeze({\n      label: 'Labels',\n      tooltip: ({ queryRunnerParams }, model) => {\n        const serviceName = queryRunnerParams.serviceName || getSceneVariableValue(model, 'serviceName');\n        return `Explore the labels of ${serviceName}`;\n      },\n      EventConstructor: EventViewServiceLabels,\n    }),\n  ],\n  [\n    'view-profiles',\n    Object.freeze({\n      label: 'Profile types',\n      tooltip: ({ queryRunnerParams }, model) => {\n        const serviceName = queryRunnerParams.serviceName || getSceneVariableValue(model, 'serviceName');\n        return `View the profile types of ${serviceName}`;\n      },\n      EventConstructor: EventViewServiceProfiles,\n    }),\n  ],\n]);\n\ninterface SelectActionState extends SceneObjectState {\n  type: ActionType;\n  EventConstructor: EventLookup['EventConstructor'];\n  item: GridItemData;\n  label?: string;\n  ariaLabel?: string;\n  icon?: IconName;\n  tooltip?: EventLookup['tooltip'];\n  skipVariablesInterpolation?: boolean;\n}\n\nexport class SelectAction extends SceneObjectBase<SelectActionState> {\n  constructor({\n    type,\n    item,\n    tooltip,\n    skipVariablesInterpolation,\n  }: {\n    type: ActionType;\n    item: SelectActionState['item'];\n    tooltip?: SelectActionState['tooltip'];\n    skipVariablesInterpolation?: SelectActionState['skipVariablesInterpolation'];\n  }) {\n    const lookup = Events.get(type);\n    if (!lookup) {\n      throw new TypeError(`Unknown event type=\"${type}\"!`);\n    }\n\n    super({ type, item, ...merge({}, lookup, { tooltip, skipVariablesInterpolation }) });\n  }\n\n  public onClick = () => {\n    reportInteraction('g_pyroscope_app_select_action_clicked', { type: this.state.type });\n\n    this.publishEvent(this.buildEvent(), true);\n  };\n\n  buildEvent() {\n    const { EventConstructor, item, skipVariablesInterpolation } = this.state;\n\n    const completeItem = {\n      ...item,\n      queryRunnerParams: skipVariablesInterpolation\n        ? item.queryRunnerParams\n        : interpolateQueryRunnerVariables(this, item),\n    };\n\n    return new EventConstructor({\n      item: completeItem,\n    });\n  }\n\n  public static Component = ({ model }: SceneComponentProps<SelectAction>) => {\n    const styles = useStyles2(getStyles);\n    const { ariaLabel, label, icon, tooltip, item } = model.useState();\n\n    return (\n      <Button\n        className={styles.selectButton}\n        aria-label={ariaLabel || label}\n        variant=\"primary\"\n        size=\"sm\"\n        fill=\"text\"\n        onClick={model.onClick}\n        icon={icon}\n        tooltip={tooltip?.(item, model)}\n        tooltipPlacement=\"top\"\n      >\n        {label}\n      </Button>\n    );\n  };\n}\n\nconst getStyles = () => ({\n  selectButton: css`\n    margin: 0;\n    padding: 0;\n  `,\n});\n","import {\n  EmbeddedSceneState,\n  SceneComponentProps,\n  sceneGraph,\n  SceneObjectBase,\n  SceneVariableSet,\n} from '@grafana/scenes';\nimport React from 'react';\n\nimport { SceneByVariableRepeaterGrid } from '../../components/SceneByVariableRepeaterGrid/SceneByVariableRepeaterGrid';\nimport { FavAction } from '../../domain/actions/FavAction';\nimport { SelectAction } from '../../domain/actions/SelectAction';\nimport { ProfileMetricVariable } from '../../domain/variables/ProfileMetricVariable';\nimport { ServiceNameVariable } from '../../domain/variables/ServiceNameVariable/ServiceNameVariable';\nimport { SceneLayoutSwitcher } from '../SceneByVariableRepeaterGrid/components/SceneLayoutSwitcher';\nimport { PanelType } from '../SceneByVariableRepeaterGrid/components/ScenePanelTypeSwitcher';\nimport { SceneQuickFilter } from '../SceneByVariableRepeaterGrid/components/SceneQuickFilter';\n\ninterface SceneExploreAllServicesState extends EmbeddedSceneState {}\n\nexport class SceneExploreAllServices extends SceneObjectBase<SceneExploreAllServicesState> {\n  constructor() {\n    super({\n      key: 'explore-all-services',\n      $variables: new SceneVariableSet({\n        variables: [\n          // we use a custom instance of ServiceNameVariable to display only the services associated to the selected profile metric\n          new ServiceNameVariable({\n            query: ServiceNameVariable.QUERY_PROFILE_METRIC_DEPENDENT,\n            skipUrlSync: true,\n          }),\n        ],\n      }),\n      body: new SceneByVariableRepeaterGrid({\n        key: 'all-services-grid',\n        variableName: 'serviceName',\n        mapOptionToItem: (option, index, { profileMetricId }) => ({\n          index,\n          value: option.value as string,\n          label: option.label,\n          queryRunnerParams: {\n            serviceName: option.value as string,\n            profileMetricId,\n          },\n          panelType: PanelType.TIMESERIES,\n        }),\n        headerActions: (item) => [\n          new SelectAction({ type: 'view-profiles', item }),\n          new SelectAction({ type: 'view-labels', item }),\n          new SelectAction({ type: 'view-flame-graph', item }),\n          new FavAction({ item }),\n        ],\n      }),\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  onActivate() {\n    sceneGraph\n      .findByKeyAndType(this, 'quick-filter', SceneQuickFilter)\n      .setPlaceholder('Search services (comma-separated regexes are supported)');\n  }\n\n  // see SceneProfilesExplorer\n  getVariablesAndGridControls() {\n    return {\n      variables: [sceneGraph.findByKeyAndType(this, 'profileMetricId', ProfileMetricVariable)],\n      gridControls: [\n        sceneGraph.findByKeyAndType(this, 'quick-filter', SceneQuickFilter),\n        sceneGraph.findByKeyAndType(this, 'layout-switcher', SceneLayoutSwitcher),\n      ],\n    };\n  }\n\n  static Component({ model }: SceneComponentProps<SceneExploreAllServices>) {\n    const { body } = model.useState();\n\n    return <body.Component model={body} />;\n  }\n}\n","import { SceneComponentProps, SceneObject, SceneObjectBase, SceneObjectState } from '@grafana/scenes';\nimport { Drawer } from '@grafana/ui';\nimport React from 'react';\n\ninterface SceneDrawerState extends SceneObjectState {\n  key?: string;\n  isOpen?: boolean;\n  title?: string;\n  subTitle?: string;\n  body?: SceneObject;\n}\n\nexport class SceneDrawer extends SceneObjectBase<SceneDrawerState> {\n  constructor(state?: SceneDrawerState) {\n    super({\n      key: 'drawer',\n      isOpen: false,\n      ...state,\n    });\n  }\n\n  open = ({\n    title,\n    subTitle,\n    body,\n  }: {\n    title?: SceneDrawerState['title'];\n    subTitle?: SceneDrawerState['subTitle'];\n    body?: SceneDrawerState['body'];\n  }) => {\n    this.setState({ ...this.state, isOpen: true, title, subTitle, body });\n  };\n\n  close = () => {\n    this.setState({ isOpen: false });\n  };\n\n  static Component = ({ model }: SceneComponentProps<SceneDrawer>) => {\n    const { isOpen, title, subTitle, body } = model.useState();\n\n    return (\n      <>\n        {body && isOpen && (\n          <Drawer size=\"lg\" title={title} subtitle={subTitle} closeOnMaskClick onClose={model.close}>\n            <body.Component model={body} />\n          </Drawer>\n        )}\n      </>\n    );\n  };\n}\n","import { VariableRefresh } from '@grafana/data';\nimport { QueryVariable, VariableValueOption } from '@grafana/scenes';\nimport { lastValueFrom } from 'rxjs';\n\nimport { PYROSCOPE_FAVORITES_DATA_SOURCE } from '../../infrastructure/pyroscope-data-sources';\n\nexport class FavoriteVariable extends QueryVariable {\n  constructor() {\n    super({\n      name: 'favorite',\n      label: '🔖 Favorite',\n      datasource: PYROSCOPE_FAVORITES_DATA_SOURCE,\n      // \"hack\": we want to subscribe to changes of dataSource\n      query: '$dataSource',\n      loading: true,\n      refresh: VariableRefresh.never,\n      skipUrlSync: true,\n    });\n  }\n\n  async update() {\n    if (this.state.loading) {\n      return;\n    }\n\n    let options: VariableValueOption[] = [];\n    let error = null;\n\n    this.setState({ loading: true, options: [], error: null });\n\n    try {\n      options = await lastValueFrom(this.getValueOptions({}));\n    } catch (e) {\n      error = e;\n    } finally {\n      this.setState({ loading: false, options, error });\n    }\n  }\n}\n","import {\n  EmbeddedSceneState,\n  SceneComponentProps,\n  sceneGraph,\n  SceneObjectBase,\n  SceneVariableSet,\n} from '@grafana/scenes';\nimport { localeCompare } from '@shared/domain/localeCompare';\nimport React from 'react';\n\nimport { SceneByVariableRepeaterGrid } from '../../components/SceneByVariableRepeaterGrid/SceneByVariableRepeaterGrid';\nimport { GridItemData } from '../../components/SceneByVariableRepeaterGrid/types/GridItemData';\nimport { SceneDrawer } from '../../components/SceneDrawer';\nimport { FavAction } from '../../domain/actions/FavAction';\nimport { SelectAction } from '../../domain/actions/SelectAction';\nimport { EventExpandPanel } from '../../domain/events/EventExpandPanel';\nimport { FavoriteVariable } from '../../domain/variables/FavoriteVariable';\nimport { vizPanelBuilder } from '../../helpers/vizPanelBuilder';\nimport { SceneLayoutSwitcher } from '../SceneByVariableRepeaterGrid/components/SceneLayoutSwitcher';\nimport { SceneNoDataSwitcher } from '../SceneByVariableRepeaterGrid/components/SceneNoDataSwitcher';\nimport { SceneQuickFilter } from '../SceneByVariableRepeaterGrid/components/SceneQuickFilter';\n\ninterface SceneExploreFavoritesState extends EmbeddedSceneState {\n  drawer: SceneDrawer;\n}\n\nexport class SceneExploreFavorites extends SceneObjectBase<SceneExploreFavoritesState> {\n  constructor() {\n    super({\n      key: 'explore-favorites',\n      $variables: new SceneVariableSet({ variables: [new FavoriteVariable()] }),\n      body: new SceneByVariableRepeaterGrid({\n        key: 'favorites-grid',\n        variableName: 'favorite',\n        mapOptionToItem: (option) => {\n          // see FavoritesDataSource.ts\n          const { index, value, panelType, queryRunnerParams } = JSON.parse(option.value as string);\n\n          return {\n            index,\n            value,\n            label: option.label,\n            queryRunnerParams,\n            panelType,\n          };\n        },\n        sortItemsFn: (a, b) => localeCompare(a.label, b.label),\n        headerActions: (item) => {\n          const actions: Array<SelectAction | FavAction> = [\n            new SelectAction({ type: 'view-labels', item, skipVariablesInterpolation: true }),\n            new SelectAction({ type: 'view-flame-graph', item, skipVariablesInterpolation: true }),\n          ];\n\n          if (item.queryRunnerParams.groupBy) {\n            actions.push(\n              new SelectAction({\n                type: 'expand-panel',\n                item,\n                tooltip: () => 'Expand panel to view all the data',\n                skipVariablesInterpolation: true,\n              })\n            );\n          }\n\n          actions.push(new FavAction({ item, skipVariablesInterpolation: true }));\n\n          return actions;\n        },\n      }),\n      drawer: new SceneDrawer(),\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  onActivate() {\n    sceneGraph\n      .findByKeyAndType(this, 'quick-filter', SceneQuickFilter)\n      .setPlaceholder('Search favorites (comma-separated regexes are supported)');\n\n    const expandPanelSub = this.subscribeToEvent(EventExpandPanel, async (event) => {\n      this.openExpandedPanelDrawer(event.payload.item);\n    });\n\n    return () => {\n      expandPanelSub.unsubscribe();\n    };\n  }\n\n  // see SceneProfilesExplorer\n  getVariablesAndGridControls() {\n    return {\n      variables: [],\n      gridControls: [\n        sceneGraph.findByKeyAndType(this, 'quick-filter', SceneQuickFilter),\n        sceneGraph.findByKeyAndType(this, 'layout-switcher', SceneLayoutSwitcher),\n        sceneGraph.findByKeyAndType(this, 'no-data-switcher', SceneNoDataSwitcher),\n      ],\n    };\n  }\n\n  openExpandedPanelDrawer(item: GridItemData) {\n    const headerActions = () => [\n      new SelectAction({ type: 'view-labels', item }),\n      new SelectAction({ type: 'view-flame-graph', item }),\n    ];\n\n    this.state.drawer.open({\n      title: item.label,\n      body: vizPanelBuilder(item.panelType, {\n        displayAllValues: true,\n        legendPlacement: 'right',\n        item,\n        headerActions,\n      }),\n    });\n  }\n\n  static Component({ model }: SceneComponentProps<SceneExploreFavorites>) {\n    const { body, drawer } = model.useState();\n\n    return (\n      <>\n        <body.Component model={body} />\n        <drawer.Component model={drawer} />\n      </>\n    );\n  }\n}\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { Field, measureText, RadioButtonGroup, RefreshPicker, Select, useStyles2, useTheme2 } from '@grafana/ui';\nimport { useResizeObserver } from '@react-aria/utils';\nimport { noOp } from '@shared/domain/noOp';\nimport React, { useEffect, useRef, useState } from 'react';\n\nimport { GroupByVariable } from './GroupByVariable';\n\ntype Props = {\n  options: Array<SelectableValue<string>>;\n  mainLabels: string[];\n  value?: string;\n  onChange: (label: string) => void;\n  onRefresh: () => void;\n};\n\nexport function GroupBySelector({ options, mainLabels, value, onChange, onRefresh }: Props) {\n  const styles = useStyles2(getStyles);\n  const theme = useTheme2();\n\n  const [labelSelectorRequiredWidth, setLabelSelectorRequiredWidth] = useState<number>(0);\n  const [availableWidth, setAvailableWidth] = useState<number>(0);\n\n  const useHorizontalLabelSelector = availableWidth > labelSelectorRequiredWidth;\n\n  const controlsContainer = useRef<HTMLDivElement>(null);\n\n  useResizeObserver({\n    ref: controlsContainer,\n    onResize: () => {\n      const element = controlsContainer.current;\n      if (element) {\n        setAvailableWidth(element.clientWidth);\n      }\n    },\n  });\n\n  const mainOptions = options.filter((o) => mainLabels.includes(o.value as string));\n  const otherOptions = options.filter((o) => !mainLabels.includes(o.value as string));\n\n  useEffect(() => {\n    const { fontSize } = theme.typography;\n    const text = mainOptions.map((option) => option.label || option.text || '').join(' ');\n    const textWidth = measureText(text, fontSize).width;\n    const additionalWidthPerItem = 70;\n    setLabelSelectorRequiredWidth(textWidth + additionalWidthPerItem * mainOptions.length);\n  }, [mainOptions, theme]);\n\n  return (\n    <Field label=\"Group by labels\">\n      <div ref={controlsContainer} className={styles.container}>\n        {useHorizontalLabelSelector ? (\n          <>\n            <RadioButtonGroup aria-label=\"Labels selector\" options={mainOptions} value={value} onChange={onChange} />\n            <Select\n              aria-label=\"Other labels selector\"\n              className={styles.select}\n              placeholder=\"Other labels\"\n              options={otherOptions}\n              value={value && otherOptions.some((x) => x.value === value) ? value : null} // remove value from select when radio button clicked\n              onChange={(selected) => onChange(selected?.value ?? 'all')}\n              isClearable\n            />\n          </>\n        ) : (\n          <Select\n            aria-label=\"Labels selector\"\n            className={styles.select}\n            value={value}\n            placeholder=\"Select label\"\n            options={options}\n            onChange={(selected) => onChange(selected?.value || GroupByVariable.DEFAULT_VALUE)}\n            isClearable\n          />\n        )}\n        <RefreshPicker\n          noIntervalPicker\n          onRefresh={onRefresh}\n          isOnCanvas={false}\n          onIntervalChanged={noOp}\n          tooltip=\"Click to refresh all labels\"\n        />\n      </div>\n    </Field>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    display: flex;\n    gap: ${theme.spacing(1)};\n  `,\n  select: css`\n    max-width: ${theme.spacing(22)};\n  `,\n});\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { MultiValueVariable, QueryVariable, SceneComponentProps, VariableValueOption } from '@grafana/scenes';\nimport { Field, Icon, RefreshPicker, Spinner, Tooltip, useStyles2 } from '@grafana/ui';\nimport { noOp } from '@shared/domain/noOp';\nimport { prepareHistoryEntry } from '@shared/domain/prepareHistoryEntry';\nimport { reportInteraction } from '@shared/domain/reportInteraction';\nimport React, { useMemo } from 'react';\nimport { lastValueFrom } from 'rxjs';\nimport { GridItemData } from 'src/pages/ProfilesExplorerView/components/SceneByVariableRepeaterGrid/types/GridItemData';\n\nimport { PYROSCOPE_LABELS_DATA_SOURCE } from '../../../infrastructure/pyroscope-data-sources';\nimport { GroupBySelector } from './GroupBySelector';\n\nexport type OptionWithIndex = VariableValueOption & {\n  index: number;\n  value: string;\n  label: string;\n  groupBy: GridItemData['queryRunnerParams']['groupBy'];\n};\n\nexport class GroupByVariable extends QueryVariable {\n  static DEFAULT_VALUE = 'all';\n\n  static MAX_MAIN_LABELS = 8;\n\n  constructor() {\n    super({\n      key: 'groupBy',\n      name: 'groupBy',\n      label: 'Group by labels',\n      datasource: PYROSCOPE_LABELS_DATA_SOURCE,\n      // \"hack\": we want to subscribe to changes of dataSource, serviceName and profileMetricId\n      // we could also add filters, but the Service labels exploration type would reload all labels each time they are modified\n      // which wouldn't be great UX\n      query: '$dataSource and $profileMetricId{service_name=\"$serviceName\"}',\n      loading: true,\n    });\n\n    this.changeValueTo = this.changeValueTo.bind(this);\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  onActivate() {\n    if (!this.state.value) {\n      this.setState({ value: GroupByVariable.DEFAULT_VALUE });\n    }\n  }\n\n  update = async () => {\n    if (this.state.loading) {\n      return;\n    }\n\n    let options: VariableValueOption[] = [];\n    let error = null;\n\n    this.setState({ loading: true, options: [], error: null });\n\n    try {\n      options = await lastValueFrom(this.getValueOptions({}));\n    } catch (e) {\n      error = e;\n    } finally {\n      this.setState({ loading: false, options, error });\n    }\n  };\n\n  onChange = (newValue: string) => {\n    reportInteraction('g_pyroscope_app_group_by_label_clicked');\n\n    prepareHistoryEntry();\n    this.changeValueTo(newValue);\n  };\n\n  findCurrentOption(): OptionWithIndex {\n    const { value } = this.state;\n\n    // See LabelsDataSource.ts\n    const option = this.state.options\n      .filter((o) => o.value !== 'all')\n      .find((o) => JSON.parse(o.value as string).value === value);\n\n    if (option) {\n      const parsedValue = JSON.parse(option.value as string);\n      return {\n        index: parsedValue.index,\n        value: parsedValue.value,\n        label: parsedValue.value,\n        groupBy: parsedValue.groupBy,\n      };\n    }\n\n    return {\n      index: 0,\n      value: value as string,\n      label: value as string,\n      groupBy: undefined,\n    };\n  }\n\n  static Component = ({ model }: SceneComponentProps<MultiValueVariable & { update?: any; onChange?: any }>) => {\n    const styles = useStyles2(getStyles);\n    const { loading, value, options, error } = model.useState();\n\n    const groupByOptions = useMemo(\n      () =>\n        options.map(({ label, value }) => {\n          return value === 'all'\n            ? { label, value }\n            : {\n                label,\n                // see src/pages/ProfilesExplorerView/data/labels/LabelsDataSource.ts\n                value: JSON.parse(String(value)).value,\n              };\n        }),\n      [options]\n    );\n\n    if (loading) {\n      return (\n        <Field label=\"Group by labels\">\n          <Spinner className={styles.spinner} />\n        </Field>\n      );\n    }\n\n    if (error) {\n      return (\n        <Field label=\"Group by labels\">\n          <div className={styles.groupByErrorContainer}>\n            <Tooltip theme=\"error\" content={error.toString()}>\n              <Icon className={styles.iconError} name=\"exclamation-triangle\" size=\"xl\" />\n            </Tooltip>\n            <RefreshPicker noIntervalPicker onRefresh={model.update} isOnCanvas={false} onIntervalChanged={noOp} />\n          </div>\n        </Field>\n      );\n    }\n\n    const getMainLabels = (groupByOptions: Array<SelectableValue<string>>) => {\n      return groupByOptions.slice(0, GroupByVariable.MAX_MAIN_LABELS).map(({ value }) => value as string);\n    };\n\n    return (\n      <GroupBySelector\n        options={groupByOptions}\n        value={value as string}\n        mainLabels={getMainLabels(groupByOptions)}\n        onChange={model.onChange}\n        onRefresh={model.update}\n      />\n    );\n  };\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  spinner: css`\n    height: 32px;\n    line-height: 32px;\n  `,\n  groupByErrorContainer: css`\n    display: flex;\n  `,\n  iconError: css`\n    height: 32px;\n    align-self: center;\n    color: ${theme.colors.error.text};\n  `,\n});\n","import {\n  SceneComponentProps,\n  SceneDataTransformer,\n  sceneGraph,\n  SceneObjectBase,\n  SceneObjectState,\n  SceneQueryRunner,\n  VariableDependencyConfig,\n  VizPanelState,\n} from '@grafana/scenes';\nimport { getProfileMetric, ProfileMetricId } from '@shared/infrastructure/profile-metrics/getProfileMetric';\nimport React from 'react';\n\nimport { FiltersVariable } from '../domain/variables/FiltersVariable/FiltersVariable';\nimport { GroupByVariable } from '../domain/variables/GroupByVariable/GroupByVariable';\nimport { ProfileMetricVariable } from '../domain/variables/ProfileMetricVariable';\nimport { ServiceNameVariable } from '../domain/variables/ServiceNameVariable/ServiceNameVariable';\nimport { getSceneVariableValue } from '../helpers/getSceneVariableValue';\nimport { PYROSCOPE_DATA_SOURCE } from '../infrastructure/pyroscope-data-sources';\nimport { getProfileMetricLabel } from '../infrastructure/series/helpers/getProfileMetricLabel';\nimport { PanelType } from './SceneByVariableRepeaterGrid/components/ScenePanelTypeSwitcher';\nimport { addRefId, addStats } from './SceneByVariableRepeaterGrid/infrastructure/data-transformations';\nimport { GridItemData } from './SceneByVariableRepeaterGrid/types/GridItemData';\nimport { SceneLabelValuesTimeseries } from './SceneLabelValuesTimeseries/SceneLabelValuesTimeseries';\n\ninterface SceneMainServiceTimeseriesState extends SceneObjectState {\n  headerActions: (item: GridItemData) => VizPanelState['headerActions'];\n  body?: SceneLabelValuesTimeseries;\n}\n\nexport class SceneMainServiceTimeseries extends SceneObjectBase<SceneMainServiceTimeseriesState> {\n  static MIN_HEIGHT = 240;\n\n  protected _variableDependency = new VariableDependencyConfig(this, {\n    variableNames: ['serviceName', 'profileMetricId'],\n    onReferencedVariableValueChanged: (variable) => {\n      this.resetTimeseries(variable.state.name === 'serviceName');\n    },\n  });\n\n  constructor({\n    item,\n    headerActions,\n    supportGroupBy,\n  }: {\n    item?: GridItemData;\n    headerActions: SceneMainServiceTimeseriesState['headerActions'];\n    supportGroupBy?: boolean;\n  }) {\n    super({\n      headerActions,\n      body: undefined,\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this, item, supportGroupBy));\n  }\n\n  onActivate(item?: GridItemData, supportGroupBy?: boolean) {\n    if (item) {\n      this.initVariables(item);\n    }\n\n    this.setState({ body: this.buildTimeseries(item, supportGroupBy) });\n\n    if (supportGroupBy) {\n      this.subscribeToGroupByStateChanges(item);\n    }\n  }\n\n  initVariables(item: GridItemData) {\n    const { serviceName, profileMetricId, filters } = item.queryRunnerParams;\n\n    if (serviceName) {\n      const serviceNameVariable = sceneGraph.findByKeyAndType(this, 'serviceName', ServiceNameVariable);\n      serviceNameVariable.changeValueTo(serviceName);\n    }\n\n    if (profileMetricId) {\n      const profileMetricVariable = sceneGraph.findByKeyAndType(this, 'profileMetricId', ProfileMetricVariable);\n      profileMetricVariable.changeValueTo(profileMetricId);\n    }\n\n    if (filters) {\n      const filtersVariable = sceneGraph.findByKeyAndType(this, 'filters', FiltersVariable);\n      filtersVariable.setState({ filters });\n    }\n  }\n\n  buildTimeseries(item?: GridItemData, supportGroupBy?: boolean) {\n    const { headerActions } = this.state;\n\n    const timeseriesItem: GridItemData = {\n      index: 0,\n      value: '',\n      queryRunnerParams: {}, // let interpolation happen\n      label: this.buildTitle(),\n      panelType: PanelType.TIMESERIES,\n    };\n\n    if (item && supportGroupBy) {\n      timeseriesItem.queryRunnerParams.groupBy = item.queryRunnerParams.groupBy;\n    }\n\n    const groupBy = sceneGraph.findByKeyAndType(this, 'groupBy', GroupByVariable).state.value;\n\n    return new SceneLabelValuesTimeseries({\n      item: timeseriesItem,\n      headerActions,\n      // we pass data for the scenarios where we land on the page from a shared link\n      // we do this to prevent rendering a timeseries without groupBy for a second then with groupBy\n      // and also to directly render something when there's no groupBy in the URL\n      data:\n        !item && supportGroupBy && groupBy && groupBy !== 'all'\n          ? new SceneDataTransformer({\n              $data: new SceneQueryRunner({ datasource: PYROSCOPE_DATA_SOURCE, queries: [] }),\n              transformations: [addRefId, addStats],\n            })\n          : undefined,\n    });\n  }\n\n  subscribeToGroupByStateChanges(item?: GridItemData) {\n    const groupByVariable = sceneGraph.findByKeyAndType(this, 'groupBy', GroupByVariable);\n\n    this._subs.add(\n      groupByVariable.subscribeToState((newState, prevState) => {\n        if (newState.loading || !newState.options.length) {\n          return;\n        }\n\n        // First load:\n        // here we check for the item to prevent two queries to occur when coming from (e.g) favorites and\n        // selecting an item with a different profile metric than the current ProfileMetricVariable value\n        if (!item && prevState.loading) {\n          this.onGroupByChanged(groupByVariable);\n          return;\n        }\n\n        if (newState.value !== prevState.value) {\n          this.onGroupByChanged(groupByVariable);\n        }\n      })\n    );\n  }\n\n  onGroupByChanged(groupByVariable: GroupByVariable) {\n    if (!groupByVariable.state.value || groupByVariable.state.value === 'all') {\n      this.resetTimeseries();\n      return;\n    }\n\n    const { index, value, groupBy } = groupByVariable.findCurrentOption();\n\n    (this.state.body as SceneLabelValuesTimeseries)?.updateItem({\n      index,\n      label: `${this.buildTitle()}, grouped by ${value}`,\n      queryRunnerParams: { groupBy },\n    });\n  }\n\n  resetTimeseries(resetFilters = false) {\n    if (resetFilters) {\n      sceneGraph.findByKeyAndType(this, 'filters', FiltersVariable).reset();\n    }\n\n    (this.state.body as SceneLabelValuesTimeseries)?.updateItem({\n      index: 0,\n      label: this.buildTitle(),\n      queryRunnerParams: { groupBy: undefined },\n    });\n  }\n\n  buildTitle() {\n    const profileMetricId = getSceneVariableValue(this, 'profileMetricId');\n    const { description } = getProfileMetric(profileMetricId as ProfileMetricId);\n    return description || getProfileMetricLabel(profileMetricId);\n  }\n\n  static Component({ model }: SceneComponentProps<SceneMainServiceTimeseries>) {\n    const { body } = model.useState();\n\n    return body && <body.Component model={body} />;\n  }\n}\n","import { AdHocVariableFilter, BusEventWithPayload } from '@grafana/data';\n\ninterface EventViewDiffFlameGraphPayload {\n  useAncestorTimeRange: boolean;\n  clearDiffRange: boolean;\n  baselineFilters: AdHocVariableFilter[];\n  comparisonFilters: AdHocVariableFilter[];\n}\n\nexport class EventViewDiffFlameGraph extends BusEventWithPayload<EventViewDiffFlameGraphPayload> {\n  public static type = 'view-diff-flame-graph';\n}\n","import { BusEventWithPayload } from '@grafana/data';\n\nimport { GridItemData } from '../../../../../SceneByVariableRepeaterGrid/types/GridItemData';\nimport { CompareTarget } from '../../../../../SceneExploreDiffFlameGraph/domain/types';\n\ninterface EventSelectForComparePayload {\n  compareTarget: CompareTarget;\n  item: GridItemData;\n}\n\nexport class EventSelectForCompare extends BusEventWithPayload<EventSelectForComparePayload> {\n  public static type = 'select-for-compare';\n}\n","import { css, cx } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Checkbox, Tooltip, useStyles2 } from '@grafana/ui';\nimport React, { useEffect, useRef, useState } from 'react';\n\nimport { CompareTarget } from '../../../../../../../../SceneExploreDiffFlameGraph/domain/types';\n\ntype CompareActionProps = {\n  option: {\n    label: string;\n    value: CompareTarget;\n    description: string;\n  };\n  checked: boolean;\n  onChange: (compareTarget: CompareTarget) => void;\n};\n\nexport function CompareAction({ option, checked, onChange }: CompareActionProps) {\n  const styles = useStyles2(getStyles);\n\n  const [showTooltip, setShowTooltip] = useState(false);\n  const checkboxRef = useRef<HTMLInputElement>(null);\n  const label = (checkboxRef.current as HTMLInputElement)?.closest('label');\n\n  // we write custom code to provide the tooltips because wrapping our checkbox into the <Tooltip> component does not work\n  useEffect(() => {\n    if (!label || checked) {\n      setShowTooltip(false);\n      return;\n    }\n\n    const onMouseEnter = () => {\n      setShowTooltip(true);\n    };\n\n    const onMouseLeave = () => {\n      setShowTooltip(false);\n    };\n\n    label.addEventListener('mouseenter', onMouseEnter);\n    label.addEventListener('mouseleave', onMouseLeave);\n\n    return () => {\n      label.removeEventListener('mouseleave', onMouseLeave);\n      label.removeEventListener('mouseenter', onMouseEnter);\n    };\n  }, [checked, label]);\n\n  return (\n    <>\n      <Tooltip content={option.description} show={!checked && showTooltip} placement=\"top\">\n        <span className={styles.tooltipAnchor} />\n      </Tooltip>\n      <Checkbox\n        ref={checkboxRef}\n        className={cx(styles.checkbox, 'checkbox', checked && 'checked')}\n        checked={checked}\n        label={option.label}\n        onChange={() => onChange(option.value)}\n      />\n    </>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  tooltipAnchor: css`\n    position: relative;\n    left: 42px;\n  `,\n  checkbox: css`\n    column-gap: 4px;\n\n    &:last-child {\n      & :nth-child(1) {\n        grid-column-start: 2;\n      }\n      & :nth-child(2) {\n        grid-column-start: 1;\n      }\n    }\n\n    span {\n      color: ${theme.colors.text.secondary};\n    }\n    span:hover {\n      color: ${theme.colors.text.primary};\n    }\n\n    &.checked span {\n      color: ${theme.colors.text.primary};\n    }\n  `,\n});\n","import { css } from '@emotion/css';\nimport { getValueFormat, GrafanaTheme2 } from '@grafana/data';\nimport { Spinner, useStyles2 } from '@grafana/ui';\nimport React, { useMemo } from 'react';\n\nimport { GridItemData } from '../../../../../../../../../components/SceneByVariableRepeaterGrid/types/GridItemData';\nimport { getColorByIndex } from '../../../../../../../../../helpers/getColorByIndex';\nimport { CompareTarget } from '../../../../../../../../SceneExploreDiffFlameGraph/domain/types';\nimport { ItemStats } from '../SceneStatsPanel';\nimport { CompareAction } from './CompareAction';\n\ntype StatsPanelProps = {\n  item: GridItemData;\n  itemStats?: ItemStats;\n  statsDescription: string;\n  compareActionChecks: boolean[];\n  onChangeCompareTarget: (compareTarget: CompareTarget) => void;\n};\n\nexport function StatsPanel({\n  item,\n  itemStats,\n  statsDescription,\n  compareActionChecks,\n  onChangeCompareTarget,\n}: StatsPanelProps) {\n  const styles = useStyles2(getStyles);\n\n  const { index, value } = item;\n\n  const color = getColorByIndex(index);\n\n  const total = useMemo(() => {\n    if (!itemStats) {\n      return <Spinner inline />;\n    }\n\n    const { allValuesSum, unit } = itemStats;\n    const { text, suffix } = getValueFormat(unit)(allValuesSum);\n\n    return `${text}${suffix}`;\n  }, [itemStats]);\n\n  const options = useMemo(\n    () => [\n      {\n        label: 'Baseline',\n        value: CompareTarget.BASELINE,\n        description: !compareActionChecks[0] ? `Click to select \"${value}\" as baseline for comparison` : '',\n      },\n      {\n        label: 'Comparison',\n        value: CompareTarget.COMPARISON,\n        description: !compareActionChecks[1] ? `Click to select \"${value}\" as target for comparison` : '',\n      },\n    ],\n    [compareActionChecks, value]\n  );\n\n  return (\n    <div className={styles.container} data-testid={`stats-panel-${value}`}>\n      <h1 style={{ color }} className={styles.title} title={`${statsDescription}: ${total}`}>\n        {total}\n      </h1>\n\n      <div className={styles.compareActions}>\n        <CompareAction option={options[0]} checked={compareActionChecks[0]} onChange={onChangeCompareTarget} />\n        <CompareAction option={options[1]} checked={compareActionChecks[1]} onChange={onChangeCompareTarget} />\n      </div>\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    width: 100%;\n    background-color: ${theme.colors.background.canvas};\n    padding: ${theme.spacing(1)};\n    border: 1px solid ${theme.colors.border.weak};\n    border-right: none;\n    border-radius: 2px 0 0 2px;\n  `,\n  title: css`\n    font-size: 24px;\n    width: 100%;\n    text-align: center;\n    margin-top: ${theme.spacing(5)};\n  `,\n  compareActions: css`\n    display: flex;\n    justify-content: space-between;\n    font-size: 11px;\n    border-top: 1px solid ${theme.colors.border.weak};\n    padding: ${theme.spacing(1)} 0 0 0;\n\n    & .checkbox:nth-child(2) {\n      padding-right: 4px;\n      border-right: 1px solid ${theme.colors.border.strong};\n    }\n    & .checkbox:nth-child(4) {\n      padding-left: 4px;\n    }\n  `,\n});\n","import { SceneComponentProps, sceneGraph, SceneObjectBase, SceneObjectState } from '@grafana/scenes';\nimport { getProfileMetric, ProfileMetricId } from '@shared/infrastructure/profile-metrics/getProfileMetric';\nimport React from 'react';\nimport { getSceneVariableValue } from 'src/pages/ProfilesExplorerView/helpers/getSceneVariableValue';\nimport { getProfileMetricLabel } from 'src/pages/ProfilesExplorerView/infrastructure/series/helpers/getProfileMetricLabel';\n\nimport { GridItemData } from '../../../../../../../SceneByVariableRepeaterGrid/types/GridItemData';\nimport { CompareTarget } from '../../../../../../../SceneExploreDiffFlameGraph/domain/types';\nimport { EventSelectForCompare } from '../../../../domain/events/EventSelectForCompare';\nimport { SceneGroupByLabels } from '../../../../SceneGroupByLabels';\nimport { StatsPanel } from './ui/StatsPanel';\n\nexport type ItemStats = {\n  allValuesSum: number;\n  unit: string;\n};\n\ninterface SceneStatsPanelState extends SceneObjectState {\n  item: GridItemData;\n  itemStats?: ItemStats;\n  compareActionChecks: boolean[];\n  statsDescription: string;\n}\n\nexport class SceneStatsPanel extends SceneObjectBase<SceneStatsPanelState> {\n  static WIDTH_IN_PIXELS = 186;\n\n  constructor({ item }: { item: GridItemData }) {\n    super({\n      item,\n      itemStats: undefined,\n      compareActionChecks: [false, false],\n      statsDescription: '',\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  onActivate() {\n    const compare = sceneGraph.findByKeyAndType(this, 'group-by-labels', SceneGroupByLabels).getCompare();\n\n    this.updateCompareActions(compare.get(CompareTarget.BASELINE), compare.get(CompareTarget.COMPARISON));\n\n    this.setState({ statsDescription: this.getStatsDescription() });\n  }\n\n  updateCompareActions(baselineItem?: GridItemData, comparisonItem?: GridItemData) {\n    const { item } = this.state;\n\n    this.setState({\n      compareActionChecks: [baselineItem?.value === item.value, comparisonItem?.value === item.value],\n    });\n  }\n\n  getStatsDescription() {\n    const profileMetricId = getSceneVariableValue(this, 'profileMetricId');\n    const { description } = getProfileMetric(profileMetricId as ProfileMetricId);\n    return description || getProfileMetricLabel(profileMetricId);\n  }\n\n  onChangeCompareTarget = (compareTarget: CompareTarget) => {\n    this.publishEvent(\n      new EventSelectForCompare({\n        compareTarget,\n        item: this.state.item,\n      }),\n      true\n    );\n  };\n\n  getStats() {\n    return this.state.itemStats;\n  }\n\n  updateStats(itemStats: ItemStats) {\n    this.setState({ itemStats });\n  }\n\n  static Component({ model }: SceneComponentProps<SceneStatsPanel>) {\n    const { item, itemStats, statsDescription, compareActionChecks } = model.useState();\n\n    return (\n      <StatsPanel\n        item={item}\n        itemStats={itemStats}\n        statsDescription={statsDescription}\n        compareActionChecks={compareActionChecks}\n        onChangeCompareTarget={model.onChangeCompareTarget}\n      />\n    );\n  }\n}\n","import { css, cx } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { SceneComponentProps, SceneObjectBase, SceneObjectState, VizPanelState } from '@grafana/scenes';\nimport { useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { EventTimeseriesDataReceived } from '../../../../../../../domain/events/EventTimeseriesDataReceived';\nimport { getSeriesStatsValue } from '../../../../../../../infrastructure/helpers/getSeriesStatsValue';\nimport { GridItemData } from '../../../../../../SceneByVariableRepeaterGrid/types/GridItemData';\nimport { SceneLabelValuesTimeseries } from '../../../../../../SceneLabelValuesTimeseries/SceneLabelValuesTimeseries';\nimport { GRID_AUTO_ROWS } from '../SceneLabelValuesGrid';\nimport { SceneStatsPanel } from './SceneStatsPanel/SceneStatsPanel';\n\ninterface SceneLabelValuesStatAndTimeseriesState extends SceneObjectState {\n  statsPanel: SceneStatsPanel;\n  timeseriesPanel: SceneLabelValuesTimeseries;\n}\n\nexport class SceneLabelValuePanel extends SceneObjectBase<SceneLabelValuesStatAndTimeseriesState> {\n  static buildPanelKey(item: GridItemData) {\n    return `compare-panel-${item.value}`;\n  }\n\n  constructor({\n    item,\n    headerActions,\n  }: {\n    item: GridItemData;\n    headerActions: (item: GridItemData) => VizPanelState['headerActions'];\n  }) {\n    super({\n      key: 'label-value-panel',\n      statsPanel: new SceneStatsPanel({ item }),\n      timeseriesPanel: new SceneLabelValuesTimeseries({ item, headerActions }),\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  onActivate() {\n    const { statsPanel, timeseriesPanel } = this.state;\n\n    const timeseriesSub = timeseriesPanel.subscribeToEvent(EventTimeseriesDataReceived, (event) => {\n      const s = event.payload.series?.[0];\n\n      if (!s) {\n        statsPanel.updateStats({ allValuesSum: 0, unit: 'short' });\n        return;\n      }\n\n      const allValuesSum = getSeriesStatsValue(s, 'allValuesSum') || 0;\n\n      if (statsPanel.getStats()?.allValuesSum !== allValuesSum) {\n        statsPanel.updateStats({\n          allValuesSum,\n          unit: s.fields[1].config.unit || 'short',\n        });\n      }\n    });\n\n    return () => {\n      timeseriesSub.unsubscribe();\n    };\n  }\n\n  static Component({ model }: SceneComponentProps<SceneLabelValuePanel>) {\n    const styles = useStyles2(getStyles); // eslint-disable-line react-hooks/rules-of-hooks\n    const { statsPanel, timeseriesPanel } = model.useState();\n    const { compareActionChecks } = statsPanel.useState();\n    const isSelected = compareActionChecks[0] || compareActionChecks[1];\n\n    return (\n      <div className={cx(styles.container, isSelected && 'selected')}>\n        <div className={styles.statsPanel}>\n          <statsPanel.Component model={statsPanel} />\n        </div>\n        <div className={styles.timeseriesPanel}>\n          <timeseriesPanel.Component model={timeseriesPanel} />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    display: flex;\n    min-width: 0px;\n    min-height: ${GRID_AUTO_ROWS};\n    flex-flow: row;\n\n    box-sizing: border-box;\n    border: 1px solid transparent;\n    &.selected {\n      border: 1px solid ${theme.colors.primary.main};\n    }\n\n    & > div {\n      display: flex;\n      position: relative;\n      flex-direction: row;\n      align-self: stretch;\n      min-height: ${GRID_AUTO_ROWS};\n    }\n  `,\n  statsPanel: css`\n    width: ${SceneStatsPanel.WIDTH_IN_PIXELS}px;\n  `,\n  timeseriesPanel: css`\n    flex-grow: 1;\n\n    & [data-viz-panel-key] > * {\n      border-top-left-radius: 0;\n      border-bottom-left-radius: 0;\n    }\n  `,\n});\n","import { SceneQueryRunner } from '@grafana/scenes';\n\nimport { PYROSCOPE_DATA_SOURCE } from '../../../../../../../infrastructure/pyroscope-data-sources';\n\nexport function buildLabelValuesGridQueryRunner({ label }: { label: string }) {\n  const selector = 'service_name=\"$serviceName\"';\n\n  return new SceneQueryRunner({\n    datasource: PYROSCOPE_DATA_SOURCE,\n    queries: [\n      {\n        refId: `$profileMetricId-${selector}-${label}`,\n        queryType: 'metrics',\n        profileTypeId: '$profileMetricId',\n        labelSelector: `{${selector}}`,\n        groupBy: [label],\n      },\n    ],\n  });\n}\n","import { DashboardCursorSync, DataFrame, LoadingState } from '@grafana/data';\nimport {\n  behaviors,\n  EmbeddedSceneState,\n  SceneComponentProps,\n  SceneCSSGridItem,\n  SceneCSSGridLayout,\n  SceneDataProvider,\n  SceneDataTransformer,\n  sceneGraph,\n  SceneObjectBase,\n  VizPanelState,\n} from '@grafana/scenes';\nimport { Spinner } from '@grafana/ui';\nimport { logger } from '@shared/infrastructure/tracking/logger';\nimport { debounce, isEqual } from 'lodash';\nimport React from 'react';\n\nimport { EventTimeseriesDataReceived } from '../../../../../../domain/events/EventTimeseriesDataReceived';\nimport { FiltersVariable } from '../../../../../../domain/variables/FiltersVariable/FiltersVariable';\nimport { GroupByVariable } from '../../../../../../domain/variables/GroupByVariable/GroupByVariable';\nimport { getSceneVariableValue } from '../../../../../../helpers/getSceneVariableValue';\nimport { getSeriesLabelFieldName } from '../../../../../../infrastructure/helpers/getSeriesLabelFieldName';\nimport { SceneEmptyState } from '../../../../../SceneByVariableRepeaterGrid/components/SceneEmptyState/SceneEmptyState';\nimport { SceneErrorState } from '../../../../../SceneByVariableRepeaterGrid/components/SceneErrorState/SceneErrorState';\nimport {\n  LayoutType,\n  SceneLayoutSwitcher,\n  SceneLayoutSwitcherState,\n} from '../../../../../SceneByVariableRepeaterGrid/components/SceneLayoutSwitcher';\nimport {\n  SceneNoDataSwitcher,\n  SceneNoDataSwitcherState,\n} from '../../../../../SceneByVariableRepeaterGrid/components/SceneNoDataSwitcher';\nimport { PanelType } from '../../../../../SceneByVariableRepeaterGrid/components/ScenePanelTypeSwitcher';\nimport {\n  SceneQuickFilter,\n  SceneQuickFilterState,\n} from '../../../../../SceneByVariableRepeaterGrid/components/SceneQuickFilter';\nimport { sortFavGridItems } from '../../../../../SceneByVariableRepeaterGrid/domain/sortFavGridItems';\nimport { addRefId, addStats } from '../../../../../SceneByVariableRepeaterGrid/infrastructure/data-transformations';\nimport { GridItemData } from '../../../../../SceneByVariableRepeaterGrid/types/GridItemData';\nimport { SceneLabelValuePanel } from './components/SceneLabelValuePanel';\nimport { buildLabelValuesGridQueryRunner } from './infrastructure/buildLabelValuesGridQueryRunner';\n\ninterface SceneLabelValuesGridState extends EmbeddedSceneState {\n  $data: SceneDataProvider;\n  isLoading: boolean;\n  items: GridItemData[];\n  label: string;\n  startColorIndex: number;\n  headerActions: (item: GridItemData, items: GridItemData[]) => VizPanelState['headerActions'];\n  sortItemsFn: (a: GridItemData, b: GridItemData) => number;\n  hideNoData: boolean;\n}\n\nconst GRID_TEMPLATE_COLUMNS = 'repeat(auto-fit, minmax(600px, 1fr))';\nconst GRID_TEMPLATE_ROWS = '1fr';\nexport const GRID_AUTO_ROWS = '160px';\n\nexport class SceneLabelValuesGrid extends SceneObjectBase<SceneLabelValuesGridState> {\n  static buildGridItemKey(item: GridItemData) {\n    return `grid-item-${item.index}-${item.value}`;\n  }\n\n  constructor({\n    key,\n    label,\n    startColorIndex,\n    headerActions,\n  }: {\n    key: string;\n    label: SceneLabelValuesGridState['label'];\n    startColorIndex: SceneLabelValuesGridState['startColorIndex'];\n    headerActions: SceneLabelValuesGridState['headerActions'];\n  }) {\n    super({\n      key,\n      label,\n      startColorIndex,\n      items: [],\n      isLoading: true,\n      $data: new SceneDataTransformer({\n        $data: buildLabelValuesGridQueryRunner({ label }),\n        transformations: [addRefId, addStats],\n      }),\n      hideNoData: false,\n      headerActions,\n      sortItemsFn: sortFavGridItems,\n      body: new SceneCSSGridLayout({\n        templateColumns: GRID_TEMPLATE_ROWS,\n        autoRows: GRID_AUTO_ROWS,\n        isLazy: true,\n        $behaviors: [\n          new behaviors.CursorSync({\n            key: 'metricCrosshairSync',\n            sync: DashboardCursorSync.Crosshair,\n          }),\n        ],\n        children: [],\n      }),\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  onActivate() {\n    this.subscribeOnceToDataChange();\n\n    const groupBySub = this.subscribeToGroupByChange();\n\n    const refreshSub = this.subscribeToRefreshClick();\n    const quickFilterSub = this.subscribeToQuickFilterChange();\n    const layoutChangeSub = this.subscribeToLayoutChange();\n    const hideNoDataSub = this.subscribeToHideNoDataChange();\n    const filtersSub = this.subscribeToFiltersChange();\n\n    return () => {\n      filtersSub.unsubscribe();\n      hideNoDataSub.unsubscribe();\n      layoutChangeSub.unsubscribe();\n      quickFilterSub.unsubscribe();\n      refreshSub.unsubscribe();\n      groupBySub.unsubscribe();\n    };\n  }\n\n  subscribeOnceToDataChange(forceRender = false) {\n    const dataSub = this.state.$data.subscribeToState((newState) => {\n      if (newState.data?.state === LoadingState.Loading) {\n        return;\n      }\n\n      dataSub.unsubscribe();\n\n      this.renderGridItems(forceRender);\n\n      this.setState({ isLoading: false });\n    });\n  }\n\n  subscribeToGroupByChange() {\n    const groupByVariable = sceneGraph.findByKeyAndType(this, 'groupBy', GroupByVariable);\n\n    return groupByVariable.subscribeToState((newState, prevState) => {\n      if (!newState.loading && prevState.loading) {\n        this.refetchData();\n      }\n    });\n  }\n\n  subscribeToRefreshClick() {\n    const onClickRefresh = () => {\n      this.refetchData();\n    };\n\n    // start of hack, for a better UX: we disable the variable \"refresh\" option and we allow the user to reload the list only by clicking on the \"Refresh\" button\n    // if we don't do this, every time the time range changes (even with auto-refresh on),\n    // all the timeseries present on the screen would be re-created, resulting in blinking and a poor UX\n    const refreshButton = document.querySelector(\n      '[data-testid=\"data-testid RefreshPicker run button\"]'\n    ) as HTMLButtonElement;\n\n    if (!refreshButton) {\n      logger.error(\n        new Error('SceneByVariableRepeaterGrid: Refresh button not found! The list of items will never be updated.')\n      );\n    }\n\n    refreshButton?.addEventListener('click', onClickRefresh);\n    refreshButton?.setAttribute('title', 'Click to completely refresh all the panels present on the screen');\n    // end of hack\n\n    return {\n      unsubscribe() {\n        refreshButton?.removeAttribute('title');\n        refreshButton?.removeEventListener('click', onClickRefresh);\n      },\n    };\n  }\n\n  subscribeToQuickFilterChange() {\n    const quickFilter = sceneGraph.findByKeyAndType(this, 'quick-filter', SceneQuickFilter);\n\n    this.subscribeToState((newState, prevState) => {\n      if (newState.items.length !== prevState.items.length) {\n        quickFilter.setResultsCount(newState.items.length);\n      }\n    });\n\n    const onChangeState = (newState: SceneQuickFilterState, prevState?: SceneQuickFilterState) => {\n      if (newState.searchText !== prevState?.searchText) {\n        this.renderGridItems();\n      }\n    };\n\n    return quickFilter.subscribeToState(debounce(onChangeState, SceneQuickFilter.DEBOUNCE_DELAY));\n  }\n\n  subscribeToLayoutChange() {\n    const layoutSwitcher = sceneGraph.findByKeyAndType(this, 'layout-switcher', SceneLayoutSwitcher);\n    const body = this.state.body as SceneCSSGridLayout;\n\n    const onChangeState = (newState: SceneLayoutSwitcherState, prevState?: SceneLayoutSwitcherState) => {\n      if (newState.layout !== prevState?.layout) {\n        body.setState({\n          templateColumns: newState.layout === LayoutType.ROWS ? GRID_TEMPLATE_ROWS : GRID_TEMPLATE_COLUMNS,\n        });\n      }\n    };\n\n    onChangeState(layoutSwitcher.state);\n\n    return layoutSwitcher.subscribeToState(onChangeState);\n  }\n\n  subscribeToHideNoDataChange() {\n    const noDataSwitcher = sceneGraph.findByKeyAndType(this, 'no-data-switcher', SceneNoDataSwitcher);\n\n    this.setState({ hideNoData: noDataSwitcher.state.hideNoData === 'on' });\n\n    const onChangeState = (newState: SceneNoDataSwitcherState, prevState?: SceneNoDataSwitcherState) => {\n      if (newState.hideNoData !== prevState?.hideNoData) {\n        this.setState({ hideNoData: newState.hideNoData === 'on' });\n\n        this.refetchData(true);\n      }\n    };\n\n    return noDataSwitcher.subscribeToState(onChangeState);\n  }\n\n  subscribeToFiltersChange() {\n    const filtersVariable = sceneGraph.findByKeyAndType(this, 'filters', FiltersVariable);\n    const noDataSwitcher = sceneGraph.findByKeyAndType(this, 'no-data-switcher', SceneNoDataSwitcher);\n\n    // the handler will be called each time a filter is added/removed/modified\n    return filtersVariable.subscribeToState(() => {\n      if (noDataSwitcher.state.hideNoData === 'on') {\n        // to be sure the list is updated we refetch because the filters only influence the query made in each panel\n        this.refetchData();\n      }\n    });\n  }\n\n  refetchData(forceRender = false) {\n    this.setState({\n      isLoading: true,\n      $data: new SceneDataTransformer({\n        $data: buildLabelValuesGridQueryRunner({ label: this.state.label }),\n        transformations: [addRefId, addStats],\n      }),\n    });\n\n    this.subscribeOnceToDataChange(forceRender);\n  }\n\n  shouldRenderItems(newItems: SceneLabelValuesGridState['items']) {\n    const { items } = this.state;\n\n    if (!newItems.length || items.length !== newItems.length) {\n      return true;\n    }\n\n    return !isEqual(items, newItems);\n  }\n\n  buildItemsData(series: DataFrame[]) {\n    const serviceName = getSceneVariableValue(this, 'serviceName');\n    const profileMetricId = getSceneVariableValue(this, 'profileMetricId');\n\n    const { label, startColorIndex, sortItemsFn } = this.state;\n\n    // the series are already sorted by the data transformation\n    const items = series.map((s, index) => {\n      const metricField = s.fields[1];\n      const labelValue = metricField.labels?.[label] || '';\n      const labelName = getSeriesLabelFieldName(metricField, label);\n\n      return {\n        index: startColorIndex + index,\n        value: labelValue,\n        label: labelName,\n        queryRunnerParams: {\n          serviceName,\n          profileMetricId,\n          // defaults to an \"is empty\" operator in the UI when the label value is not set\n          filters: [{ key: label, operator: '=', value: labelValue }],\n        },\n        panelType: PanelType.TIMESERIES,\n      };\n    });\n\n    return this.filterItems(items).sort(sortItemsFn);\n  }\n\n  renderGridItems(forceRender = false) {\n    if (!this.state.$data.state.data) {\n      return;\n    }\n\n    const { state: loadingState, series, errors } = this.state.$data.state.data;\n\n    if (loadingState === LoadingState.Loading) {\n      return;\n    }\n\n    if (loadingState === LoadingState.Error) {\n      // TODO: check if we need https://github.com/grafana/grafana/blob/d7f7cd1e61eac1e0103e0ca1e2122264aa831ffd/public/app/plugins/datasource/azuremonitor/utils/messageFromError.ts#L30\n      this.renderErrorState(errors?.[0] as Error);\n      return;\n    }\n\n    const newItems = this.buildItemsData(series);\n\n    if (!forceRender && !this.shouldRenderItems(newItems)) {\n      return;\n    }\n\n    this.setState({ items: newItems });\n\n    if (!this.state.items.length) {\n      this.renderEmptyState();\n      return;\n    }\n\n    const gridItems = newItems.map((item) => {\n      return new SceneCSSGridItem({\n        key: SceneLabelValuesGrid.buildGridItemKey(item),\n        body: this.buildVizPanel(item),\n      });\n    });\n\n    (this.state.body as SceneCSSGridLayout).setState({\n      autoRows: GRID_AUTO_ROWS, // required to have the correct grid items height\n      children: gridItems,\n    });\n  }\n\n  buildVizPanel(item: GridItemData) {\n    const vizPanel = new SceneLabelValuePanel({\n      item,\n      headerActions: this.state.headerActions.bind(null, item, this.state.items),\n    });\n\n    const sub = vizPanel.subscribeToEvent(EventTimeseriesDataReceived, (event) => {\n      if (!this.state.hideNoData || event.payload.series?.length) {\n        return;\n      }\n\n      const gridItem = sceneGraph.getAncestor(vizPanel, SceneCSSGridItem);\n      const { key: gridItemKey } = gridItem.state;\n      const grid = sceneGraph.getAncestor(gridItem, SceneCSSGridLayout);\n\n      const filteredChildren = grid.state.children.filter((c) => c.state.key !== gridItemKey);\n\n      if (!filteredChildren.length) {\n        this.renderEmptyState();\n      } else {\n        grid.setState({ children: filteredChildren });\n      }\n    });\n\n    vizPanel.addActivationHandler(() => {\n      return () => {\n        sub.unsubscribe();\n      };\n    });\n\n    return vizPanel;\n  }\n\n  filterItems(items: SceneLabelValuesGridState['items']) {\n    const quickFilterScene = sceneGraph.findByKeyAndType(this, 'quick-filter', SceneQuickFilter);\n    const { searchText } = quickFilterScene.state;\n\n    if (!searchText) {\n      return items;\n    }\n\n    const regexes = searchText\n      .split(',')\n      .map((t) => t.trim())\n      .filter(Boolean)\n      .map((r) => {\n        try {\n          return new RegExp(r);\n        } catch {\n          return null;\n        }\n      })\n      .filter(Boolean) as RegExp[];\n\n    return items.filter(({ label }) => regexes.some((r) => r.test(label)));\n  }\n\n  renderEmptyState() {\n    (this.state.body as SceneCSSGridLayout).setState({\n      autoRows: '480px',\n      children: [\n        new SceneCSSGridItem({\n          body: new SceneEmptyState({\n            message: 'No results',\n          }),\n        }),\n      ],\n    });\n  }\n\n  renderErrorState(error: Error) {\n    (this.state.body as SceneCSSGridLayout).setState({\n      autoRows: '480px',\n      children: [\n        new SceneCSSGridItem({\n          body: new SceneErrorState({\n            message: error.message || error.toString(),\n          }),\n        }),\n      ],\n    });\n  }\n\n  static Component({ model }: SceneComponentProps<SceneLabelValuesGrid>) {\n    const { body, isLoading } = model.useState();\n\n    return isLoading ? (\n      <Spinner />\n    ) : (\n      <div style={{ marginBottom: '2px' }}>\n        <body.Component model={body} />\n      </div>\n    );\n  }\n}\n","import { BusEventWithPayload } from '@grafana/data';\n\nimport { GridItemData } from '../../../../../SceneByVariableRepeaterGrid/types/GridItemData';\n\nexport interface EventClearLabelFromFiltersPayload {\n  item: GridItemData;\n}\n\nexport class EventClearLabelFromFilters extends BusEventWithPayload<EventClearLabelFromFiltersPayload> {\n  public static type = 'clear-label-from-filters';\n}\n","import { BusEventWithPayload } from '@grafana/data';\n\nimport { GridItemData } from '../../../../../SceneByVariableRepeaterGrid/types/GridItemData';\n\nexport interface EventExcludeLabelFromFiltersPayload {\n  item: GridItemData;\n}\n\nexport class EventExcludeLabelFromFilters extends BusEventWithPayload<EventExcludeLabelFromFiltersPayload> {\n  public static type = 'exclude-label-from-filters';\n}\n","import { BusEventWithPayload } from '@grafana/data';\n\nimport { GridItemData } from '../../../../../SceneByVariableRepeaterGrid/types/GridItemData';\n\nexport interface EventIncludeLabelInFiltersPayload {\n  item: GridItemData;\n}\n\nexport class EventIncludeLabelInFilters extends BusEventWithPayload<EventIncludeLabelInFiltersPayload> {\n  public static type = 'include-label-in-filters';\n}\n\nexport interface EventExcludeLabelFromFiltersPayload {\n  item: GridItemData;\n}\n","import { css, cx } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, useStyles2 } from '@grafana/ui';\nimport React, { memo } from 'react';\n\ntype FilterButtonsProps = {\n  label: string;\n  status: 'included' | 'excluded' | 'clear';\n  onInclude: () => void;\n  onExclude: () => void;\n  onClear: () => void;\n};\n\nfunction getStatus({ status, label, onInclude, onExclude, onClear }: FilterButtonsProps) {\n  const isIncludeSelected = status === 'included';\n  const includeTooltip = !isIncludeSelected ? `Include \"${label}\" in the filters` : `Clear \"${label}\" from the filters`;\n\n  const isExcludeSelected = status === 'excluded';\n  const excludeTooltip = !isExcludeSelected ? `Exclude \"${label}\" in the filters` : `Clear \"${label}\" from the filters`;\n\n  return {\n    include: {\n      isSelected: isIncludeSelected,\n      tooltip: includeTooltip,\n      onClick: isIncludeSelected ? onClear : onInclude,\n    },\n    exclude: {\n      isSelected: isExcludeSelected,\n      tooltip: excludeTooltip,\n      onClick: isExcludeSelected ? onClear : onExclude,\n    },\n  };\n}\n\n// Kindly borrowed and adapted from https://github.com/grafana/explore-logs/blob/main/src/Components/FilterButton.tsx :)\nconst FilterButtonsComponent = (props: FilterButtonsProps) => {\n  const styles = useStyles2(getStyles);\n\n  const { include, exclude } = getStatus(props);\n\n  return (\n    <div className={styles.container}>\n      <Button\n        size=\"sm\"\n        fill=\"outline\"\n        variant={include.isSelected ? 'primary' : 'secondary'}\n        aria-selected={include.isSelected}\n        className={cx(styles.includeButton, include.isSelected && 'selected')}\n        onClick={include.onClick}\n        tooltip={include.tooltip}\n        tooltipPlacement=\"top\"\n        data-testid=\"filter-button-include\"\n      >\n        Include\n      </Button>\n      <Button\n        size=\"sm\"\n        fill=\"outline\"\n        variant={exclude.isSelected ? 'primary' : 'secondary'}\n        aria-selected={exclude.isSelected}\n        className={cx(styles.excludeButton, exclude.isSelected && 'selected')}\n        onClick={exclude.onClick}\n        tooltip={exclude.tooltip}\n        tooltipPlacement=\"top\"\n        data-testid=\"filter-button-exclude\"\n      >\n        Exclude\n      </Button>\n    </div>\n  );\n};\n\nexport const FilterButtons = memo(FilterButtonsComponent);\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      display: flex;\n      justify-content: center;\n    `,\n    includeButton: css`\n      border-radius: ${theme.shape.radius.default} 0 0 ${theme.shape.radius.default};\n\n      &:not(.selected) {\n        border-right: none;\n      }\n    `,\n    excludeButton: css`\n      border-radius: 0 ${theme.shape.radius.default} ${theme.shape.radius.default} 0;\n\n      &:not(.selected) {\n        border-left: none;\n      }\n    `,\n  };\n};\n","import { AdHocVariableFilter } from '@grafana/data';\nimport { SceneComponentProps, sceneGraph, SceneObjectBase, SceneObjectState } from '@grafana/scenes';\nimport { isRegexOperator } from '@shared/components/QueryBuilder/domain/helpers/isRegexOperator';\nimport { reportInteraction } from '@shared/domain/reportInteraction';\nimport React, { useMemo } from 'react';\n\nimport { FiltersVariable } from '../../../../../../../domain/variables/FiltersVariable/FiltersVariable';\nimport { GridItemData } from '../../../../../../SceneByVariableRepeaterGrid/types/GridItemData';\nimport { EventClearLabelFromFilters } from '../../events/EventClearLabelFromFilters';\nimport { EventExcludeLabelFromFilters } from '../../events/EventExcludeLabelFromFilters';\nimport { EventIncludeLabelInFilters } from '../../events/EventIncludeLabelInFilters';\nimport { FilterButtons } from './ui/FilterButtons';\n\nexport interface IncludeExcludeActionState extends SceneObjectState {\n  item: GridItemData;\n}\n\nexport class IncludeExcludeAction extends SceneObjectBase<IncludeExcludeActionState> {\n  constructor({ item }: IncludeExcludeActionState) {\n    super({ item });\n  }\n\n  getStatus(filters: AdHocVariableFilter[]) {\n    const { key, value } = this.state.item.queryRunnerParams.filters![0];\n\n    const found = filters.find((f) => f.key === key);\n    if (!found) {\n      return 'clear';\n    }\n\n    if (isRegexOperator(found.operator) && found.value.split('|').includes(value)) {\n      return found.operator === '=~' ? 'included' : 'excluded';\n    }\n\n    // found.operator is '=' or '!='\n    if (found.value === value) {\n      return found.operator === '=' ? 'included' : 'excluded';\n    }\n\n    return 'clear';\n  }\n\n  onInclude = () => {\n    reportInteraction('g_pyroscope_app_include_action_clicked');\n\n    this.publishEvent(new EventIncludeLabelInFilters({ item: this.state.item }), true);\n  };\n\n  onExclude = () => {\n    reportInteraction('g_pyroscope_app_exclude_action_clicked');\n\n    this.publishEvent(new EventExcludeLabelFromFilters({ item: this.state.item }), true);\n  };\n\n  onClear = () => {\n    this.publishEvent(new EventClearLabelFromFilters({ item: this.state.item }), true);\n  };\n\n  public static Component = ({ model }: SceneComponentProps<IncludeExcludeAction>) => {\n    const { item } = model.useState();\n\n    const { filters } = (sceneGraph.findByKeyAndType(model, 'filters', FiltersVariable) as FiltersVariable).useState();\n    const status = useMemo(() => model.getStatus(filters), [filters, model]);\n\n    return (\n      <FilterButtons\n        label={item.value}\n        status={status}\n        onInclude={model.onInclude}\n        onExclude={model.onExclude}\n        onClear={model.onClear}\n      />\n    );\n  };\n}\n","import { css, cx } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, useStyles2 } from '@grafana/ui';\nimport { noOp } from '@shared/domain/noOp';\nimport React, { useMemo } from 'react';\n\nimport { CompareTarget } from '../../../../SceneExploreDiffFlameGraph/domain/types';\nimport { SceneStatsPanel } from '../components/SceneLabelValuesGrid/components/SceneStatsPanel/SceneStatsPanel';\nimport { SceneGroupByLabelsState } from '../SceneGroupByLabels';\n\ntype CompareButtonProps = {\n  compare: SceneGroupByLabelsState['compare'];\n  onClickCompare: () => void;\n  onClickClear: () => void;\n};\n\nexport function CompareControls({ compare, onClickCompare, onClickClear }: CompareButtonProps) {\n  const styles = useStyles2(getStyles);\n  const compareIsDisabled = compare.size < 2;\n  const hasSelection = compare.size > 0;\n\n  const tooltip = useMemo(() => {\n    if (compare.size === 2) {\n      return `Compare \"${compare.get(CompareTarget.BASELINE)?.label}\" vs \"${\n        compare.get(CompareTarget.COMPARISON)?.label\n      }\"`;\n    }\n    if (compare.size === 0) {\n      return 'Select both a baseline and a comparison panel to compare their flame graphs';\n    }\n\n    return compare.has(CompareTarget.BASELINE)\n      ? `Select another panel to compare against \"${compare.get(CompareTarget.BASELINE)?.label}\"`\n      : `Select another panel to compare against \"${compare.get(CompareTarget.COMPARISON)?.label}\"`;\n  }, [compare]);\n\n  return (\n    <div className={styles.container}>\n      <Button\n        arial-label=\"Compare\"\n        className={styles.compareButton}\n        variant=\"primary\"\n        disabled={compareIsDisabled}\n        onClick={compareIsDisabled ? noOp : onClickCompare}\n        tooltip={tooltip}\n      >\n        Compare ({compare.size}/2)\n      </Button>\n\n      <Button\n        data-testid=\"clearComparison\"\n        className={cx(styles.clearButton, !compareIsDisabled ? styles.clearButtonActive : undefined)}\n        icon=\"times\"\n        variant=\"secondary\"\n        tooltip={hasSelection ? 'Clear comparison selection' : ''}\n        disabled={!hasSelection}\n        onClick={!hasSelection ? noOp : onClickClear}\n      />\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    display: flex;\n    align-items: center;\n    width: ${SceneStatsPanel.WIDTH_IN_PIXELS}px;\n  `,\n  compareButton: css`\n    width: ${SceneStatsPanel.WIDTH_IN_PIXELS - 32}px;\n    border-right: none;\n    border-top-right-radius: 0;\n    border-bottom-right-radius: 0;\n  `,\n  clearButton: css`\n    box-sizing: border-box;\n    width: 32px !important;\n    height: 32px !important;\n    color: ${theme.colors.text.secondary};\n    background-color: transparent;\n    border-left: none !important;\n    border-top-left-radius: 0;\n    border-bottom-left-radius: 0;\n\n    &:not([disabled]),\n    &:not([disabled]):hover {\n      background-color: transparent;\n      box-shadow: none;\n    }\n  `,\n  clearButtonActive: css`\n    border-color: ${theme.colors.border.medium};\n\n    &:hover {\n      border-color: ${theme.colors.border.medium};\n    }\n  `,\n});\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { SceneComponentProps, sceneGraph, SceneObject, SceneObjectBase, SceneObjectState } from '@grafana/scenes';\nimport { Stack, useStyles2 } from '@grafana/ui';\nimport { prepareHistoryEntry } from '@shared/domain/prepareHistoryEntry';\nimport { reportInteraction } from '@shared/domain/reportInteraction';\nimport { getProfileMetric, ProfileMetricId } from '@shared/infrastructure/profile-metrics/getProfileMetric';\nimport React, { useMemo } from 'react';\nimport { Unsubscribable } from 'rxjs';\nimport { EventViewDiffFlameGraph } from 'src/pages/ProfilesExplorerView/domain/events/EventViewDiffFlameGraph';\n\nimport { FavAction } from '../../../../domain/actions/FavAction';\nimport { SelectAction } from '../../../../domain/actions/SelectAction';\nimport { EventSelectLabel } from '../../../../domain/events/EventSelectLabel';\nimport {\n  clearLabelValue,\n  excludeLabelValue,\n  includeLabelValue,\n} from '../../../../domain/variables/FiltersVariable/filters-ops';\nimport { FiltersVariable } from '../../../../domain/variables/FiltersVariable/FiltersVariable';\nimport { GroupByVariable } from '../../../../domain/variables/GroupByVariable/GroupByVariable';\nimport { getSceneVariableValue } from '../../../../helpers/getSceneVariableValue';\nimport { interpolateQueryRunnerVariables } from '../../../../infrastructure/helpers/interpolateQueryRunnerVariables';\nimport { SceneLayoutSwitcher } from '../../../SceneByVariableRepeaterGrid/components/SceneLayoutSwitcher';\nimport { SceneNoDataSwitcher } from '../../../SceneByVariableRepeaterGrid/components/SceneNoDataSwitcher';\nimport {\n  PanelType,\n  ScenePanelTypeSwitcher,\n  ScenePanelTypeSwitcherState,\n} from '../../../SceneByVariableRepeaterGrid/components/ScenePanelTypeSwitcher';\nimport { SceneQuickFilter } from '../../../SceneByVariableRepeaterGrid/components/SceneQuickFilter';\nimport { SceneByVariableRepeaterGrid } from '../../../SceneByVariableRepeaterGrid/SceneByVariableRepeaterGrid';\nimport { GridItemData } from '../../../SceneByVariableRepeaterGrid/types/GridItemData';\nimport { CompareTarget } from '../../../SceneExploreDiffFlameGraph/domain/types';\nimport { SceneProfilesExplorer } from '../../../SceneProfilesExplorer/SceneProfilesExplorer';\nimport { SceneStatsPanel } from './components/SceneLabelValuesGrid/components/SceneStatsPanel/SceneStatsPanel';\nimport { SceneLabelValuesGrid } from './components/SceneLabelValuesGrid/SceneLabelValuesGrid';\nimport { IncludeExcludeAction } from './domain/actions/IncludeExcludeAction/IncludeExcludeAction';\nimport { EventClearLabelFromFilters } from './domain/events/EventClearLabelFromFilters';\nimport { EventExcludeLabelFromFilters } from './domain/events/EventExcludeLabelFromFilters';\nimport { EventIncludeLabelInFilters } from './domain/events/EventIncludeLabelInFilters';\nimport { EventSelectForCompare } from './domain/events/EventSelectForCompare';\nimport { CompareControls } from './ui/CompareControls';\n\nexport interface SceneGroupByLabelsState extends SceneObjectState {\n  body?: SceneObject;\n  compare: Map<CompareTarget, GridItemData>;\n  panelTypeChangeSub?: Unsubscribable;\n}\n\nexport class SceneGroupByLabels extends SceneObjectBase<SceneGroupByLabelsState> {\n  constructor({ item }: { item?: GridItemData }) {\n    super({\n      key: 'group-by-labels',\n      body: undefined,\n      compare: new Map(),\n      panelTypeChangeSub: undefined,\n    });\n\n    this.addActivationHandler(() => {\n      this.onActivate(item);\n    });\n  }\n\n  async onActivate(item?: GridItemData) {\n    // initial load\n    const groupByVariable = sceneGraph.findByKeyAndType(this, 'groupBy', GroupByVariable);\n    await groupByVariable.update();\n\n    if (item) {\n      this.initVariablesAndControls(item);\n    }\n\n    this.renderBody(groupByVariable);\n\n    const groupBySub = this.subscribeToGroupByChange();\n    const panelEventsSub = this.subscribeToPanelEvents();\n\n    return () => {\n      panelEventsSub.unsubscribe();\n      groupBySub.unsubscribe();\n\n      this.state.panelTypeChangeSub?.unsubscribe();\n    };\n  }\n\n  initVariablesAndControls(item: GridItemData) {\n    const { queryRunnerParams, panelType } = item;\n    const { groupBy } = queryRunnerParams;\n\n    if (groupBy?.label) {\n      const groupByVariable = sceneGraph.findByKeyAndType(this, 'groupBy', GroupByVariable);\n      groupByVariable.changeValueTo(groupBy.label);\n    }\n\n    if (panelType) {\n      const panelTypeSwitcher = sceneGraph.findByKeyAndType(this, 'panel-type-switcher', ScenePanelTypeSwitcher);\n      panelTypeSwitcher.setState({ panelType });\n    }\n  }\n\n  subscribeToGroupByChange() {\n    const groupByVariable = sceneGraph.findByKeyAndType(this, 'groupBy', GroupByVariable);\n    const quickFilter = sceneGraph.findByKeyAndType(this, 'quick-filter', SceneQuickFilter);\n\n    return groupByVariable.subscribeToState((newState, prevState) => {\n      if (newState.value !== prevState?.value) {\n        quickFilter.clearSearchText();\n\n        this.renderBody(groupByVariable);\n      }\n    });\n  }\n\n  subscribeToPanelEvents() {\n    const selectLabelSub = this.subscribeToEvent(EventSelectLabel, (event) => {\n      this.selectLabel(event.payload.item);\n    });\n\n    const selectForCompareSub = this.subscribeToEvent(EventSelectForCompare, (event) => {\n      const { compareTarget, item } = event.payload;\n      this.selectForCompare(compareTarget, item);\n    });\n\n    const includeFilterSub = this.subscribeToEvent(EventIncludeLabelInFilters, (event) => {\n      this.includeLabelValueInFilters(event.payload.item);\n    });\n\n    const excludeFilterSub = this.subscribeToEvent(EventExcludeLabelFromFilters, (event) => {\n      this.excludeLabelValueFromFilters(event.payload.item);\n    });\n\n    const clearFilterSub = this.subscribeToEvent(EventClearLabelFromFilters, (event) => {\n      this.clearLabelValueFromFilters(event.payload.item);\n    });\n\n    return {\n      unsubscribe() {\n        clearFilterSub.unsubscribe();\n        excludeFilterSub.unsubscribe();\n        includeFilterSub.unsubscribe();\n        selectForCompareSub.unsubscribe();\n        selectLabelSub.unsubscribe();\n      },\n    };\n  }\n\n  subscribeToPanelTypeChange() {\n    const panelTypeSwitcher = sceneGraph.findByKeyAndType(this, 'panel-type-switcher', ScenePanelTypeSwitcher);\n\n    return panelTypeSwitcher.subscribeToState(\n      (newState: ScenePanelTypeSwitcherState, prevState?: ScenePanelTypeSwitcherState) => {\n        if (newState.panelType !== prevState?.panelType) {\n          (this.state.body as SceneByVariableRepeaterGrid)?.renderGridItems();\n        }\n      }\n    );\n  }\n\n  renderBody(groupByVariable: GroupByVariable) {\n    this.state.panelTypeChangeSub?.unsubscribe();\n\n    if (groupByVariable.state.value === 'all') {\n      // we have to resubscribe every time because the subscription is removed every time the ScenePanelTypeSwitcher UI component is unmounted\n      this.setState({ panelTypeChangeSub: this.subscribeToPanelTypeChange() });\n\n      this.switchToLabelNamesGrid();\n    } else {\n      this.switchToLabelValuesGrid(groupByVariable);\n    }\n  }\n\n  switchToLabelNamesGrid() {\n    sceneGraph\n      .findByKeyAndType(this, 'quick-filter', SceneQuickFilter)\n      .setPlaceholder('Search labels (comma-separated regexes are supported)');\n\n    this.setState({\n      body: this.buildSceneLabelNamesGrid(),\n    });\n  }\n\n  buildSceneLabelNamesGrid() {\n    return new SceneByVariableRepeaterGrid({\n      key: 'service-labels-grid',\n      variableName: 'groupBy',\n      mapOptionToItem: (option, index, { serviceName, profileMetricId, panelType }) => {\n        if (option.value === 'all') {\n          return null;\n        }\n\n        // see LabelsDataSource.ts\n        const { value, groupBy } = JSON.parse(option.value as string);\n\n        return {\n          index: index - 1, // the 'all' option has been removed ;)\n          value,\n          // remove the count in parenthesis that exists in option.label\n          // it'll be set by SceneLabelValuesTimeseries or SceneLabelValuesBarGauge\n          label: value,\n          queryRunnerParams: {\n            serviceName,\n            profileMetricId,\n            groupBy,\n            filters: [],\n          },\n          panelType: panelType as PanelType,\n        };\n      },\n      headerActions: (item) => [\n        new SelectAction({ type: 'select-label', item }),\n        new SelectAction({ type: 'expand-panel', item }),\n        new FavAction({ item }),\n      ],\n    });\n  }\n\n  switchToLabelValuesGrid(groupByVariable: GroupByVariable) {\n    sceneGraph\n      .findByKeyAndType(this, 'quick-filter', SceneQuickFilter)\n      .setPlaceholder('Search label values (comma-separated regexes are supported)');\n\n    this.clearCompare();\n\n    const { index, value } = groupByVariable.findCurrentOption();\n\n    this.setState({\n      body: this.buildSceneLabelValuesGrid(value, index),\n    });\n  }\n\n  buildSceneLabelValuesGrid(label: string, startColorIndex: number) {\n    return new SceneLabelValuesGrid({\n      key: 'service-label-values-grid',\n      startColorIndex,\n      label,\n      headerActions: (item) => [\n        new SelectAction({\n          type: 'view-flame-graph',\n          item,\n          tooltip: (item, model) => {\n            const { queryRunnerParams, label } = item;\n            const profileMetricId =\n              queryRunnerParams.profileMetricId || getSceneVariableValue(model, 'profileMetricId');\n            const groupByValue = getSceneVariableValue(model, 'groupBy');\n\n            return `View the \"${\n              getProfileMetric(profileMetricId as ProfileMetricId).type\n            }\" flame graph for \"${groupByValue}=${label}\"`;\n          },\n        }),\n        new IncludeExcludeAction({ item }),\n        new FavAction({ item }),\n      ],\n    });\n  }\n\n  selectLabel({ queryRunnerParams }: GridItemData) {\n    const labelValue = queryRunnerParams!.groupBy!.label;\n    const groupByVariable = sceneGraph.findByKeyAndType(this, 'groupBy', GroupByVariable);\n\n    prepareHistoryEntry();\n    groupByVariable.changeValueTo(labelValue);\n  }\n\n  includeLabelValueInFilters(item: GridItemData) {\n    const [filterToInclude] = item.queryRunnerParams.filters!;\n    const filtersVariable = sceneGraph.findByKeyAndType(this, 'filters', FiltersVariable);\n\n    filtersVariable.setState({ filters: includeLabelValue(filtersVariable.state.filters, filterToInclude) });\n  }\n\n  excludeLabelValueFromFilters(item: GridItemData) {\n    const filtersVariable = sceneGraph.findByKeyAndType(this, 'filters', FiltersVariable);\n    const [filterToExclude] = item.queryRunnerParams.filters!;\n\n    filtersVariable.setState({ filters: excludeLabelValue(filtersVariable.state.filters, filterToExclude) });\n  }\n\n  clearLabelValueFromFilters(item: GridItemData) {\n    const filtersVariable = sceneGraph.findByKeyAndType(this, 'filters', FiltersVariable);\n    const [filterToClear] = item.queryRunnerParams.filters!;\n\n    filtersVariable.setState({ filters: clearLabelValue(filtersVariable.state.filters, filterToClear) });\n  }\n\n  selectForCompare(compareTarget: CompareTarget, item: GridItemData) {\n    const compare = new Map(this.state.compare);\n\n    if (compare.get(compareTarget)?.value === item.value) {\n      compare.delete(compareTarget);\n    } else {\n      compare.set(compareTarget, item);\n    }\n\n    this.setState({ compare });\n\n    this.updateStatsPanels();\n  }\n\n  updateStatsPanels() {\n    const { compare } = this.state;\n    const baselineItem = compare.get(CompareTarget.BASELINE);\n    const comparisonItem = compare.get(CompareTarget.COMPARISON);\n\n    const statsPanels = sceneGraph.findAllObjects(this, (o) => o instanceof SceneStatsPanel) as SceneStatsPanel[];\n\n    // TODO: optimize if needed\n    // we can remove the loop if we clear the current selection in the UI before updating the compare map (see selectForCompare() and onClickClearCompareButton())\n    for (const panel of statsPanels) {\n      panel.updateCompareActions(baselineItem, comparisonItem);\n    }\n  }\n\n  getCompare() {\n    return this.state.compare;\n  }\n\n  clearCompare() {\n    this.setState({ compare: new Map() });\n  }\n\n  onClickCompareButton = () => {\n    reportInteraction('g_pyroscope_app_compare_link_clicked');\n\n    const { compare } = this.state;\n\n    const { filters: baselineFilters } = interpolateQueryRunnerVariables(\n      this,\n      compare.get(CompareTarget.BASELINE) as GridItemData\n    );\n\n    const { filters: comparisonFilters } = interpolateQueryRunnerVariables(\n      this,\n      compare.get(CompareTarget.COMPARISON) as GridItemData\n    );\n\n    this.publishEvent(\n      new EventViewDiffFlameGraph({\n        useAncestorTimeRange: true,\n        clearDiffRange: true,\n        baselineFilters,\n        comparisonFilters,\n      }),\n      true\n    );\n  };\n\n  onClickClearCompareButton = () => {\n    this.clearCompare();\n    this.updateStatsPanels();\n  };\n\n  static Component = ({ model }: SceneComponentProps<SceneGroupByLabels>) => {\n    const styles = useStyles2(getStyles);\n\n    const { body, compare } = model.useState();\n\n    const groupByVariable = sceneGraph.findByKeyAndType(model, 'groupBy', GroupByVariable);\n    const { value: groupByVariableValue } = groupByVariable.useState();\n\n    const gridControls = useMemo(\n      () =>\n        groupByVariableValue === 'all'\n          ? sceneGraph.findByKeyAndType(model, 'profiles-explorer', SceneProfilesExplorer).state.gridControls\n          : ([\n              sceneGraph.findByKeyAndType(model, 'quick-filter', SceneQuickFilter),\n              sceneGraph.findByKeyAndType(model, 'layout-switcher', SceneLayoutSwitcher),\n              sceneGraph.findByKeyAndType(model, 'no-data-switcher', SceneNoDataSwitcher),\n            ] as SceneObject[]),\n      [groupByVariableValue, model]\n    );\n\n    return (\n      <div className={styles.container} data-testid=\"groupByLabelsContainer\">\n        <groupByVariable.Component model={groupByVariable} />\n\n        <div className={styles.sceneControls}>\n          <Stack wrap=\"wrap\">\n            {groupByVariableValue !== 'all' && (\n              <CompareControls\n                compare={compare}\n                onClickCompare={model.onClickCompareButton}\n                onClickClear={model.onClickClearCompareButton}\n              />\n            )}\n\n            {gridControls.map((control) => (\n              <control.Component key={control.state.key} model={control} />\n            ))}\n          </Stack>\n        </div>\n\n        {body && <body.Component model={body} />}\n      </div>\n    );\n  };\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    margin-top: ${theme.spacing(1)};\n  `,\n  sceneControls: css`\n    margin-bottom: ${theme.spacing(1)};\n\n    & .quick-filter {\n      flex: 1;\n      min-width: 112px;\n    }\n  `,\n});\n","import { DashboardCursorSync } from '@grafana/data';\nimport {\n  behaviors,\n  SceneComponentProps,\n  SceneFlexItem,\n  SceneFlexLayout,\n  sceneGraph,\n  SceneObjectBase,\n  SceneObjectState,\n} from '@grafana/scenes';\nimport { getProfileMetric, ProfileMetricId } from '@shared/infrastructure/profile-metrics/getProfileMetric';\nimport React from 'react';\n\nimport { SceneMainServiceTimeseries } from '../../components/SceneMainServiceTimeseries';\nimport { FavAction } from '../../domain/actions/FavAction';\nimport { SelectAction } from '../../domain/actions/SelectAction';\nimport { EventExpandPanel } from '../../domain/events/EventExpandPanel';\nimport { EventSelectLabel } from '../../domain/events/EventSelectLabel';\nimport { FiltersVariable } from '../../domain/variables/FiltersVariable/FiltersVariable';\nimport { ProfileMetricVariable } from '../../domain/variables/ProfileMetricVariable';\nimport { ServiceNameVariable } from '../../domain/variables/ServiceNameVariable/ServiceNameVariable';\nimport { getSceneVariableValue } from '../../helpers/getSceneVariableValue';\nimport { vizPanelBuilder } from '../../helpers/vizPanelBuilder';\nimport { getProfileMetricLabel } from '../../infrastructure/series/helpers/getProfileMetricLabel';\nimport { GridItemData } from '../SceneByVariableRepeaterGrid/types/GridItemData';\nimport { SceneDrawer } from '../SceneDrawer';\nimport { SceneGroupByLabels } from './components/SceneGroupByLabels/SceneGroupByLabels';\n\ninterface SceneExploreServiceLabelsState extends SceneObjectState {\n  body: SceneFlexLayout;\n  drawer: SceneDrawer;\n}\n\nexport class SceneExploreServiceLabels extends SceneObjectBase<SceneExploreServiceLabelsState> {\n  constructor({ item }: { item?: GridItemData }) {\n    super({\n      key: 'explore-service-labels',\n      body: new SceneFlexLayout({\n        direction: 'column',\n        $behaviors: [\n          new behaviors.CursorSync({\n            key: 'metricCrosshairSync',\n            sync: DashboardCursorSync.Crosshair,\n          }),\n        ],\n        children: [\n          new SceneFlexItem({\n            minHeight: SceneMainServiceTimeseries.MIN_HEIGHT,\n            body: new SceneMainServiceTimeseries({\n              item,\n              headerActions: (item) => {\n                return item.queryRunnerParams.groupBy\n                  ? [\n                      new SelectAction({ type: 'view-flame-graph', item }),\n                      new SelectAction({\n                        type: 'expand-panel',\n                        item,\n                      }),\n                      new FavAction({ item }),\n                    ]\n                  : [new SelectAction({ type: 'view-flame-graph', item }), new FavAction({ item })];\n              },\n              supportGroupBy: true,\n            }),\n          }),\n          new SceneFlexItem({\n            body: new SceneGroupByLabels({ item }),\n          }),\n        ],\n      }),\n      drawer: new SceneDrawer(),\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this, item));\n  }\n\n  onActivate(item?: GridItemData) {\n    if (item) {\n      this.initVariables(item);\n    }\n\n    const profileMetricVariable = sceneGraph.findByKeyAndType(this, 'profileMetricId', ProfileMetricVariable);\n\n    profileMetricVariable.setState({ query: ProfileMetricVariable.QUERY_SERVICE_NAME_DEPENDENT });\n    profileMetricVariable.update(true);\n\n    const panelEventsSub = this.subscribeToPanelEvents();\n\n    return () => {\n      panelEventsSub.unsubscribe();\n      profileMetricVariable.setState({ query: ProfileMetricVariable.QUERY_DEFAULT });\n      profileMetricVariable.update(true);\n    };\n  }\n\n  initVariables(item: GridItemData) {\n    const { queryRunnerParams } = item;\n    const { serviceName, profileMetricId, filters } = queryRunnerParams;\n\n    if (serviceName) {\n      const serviceNameVariable = sceneGraph.findByKeyAndType(this, 'serviceName', ServiceNameVariable);\n      serviceNameVariable.changeValueTo(serviceName);\n    }\n\n    if (profileMetricId) {\n      const profileMetricVariable = sceneGraph.findByKeyAndType(this, 'profileMetricId', ProfileMetricVariable);\n      profileMetricVariable.changeValueTo(profileMetricId);\n    }\n\n    if (filters) {\n      const filtersVariable = sceneGraph.findByKeyAndType(this, 'filters', FiltersVariable);\n      filtersVariable.setState({ filters });\n    }\n  }\n\n  subscribeToPanelEvents() {\n    const expandPanelSub = this.subscribeToEvent(EventExpandPanel, async (event) => {\n      this.openExpandedPanelDrawer(event.payload.item);\n    });\n\n    const selectLabelSub = this.subscribeToEvent(EventSelectLabel, () => {\n      // the event may be published from an expanded panel in the drawer\n      this.state.drawer.close();\n    });\n\n    return {\n      unsubscribe() {\n        selectLabelSub.unsubscribe();\n        expandPanelSub.unsubscribe();\n      },\n    };\n  }\n\n  // see SceneProfilesExplorer\n  getVariablesAndGridControls() {\n    return {\n      variables: [\n        sceneGraph.findByKeyAndType(this, 'serviceName', ServiceNameVariable),\n        sceneGraph.findByKeyAndType(this, 'profileMetricId', ProfileMetricVariable),\n        sceneGraph.findByKeyAndType(this, 'filters', FiltersVariable),\n      ],\n      gridControls: [],\n    };\n  }\n\n  openExpandedPanelDrawer(item: GridItemData) {\n    const title = getSceneVariableValue(this, 'serviceName');\n\n    const profileMetricId = getSceneVariableValue(this, 'profileMetricId');\n    const profileMetricDescription =\n      getProfileMetric(profileMetricId as ProfileMetricId).description || getProfileMetricLabel(profileMetricId);\n    const timeseriesTitle = `${profileMetricDescription}, grouped by ${item.queryRunnerParams.groupBy?.label || '?'}`;\n\n    this.state.drawer.open({\n      title,\n      body: vizPanelBuilder(item.panelType, {\n        displayAllValues: true,\n        legendPlacement: 'right',\n        item: { ...item, label: timeseriesTitle },\n        headerActions: () => [new SelectAction({ type: 'select-label', item }), new FavAction({ item })],\n      }),\n    });\n  }\n\n  static Component({ model }: SceneComponentProps<SceneExploreServiceLabels>) {\n    const { body, drawer } = model.useState();\n\n    return (\n      <>\n        <body.Component model={body} />\n        <drawer.Component model={drawer} />\n      </>\n    );\n  }\n}\n","import {\n  EmbeddedSceneState,\n  SceneComponentProps,\n  sceneGraph,\n  SceneObjectBase,\n  SceneVariableSet,\n} from '@grafana/scenes';\nimport React from 'react';\n\nimport { SceneByVariableRepeaterGrid } from '../../components/SceneByVariableRepeaterGrid/SceneByVariableRepeaterGrid';\nimport { FavAction } from '../../domain/actions/FavAction';\nimport { SelectAction } from '../../domain/actions/SelectAction';\nimport { ProfileMetricVariable } from '../../domain/variables/ProfileMetricVariable';\nimport { ServiceNameVariable } from '../../domain/variables/ServiceNameVariable/ServiceNameVariable';\nimport { SceneLayoutSwitcher } from '../SceneByVariableRepeaterGrid/components/SceneLayoutSwitcher';\nimport { PanelType } from '../SceneByVariableRepeaterGrid/components/ScenePanelTypeSwitcher';\nimport { SceneQuickFilter } from '../SceneByVariableRepeaterGrid/components/SceneQuickFilter';\nimport { GridItemData } from '../SceneByVariableRepeaterGrid/types/GridItemData';\n\ninterface SceneExploreServiceProfileTypesState extends EmbeddedSceneState {}\n\nexport class SceneExploreServiceProfileTypes extends SceneObjectBase<SceneExploreServiceProfileTypesState> {\n  constructor({ item }: { item?: GridItemData }) {\n    super({\n      key: 'explore-service-profile-types',\n      $variables: new SceneVariableSet({\n        variables: [\n          // we use a custom instance of ProfileMetricVariable to display only the profile metrics associated to the selected service\n          new ProfileMetricVariable({\n            query: ProfileMetricVariable.QUERY_SERVICE_NAME_DEPENDENT,\n            skipUrlSync: true,\n          }),\n        ],\n      }),\n      body: new SceneByVariableRepeaterGrid({\n        key: 'profile-metrics-grid',\n        variableName: 'profileMetricId',\n        mapOptionToItem: (option, index, { serviceName }) => ({\n          index,\n          value: option.value as string,\n          label: option.label,\n          queryRunnerParams: {\n            serviceName,\n            profileMetricId: option.value as string,\n          },\n          panelType: PanelType.TIMESERIES,\n        }),\n        headerActions: (item) => [\n          new SelectAction({ type: 'view-labels', item }),\n          new SelectAction({ type: 'view-flame-graph', item }),\n          new FavAction({ item }),\n        ],\n      }),\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this, item));\n  }\n\n  onActivate(item?: GridItemData) {\n    sceneGraph\n      .findByKeyAndType(this, 'quick-filter', SceneQuickFilter)\n      .setPlaceholder('Search profile types (comma-separated regexes are supported)');\n\n    if (item) {\n      this.initVariables(item);\n    }\n  }\n\n  initVariables(item: GridItemData) {\n    if (item.queryRunnerParams.serviceName) {\n      const serviceNameVariable = sceneGraph.findByKeyAndType(this, 'serviceName', ServiceNameVariable);\n      serviceNameVariable.changeValueTo(item.queryRunnerParams.serviceName);\n    }\n  }\n\n  // see SceneProfilesExplorer\n  getVariablesAndGridControls() {\n    return {\n      variables: [sceneGraph.findByKeyAndType(this, 'serviceName', ServiceNameVariable)],\n      gridControls: [\n        sceneGraph.findByKeyAndType(this, 'quick-filter', SceneQuickFilter),\n        sceneGraph.findByKeyAndType(this, 'layout-switcher', SceneLayoutSwitcher),\n      ],\n    };\n  }\n\n  static Component({ model }: SceneComponentProps<SceneExploreServiceProfileTypes>) {\n    const { body } = model.useState();\n\n    return <body.Component model={body} />;\n  }\n}\n","import { dateTimeParse } from '@grafana/data';\nimport { SceneTimeRangeState } from '@grafana/scenes';\n\nexport function buildTimeRange(from: string, to: string): SceneTimeRangeState {\n  return {\n    from,\n    to,\n    value: {\n      from: dateTimeParse(from),\n      to: dateTimeParse(to),\n      raw: { from, to },\n    },\n  };\n}\n\nexport const getDefaultTimeRange = () => buildTimeRange('now-30m', 'now');\n","import { MetricFindValue } from '@grafana/data';\nimport { localeCompare } from '@shared/domain/localeCompare';\nimport { getProfileMetric, ProfileMetricId } from '@shared/infrastructure/profile-metrics/getProfileMetric';\n\nimport { PyroscopeSeries } from './http/SeriesApiClient';\n\nexport function formatSeriesToProfileMetrics(\n  pyroscopeSeries: PyroscopeSeries,\n  serviceName?: string\n): MetricFindValue[] {\n  if (serviceName) {\n    const profileMetricsMap = pyroscopeSeries.services.get(serviceName) || new Map();\n\n    return Array.from(profileMetricsMap.values())\n      .sort((a, b) => localeCompare(b.group, a.group))\n      .map(({ id, type, group }) => ({\n        value: id,\n        text: `${type} (${group})`,\n      }));\n  }\n\n  return Array.from(pyroscopeSeries.profileMetrics.keys())\n    .map((id) => getProfileMetric(id as ProfileMetricId))\n    .sort((a, b) => localeCompare(b.group, a.group))\n    .map(({ id, type, group }) => ({\n      value: id,\n      text: `${type} (${group})`,\n    }));\n}\n","import { MetricFindValue } from '@grafana/data';\nimport { localeCompare } from '@shared/domain/localeCompare';\n\nimport { PyroscopeSeries } from './http/SeriesApiClient';\n\nexport function formatSeriesToServices(pyroscopeSeries: PyroscopeSeries, profileMetricId?: string): MetricFindValue[] {\n  if (profileMetricId) {\n    const servicesSet = pyroscopeSeries.profileMetrics.get(profileMetricId) || new Set();\n\n    return Array.from(servicesSet)\n      .sort(localeCompare)\n      .map((serviceName) => ({\n        text: serviceName,\n        value: serviceName,\n      }));\n  }\n\n  return Array.from(pyroscopeSeries.services.keys())\n    .sort(localeCompare)\n    .map((serviceName) => ({\n      text: serviceName,\n      value: serviceName,\n    }));\n}\n","import { DataSourceProxyClient } from './DataSourceProxyClient';\n\nexport class DataSourceProxyClientBuilder {\n  private static cache = new Map<string, DataSourceProxyClient>();\n\n  static build<ApiClentType>(\n    dataSourceUid: string,\n    ApiClientClass: { new (options: { dataSourceUid: string }): ApiClentType }\n  ) {\n    const cacheKey = `${dataSourceUid}-${ApiClientClass.name}`;\n\n    const cachedInstance = DataSourceProxyClientBuilder.cache.get(cacheKey);\n    if (cachedInstance instanceof ApiClientClass) {\n      return cachedInstance;\n    }\n\n    const clientInstance = new ApiClientClass({ dataSourceUid });\n\n    DataSourceProxyClientBuilder.cache.set(cacheKey, clientInstance as DataSourceProxyClient);\n\n    return clientInstance;\n  }\n}\n","import { getProfileMetric, ProfileMetricId } from '@shared/infrastructure/profile-metrics/getProfileMetric';\nimport { logger } from '@shared/infrastructure/tracking/logger';\n\nimport { PyroscopeSeries } from './SeriesApiClient';\n\ntype Labels = Array<{ name: string; value: string }>;\n\nfunction findServiceNameAndProfileMetricId(labels: Labels) {\n  let serviceName;\n  let profileMetricId;\n\n  for (const { name, value } of labels) {\n    if (name === 'service_name') {\n      serviceName = value;\n    }\n\n    if (name === '__profile_type__') {\n      profileMetricId = value;\n    }\n\n    if (serviceName && profileMetricId) {\n      return [serviceName, profileMetricId];\n    }\n  }\n\n  return [];\n}\n\nexport function formatSeriesResponse(data: { labelsSet: Array<{ labels: Labels }> }): PyroscopeSeries {\n  const services: PyroscopeSeries['services'] = new Map();\n  const profileMetrics: PyroscopeSeries['profileMetrics'] = new Map();\n\n  if (!data.labelsSet) {\n    logger.warn('Pyroscope SeriesApiClient: no data received!');\n    return { services, profileMetrics };\n  }\n\n  for (const { labels } of data.labelsSet) {\n    const [serviceName, profileMetricId] = findServiceNameAndProfileMetricId(labels);\n\n    if (!serviceName || !profileMetricId) {\n      logger.warn(\n        'Pyroscope ServicesApiClient: \"service_name\" and/or \"__profile_type__\" are missing in the labels received!',\n        labels\n      );\n      continue;\n    }\n\n    const serviceProfileMetrics = services.get(serviceName) || new Map();\n    serviceProfileMetrics.set(profileMetricId, getProfileMetric(profileMetricId as ProfileMetricId));\n    services.set(serviceName, serviceProfileMetrics);\n\n    const profileMetricServices = profileMetrics.get(profileMetricId) || new Set();\n    profileMetricServices.add(serviceName);\n    profileMetrics.set(profileMetricId, profileMetricServices);\n  }\n\n  return { services, profileMetrics };\n}\n","import { ProfileMetric } from '@shared/infrastructure/profile-metrics/getProfileMetric';\n\nimport { DataSourceProxyClient } from './DataSourceProxyClient';\nimport { formatSeriesResponse } from './formatSeriesResponse';\n\ntype ProfileMetricsMap = Map<ProfileMetric['id'], ProfileMetric>;\ntype ServiceToProfileMetricsMap = Map<string, ProfileMetricsMap>;\n\ntype ServicesSet = Set<string>;\ntype ProfileMetricToServicesSet = Map<string, ServicesSet>;\n\nexport type PyroscopeSeries = { services: ServiceToProfileMetricsMap; profileMetrics: ProfileMetricToServicesSet };\n\nexport class SeriesApiClient extends DataSourceProxyClient {\n  constructor(options: { dataSourceUid: string }) {\n    super(options);\n  }\n\n  async list(options: { from: number; to: number }): Promise<PyroscopeSeries> {\n    const { from, to } = options;\n\n    return this.fetch('/querier.v1.QuerierService/Series', {\n      method: 'POST',\n      body: JSON.stringify({\n        start: from,\n        end: to,\n        labelNames: ['service_name', '__profile_type__'],\n        matchers: [],\n      }),\n    })\n      .then((response) => response.json())\n      .then(formatSeriesResponse);\n  }\n}\n","import { TimeRange } from '@grafana/data';\nimport { AbstractRepository } from '@shared/infrastructure/AbstractRepository';\nimport { MemoryCacheClient } from '@shared/infrastructure/MemoryCacheClient';\n\nimport { computeRoundedTimeRange } from '../../../helpers/computeRoundedTimeRange';\nimport { PyroscopeSeries, SeriesApiClient } from './SeriesApiClient';\n\nclass SeriesRepository extends AbstractRepository<SeriesApiClient, MemoryCacheClient> {\n  constructor(options: { cacheClient: MemoryCacheClient }) {\n    super(options);\n  }\n\n  async list(options: { timeRange: TimeRange }): Promise<PyroscopeSeries> {\n    const { from, to } = computeRoundedTimeRange(options.timeRange);\n\n    const cacheParams = [this.apiClient!.baseUrl, from, to];\n\n    const responseFromCacheP = this.cacheClient!.get(cacheParams);\n    if (responseFromCacheP) {\n      const { services, profileMetrics } = await responseFromCacheP;\n\n      if (!services.size && !profileMetrics.size) {\n        this.cacheClient!.delete(cacheParams);\n      }\n\n      return { services, profileMetrics };\n    }\n\n    const fetchP = this.apiClient!.list({ from, to });\n    this.cacheClient!.set(cacheParams, fetchP);\n\n    try {\n      const { services, profileMetrics } = await fetchP;\n      return { services, profileMetrics };\n    } catch (error) {\n      this.cacheClient!.delete(cacheParams);\n      throw error;\n    }\n  }\n}\n\nexport const seriesRepository = new SeriesRepository({\n  cacheClient: new MemoryCacheClient(),\n});\n","import {\n  DataQueryResponse,\n  FieldType,\n  LegacyMetricFindQueryOptions,\n  LoadingState,\n  MetricFindValue,\n  TestDataSourceResponse,\n  TimeRange,\n} from '@grafana/data';\nimport { RuntimeDataSource, sceneGraph } from '@grafana/scenes';\nimport { logger } from '@shared/infrastructure/tracking/logger';\n\nimport { PYROSCOPE_SERIES_DATA_SOURCE } from '../pyroscope-data-sources';\nimport { formatSeriesToProfileMetrics } from './formatSeriesToProfileMetrics';\nimport { formatSeriesToServices } from './formatSeriesToServices';\nimport { DataSourceProxyClientBuilder } from './http/DataSourceProxyClientBuilder';\nimport { SeriesApiClient } from './http/SeriesApiClient';\nimport { seriesRepository } from './http/seriesRepository';\n\nexport class SeriesDataSource extends RuntimeDataSource {\n  constructor() {\n    super(PYROSCOPE_SERIES_DATA_SOURCE.type, PYROSCOPE_SERIES_DATA_SOURCE.uid);\n  }\n\n  async fetchSeries(dataSourceUid: string, timeRange: TimeRange, variableName?: string) {\n    seriesRepository.setApiClient(DataSourceProxyClientBuilder.build(dataSourceUid, SeriesApiClient));\n\n    try {\n      return await seriesRepository.list({ timeRange });\n    } catch (error) {\n      logger.error(error as Error, {\n        info: 'Error while loading Pyroscope series!',\n        variableName: variableName || '',\n      });\n\n      throw error;\n    }\n  }\n\n  async query(): Promise<DataQueryResponse> {\n    return {\n      state: LoadingState.Done,\n      data: [\n        {\n          name: 'PyroscopeSeries',\n          fields: [\n            {\n              name: 'PyroscopeSeries',\n              type: FieldType.other,\n              values: [],\n              config: {},\n            },\n          ],\n          length: 0,\n        },\n      ],\n    };\n  }\n\n  async metricFindQuery(query: string, options: LegacyMetricFindQueryOptions): Promise<MetricFindValue[]> {\n    const sceneObject = options.scopedVars?.__sceneObject?.value;\n\n    const dataSourceUid = sceneGraph.interpolate(sceneObject, '$dataSource');\n    const serviceName = sceneGraph.interpolate(sceneObject, '$serviceName');\n    const profileMetricId = sceneGraph.interpolate(sceneObject, '$profileMetricId');\n\n    const pyroscopeSeries = await this.fetchSeries(dataSourceUid, options.range as TimeRange, options.variable?.name);\n\n    switch (query) {\n      // queries that depend only on the selected data source\n      case '$dataSource and all services':\n        return formatSeriesToServices(pyroscopeSeries);\n\n      case '$dataSource and all profile metrics':\n        return formatSeriesToProfileMetrics(pyroscopeSeries);\n\n      // queries that depend on the selected profile metric or the selected service\n      case '$dataSource and only $profileMetricId services':\n        return formatSeriesToServices(pyroscopeSeries, profileMetricId);\n\n      case '$dataSource and only $serviceName profile metrics':\n        return formatSeriesToProfileMetrics(pyroscopeSeries, serviceName);\n\n      default:\n        throw new TypeError(`Unsupported query \"${query}\"!`);\n    }\n  }\n\n  async testDatasource(): Promise<TestDataSourceResponse> {\n    return {\n      status: 'success',\n      message: 'OK',\n    };\n  }\n}\n","import { BusEventWithPayload, TimeRange } from '@grafana/data';\nimport { SceneTimeRangeState } from '@grafana/scenes';\n\nimport { CompareTarget } from '../../../../domain/types';\n\ninterface EventEnableSyncTimeRangesPayload {\n  source: CompareTarget;\n  enable: boolean;\n  timeRange: SceneTimeRangeState;\n  annotationTimeRange: TimeRange;\n}\n\nexport class EventEnableSyncTimeRanges extends BusEventWithPayload<EventEnableSyncTimeRangesPayload> {\n  public static type = 'enable-sync-timeranges';\n}\n","import { BusEventWithPayload } from '@grafana/data';\n\nimport { CompareTarget } from '../../../../domain/types';\n\ninterface EventSyncRefreshPayload {\n  source: CompareTarget;\n}\n\nexport class EventSyncRefresh extends BusEventWithPayload<EventSyncRefreshPayload> {\n  public static type = 'sync-refresh';\n}\n","import { BusEventWithPayload, TimeRange } from '@grafana/data';\nimport { SceneTimeRangeState } from '@grafana/scenes';\n\nimport { CompareTarget } from '../../../../domain/types';\n\ninterface EventSyncTimeRangesPayload {\n  source: CompareTarget;\n  timeRange?: SceneTimeRangeState;\n  annotationTimeRange?: TimeRange;\n}\n\nexport class EventSyncTimeRanges extends BusEventWithPayload<EventSyncTimeRangesPayload> {\n  public static type = 'sync-timeranges';\n}\n","import { SceneComponentProps, sceneGraph, SceneTimePicker } from '@grafana/scenes';\nimport { TimeRangePicker } from '@grafana/ui';\nimport React from 'react';\n\nexport class SceneTimePickerWithoutSync extends SceneTimePicker {\n  public static Component = function SceneTimePickerRenderer({\n    model,\n  }: SceneComponentProps<SceneTimePickerWithoutSync>) {\n    const { hidePicker, isOnCanvas } = model.useState();\n    const timeRange = sceneGraph.getTimeRange(model);\n    const timeZone = timeRange.getTimeZone();\n    const timeRangeState = timeRange.useState();\n\n    if (hidePicker) {\n      return null;\n    }\n\n    return (\n      <TimeRangePicker\n        isOnCanvas={isOnCanvas ?? true}\n        value={timeRangeState.value}\n        onChange={timeRange.onTimeRangeChange}\n        timeZone={timeZone}\n        fiscalYearStartMonth={timeRangeState.fiscalYearStartMonth}\n        onMoveBackward={model.onMoveBackward}\n        onMoveForward={model.onMoveForward}\n        onZoom={model.onZoom}\n        onChangeTimeZone={timeRange.onTimeZoneChange}\n        onChangeFiscalYearStartMonth={model.onChangeFiscalYearStartMonth}\n        // disable the sync\n        isSynced={false}\n      />\n    );\n  };\n}\n","import { toUtc } from '@grafana/data';\nimport { SceneObjectUrlValue } from '@grafana/scenes';\n\nconst INTERVAL_STRING_REGEX = /^\\d+[yYmMsSwWhHdD]$/;\n\n/* Copied from https://github.com/grafana/scenes/blob/main/packages/scenes/src/utils/parseUrlParam.ts */\n\n// eslint-disable-next-line sonarjs/cognitive-complexity\nexport function parseUrlParam(value: SceneObjectUrlValue): string | null {\n  if (typeof value !== 'string') {\n    return null;\n  }\n\n  if (value.indexOf('now') !== -1) {\n    return value;\n  }\n\n  if (INTERVAL_STRING_REGEX.test(value)) {\n    return value;\n  }\n\n  if (value.length === 8) {\n    const utcValue = toUtc(value, 'YYYYMMDD');\n    if (utcValue.isValid()) {\n      return utcValue.toISOString();\n    }\n  } else if (value.length === 15) {\n    const utcValue = toUtc(value, 'YYYYMMDDTHHmmss');\n    if (utcValue.isValid()) {\n      return utcValue.toISOString();\n    }\n  } else if (value.length === 24) {\n    const utcValue = toUtc(value);\n    return utcValue.toISOString();\n  }\n\n  const epoch = parseInt(value, 10);\n  if (!isNaN(epoch)) {\n    return toUtc(epoch).toISOString();\n  }\n\n  return null;\n}\n","import { FieldType, MutableDataFrame } from '@grafana/data';\n\nexport class RangeAnnotation extends MutableDataFrame {\n  constructor() {\n    super();\n    [\n      {\n        name: 'time',\n        type: FieldType.time,\n      },\n      {\n        name: 'timeEnd',\n        type: FieldType.time,\n      },\n      {\n        name: 'isRegion',\n        type: FieldType.boolean,\n      },\n      {\n        name: 'color',\n        type: FieldType.other,\n      },\n      {\n        name: 'text',\n        type: FieldType.string,\n      },\n    ].forEach((field) => this.addField(field));\n  }\n\n  addRange(entry: { time: number; timeEnd: number; color?: string; text: string }) {\n    this.add({ ...entry, isRegion: true });\n  }\n}\n","import { DateTime, dateTime, LoadingState, TimeRange } from '@grafana/data';\nimport {\n  sceneGraph,\n  SceneObjectBase,\n  SceneObjectUrlSyncConfig,\n  SceneObjectUrlValues,\n  SceneTimeRangeLike,\n  SceneTimeRangeState,\n  VariableDependencyConfig,\n  VizPanel,\n} from '@grafana/scenes';\nimport { omit } from 'lodash';\n\nimport { evaluateTimeRange } from '../domain/evaluateTimeRange';\nimport { parseUrlParam } from '../domain/parseUrlParam';\nimport { RangeAnnotation } from '../domain/RangeAnnotation';\n\nexport enum TimeRangeWithAnnotationsMode {\n  ANNOTATIONS = 'annotations',\n  DEFAULT = 'default',\n}\n\ninterface SceneTimeRangeWithAnnotationsState extends SceneTimeRangeState {\n  annotationTimeRange: TimeRange;\n  mode: TimeRangeWithAnnotationsMode;\n  annotationColor: string;\n  annotationTitle: string;\n}\n\nconst TIMERANGE_NIL = {\n  from: dateTime(0),\n  to: dateTime(0),\n  raw: { from: '', to: '' },\n};\n\n/**\n * This custom SceneTimeRange class provides the ability to draw annotations on timeseries vizualisations.\n * Indeed, timeseries visualizations don't support drawing annotations by dragging (it's only supported when holding ctrl/command key) so we need to hijack the zooming event to emulate drawing.\n * At the same time, the only way to hijack it is by passing custom $timeRange because TimeSeries vizualization handles zooming internally by looking for the nearest time range object.\n * @see https://github.com/grafana/scenes/pull/744\n */\nexport class SceneTimeRangeWithAnnotations\n  extends SceneObjectBase<SceneTimeRangeWithAnnotationsState>\n  implements SceneTimeRangeLike\n{\n  protected _variableDependency = new VariableDependencyConfig(this, {\n    variableNames: ['dataSource', 'serviceName'],\n    onReferencedVariableValueChanged: () => {\n      this.nullifyAnnotationTimeRange();\n      this.updateTimeseriesAnnotation();\n    },\n  });\n\n  protected _urlSync = new SceneObjectUrlSyncConfig(this, { keys: ['diffFrom', 'diffTo'] });\n\n  constructor(options: {\n    key: string;\n    mode: TimeRangeWithAnnotationsMode;\n    annotationColor: string;\n    annotationTitle: string;\n  }) {\n    super({\n      from: TIMERANGE_NIL.raw.from,\n      to: TIMERANGE_NIL.raw.to,\n      value: TIMERANGE_NIL,\n      annotationTimeRange: TIMERANGE_NIL,\n      ...options,\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  onActivate() {\n    this.setState(omit(this.getAncestorTimeRange().state, 'key'));\n\n    this._subs.add(\n      this.getAncestorTimeRange().subscribeToState((newState) => {\n        this.setState(omit(newState, 'key'));\n      })\n    );\n\n    this._subs.add(\n      this.getTimeseries().state.$data?.subscribeToState((newState, prevState) => {\n        if (!newState.data || newState.data.state !== LoadingState.Done) {\n          return;\n        }\n\n        // add annotation for the first time\n        if (!newState.data.annotations?.length && !prevState.data?.annotations?.length) {\n          this.updateTimeseriesAnnotation();\n          return;\n        }\n\n        // ensure we retain the previous annotations, if they exist\n        if (!newState.data.annotations?.length && prevState.data?.annotations?.length) {\n          newState.data.annotations = prevState.data.annotations;\n        }\n      })\n    );\n  }\n\n  protected getAncestorTimeRange(): SceneTimeRangeLike {\n    if (!this.parent || !this.parent.parent) {\n      throw new Error(typeof this + ' must be used within $timeRange scope');\n    }\n\n    return sceneGraph.getTimeRange(this.parent.parent);\n  }\n\n  protected getTimeseries(): VizPanel {\n    try {\n      const vizPanel = sceneGraph.getAncestor(this, VizPanel);\n\n      if (vizPanel.state.pluginId !== 'timeseries') {\n        throw new TypeError('Incorrect VizPanel type!');\n      }\n\n      return vizPanel;\n    } catch (error) {\n      throw new Error('Ancestor timeseries panel not found!');\n    }\n  }\n\n  updateTimeseriesAnnotation() {\n    const { annotationTimeRange, annotationColor, annotationTitle } = this.state;\n\n    const { $data } = this.getTimeseries().state;\n\n    const data = $data?.state.data;\n    if (!data) {\n      return;\n    }\n\n    const annotation = new RangeAnnotation();\n\n    annotation.addRange({\n      color: annotationColor,\n      text: annotationTitle,\n      time: annotationTimeRange.from.unix() * 1000,\n      timeEnd: annotationTimeRange.to.unix() * 1000,\n    });\n\n    // tradeoff: this will notify all the $data subscribers even though the data itself hasn't changed\n    $data?.setState({\n      data: {\n        ...data,\n        annotations: [annotation],\n      },\n    });\n  }\n\n  setAnnotationTimeRange(annotationTimeRange: TimeRange, updateTimeseries = false) {\n    this.setState({ annotationTimeRange });\n\n    if (updateTimeseries) {\n      this.updateTimeseriesAnnotation();\n    }\n  }\n\n  nullifyAnnotationTimeRange() {\n    this.setAnnotationTimeRange(TIMERANGE_NIL);\n  }\n\n  getUrlState() {\n    const { annotationTimeRange } = this.state;\n\n    return {\n      diffFrom:\n        typeof annotationTimeRange.raw.from === 'string'\n          ? annotationTimeRange.raw.from\n          : annotationTimeRange.raw.from.toISOString(),\n      diffTo:\n        typeof annotationTimeRange.raw.to === 'string'\n          ? annotationTimeRange.raw.to\n          : annotationTimeRange.raw.to.toISOString(),\n    };\n  }\n\n  updateFromUrl(values: SceneObjectUrlValues) {\n    const { diffFrom, diffTo } = values;\n\n    if (!diffTo && !diffFrom) {\n      return;\n    }\n\n    const { annotationTimeRange } = this.state;\n\n    this.setAnnotationTimeRange(\n      this.buildAnnotationTimeRange(\n        parseUrlParam(diffFrom) ?? annotationTimeRange.from,\n        parseUrlParam(diffTo) ?? annotationTimeRange.to\n      )\n    );\n  }\n\n  buildAnnotationTimeRange(diffFrom: string | DateTime, diffTo: string | DateTime) {\n    return evaluateTimeRange(\n      diffFrom,\n      diffTo,\n      this.getTimeZone(),\n      this.state.fiscalYearStartMonth,\n      this.state.UNSAFE_nowDelay\n    );\n  }\n\n  onTimeRangeChange(timeRange: TimeRange): void {\n    const { mode } = this.state;\n\n    if (mode === TimeRangeWithAnnotationsMode.DEFAULT) {\n      this.getAncestorTimeRange().onTimeRangeChange(timeRange);\n      return;\n    }\n\n    // this triggers a timeseries request to the API\n    // TODO: caching?\n    this.setAnnotationTimeRange(timeRange, true);\n  }\n\n  onTimeZoneChange(timeZone: string): void {\n    this.getAncestorTimeRange().onTimeZoneChange(timeZone);\n  }\n\n  getTimeZone(): string {\n    return this.getAncestorTimeRange().getTimeZone();\n  }\n\n  onRefresh(): void {\n    this.getAncestorTimeRange().onRefresh();\n  }\n}\n","import { dateMath, DateTime, TimeRange } from '@grafana/data';\nimport { TimeZone } from '@grafana/schema';\n\n/* Copied from https://github.com/grafana/scenes/blob/main/packages/scenes/src/utils/evaluateTimeRange.ts */\n\nexport function evaluateTimeRange(\n  from: string | DateTime,\n  to: string | DateTime,\n  timeZone: TimeZone,\n  fiscalYearStartMonth?: number,\n  delay?: string\n): TimeRange {\n  const hasDelay = delay && to === 'now';\n\n  return {\n    from: dateMath.parse(from, false, timeZone, fiscalYearStartMonth)!,\n    to: dateMath.parse(hasDelay ? 'now-' + delay : to, true, timeZone, fiscalYearStartMonth)!,\n    raw: {\n      from: from,\n      to: to,\n    },\n  };\n}\n","import { BusEventWithPayload } from '@grafana/data';\n\nimport { TimerangeSelectionMode } from '../actions/SwitchTimeRangeSelectionModeAction';\n\ninterface EventSwitchTimerangeSelectionModePayload {\n  mode: TimerangeSelectionMode;\n}\n\nexport class EventSwitchTimerangeSelectionMode extends BusEventWithPayload<EventSwitchTimerangeSelectionModePayload> {\n  public static type = 'switch-timerange-selection-mode';\n}\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { SceneComponentProps, SceneObjectBase, SceneObjectState } from '@grafana/scenes';\nimport { Icon, RadioButtonGroup, Tooltip, useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { EventSwitchTimerangeSelectionMode } from '../events/EventSwitchTimerangeSelectionMode';\n\nexport enum TimerangeSelectionMode {\n  TIMEPICKER = 'timepicker',\n  FLAMEGRAPH = 'flame-graph',\n}\n\ninterface SwitchTimeRangeSelectionTypeActionState extends SceneObjectState {\n  mode: TimerangeSelectionMode;\n}\n\nexport class SwitchTimeRangeSelectionModeAction extends SceneObjectBase<SwitchTimeRangeSelectionTypeActionState> {\n  static OPTIONS = [\n    { label: 'Time picker', value: TimerangeSelectionMode.TIMEPICKER },\n    { label: 'Flame graph', value: TimerangeSelectionMode.FLAMEGRAPH },\n  ];\n\n  constructor() {\n    super({\n      mode: TimerangeSelectionMode.FLAMEGRAPH,\n    });\n  }\n\n  public onChange = (newMode: TimerangeSelectionMode) => {\n    this.setState({ mode: newMode });\n\n    this.publishEvent(new EventSwitchTimerangeSelectionMode({ mode: newMode }), true);\n  };\n\n  public static Component = ({ model }: SceneComponentProps<SwitchTimeRangeSelectionModeAction>) => {\n    const styles = useStyles2(getStyles);\n    const { mode } = model.useState();\n\n    return (\n      <div className={styles.container}>\n        <label className={styles.label}>\n          <span>Range selection mode&nbsp;</span>\n          <Tooltip\n            content={\n              <div className={styles.tooltip}>\n                <div>\n                  Use these buttons to change the behaviour when selecting a range with the mouse on the time series:\n                </div>\n                <dl>\n                  <dt>Time picker</dt>\n                  <dd>Time range zoom in (default behaviour)</dd>\n                  <dt>Flame graph</dt>\n                  <dd>\n                    Time range for building the flame graph (the stack traces will be retrieved only for the selected\n                    range)\n                  </dd>\n                </dl>\n              </div>\n            }\n            placement=\"top\"\n          >\n            <Icon name=\"question-circle\" />\n          </Tooltip>\n        </label>\n        <RadioButtonGroup\n          size=\"sm\"\n          options={SwitchTimeRangeSelectionModeAction.OPTIONS}\n          value={mode}\n          onChange={model.onChange}\n          aria-label=\"Range selection mode\"\n        />\n      </div>\n    );\n  };\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    display: flex;\n    flex-direction: column;\n  `,\n  tooltip: css`\n    padding: ${theme.spacing(1)};\n    & dl {\n      margin-top: ${theme.spacing(2)};\n      display: grid;\n      grid-gap: ${theme.spacing(1)} ${theme.spacing(2)};\n      grid-template-columns: max-content;\n    }\n    & dt {\n      font-weight: bold;\n    }\n    & dd {\n      margin: 0;\n      grid-column-start: 2;\n    }\n  `,\n  label: css`\n    font-size: 12px;\n    text-align: right;\n    margin-bottom: 2px;\n    color: ${theme.colors.text.secondary};\n  `,\n});\n","import { SceneQueryRunner } from '@grafana/scenes';\n\nimport { PYROSCOPE_DATA_SOURCE } from '../../../../../infrastructure/pyroscope-data-sources';\nimport { withPreventInvalidQuery } from '../../../../../infrastructure/withPreventInvalidQuery';\n\nexport function buildCompareTimeSeriesQueryRunner({\n  filterKey,\n}: {\n  filterKey: 'filtersBaseline' | 'filtersComparison';\n}) {\n  const queryRunner = new SceneQueryRunner({\n    datasource: PYROSCOPE_DATA_SOURCE,\n    queries: [\n      {\n        refId: `$profileMetricId-$serviceName-${filterKey}}`,\n        queryType: 'metrics',\n        profileTypeId: '$profileMetricId',\n        labelSelector: `{service_name=\"$serviceName\",$${filterKey}}`,\n      },\n    ],\n  });\n\n  return withPreventInvalidQuery(queryRunner);\n}\n","import Color from 'color';\n\nexport const BASELINE_COLORS = {\n  COLOR: Color('#d066d4'),\n  OVERLAY: Color('#d066d4').alpha(0.3),\n};\n\nexport const COMPARISON_COLORS = {\n  COLOR: Color('#1398f6'),\n  OVERLAY: Color('#1398f6').alpha(0.3),\n};\n","import { css, cx } from '@emotion/css';\nimport {\n  AdHocVariableFilter,\n  dateTime,\n  dateTimeFormat,\n  FieldMatcherID,\n  getValueFormat,\n  GrafanaTheme2,\n  systemDateFormats,\n} from '@grafana/data';\nimport {\n  SceneComponentProps,\n  SceneDataTransformer,\n  sceneGraph,\n  SceneObjectBase,\n  SceneObjectState,\n  SceneRefreshPicker,\n  SceneTimePicker,\n  SceneTimeRange,\n  SceneTimeRangeLike,\n  SceneTimeRangeState,\n  VariableDependencyConfig,\n} from '@grafana/scenes';\nimport { IconButton, useStyles2 } from '@grafana/ui';\nimport { SceneTimePickerWithoutSync } from '@shared/components/SceneTimePickerWithoutSync/SceneTimePickerWithoutSync';\nimport { getProfileMetric, ProfileMetricId } from '@shared/infrastructure/profile-metrics/getProfileMetric';\nimport { omit } from 'lodash';\nimport React from 'react';\n\nimport { buildTimeRange } from '../../../../domain/buildTimeRange';\nimport { FiltersVariable } from '../../../../domain/variables/FiltersVariable/FiltersVariable';\nimport { getSceneVariableValue } from '../../../../helpers/getSceneVariableValue';\nimport { getSeriesStatsValue } from '../../../../infrastructure/helpers/getSeriesStatsValue';\nimport { getProfileMetricLabel } from '../../../../infrastructure/series/helpers/getProfileMetricLabel';\nimport { PanelType } from '../../../SceneByVariableRepeaterGrid/components/ScenePanelTypeSwitcher';\nimport { addRefId, addStats } from '../../../SceneByVariableRepeaterGrid/infrastructure/data-transformations';\nimport { SceneLabelValuesTimeseries } from '../../../SceneLabelValuesTimeseries/SceneLabelValuesTimeseries';\nimport { CompareTarget } from '../../domain/types';\nimport { Preset } from '../ScenePresetsPicker/ScenePresetsPicker';\nimport {\n  SceneTimeRangeWithAnnotations,\n  TimeRangeWithAnnotationsMode,\n} from './components/SceneTimeRangeWithAnnotations';\nimport {\n  SwitchTimeRangeSelectionModeAction,\n  TimerangeSelectionMode,\n} from './domain/actions/SwitchTimeRangeSelectionModeAction';\nimport { EventEnableSyncTimeRanges } from './domain/events/EventEnableSyncTimeRanges';\nimport { EventSwitchTimerangeSelectionMode } from './domain/events/EventSwitchTimerangeSelectionMode';\nimport { EventSyncRefresh } from './domain/events/EventSyncRefresh';\nimport { EventSyncTimeRanges } from './domain/events/EventSyncTimeRanges';\nimport { RangeAnnotation } from './domain/RangeAnnotation';\nimport { buildCompareTimeSeriesQueryRunner } from './infrastructure/buildCompareTimeSeriesQueryRunner';\nimport { BASELINE_COLORS, COMPARISON_COLORS } from './ui/colors';\n\nconst ONE_DAY_IN_MS = 24 * 60 * 60 * 1000;\n\ninterface SceneComparePanelState extends SceneObjectState {\n  target: CompareTarget;\n  filterKey: 'filtersBaseline' | 'filtersComparison';\n  title: string;\n  color: string;\n  timePicker: SceneTimePicker;\n  refreshPicker: SceneRefreshPicker;\n  $timeRange: SceneTimeRange;\n  timeseriesPanel: SceneLabelValuesTimeseries;\n  timeRangeSyncEnabled: boolean;\n}\n\nexport class SceneComparePanel extends SceneObjectBase<SceneComparePanelState> {\n  protected _variableDependency = new VariableDependencyConfig(this, {\n    variableNames: ['profileMetricId'],\n    onReferencedVariableValueChanged: () => {\n      this.state.timeseriesPanel.updateItem({ label: this.buildTimeseriesTitle() });\n    },\n  });\n\n  constructor({\n    target,\n    useAncestorTimeRange,\n    clearDiffRange,\n    filters,\n  }: {\n    target: SceneComparePanelState['target'];\n    useAncestorTimeRange: boolean;\n    clearDiffRange: boolean;\n    filters: AdHocVariableFilter[];\n  }) {\n    const filterKey = target === CompareTarget.BASELINE ? 'filtersBaseline' : 'filtersComparison';\n    const title = target === CompareTarget.BASELINE ? 'Baseline' : 'Comparison';\n    const color =\n      target === CompareTarget.BASELINE ? BASELINE_COLORS.COLOR.toString() : COMPARISON_COLORS.COLOR.toString();\n\n    super({\n      key: `${target}-panel`,\n      target,\n      filterKey,\n      title,\n      color,\n      $timeRange: new SceneTimeRange({ key: `${target}-panel-timerange`, ...buildTimeRange('now-1h', 'now') }),\n      timePicker: new SceneTimePickerWithoutSync({ isOnCanvas: true }),\n      refreshPicker: new SceneRefreshPicker({ isOnCanvas: true }),\n      timeseriesPanel: SceneComparePanel.buildTimeSeriesPanel({ target, filterKey, title, color }),\n      timeRangeSyncEnabled: false,\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this, useAncestorTimeRange, clearDiffRange, filters));\n  }\n\n  onActivate(useAncestorTimeRange: boolean, clearDiffRange: boolean, filters: AdHocVariableFilter[]) {\n    const { $timeRange, timeseriesPanel, filterKey } = this.state;\n\n    if (clearDiffRange) {\n      this.setDiffRange(null);\n    }\n\n    if (useAncestorTimeRange) {\n      $timeRange.setState(omit(this.getAncestorTimeRange().state, 'key'));\n    }\n\n    if (filters.length) {\n      const filtersVariable = sceneGraph.findByKey(this, filterKey) as FiltersVariable;\n\n      filtersVariable.setState({ filters });\n    }\n\n    timeseriesPanel.updateItem({ label: this.buildTimeseriesTitle() });\n\n    const eventSub = this.subscribeToEvents();\n\n    return () => {\n      eventSub.unsubscribe();\n    };\n  }\n\n  static buildTimeSeriesPanel({ target, filterKey, title, color }: any) {\n    const timeseriesPanel = new SceneLabelValuesTimeseries({\n      item: {\n        index: 0,\n        value: target,\n        label: '',\n        queryRunnerParams: {},\n        panelType: PanelType.TIMESERIES,\n      },\n      data: new SceneDataTransformer({\n        $data: buildCompareTimeSeriesQueryRunner({ filterKey }),\n        transformations: [addRefId, addStats],\n      }),\n      overrides: (series) =>\n        series.map((s) => {\n          const metricField = s.fields[1];\n          const allValuesSum = getSeriesStatsValue(s, 'allValuesSum') || 0;\n          const formattedValue = getValueFormat(metricField.config.unit)(allValuesSum);\n          const total = `${formattedValue.text}${formattedValue.suffix}`;\n          const [diffFrom, diffTo, timeZone] = SceneComparePanel.getDiffRange(timeseriesPanel);\n\n          const displayName =\n            diffFrom && diffTo\n              ? `Total = ${total} / Flame graph range = ${dateTimeFormat(diffFrom, {\n                  format: systemDateFormats.fullDate,\n                  timeZone,\n                })} → ${dateTimeFormat(diffTo, {\n                  format: systemDateFormats.fullDate,\n                  timeZone,\n                })}`\n              : `Total = ${total}`;\n\n          return {\n            matcher: { id: FieldMatcherID.byFrameRefID, options: s.refId },\n            properties: [\n              {\n                id: 'displayName',\n                value: displayName,\n              },\n              {\n                id: 'color',\n                value: { mode: 'fixed', fixedColor: color },\n              },\n            ],\n          };\n        }),\n      headerActions: () => [new SwitchTimeRangeSelectionModeAction()],\n    });\n\n    timeseriesPanel.state.body.setState({\n      $timeRange: new SceneTimeRangeWithAnnotations({\n        key: `${target}-annotation-timerange`,\n        mode: TimeRangeWithAnnotationsMode.ANNOTATIONS,\n        annotationColor:\n          target === CompareTarget.BASELINE ? BASELINE_COLORS.OVERLAY.toString() : COMPARISON_COLORS.OVERLAY.toString(),\n        annotationTitle: `${title} flame graph range`,\n      }),\n    });\n\n    return timeseriesPanel;\n  }\n\n  static getDiffRange(\n    timeseriesPanel: SceneLabelValuesTimeseries\n  ): [number | undefined, number | undefined, string | undefined] {\n    let diffFrom: number | undefined;\n    let diffTo: number | undefined;\n\n    const annotation = timeseriesPanel.state.body.state.$data?.state.data?.annotations?.[0] as RangeAnnotation;\n\n    annotation?.fields.some(({ name, values }) => {\n      diffFrom = name === 'time' ? values[0] : diffFrom;\n      diffTo = name === 'timeEnd' ? values[0] : diffTo;\n      return diffFrom && diffTo;\n    });\n\n    return [diffFrom, diffTo, timeseriesPanel.state.$timeRange?.state.timeZone];\n  }\n\n  protected getAncestorTimeRange(): SceneTimeRangeLike {\n    if (!this.parent || !this.parent.parent) {\n      throw new Error(typeof this + ' must be used within $timeRange scope');\n    }\n\n    return sceneGraph.getTimeRange(this.parent.parent);\n  }\n\n  subscribeToEvents() {\n    const { target, timeseriesPanel, $timeRange } = this.state;\n\n    const $annotationTimeRange = timeseriesPanel.state.body.state.$timeRange as SceneTimeRangeWithAnnotations;\n\n    const switchSub = this.subscribeToEvent(EventSwitchTimerangeSelectionMode, (event) => {\n      // this triggers a timeseries request to the API\n      // TODO: caching?\n      $annotationTimeRange.setState({\n        mode:\n          event.payload.mode === TimerangeSelectionMode.FLAMEGRAPH\n            ? TimeRangeWithAnnotationsMode.ANNOTATIONS\n            : TimeRangeWithAnnotationsMode.DEFAULT,\n      });\n    });\n\n    const annotationTimeRangeSub = $annotationTimeRange.subscribeToState((newState, prevState) => {\n      if (this.state.timeRangeSyncEnabled && newState.annotationTimeRange !== prevState.annotationTimeRange) {\n        this.publishEvent(\n          new EventSyncTimeRanges({ source: target, annotationTimeRange: newState.annotationTimeRange }),\n          true\n        );\n      }\n    });\n\n    const timeRangeSub = $timeRange.subscribeToState((newState, prevState) => {\n      if (newState.from !== prevState.from || newState.to !== prevState.to) {\n        this.updateTitle('');\n\n        if (this.state.timeRangeSyncEnabled) {\n          this.publishEvent(new EventSyncTimeRanges({ source: target, timeRange: newState }), true);\n        }\n      }\n    });\n\n    return {\n      unsubscribe() {\n        timeRangeSub.unsubscribe();\n        annotationTimeRangeSub.unsubscribe();\n        switchSub.unsubscribe();\n      },\n    };\n  }\n\n  buildTimeseriesTitle() {\n    const profileMetricId = getSceneVariableValue(this, 'profileMetricId');\n    const { description } = getProfileMetric(profileMetricId as ProfileMetricId);\n    return description || getProfileMetricLabel(profileMetricId);\n  }\n\n  useDiffTimeRange() {\n    return (this.state.timeseriesPanel.state.body.state.$timeRange as SceneTimeRangeWithAnnotations).useState();\n  }\n\n  applyPreset({ from, to, diffFrom, diffTo, label }: Preset) {\n    this.setDiffRange({ from: diffFrom, to: diffTo });\n\n    this.setTimeRange(buildTimeRange(from, to));\n\n    this.updateTitle(label);\n  }\n\n  setTimeRange(newTimeRange: SceneTimeRangeState) {\n    const { from, to } = this.state.$timeRange.state.value;\n\n    if (!from.isSame(newTimeRange.value.from) || !to.isSame(newTimeRange.value.to)) {\n      this.state.$timeRange.setState({ from: newTimeRange.from, to: newTimeRange.to, value: newTimeRange.value });\n    }\n  }\n\n  setDiffRange(options: { from: string; to: string } | null) {\n    const $diffTimeRange = this.state.timeseriesPanel.state.body.state.$timeRange as SceneTimeRangeWithAnnotations;\n\n    if (options === null) {\n      $diffTimeRange.nullifyAnnotationTimeRange();\n      return;\n    }\n\n    const { annotationTimeRange } = $diffTimeRange.state;\n    const newAnnotationTimeRange = $diffTimeRange.buildAnnotationTimeRange(options.from, options.to);\n\n    if (\n      !annotationTimeRange.from.isSame(newAnnotationTimeRange.from) ||\n      !annotationTimeRange.to.isSame(newAnnotationTimeRange.to)\n    ) {\n      $diffTimeRange.setAnnotationTimeRange(newAnnotationTimeRange, true);\n    }\n  }\n\n  /**\n   * This function is responsible for automatically selecting half of the time range (from the time picker) that will be used to build the diff flame graph\n   * For the baseline panel, the leftmost part, for the comparison one, the rightmost part.\n   * In the future, we might want to be smarter and provides a way to select (e.g.) the region with the lowest resource consumption on the baseline panel vs\n   * the region with the highest consumption on the comparison panel.\n   */\n  autoSelectDiffRange(selectWholeRange: boolean) {\n    const { $timeRange, target } = this.state;\n    const { from, to } = $timeRange.state.value;\n\n    this.updateTitle('');\n\n    if (selectWholeRange) {\n      this.setDiffRange({ from: from.toISOString(), to: to.toISOString() });\n      return;\n    }\n\n    const diff = to.diff(from);\n\n    // ensure that we don't kill the backend when selecting long periods like 7d\n    const range = Math.min(Math.round(diff * 0.25), ONE_DAY_IN_MS);\n\n    if (target === CompareTarget.BASELINE) {\n      // we have to create a new instance because add() mutates the original one\n      this.setDiffRange({ from: from.toISOString(), to: dateTime(from).add(range).toISOString() });\n    } else {\n      // we have to create a new instance because subtract() mutates the original one\n      this.setDiffRange({ from: dateTime(to).subtract(range).toISOString(), to: to.toISOString() });\n    }\n  }\n\n  updateTitle(label = '') {\n    const title = this.state.target === CompareTarget.BASELINE ? 'Baseline' : 'Comparison';\n    const newTitle = label ? `${title} (${label})` : title;\n\n    this.setState({ title: newTitle });\n  }\n\n  onClickTimeRangeSync = () => {\n    const { target, timeRangeSyncEnabled, $timeRange, timeseriesPanel } = this.state;\n    const $annotationTimeRange = timeseriesPanel.state.body.state.$timeRange as SceneTimeRangeWithAnnotations;\n\n    this.publishEvent(\n      new EventEnableSyncTimeRanges({\n        source: target,\n        enable: !timeRangeSyncEnabled,\n        timeRange: $timeRange.state,\n        annotationTimeRange: $annotationTimeRange.state.annotationTimeRange,\n      }),\n      true\n    );\n  };\n\n  toggleTimeRangeSync(timeRangeSyncEnabled: boolean) {\n    this.setState({ timeRangeSyncEnabled });\n  }\n\n  onClickRefresh = () => {\n    this.publishEvent(new EventSyncRefresh({ source: this.state.target }), true);\n  };\n\n  refreshTimeseries() {\n    this.state.$timeRange.onRefresh();\n  }\n\n  public static Component = ({ model }: SceneComponentProps<SceneComparePanel>) => {\n    const {\n      target,\n      color,\n      title,\n      timeseriesPanel: timeseries,\n      timePicker,\n      refreshPicker,\n      filterKey,\n      timeRangeSyncEnabled,\n    } = model.useState();\n\n    const styles = useStyles2(getStyles, color);\n\n    const filtersVariable = sceneGraph.findByKey(model, filterKey) as FiltersVariable;\n\n    return (\n      <div className={styles.panel} data-testid={`panel-${target}`}>\n        <div className={styles.panelHeader}>\n          <h6>\n            <div className={styles.colorCircle} />\n            {title}\n          </h6>\n\n          <div className={styles.timeControls}>\n            <timePicker.Component model={timePicker} />\n\n            <div onClick={model.onClickRefresh}>\n              <refreshPicker.Component model={refreshPicker} />\n            </div>\n\n            <IconButton\n              className={cx(styles.syncButton, timeRangeSyncEnabled && 'active')}\n              name=\"link\"\n              aria-label={timeRangeSyncEnabled ? 'Unsync time ranges' : 'Sync time ranges'}\n              tooltip={timeRangeSyncEnabled ? 'Unsync time ranges' : 'Sync time ranges'}\n              onClick={model.onClickTimeRangeSync}\n            />\n          </div>\n        </div>\n\n        <div className={styles.filter}>\n          <filtersVariable.Component model={filtersVariable} />\n        </div>\n\n        <div className={styles.timeseries}>{timeseries && <timeseries.Component model={timeseries} />}</div>\n      </div>\n    );\n  };\n}\n\nconst getStyles = (theme: GrafanaTheme2, color: string) => ({\n  panel: css`\n    background-color: ${theme.colors.background.primary};\n    padding: ${theme.spacing(1)} ${theme.spacing(1)} 0 ${theme.spacing(1)};\n    border: 1px solid ${theme.colors.border.weak};\n    border-radius: 2px;\n  `,\n  panelHeader: css`\n    display: flex;\n    justify-content: space-between;\n    align-items: flex-start;\n    margin-bottom: ${theme.spacing(2)};\n    flex-wrap: wrap;\n\n    & > h6 {\n      font-size: 15px;\n      height: 32px;\n      line-height: 32px;\n      margin: 0 ${theme.spacing(1)} 0 0;\n    }\n  `,\n  colorCircle: css`\n    display: inline-block;\n    background-color: ${color};\n    border-radius: 50%;\n    width: 9px;\n    height: 9px;\n    margin-right: 6px;\n  `,\n  timeControls: css`\n    display: flex;\n    justify-content: flex-end;\n    gap: 4px;\n  `,\n  syncButton: css`\n    z-index: unset;\n    padding: ${theme.spacing(0, 1)};\n    margin: 0;\n    background: ${theme.colors.secondary.main};\n    border: 1px solid ${theme.colors.secondary.border};\n    border-radius: ${theme.shape.radius.default};\n\n    &:hover {\n      background: ${theme.colors.secondary.shade};\n    }\n\n    &.active {\n      color: ${theme.colors.primary.text};\n      border: 1px solid ${theme.colors.primary.text};\n    }\n  `,\n  filter: css`\n    display: flex;\n    margin-bottom: ${theme.spacing(3)};\n  `,\n  timeseries: css`\n    height: 200px;\n\n    & [data-viz-panel-key] > * {\n      border: 0 none;\n    }\n\n    & [data-viz-panel-key] [data-testid='uplot-main-div'] {\n      cursor: crosshair;\n    }\n  `,\n});\n","import { useState } from 'react';\n\ntype PanelId = 'ai' | 'function-details' | null;\n\ntype OnOpenHandler = () => void;\n\ntype SidePanel = {\n  onOpen: (handler: OnOpenHandler) => void;\n  isOpen: (panelId: PanelId) => boolean;\n  open: (panelId: PanelId) => void;\n  close: () => void;\n};\n\nexport function useToggleSidePanel(): SidePanel {\n  const [openPanelId, setOpenPanelId] = useState<PanelId>(null);\n  const [onOpenHandler, setOnOpenHandler] = useState<OnOpenHandler>();\n\n  return {\n    onOpen(handler: OnOpenHandler) {\n      setOnOpenHandler(() => handler);\n    },\n    isOpen(panelId: PanelId) {\n      return panelId === openPanelId;\n    },\n    open(panelId: PanelId) {\n      setOpenPanelId(panelId);\n      onOpenHandler?.();\n    },\n    close() {\n      setOpenPanelId(null);\n    },\n  };\n}\n","import React, { useEffect, useState } from 'react';\n\ninterface Props {\n  children: React.ReactNode;\n  delay: number;\n}\n\n/**\n * Delay the rendering of the children by N amount of milliseconds\n */\nexport function DelayRender({ children, delay }: Props) {\n  const [shouldRender, setShouldRender] = useState(false);\n  useEffect(() => {\n    window.setTimeout(() => {\n      setShouldRender(true);\n    }, delay);\n  }, [children, delay]);\n\n  return <>{shouldRender ? children : null}</>;\n}\n","import { cx } from '@emotion/css';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Dropdown, ToolbarButton } from '@grafana/ui';\nimport React, { ReactElement, useCallback } from 'react';\n\ntype TooltipPlacement =\n  | 'auto-start'\n  | 'auto'\n  | 'auto-end'\n  | 'top-start'\n  | 'top'\n  | 'top-end'\n  | 'right-start'\n  | 'right'\n  | 'right-end'\n  | 'bottom-end'\n  | 'bottom'\n  | 'bottom-start'\n  | 'left-end'\n  | 'left'\n  | 'left-start';\n\ninterface PanelMenuProps {\n  menu: ReactElement | (() => ReactElement);\n  menuButtonClass?: string;\n  dragClassCancel?: string;\n  title?: string;\n  placement?: TooltipPlacement;\n  offset?: [number, number];\n  onVisibleChange?: (state: boolean) => void;\n  onOpenMenu?: () => void;\n}\n\nexport function PanelMenu({\n  menu,\n  title,\n  placement = 'bottom',\n  offset,\n  dragClassCancel,\n  menuButtonClass,\n  onVisibleChange,\n  onOpenMenu,\n}: PanelMenuProps) {\n  const testId = title ? selectors.components.Panels.Panel.menu(title) : `panel-menu-button`;\n\n  const handleVisibility = useCallback(\n    (show: boolean) => {\n      if (show && onOpenMenu) {\n        onOpenMenu();\n      }\n      return onVisibleChange;\n    },\n    [onOpenMenu, onVisibleChange]\n  );\n\n  const label = title ? `Menu for panel with title ${title}` : `Menu for panel with no title`;\n\n  return (\n    <Dropdown overlay={menu} placement={placement} offset={offset} onVisibleChange={handleVisibility}>\n      <ToolbarButton\n        aria-label={label}\n        title=\"Menu\"\n        icon=\"ellipsis-v\"\n        iconSize=\"md\"\n        narrow\n        data-testid={testId}\n        className={cx(menuButtonClass, dragClassCancel)}\n      />\n    </Dropdown>\n  );\n}\n","import { css, cx } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { selectors as e2eSelectors } from '@grafana/e2e-selectors';\nimport { Icon, useStyles2 } from '@grafana/ui';\nimport React, { ReactElement, useCallback, useRef, useState } from 'react';\n\nimport { PanelMenu } from './PanelMenu';\n\ninterface Props {\n  children?: React.ReactNode;\n  menu?: ReactElement | (() => ReactElement);\n  title?: string;\n  offset?: number;\n  dragClass?: string;\n  onOpenMenu?: () => void;\n}\n\nexport function HoverWidget({ menu, title, dragClass, children, offset = -32, onOpenMenu }: Props) {\n  const styles = useStyles2(getStyles);\n  const draggableRef = useRef<HTMLDivElement>(null);\n  const selectors = e2eSelectors.components.Panels.Panel.HoverWidget;\n  // Capture the pointer to keep the widget visible while dragging\n  const onPointerDown = useCallback((e: React.PointerEvent<HTMLDivElement>) => {\n    draggableRef.current?.setPointerCapture(e.pointerId);\n  }, []);\n\n  const onPointerUp = useCallback((e: React.PointerEvent<HTMLDivElement>) => {\n    draggableRef.current?.releasePointerCapture(e.pointerId);\n  }, []);\n\n  const [menuOpen, setMenuOpen] = useState(false);\n\n  if (children === undefined || React.Children.count(children) === 0) {\n    return null;\n  }\n\n  return (\n    <div\n      className={cx(styles.container, { 'show-on-hover': !menuOpen })}\n      style={{ top: `${offset}px` }}\n      data-testid={selectors.container}\n    >\n      {dragClass && (\n        <div\n          className={cx(styles.square, styles.draggable, dragClass)}\n          onPointerDown={onPointerDown}\n          onPointerUp={onPointerUp}\n          ref={draggableRef}\n          data-testid={selectors.dragIcon}\n        >\n          <Icon name=\"expand-arrows\" className={styles.draggableIcon} />\n        </div>\n      )}\n      {!title && <h6 className={cx(styles.untitled, { [styles.draggable]: !!dragClass }, dragClass)}>Untitled</h6>}\n      {children}\n      {menu && (\n        <PanelMenu\n          menu={menu}\n          title={title}\n          placement=\"bottom\"\n          menuButtonClass={styles.menuButton}\n          onVisibleChange={setMenuOpen}\n          onOpenMenu={onOpenMenu}\n        />\n      )}\n    </div>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    hidden: css({\n      visibility: 'hidden',\n      opacity: '0',\n    }),\n    container: css({\n      label: 'hover-container-widget',\n      transition: `all .1s linear`,\n      display: 'flex',\n      position: 'absolute',\n      zIndex: 1,\n      right: 0,\n      boxSizing: 'content-box',\n      alignItems: 'center',\n      background: theme.colors.background.secondary,\n      color: theme.colors.text.primary,\n      border: `1px solid ${theme.colors.border.weak}`,\n      borderRadius: theme.shape.radius.default,\n      height: theme.spacing(4),\n      boxShadow: theme.shadows.z1,\n    }),\n    square: css({\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      width: theme.spacing(4),\n      height: '100%',\n    }),\n    draggable: css({\n      cursor: 'move',\n      // mobile do not support draggable panels\n      [theme.breakpoints.down('md')]: {\n        display: 'none',\n      },\n    }),\n    menuButton: css({\n      // Background and border are overriden when topnav toggle is disabled\n      background: 'inherit',\n      border: 'none',\n      '&:hover': {\n        background: theme.colors.secondary.main,\n      },\n    }),\n    untitled: css({\n      color: theme.colors.text.disabled,\n      fontStyle: 'italic',\n      padding: theme.spacing(0, 1),\n      marginBottom: 0,\n    }),\n    draggableIcon: css({\n      transform: 'rotate(45deg)',\n      color: theme.colors.text.secondary,\n      '&:hover': {\n        color: theme.colors.text.primary,\n      },\n    }),\n  };\n}\n","import { css, CSSObject, cx } from '@emotion/css';\nimport { GrafanaTheme2, LinkModel, LinkTarget } from '@grafana/data';\nimport { Button, useStyles2 } from '@grafana/ui';\nimport React, { forwardRef } from 'react';\n\ntype TitleItemProps = {\n  className?: string;\n  children: React.ReactNode;\n  onClick?: LinkModel['onClick'];\n  href?: string;\n  target?: LinkTarget;\n  title?: string;\n};\n\ntype TitleItemElement = HTMLAnchorElement & HTMLButtonElement;\n\nexport const TitleItem = forwardRef<TitleItemElement, TitleItemProps>(\n  ({ className, children, href, onClick, target, title, ...rest }, ref) => {\n    const styles = useStyles2(getStyles);\n\n    if (href) {\n      return (\n        <a\n          ref={ref}\n          href={href}\n          onClick={onClick}\n          target={target}\n          title={title}\n          className={cx(styles.linkItem, className)}\n          {...rest}\n        >\n          {children}\n        </a>\n      );\n    } else if (onClick) {\n      return (\n        <Button ref={ref} className={cx(styles.item, className)} variant=\"secondary\" fill=\"text\" onClick={onClick}>\n          {children}\n        </Button>\n      );\n    } else {\n      return (\n        <span ref={ref} className={cx(styles.item, className)} {...rest}>\n          {children}\n        </span>\n      );\n    }\n  }\n);\n\nTitleItem.displayName = 'TitleItem';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  const item = css({\n    color: `${theme.colors.text.secondary}`,\n    label: 'panel-header-item',\n    cursor: 'auto',\n    border: 'none',\n    borderRadius: `${theme.shape.radius.default}`,\n    padding: `${theme.spacing(0, 1)}`,\n    height: `${theme.spacing(theme.components.panel.headerHeight)}`,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n\n    '&:focus, &:focus-visible': {\n      ...getFocusStyles(theme),\n      zIndex: 1,\n    },\n    '&: focus:not(:focus-visible)': {\n      outline: 'none',\n      boxShadow: `none`,\n    },\n\n    '&:hover ': {\n      boxShadow: `${theme.shadows.z1}`,\n      background: `${theme.colors.background.secondary}`,\n      color: `${theme.colors.text.primary}`,\n    },\n  });\n\n  return {\n    item,\n    linkItem: cx(item, css({ cursor: 'pointer' })),\n  };\n};\n\nfunction getFocusStyles(theme: GrafanaTheme2): CSSObject {\n  return {\n    outline: '2px dotted transparent',\n    outlineOffset: '2px',\n    boxShadow: `0 0 0 2px ${theme.colors.background.canvas}, 0 0 0px 4px ${theme.colors.primary.main}`,\n    transitionTimingFunction: `cubic-bezier(0.19, 1, 0.22, 1)`,\n    transitionDuration: '0.2s',\n    transitionProperty: 'outline, outline-offset, box-shadow',\n  };\n}\n","import { css, cx } from '@emotion/css';\nimport { Icon, Tooltip, useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { TitleItem } from './TitleItem';\n\ninterface Props {\n  description: string | (() => string);\n  className?: string;\n}\n\nexport function PanelDescription({ description, className }: Props) {\n  const styles = useStyles2(getStyles);\n\n  const getDescriptionContent = () => {\n    const panelDescription = typeof description === 'function' ? description() : description;\n\n    return (\n      <div className=\"panel-info-content markdown-html\">\n        <div dangerouslySetInnerHTML={{ __html: panelDescription }} />\n      </div>\n    );\n  };\n\n  return description !== '' ? (\n    <Tooltip interactive content={getDescriptionContent}>\n      <TitleItem className={cx(className, styles.description)}>\n        <Icon name=\"info-circle\" size=\"md\" />\n      </TitleItem>\n    </Tooltip>\n  ) : null;\n}\n\nconst getStyles = () => {\n  return {\n    description: css({\n      code: {\n        whiteSpace: 'normal',\n        wordWrap: 'break-word',\n      },\n\n      'pre > code': {\n        display: 'block',\n      },\n    }),\n  };\n};\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { ToolbarButton, useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\ninterface Props {\n  message?: string;\n  onClick?: (e: React.SyntheticEvent) => void;\n  ariaLabel?: string;\n}\n\nexport function PanelStatus({ message, onClick, ariaLabel = 'status' }: Props) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <ToolbarButton\n      className={styles.buttonStyles}\n      onClick={onClick}\n      variant={'destructive'}\n      icon=\"exclamation-triangle\"\n      iconSize=\"md\"\n      tooltip={message || ''}\n      aria-label={ariaLabel}\n    />\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  const { headerHeight, padding } = theme.components.panel;\n\n  return {\n    buttonStyles: css({\n      label: 'panel-header-state-button',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      padding: theme.spacing(padding),\n      width: theme.spacing(headerHeight),\n      height: theme.spacing(headerHeight),\n      borderRadius: theme.shape.radius.default,\n    }),\n  };\n};\n","import { css, cx } from '@emotion/css';\nimport { GrafanaTheme2, LoadingState } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Icon, LoadingBar, Tooltip, useStyles2, useTheme2 } from '@grafana/ui';\nimport React, { CSSProperties, ReactElement, ReactNode, useEffect, useRef, useState } from 'react';\n\nimport { DelayRender } from './DelayRender';\nimport { HoverWidget } from './HoverWidget';\nimport { PanelDescription } from './PanelDescription';\nimport { PanelMenu } from './PanelMenu';\nimport { PanelStatus } from './PanelStatus';\nimport { TitleItem } from './TitleItem';\n\n// This `GrafanaPanelBox` has been derived from the `PanelChrome`, which is exportable via @grafana/ui\n// This variant makes it behave more like the panel/box from Pyroscope, where css dictates the style\n// versus explicit height & width props.\n// The various files in this subdirectory are lifted from grafana/grafana, but this base component, `PanelChromeProps`\n// has been altered slightly.\n//\n// TODO Consider creating a varation of this component that can be exported from @grafana/ui.\n\n/**\n * @internal\n */\ninterface PanelChromeProps {\n  children: ReactNode;\n  padding?: PanelPadding;\n  hoverHeaderOffset?: number;\n  title?: string;\n  description?: string | (() => string);\n  titleItems?: ReactNode;\n  menu?: ReactElement | (() => ReactElement);\n  dragClass?: string;\n  dragClassCancel?: string;\n  hoverHeader?: boolean;\n  /**\n   * Use only to indicate loading or streaming data in the panel.\n   * Any other values of loadingState are ignored.\n   */\n  loadingState?: LoadingState;\n  /**\n   * Used to display status message (used for panel errors currently)\n   */\n  statusMessage?: string;\n  /**\n   * Handle opening error details view (like inspect / error tab)\n   */\n  statusMessageOnClick?: (e: React.SyntheticEvent) => void;\n  actions?: ReactNode;\n  displayMode?: 'default' | 'transparent';\n  onCancelQuery?: () => void;\n  /**\n   * callback when opening the panel menu\n   */\n  onOpenMenu?: () => void;\n}\n\n/**\n * @internal\n */\ntype PanelPadding = 'none' | 'md';\n\n/**\n * @internal\n */\nexport function GrafanaPanelBox({\n  children,\n  padding = 'md',\n  title = '',\n  description = '',\n  displayMode = 'default',\n  titleItems,\n  menu,\n  dragClass,\n  dragClassCancel,\n  hoverHeader = false,\n  hoverHeaderOffset,\n  loadingState,\n  statusMessage,\n  statusMessageOnClick,\n  actions,\n  onCancelQuery,\n  onOpenMenu,\n}: PanelChromeProps) {\n  const theme = useTheme2();\n  const styles = useStyles2(getStyles);\n\n  const [width, setWidth] = useState(0);\n  const childrenContainerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (childrenContainerRef.current) {\n      setWidth(childrenContainerRef.current.offsetWidth);\n    }\n  }, [childrenContainerRef]);\n\n  const hasHeader = !hoverHeader;\n\n  // hover menu is only shown on hover when not on touch devices\n  const showOnHoverClass = 'show-on-hover';\n\n  const headerHeight = getHeaderHeight(theme, hasHeader);\n  const { contentStyle } = getContentStyle(padding, theme);\n\n  const headerStyles: CSSProperties = {\n    height: headerHeight,\n    cursor: dragClass ? 'move' : 'auto',\n  };\n\n  const containerStyles: CSSProperties = {};\n  if (displayMode === 'transparent') {\n    containerStyles.backgroundColor = 'transparent';\n    containerStyles.border = 'none';\n  }\n\n  const testid = title ? selectors.components.Panels.Panel.title(title) : 'Panel';\n\n  const headerContent = (\n    <>\n      {title && (\n        <h6 title={title} className={styles.title}>\n          {title}\n        </h6>\n      )}\n\n      <div className={cx(styles.titleItems, dragClassCancel)} data-testid=\"title-items-container\">\n        <PanelDescription description={description} className={dragClassCancel} />\n        {titleItems}\n      </div>\n\n      {loadingState === LoadingState.Streaming && (\n        <Tooltip content={onCancelQuery ? 'Stop streaming' : 'Streaming'}>\n          <TitleItem className={dragClassCancel} data-testid=\"panel-streaming\" onClick={onCancelQuery}>\n            <Icon name=\"circle-mono\" size=\"md\" className={styles.streaming} />\n          </TitleItem>\n        </Tooltip>\n      )}\n      {loadingState === LoadingState.Loading && onCancelQuery && (\n        <DelayRender delay={2000}>\n          <Tooltip content=\"Cancel query\">\n            <TitleItem\n              className={cx(dragClassCancel, styles.pointer)}\n              data-testid=\"panel-cancel-query\"\n              onClick={onCancelQuery}\n            >\n              <Icon name=\"sync-slash\" size=\"md\" />\n            </TitleItem>\n          </Tooltip>\n        </DelayRender>\n      )}\n      <div className={styles.rightAligned}>\n        {actions && <div className={styles.rightActions}>{itemsRenderer(actions, (item) => item)}</div>}\n      </div>\n    </>\n  );\n\n  return (\n    <div className={styles.container} style={containerStyles} data-testid={testid}>\n      <div className={styles.loadingBarContainer}>\n        {loadingState === LoadingState.Loading ? <LoadingBar width={width} ariaLabel=\"Panel loading bar\" /> : null}\n      </div>\n\n      {hoverHeader && (\n        <>\n          <HoverWidget\n            menu={menu}\n            title={title}\n            offset={hoverHeaderOffset}\n            dragClass={dragClass}\n            onOpenMenu={onOpenMenu}\n          >\n            {headerContent}\n          </HoverWidget>\n\n          {statusMessage && (\n            <div className={styles.errorContainerFloating}>\n              <PanelStatus message={statusMessage} onClick={statusMessageOnClick} ariaLabel=\"Panel status\" />\n            </div>\n          )}\n        </>\n      )}\n\n      {hasHeader && (\n        <div className={cx(styles.headerContainer, dragClass)} style={headerStyles} data-testid=\"header-container\">\n          {statusMessage && (\n            <div className={dragClassCancel}>\n              <PanelStatus message={statusMessage} onClick={statusMessageOnClick} ariaLabel=\"Panel status\" />\n            </div>\n          )}\n\n          {headerContent}\n\n          {menu && (\n            <PanelMenu\n              menu={menu}\n              title={title}\n              placement=\"bottom-end\"\n              menuButtonClass={cx(styles.menuItem, dragClassCancel, showOnHoverClass)}\n              onOpenMenu={onOpenMenu}\n            />\n          )}\n        </div>\n      )}\n\n      <div className={styles.content} style={contentStyle} ref={childrenContainerRef}>\n        {children}\n      </div>\n    </div>\n  );\n}\n\nconst itemsRenderer = (items: ReactNode[] | ReactNode, renderer: (items: ReactNode[]) => ReactNode): ReactNode => {\n  const toRender = React.Children.toArray(items).filter(Boolean);\n  return toRender.length > 0 ? renderer(toRender) : null;\n};\n\nconst getHeaderHeight = (theme: GrafanaTheme2, hasHeader: boolean) => {\n  if (hasHeader) {\n    return theme.spacing.gridSize * theme.components.panel.headerHeight;\n  }\n\n  return 0;\n};\n\nconst getContentStyle = (padding: string, theme: GrafanaTheme2) => {\n  const chromePadding = (padding === 'md' ? theme.components.panel.padding : 0) * theme.spacing.gridSize;\n\n  const contentStyle: CSSProperties = {\n    padding: chromePadding,\n  };\n\n  return { contentStyle };\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  const { background, borderColor, padding } = theme.components.panel;\n\n  return {\n    container: css({\n      label: 'panel-container',\n      backgroundColor: background,\n      border: `1px solid ${borderColor}`,\n      position: 'relative',\n      borderRadius: theme.shape.radius.default,\n      height: '100%',\n      display: 'flex',\n      flexDirection: 'column',\n\n      '.show-on-hover': {\n        visibility: 'hidden',\n        opacity: '0',\n      },\n\n      '&:focus-visible, &:hover': {\n        // only show menu icon on hover or focused panel\n        '.show-on-hover': {\n          visibility: 'visible',\n          opacity: '1',\n        },\n      },\n\n      '&:focus-visible': {\n        outline: `1px solid ${theme.colors.action.focus}`,\n      },\n\n      '&:focus-within': {\n        '.show-on-hover': {\n          visibility: 'visible',\n          opacity: '1',\n        },\n      },\n    }),\n    loadingBarContainer: css({\n      label: 'panel-loading-bar-container',\n      position: 'absolute',\n      top: 0,\n      width: '100%',\n      overflow: 'hidden',\n    }),\n    content: css({\n      label: 'panel-content',\n      flexGrow: 1,\n      //contain: 'strict',\n    }),\n    headerContainer: css({\n      label: 'panel-header',\n      display: 'flex',\n      alignItems: 'center',\n    }),\n    pointer: css({\n      cursor: 'pointer',\n    }),\n    streaming: css({\n      label: 'panel-streaming',\n      marginRight: 0,\n      color: theme.colors.success.text,\n\n      '&:hover': {\n        color: theme.colors.success.text,\n      },\n    }),\n    title: css({\n      label: 'panel-title',\n      marginBottom: 0, // override default h6 margin-bottom\n      padding: theme.spacing(0, padding),\n      textOverflow: 'ellipsis',\n      overflow: 'hidden',\n      whiteSpace: 'nowrap',\n      fontSize: theme.typography.h6.fontSize,\n      fontWeight: theme.typography.h6.fontWeight,\n    }),\n    items: css({\n      display: 'flex',\n    }),\n    item: css({\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n    }),\n    hiddenMenu: css({\n      visibility: 'hidden',\n    }),\n    menuItem: css({\n      label: 'panel-menu',\n      border: 'none',\n      background: theme.colors.secondary.main,\n      '&:hover': {\n        background: theme.colors.secondary.shade,\n      },\n    }),\n    errorContainerFloating: css({\n      label: 'error-container',\n      position: 'absolute',\n      left: 0,\n      top: 0,\n      zIndex: theme.zIndex.tooltip,\n    }),\n    rightActions: css({\n      display: 'flex',\n      padding: theme.spacing(0, padding),\n      gap: theme.spacing(1),\n    }),\n    rightAligned: css({\n      label: 'right-aligned-container',\n      marginLeft: 'auto',\n      display: 'flex',\n      alignItems: 'center',\n    }),\n    titleItems: css({\n      display: 'flex',\n      height: '100%',\n    }),\n  };\n};\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2, LoadingState } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport React, { ReactNode } from 'react';\n\nimport { GrafanaPanelBox } from './GrafanaPanelBox/GrafanaPanelBox';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  panelWrap: css`\n    margin-bottom: ${theme.spacing(1)};\n  `,\n});\n\ntype PanelProps = {\n  isLoading: boolean;\n  title?: ReactNode;\n  description?: ReactNode;\n  children: ReactNode;\n  className?: string;\n  headerActions?: ReactNode;\n  dataTestId?: string;\n};\n\nexport function Panel({\n  isLoading,\n  title,\n  description,\n  children,\n  className = '',\n  headerActions,\n  dataTestId,\n}: PanelProps) {\n  const s = useStyles2(getStyles);\n\n  const loadingState = isLoading ? LoadingState.Loading : LoadingState.Done;\n\n  return (\n    <div className={`${className} ${s.panelWrap}`} data-testid={dataTestId || 'panel'}>\n      <GrafanaPanelBox\n        loadingState={loadingState}\n        title={title as unknown as string}\n        description={description as unknown as string}\n        actions={headerActions}\n      >\n        {children}\n      </GrafanaPanelBox>\n    </div>\n  );\n}\n","import { css } from '@emotion/css';\nimport { IconName } from '@grafana/data';\nimport { Button, useStyles2 } from '@grafana/ui';\nimport { reportInteraction } from '@shared/domain/reportInteraction';\nimport React, { ReactNode } from 'react';\n\nimport { useFetchLlmPluginStatus } from './infrastructure/useFetchLlmPluginStatus';\n\ntype AIButtonProps = {\n  children: ReactNode;\n  onClick: (event: React.MouseEvent<HTMLButtonElement>) => void;\n  disabled?: boolean;\n  interactionName: 'g_pyroscope_app_explain_flamegraph_clicked' | 'g_pyroscope_app_optimize_code_clicked';\n};\n\nexport function AIButton({ children, onClick, disabled, interactionName }: AIButtonProps) {\n  const styles = useStyles2(getStyles);\n  const { isEnabled, error, isFetching } = useFetchLlmPluginStatus();\n\n  let icon: IconName = 'ai';\n  let tooltip = '';\n\n  if (isFetching) {\n    icon = 'fa fa-spinner';\n    tooltip = 'Checking the status of the Grafana LLM plugin...';\n  } else if (error) {\n    icon = 'exclamation-triangle';\n    tooltip = 'Error while checking the status of the Grafana LLM plugin!';\n  } else if (!isEnabled) {\n    icon = 'shield-exclamation';\n    tooltip = 'Grafana LLM plugin missing or not configured! Please check the plugins administration page.';\n  }\n\n  return (\n    <Button\n      className={styles.aiButton}\n      size=\"md\"\n      fill=\"text\"\n      icon={icon}\n      disabled={!isEnabled || disabled}\n      tooltip={tooltip}\n      tooltipPlacement=\"top\"\n      onClick={(event: React.MouseEvent<HTMLButtonElement>) => {\n        reportInteraction(interactionName);\n        onClick(event);\n      }}\n    >\n      {children}\n    </Button>\n  );\n}\n\nconst getStyles = () => ({\n  aiButton: css`\n    padding: 0 4px;\n  `,\n});\n","import { openai } from '@grafana/llm';\nimport { logger } from '@shared/infrastructure/tracking/logger';\nimport { useQuery } from '@tanstack/react-query';\n\nexport function useFetchLlmPluginStatus() {\n  const { data, isFetching, error } = useQuery({\n    queryKey: ['llm'],\n    queryFn: () => openai.enabled(),\n  });\n\n  if (error) {\n    logger.error(error, { info: 'Error while checking the status of the Grafana LLM plugin!' });\n  }\n\n  return { isEnabled: Boolean(data), isFetching, error };\n}\n","import { css } from '@emotion/css';\nimport { useStyles2 } from '@grafana/ui';\nimport { logger } from '@shared/infrastructure/tracking/logger';\nimport Markdown from 'markdown-to-jsx';\nimport React, { ReactNode } from 'react';\n\nimport { OpenAiReply } from '../domain/useOpenAiChatCompletions';\n\n// yeah, I know...\nconst setNativeValue = (element: Element, value: string) => {\n  const valueSetter = Object!.getOwnPropertyDescriptor(element, 'value')!.set;\n  const prototypeValueSetter = Object!.getOwnPropertyDescriptor(Object.getPrototypeOf(element), 'value')!.set;\n\n  if (valueSetter && valueSetter !== prototypeValueSetter) {\n    prototypeValueSetter!.call(element, value);\n  } else {\n    valueSetter!.call(element, value);\n  }\n};\n\nconst onClickSearchTerm = (event: any) => {\n  const searchInputElement = document.querySelector('[placeholder^=\"Search\"]');\n\n  if (searchInputElement === null) {\n    logger.error(new Error('Cannot find search input element!'));\n    return;\n  }\n\n  const value = event.target.textContent.trim();\n\n  setNativeValue(searchInputElement, value);\n\n  searchInputElement.dispatchEvent(new Event('input', { bubbles: true }));\n};\n\nconst SearchTerm = ({ children }: { children: ReactNode }) => {\n  const styles = useStyles2(getStyles);\n\n  // If the code block contains newlines, don't make it a search link\n  if (typeof children === 'string' && children.includes('\\n')) {\n    return <code>{children}</code>;\n  }\n\n  return (\n    <code className={styles.searchLink} title=\"Search for this node\" onClick={onClickSearchTerm}>\n      {children}\n    </code>\n  );\n};\n\nconst MARKDOWN_OPTIONS = {\n  overrides: {\n    code: {\n      component: SearchTerm,\n    },\n  },\n};\n\ntype AiReplyProps = {\n  reply: OpenAiReply['reply'];\n};\n\nexport function AiReply({ reply }: AiReplyProps) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.container}>\n      {reply?.messages\n        ?.filter((message) => message.role !== 'system')\n        .map((message) => (\n          <>\n            <div className={styles.reply}>\n              <Markdown options={MARKDOWN_OPTIONS}>{message.content}</Markdown>\n            </div>\n            <hr />\n          </>\n        ))}\n\n      <div className={styles.reply}>\n        <Markdown options={MARKDOWN_OPTIONS}>{reply.text}</Markdown>\n      </div>\n    </div>\n  );\n}\n\nconst getStyles = () => ({\n  container: css`\n    width: 100%;\n    height: 100%;\n  `,\n  reply: css`\n    font-size: 13px;\n\n    & ol,\n    & ul {\n      margin: 0 0 16px 24px;\n    }\n  `,\n  searchLink: css`\n    color: rgb(255, 136, 51);\n    border: 1px solid transparent;\n    padding: 2px 4px;\n    cursor: pointer;\n    font-size: 13px;\n\n    &:hover,\n    &:focus,\n    &:active {\n      box-sizing: border-box;\n      border: 1px solid rgb(255, 136, 51, 0.8);\n      border-radius: 4px;\n    }\n  `,\n});\n","import { css } from '@emotion/css';\nimport { Button, TextArea, useStyles2 } from '@grafana/ui';\nimport React, { KeyboardEvent, useCallback, useState } from 'react';\n\nconst getStyles = () => ({\n  textarea: css`\n    margin-bottom: 8px;\n  `,\n  sendButton: css`\n    float: right;\n    border-top-left-radius: 0;\n    border-bottom-left-radius: 0;\n  `,\n});\n\ntype FollowUpFormProps = {\n  onSubmit: (question: string) => void;\n};\n\nfunction useFollowUpForm(onSubmit: FollowUpFormProps['onSubmit']) {\n  const [question, setQuestion] = useState('');\n\n  const onChangeInput = useCallback((event: any) => {\n    setQuestion(event.target.value);\n  }, []);\n\n  const onClickSend = useCallback(() => {\n    const questionToSend = question.trim();\n    if (!questionToSend) {\n      return;\n    }\n\n    onSubmit(questionToSend);\n\n    setQuestion('');\n  }, [question, onSubmit]);\n\n  return {\n    question,\n    onChangeInput,\n    onClickSend,\n  };\n}\n\nexport function FollowUpForm({ onSubmit }: FollowUpFormProps) {\n  const styles = useStyles2(getStyles);\n  const { question, onChangeInput, onClickSend } = useFollowUpForm(onSubmit);\n\n  const onKeyDown = (event: KeyboardEvent<HTMLTextAreaElement>) => {\n    if (event.code === 'Enter' && !event.shiftKey) {\n      onClickSend();\n    }\n  };\n\n  return (\n    <div>\n      <TextArea\n        className={styles.textarea}\n        placeholder=\"Ask a follow-up question...\"\n        value={question}\n        onChange={onChangeInput}\n        onKeyDown={onKeyDown}\n      />\n\n      <Button className={styles.sendButton} onClick={onClickSend}>\n        Send\n      </Button>\n    </div>\n  );\n}\n","/* https://platform.openai.com/docs/models/overview */\n\nexport const model = 'gpt-4-1106-preview';\n\n/* https://platform.openai.com/docs/guides/prompt-engineering/tactics */\n\nenum PromptCategories {\n  system = 'system',\n  user = 'user',\n}\n\ntype Prompts = Record<string, (profileType: string, profiles: string[]) => string>;\n\nconst prompts: Record<PromptCategories, Prompts> = {\n  system: {\n    // add new system prompts above\n    empty: () => `\n    You are a performance profiling expert and excel at analyzing profiles in the DOT format.\n    In the DOT format, a row like N47 -> N61 means the function from N47 called the function from N61.\n`,\n  },\n  user: {\n    // add new user prompts above\n    single: (profileType: string, profiles: string[]) => `\n    Analyze this flamegraph in DOT format and address these key aspects:\n    - **Performance Bottleneck**: Identify the primary factors slowing down the process, consuming excessive memory, or causing a bottleneck in the system.\n    - **Root Cause**: Explain clearly why these bottlenecks are occurring.\n    - **Recommended Fix**: Suggest practical solutions for these issues.\n\n    Guidelines:\n    - Always use full function names without splitting them from package names.\n    - Exclude numeric values, percentages, and node names (e.g., N1, N3, Node 1, Node 2).\n    - Focus on user code over low-level runtime optimizations.\n    - For standard library or runtime functions, explain their presence/function and link them to user code functions calling them. Avoid repetitive mentions from the same call chain.\n    - Do not mention that the flamegraph profile is in DOT format.\n    - Only use h5 and h6 markdown headers (e.g., ##### Performance Bottleneck, ###### Recommended Fix)\n    - Do not use h1,h2,h3,h4 headers (e.g., ## Bottleneck, ### Root Cause, #### Recommended Fix)\n\n    Format the response using markdown headers for each section corresponding to the key aspects.\n\n    The profile type is: ${profileType}\n    Profile in DOT format:\n    ${profiles[0]}\n`,\n    anton: (profileType: string, profiles: string[]) => `\nGive me actionable feedback and suggestions on how I improve the application performance.\n\nDo not break function names.\nDo not show any numeric values, absolute or percents.\nDo not show node names like N1, N3, or Node 1, Node 2.\nDo not suggest low-level runtime optimisations, focus on the user code.\n\nAlways use full function names.\nNever split function and package name.\n\nRemove any numeric values, absolute or percents, from the output.\nRemove node names like N1, N3, or Node 1, Node 2 from the output.\n\nIf the function is widely known (e.g., a runtime or stdlib function), provide me concise explanation why the function is present in the profile and what could be the cause.\nIf a function is defined in the runtime or in the standard library, tell me which function in the user code calls it.\nAvoid mentioning functions from the same call-chain.\n\n5 suggestions is enough.\nThe profile type is ${profileType}\nBelow is the performance profile in DOT format:\n${profiles[0]}\n`,\n    diff: (profileType: string, profiles: string[]) => `\nAnalyze the differences between these two performance profiles presented in DOT format. Provide a detailed comparison focusing on the following aspects:\n\n- Performance Change: Determine how the performance has changed from the first profile to the second. Identify if there are new bottlenecks, improved or worsened performance areas, or significant changes in resource consumption.\n- Function Impact: Highlight no more than 3 specific functions that have undergone notable changes in their performance impact. Discuss any new functions that have appeared in the second profile or any existing functions that have significantly increased or decreased in resource usage.\n- Potential Causes: Discuss the possible reasons for these changes in performance, linking them to the differences in function execution or resource usage between the two profiles.\n\nGuidelines for Analysis:\n- Use full function names without separating them from their package names\n- Focus on user code rather than low-level runtime optimizations or standard library functions unless they are directly relevant to the user code's performance changes\n- Exclude numeric values, percentages, and node names (e.g., N1, N3, Node 1, Node 2) from the analysis\n- Format the response using markdown headers for each section to structure the analysis clearly\n\nThe profile type is: ${profileType}\n\nFirst performance profile in DOT format:\n${profiles[0]}\n\nSecond performance profile in DOT format:\n${profiles[1]}\n`,\n  },\n};\n\nexport const buildPrompts = ({\n  system,\n  user,\n  profileType,\n  profiles,\n}: {\n  system: string;\n  user: string;\n  profileType: string;\n  profiles: string[];\n}) => {\n  const systemPrompt = prompts.system[system];\n\n  if (typeof systemPrompt !== 'function') {\n    throw new Error(`Cannot find system prompt \"${system}\"!`);\n  }\n\n  const userPrompt = prompts.user[user];\n\n  if (typeof userPrompt !== 'function') {\n    throw new Error(`Cannot find user prompt \"${user}\"!`);\n  }\n\n  return {\n    system: systemPrompt(profileType, profiles),\n    user: userPrompt(profileType, profiles),\n  };\n};\n","import { TimeRange } from '@grafana/data';\nimport { FlamebearerProfile } from '@shared/types/FlamebearerProfile';\n\nimport { DataSourceProxyClient } from '../series/http/DataSourceProxyClient';\n\ntype DiffProfileResponse = string | FlamebearerProfile;\n\ntype GetParams = {\n  query: string;\n  timeRange: TimeRange;\n  format: 'dot' | 'json';\n  maxNodes: number;\n};\n\nexport class ProfileApiClient extends DataSourceProxyClient {\n  constructor(options: { dataSourceUid: string }) {\n    super(options);\n  }\n\n  async get(params: GetParams): Promise<DiffProfileResponse> {\n    const searchParams = new URLSearchParams({\n      query: params.query,\n      from: String(params.timeRange.from.unix() * 1000),\n      until: String(params.timeRange.to.unix() * 1000),\n      format: params.format,\n    });\n\n    if (params.maxNodes) {\n      searchParams.set('max-nodes', String(params.maxNodes));\n    }\n\n    const response = await this.fetch(`/pyroscope/render?${searchParams.toString()}`);\n\n    switch (params.format) {\n      case 'dot':\n        return response.text();\n\n      case 'json':\n        return response.json();\n\n      default:\n        throw new TypeError(`Unknown format \"${params.format}\"!`);\n    }\n  }\n}\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { SceneComponentProps, sceneGraph, SceneObjectBase, SceneObjectState } from '@grafana/scenes';\nimport { Alert, Button, IconButton, Spinner, useStyles2 } from '@grafana/ui';\nimport { getProfileMetric, ProfileMetricId } from '@shared/infrastructure/profile-metrics/getProfileMetric';\nimport { DomainHookReturnValue } from '@shared/types/DomainHookReturnValue';\nimport { InlineBanner } from '@shared/ui/InlineBanner';\nimport { Panel } from '@shared/ui/Panel/Panel';\nimport React from 'react';\n\nimport { ProfilesDataSourceVariable } from '../../domain/variables/ProfilesDataSourceVariable';\nimport { getSceneVariableValue } from '../../helpers/getSceneVariableValue';\nimport { AiReply } from './components/AiReply';\nimport { FollowUpForm } from './components/FollowUpForm';\nimport { useOpenAiChatCompletions } from './domain/useOpenAiChatCompletions';\nimport { FetchParams, useFetchDotProfiles } from './infrastructure/useFetchDotProfiles';\n\ninterface SceneAiPanelState extends SceneObjectState {}\n\nexport class SceneAiPanel extends SceneObjectBase<SceneAiPanelState> {\n  constructor() {\n    super({ key: 'ai-panel' });\n  }\n\n  validateFetchParams(isDiff: boolean, fetchParams: FetchParams) {\n    let params = fetchParams;\n    let error;\n\n    if (isDiff && fetchParams.length !== 2) {\n      error = new Error(\n        `Invalid number of fetch parameters for analyzing the diff flame graph (${fetchParams.length})!`\n      );\n      params = [];\n    } else if (!isDiff && fetchParams.length !== 1) {\n      error = new Error(`Invalid number of fetch parameters for analyzing the flame graph (${fetchParams.length})!`);\n      params = [];\n    }\n\n    return { params, error };\n  }\n\n  useSceneAiPanel = (isDiff: boolean, fetchParams: FetchParams): DomainHookReturnValue => {\n    const dataSourceUid = sceneGraph.findByKeyAndType(this, 'dataSource', ProfilesDataSourceVariable).useState()\n      .value as string;\n\n    const { params, error: validationError } = this.validateFetchParams(isDiff, fetchParams);\n\n    const { error: fetchError, isFetching, profiles } = useFetchDotProfiles(dataSourceUid, params);\n\n    const profileMetricId = getSceneVariableValue(this, 'profileMetricId');\n    const profileType = getProfileMetric(profileMetricId as ProfileMetricId).type;\n\n    const { reply, error: llmError, retry } = useOpenAiChatCompletions(profileType, profiles);\n\n    return {\n      data: {\n        validationError,\n        isLoading: isFetching || (!isFetching && !fetchError && !llmError && !reply.text.trim()),\n        fetchError,\n        llmError,\n        reply,\n        shouldDisplayReply: Boolean(reply?.hasStarted || reply?.hasFinished),\n        shouldDisplayFollowUpForm: !fetchError && !llmError && Boolean(reply?.hasFinished),\n      },\n      actions: {\n        retry,\n        submitFollowupQuestion(question: string) {\n          reply.askFollowupQuestion(question);\n        },\n      },\n    };\n  };\n\n  static Component = ({\n    model,\n    isDiff,\n    fetchParams,\n    onClose,\n  }: SceneComponentProps<SceneAiPanel> & {\n    isDiff: boolean;\n    fetchParams: FetchParams;\n    onClose: () => void;\n  }) => {\n    const styles = useStyles2(getStyles);\n    const { data, actions } = model.useSceneAiPanel(isDiff, fetchParams);\n\n    return (\n      <Panel\n        className={styles.sidePanel}\n        title=\"Flame graph analysis\"\n        isLoading={data.isLoading}\n        headerActions={\n          <IconButton\n            title=\"Close panel\"\n            name=\"times-circle\"\n            variant=\"secondary\"\n            aria-label=\"close\"\n            onClick={onClose}\n          />\n        }\n        dataTestId=\"ai-panel\"\n      >\n        <div className={styles.content}>\n          {data.validationError && (\n            <InlineBanner severity=\"error\" title=\"Validation error!\" error={data.validationError} />\n          )}\n\n          {data.fetchError && (\n            <InlineBanner\n              severity=\"error\"\n              title=\"Error while loading profile data!\"\n              message=\"Sorry for any inconvenience, please try again later.\"\n              error={data.fetchError}\n            />\n          )}\n\n          {data.shouldDisplayReply && <AiReply reply={data.reply} />}\n\n          {data.isLoading && (\n            <>\n              <Spinner inline />\n              &nbsp;Analyzing...\n            </>\n          )}\n\n          {data.llmError && (\n            <Alert title=\"An error occured while generating content using OpenAI!\" severity=\"warning\">\n              <div>\n                <div>\n                  <p>{data.llmError.message}</p>\n                  <p>\n                    Sorry for any inconvenience, please retry or if the problem persists, contact your organization\n                    admin.\n                  </p>\n                </div>\n              </div>\n              <Button className={styles.retryButton} variant=\"secondary\" fill=\"outline\" onClick={() => actions.retry()}>\n                Retry\n              </Button>\n            </Alert>\n          )}\n\n          {data.shouldDisplayFollowUpForm && <FollowUpForm onSubmit={actions.submitFollowupQuestion} />}\n        </div>\n      </Panel>\n    );\n  };\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  sidePanel: css`\n    flex: 1 0 50%;\n    margin-left: 8px;\n    max-width: calc(50% - 4px);\n  `,\n  title: css`\n    margin: -4px 0 4px 0;\n  `,\n  content: css`\n    padding: ${theme.spacing(1)};\n  `,\n  retryButton: css`\n    float: right;\n  `,\n});\n","import { TimeRange } from '@grafana/data';\nimport { useQuery } from '@tanstack/react-query';\n\nimport { ProfileApiClient } from '../../../infrastructure/profiles/ProfileApiClient';\nimport { DataSourceProxyClientBuilder } from '../../../infrastructure/series/http/DataSourceProxyClientBuilder';\nimport { cleanupDotResponse } from './cleanupDotResponse';\n\nexport type FetchParams = Array<{\n  query: string;\n  timeRange: TimeRange;\n}>;\n\nconst MAX_NODES = 100;\n\nexport function useFetchDotProfiles(dataSourceUid: string, fetchParams: FetchParams) {\n  const profileApiClient = DataSourceProxyClientBuilder.build(dataSourceUid, ProfileApiClient);\n\n  const { isFetching, error, data } = useQuery({\n    queryKey: [\n      'dot-profiles',\n      dataSourceUid,\n      ...fetchParams.flatMap(({ query, timeRange }) => [query, timeRange.from.unix(), timeRange.to.unix()]),\n      MAX_NODES,\n    ],\n    queryFn: () => {\n      // TODO: pass a signal options to properly abort all in-flight requests\n      return Promise.all(\n        fetchParams.map(({ query, timeRange }) =>\n          profileApiClient\n            .get({ query, timeRange, format: 'dot', maxNodes: MAX_NODES })\n            .then((response) => cleanupDotResponse(response as string))\n        )\n      );\n    },\n  });\n\n  return {\n    isFetching,\n    error,\n    profiles: data || [],\n  };\n}\n","export function cleanupDotResponse(profile: string): string {\n  return profile\n    .replace(/fontsize=\\d+ /g, '')\n    .replace(/id=\"node\\d+\" /g, '')\n    .replace(/labeltooltip=\".*\\)\" /g, '')\n    .replace(/tooltip=\".*\\)\" /g, '')\n    .replace(/(N\\d+ -> N\\d+).*/g, '$1')\n    .replace(/N\\d+ \\[label=\"other.*\\n/, '')\n    .replace(/shape=box /g, '')\n    .replace(/fillcolor=\"#\\w{6}\"/g, '')\n    .replace(/color=\"#\\w{6}\" /g, '');\n}\n","import { openai } from '@grafana/llm';\nimport { useCallback, useEffect, useState } from 'react';\nimport { SubscriptionLike } from 'rxjs';\n\nimport { buildPrompts, model } from './buildLlmPrompts';\n\ntype Messages = openai.Message[];\n\nexport type OpenAiReply = {\n  reply: {\n    text: string;\n    hasStarted: boolean;\n    hasFinished: boolean;\n    messages: Messages;\n    askFollowupQuestion: (question: string) => void;\n  };\n  retry: () => void;\n  error: Error | null;\n};\n\nexport function useOpenAiChatCompletions(profileType: string, profiles: string[]): OpenAiReply {\n  const [reply, setReply] = useState('');\n  const [replyHasStarted, setReplyHasStarted] = useState(false);\n  const [replyHasFinished, setReplyHasFinished] = useState(false);\n  const [messages, setMessages] = useState<Messages>([]);\n  const [error, setError] = useState<Error | null>(null);\n  const [subscription, setSubscription] = useState<SubscriptionLike>();\n\n  const sendMessages = useCallback((messagesToSend: Messages) => {\n    setMessages(messagesToSend);\n\n    setError(null);\n\n    setReply('');\n    setReplyHasStarted(true);\n    setReplyHasFinished(false);\n\n    const stream = openai\n      .streamChatCompletions({\n        model,\n        messages: messagesToSend,\n      })\n      .pipe(\n        // Accumulate the stream content into a stream of strings, where each\n        // element contains the accumulated message so far.\n        openai.accumulateContent()\n      );\n\n    const subscription = stream.subscribe({\n      next: setReply,\n      error(e) {\n        setError(e);\n        setReplyHasStarted(false);\n        setReplyHasFinished(true);\n        setSubscription(undefined);\n      },\n      complete() {\n        setReplyHasStarted(false);\n        setReplyHasFinished(true);\n        setSubscription(undefined);\n      },\n    });\n\n    setSubscription(subscription);\n  }, []);\n\n  const askFollowupQuestion = useCallback(\n    (question: string): void => {\n      const messagesToAdd: Messages = [\n        {\n          role: 'assistant',\n          content: reply,\n        },\n        {\n          role: 'user',\n          content: question,\n        },\n      ];\n\n      try {\n        sendMessages([...messages, ...messagesToAdd]);\n      } catch (error) {\n        setError(error as Error);\n      }\n    },\n    [messages, reply, sendMessages]\n  );\n\n  useEffect(() => {\n    if (!profiles.length || messages.length > 0) {\n      return;\n    }\n\n    const prompts = buildPrompts({\n      system: 'empty',\n      user: profiles.length === 2 ? 'diff' : 'single',\n      profileType,\n      profiles,\n    });\n\n    try {\n      sendMessages([\n        {\n          role: 'system',\n          content: prompts.system,\n        },\n        {\n          role: 'system',\n          content: prompts.user,\n        },\n      ]);\n    } catch (error) {\n      setError(error as Error);\n    }\n  }, [messages.length, profileType, profiles, profiles.length, sendMessages]);\n\n  useEffect(() => {\n    return () => {\n      if (subscription) {\n        subscription.unsubscribe();\n        setSubscription(undefined);\n      }\n    };\n  }, [subscription]);\n\n  return {\n    reply: {\n      text: reply,\n      hasStarted: replyHasStarted,\n      hasFinished: replyHasFinished,\n      messages: messages,\n      askFollowupQuestion,\n    },\n    retry() {\n      if (messages.length > 0) {\n        try {\n          sendMessages(messages);\n        } catch (error) {\n          setError(error as Error);\n        }\n      }\n    },\n    error,\n  };\n}\n","import { BusEventWithPayload } from '@grafana/data';\n\nexport interface EventDiffAutoSelectPayload {\n  wholeRange: boolean;\n}\n\nexport class EventDiffAutoSelect extends BusEventWithPayload<EventDiffAutoSelectPayload> {\n  public static type = 'diff-auto-select';\n}\n","import { BusEventWithPayload } from '@grafana/data';\n\nexport interface EventDiffChoosePresetPayload {}\n\nexport class EventDiffChoosePreset extends BusEventWithPayload<EventDiffChoosePresetPayload> {\n  public static type = 'diff-choose-preset';\n}\n","import { TimeRange } from '@grafana/data';\nimport { FlamebearerProfile } from '@shared/types/FlamebearerProfile';\n\nimport { DataSourceProxyClient } from '../../../../../infrastructure/series/http/DataSourceProxyClient';\n\ntype DiffProfileResponse = FlamebearerProfile;\n\ntype GetParams = {\n  leftQuery: string;\n  leftTimeRange: TimeRange;\n  rightQuery: string;\n  rightTimeRange: TimeRange;\n  maxNodes: number | null;\n};\n\nexport class DiffProfileApiClient extends DataSourceProxyClient {\n  constructor(options: { dataSourceUid: string }) {\n    super(options);\n  }\n\n  async get(params: GetParams): Promise<DiffProfileResponse> {\n    const searchParams = new URLSearchParams({\n      leftQuery: params.leftQuery,\n      leftFrom: String(params.leftTimeRange.from.unix() * 1000),\n      leftUntil: String(params.leftTimeRange.to.unix() * 1000),\n      rightQuery: params.rightQuery,\n      rightFrom: String(params.rightTimeRange.from.unix() * 1000),\n      rightUntil: String(params.rightTimeRange.to.unix() * 1000),\n    });\n\n    if (params.maxNodes) {\n      searchParams.set('max-nodes', String(params.maxNodes));\n    }\n\n    const response = await this.fetch(`/pyroscope/render-diff?${searchParams.toString()}`);\n\n    const json = await response.json();\n\n    return json;\n  }\n}\n","import { TimeRange } from '@grafana/data';\nimport { useMaxNodesFromUrl } from '@shared/domain/url-params/useMaxNodesFromUrl';\nimport { useQuery } from '@tanstack/react-query';\n\nimport { DataSourceProxyClientBuilder } from '../../../../../infrastructure/series/http/DataSourceProxyClientBuilder';\nimport { DiffProfileApiClient } from './DiffProfileApiClient';\n\ntype FetchParams = {\n  enabled: boolean;\n  dataSourceUid: string;\n  baselineTimeRange: TimeRange;\n  baselineQuery: string;\n  comparisonTimeRange: TimeRange;\n  comparisonQuery: string;\n};\n\nexport function useFetchDiffProfile({\n  enabled,\n  dataSourceUid,\n  baselineTimeRange,\n  baselineQuery,\n  comparisonTimeRange,\n  comparisonQuery,\n}: FetchParams) {\n  const [maxNodes] = useMaxNodesFromUrl();\n\n  const diffProfileApiClient = DataSourceProxyClientBuilder.build(dataSourceUid, DiffProfileApiClient);\n\n  const { isFetching, error, data, refetch } = useQuery({\n    // for UX: keep previous data while fetching -> profile does not re-render with empty panels when refreshing\n    placeholderData: (previousData) => previousData,\n    enabled: Boolean(enabled && maxNodes),\n    // eslint-disable-next-line @tanstack/query/exhaustive-deps\n    queryKey: [\n      'diff-profile',\n      dataSourceUid,\n      baselineQuery,\n      baselineTimeRange.from.unix(),\n      baselineTimeRange.to.unix(),\n      comparisonQuery,\n      comparisonTimeRange.from.unix(),\n      comparisonTimeRange.to.unix(),\n      maxNodes,\n    ],\n    queryFn: () => {\n      diffProfileApiClient.abort();\n\n      const params = {\n        leftQuery: baselineQuery,\n        leftTimeRange: baselineTimeRange,\n        rightQuery: comparisonQuery,\n        rightTimeRange: comparisonTimeRange,\n        maxNodes,\n      };\n\n      return diffProfileApiClient.get(params).then((json) => ({\n        profile: {\n          version: json.version,\n          flamebearer: json.flamebearer,\n          metadata: json.metadata,\n        },\n      }));\n    },\n  });\n\n  return {\n    isFetching,\n    error: diffProfileApiClient.isAbortError(error) ? null : error,\n    ...data,\n    refetch,\n  };\n}\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, Collapse, useStyles2 } from '@grafana/ui';\nimport DiffViewHowToImg from '@img/diff-view-how-to.gif';\nimport { InlineBanner } from '@shared/ui/InlineBanner';\nimport React, { useState } from 'react';\n\ntype MissingSelectionsBannerProps = {\n  onClickAutoSelect: () => void;\n  onClickChoosePreset: () => void;\n  onOpenLearnHow: () => void;\n};\n\nexport function MissingSelectionsBanner({\n  onClickAutoSelect,\n  onClickChoosePreset,\n  onOpenLearnHow,\n}: MissingSelectionsBannerProps) {\n  const styles = useStyles2(getStyles);\n\n  const [isCollapseOpen, setIsCollapseOpen] = useState(false);\n\n  const onToggleCollapse = () => {\n    if (!isCollapseOpen) {\n      onOpenLearnHow();\n    }\n    setIsCollapseOpen(!isCollapseOpen);\n  };\n\n  return (\n    <InlineBanner\n      severity=\"info\"\n      title=\"Select both the baseline and the comparison flame graph ranges to view the diff flame graph\"\n      message={\n        <div className={styles.infoMsg}>\n          <p>How?</p>\n          <p>\n            <Button variant=\"primary\" onClick={onClickAutoSelect}>\n              Auto-select\n            </Button>{' '}\n            or{' '}\n            <Button variant=\"primary\" fill=\"text\" className={styles.textButton} onClick={onClickChoosePreset}>\n              choose a preset\n            </Button>\n          </p>\n          <p>Alternatively:</p>\n          <Collapse\n            label=\"Click here to learn how to select the flame graph ranges with the mouse\"\n            collapsible\n            className={styles.collapse}\n            isOpen={isCollapseOpen}\n            onToggle={onToggleCollapse}\n          >\n            <div className={styles.collapseContent}>\n              <ol>\n                <li>Ensure that the &ldquo;Flame graph&rdquo; range selection mode is selected</li>\n                <li>\n                  Use your mouse to select the desired time ranges on both the baseline and the comparison time series\n                </li>\n              </ol>\n              <img src={DiffViewHowToImg} alt=\"How to view the diff flame graph\" />\n            </div>\n          </Collapse>\n        </div>\n      }\n    />\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  infoMsg: css`\n    padding: ${theme.spacing(2)} 0 0 0;\n  `,\n  textButton: css`\n    padding: 0;\n  `,\n  collapse: css`\n    background: transparent;\n    border: 0;\n  `,\n  collapseContent: css`\n    padding: 0 ${theme.spacing(5)};\n\n    & img {\n      max-width: 100%;\n      width: auto;\n      margin-top: ${theme.spacing(2)};\n    }\n  `,\n});\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { SceneComponentProps, sceneGraph, SceneObjectBase, SceneObjectState } from '@grafana/scenes';\nimport { Spinner, useStyles2 } from '@grafana/ui';\nimport { FlameGraph } from '@shared/components/FlameGraph/FlameGraph';\nimport { displayWarning } from '@shared/domain/displayStatus';\nimport { reportInteraction } from '@shared/domain/reportInteraction';\nimport { useToggleSidePanel } from '@shared/domain/useToggleSidePanel';\nimport { getProfileMetric, ProfileMetricId } from '@shared/infrastructure/profile-metrics/getProfileMetric';\nimport { useFetchPluginSettings } from '@shared/infrastructure/settings/useFetchPluginSettings';\nimport { DomainHookReturnValue } from '@shared/types/DomainHookReturnValue';\nimport { FlamebearerProfile } from '@shared/types/FlamebearerProfile';\nimport { InlineBanner } from '@shared/ui/InlineBanner';\nimport { Panel } from '@shared/ui/Panel/Panel';\nimport { PyroscopeLogo } from '@shared/ui/PyroscopeLogo';\nimport React, { useEffect, useMemo } from 'react';\n\nimport { useBuildPyroscopeQuery } from '../../../../domain/useBuildPyroscopeQuery';\nimport { ProfilesDataSourceVariable } from '../../../../domain/variables/ProfilesDataSourceVariable';\nimport { getSceneVariableValue } from '../../../../helpers/getSceneVariableValue';\nimport { AIButton } from '../../../SceneAiPanel/components/AiButton/AIButton';\nimport { SceneAiPanel } from '../../../SceneAiPanel/SceneAiPanel';\nimport { EventDiffAutoSelect } from '../../domain/events/EventDiffAutoSelect';\nimport { EventDiffChoosePreset } from '../../domain/events/EventDiffChoosePreset';\nimport { SceneExploreDiffFlameGraph } from '../../SceneExploreDiffFlameGraph';\nimport { useFetchDiffProfile } from './infrastructure/useFetchDiffProfile';\nimport { MissingSelectionsBanner } from './ui/MissingSelectionsBanner';\n\ninterface SceneDiffFlameGraphState extends SceneObjectState {\n  aiPanel: SceneAiPanel;\n}\n\nexport class SceneDiffFlameGraph extends SceneObjectBase<SceneDiffFlameGraphState> {\n  constructor() {\n    super({\n      key: 'diff-flame-graph',\n      aiPanel: new SceneAiPanel(),\n    });\n  }\n\n  buildTitle() {\n    const serviceName = getSceneVariableValue(this, 'serviceName');\n    const profileMetricId = getSceneVariableValue(this, 'profileMetricId');\n    const profileMetricType = getProfileMetric(profileMetricId as ProfileMetricId).type;\n\n    return (\n      <>\n        <PyroscopeLogo size=\"small\" />\n        Diff flame graph for {serviceName} ({profileMetricType})\n      </>\n    );\n  }\n\n  useSceneDiffFlameGraph = (): DomainHookReturnValue => {\n    const { aiPanel } = this.useState();\n    const { baselineTimeRange, comparisonTimeRange } = (this.parent as SceneExploreDiffFlameGraph).useDiffTimeRanges();\n\n    const baselineQuery = useBuildPyroscopeQuery(this, 'filtersBaseline');\n    const comparisonQuery = useBuildPyroscopeQuery(this, 'filtersComparison');\n\n    const { settings, error: fetchSettingsError } = useFetchPluginSettings();\n\n    const dataSourceUid = sceneGraph.findByKeyAndType(this, 'dataSource', ProfilesDataSourceVariable).useState()\n      .value as string;\n\n    const isDiffQueryEnabled = Boolean(\n      baselineQuery &&\n        comparisonQuery &&\n        // warning: sending zero parameters values to the API would make the pods crash\n        // so we enable only when we have non-zero parameters values\n        baselineTimeRange.from.unix() &&\n        baselineTimeRange.to.unix() &&\n        comparisonTimeRange.from.unix() &&\n        comparisonTimeRange.to.unix()\n    );\n\n    const {\n      isFetching,\n      error: fetchProfileError,\n      profile,\n    } = useFetchDiffProfile({\n      enabled: isDiffQueryEnabled,\n      dataSourceUid,\n      baselineTimeRange,\n      baselineQuery,\n      comparisonTimeRange,\n      comparisonQuery,\n    });\n\n    const noProfileDataAvailable =\n      isDiffQueryEnabled && !isFetching && !fetchProfileError && profile?.flamebearer.numTicks === 0;\n\n    const shouldDisplayFlamegraph = Boolean(\n      isDiffQueryEnabled && !fetchProfileError && !noProfileDataAvailable && profile\n    );\n    const hasMissingSelections = !isDiffQueryEnabled;\n\n    return {\n      data: {\n        title: this.buildTitle(),\n        isLoading: isFetching,\n        fetchProfileError,\n        noProfileDataAvailable,\n        shouldDisplayFlamegraph,\n        hasMissingSelections,\n        profile: profile as FlamebearerProfile,\n        settings,\n        fetchSettingsError,\n        ai: {\n          panel: aiPanel,\n          fetchParams: [\n            { query: baselineQuery, timeRange: baselineTimeRange },\n            { query: comparisonQuery, timeRange: comparisonTimeRange },\n          ],\n        },\n      },\n      actions: {},\n    };\n  };\n\n  onClickAutoSelect = () => {\n    reportInteraction('g_pyroscope_app_diff_auto_select_clicked');\n\n    this.publishEvent(new EventDiffAutoSelect({ wholeRange: false }), true);\n  };\n\n  onClickChoosePreset = () => {\n    reportInteraction('g_pyroscope_app_diff_choose_preset_clicked');\n\n    this.publishEvent(new EventDiffChoosePreset({}), true);\n  };\n\n  onOpenLearnHow = () => {\n    reportInteraction('g_pyroscope_app_diff_learn_how_clicked');\n  };\n\n  static Component = ({ model }: SceneComponentProps<SceneDiffFlameGraph>) => {\n    const styles = useStyles2(getStyles);\n\n    const { data } = model.useSceneDiffFlameGraph();\n    const sidePanel = useToggleSidePanel();\n\n    const isAiButtonDisabled = data.isLoading || data.hasMissingSelections || data.noProfileDataAvailable;\n\n    useEffect(() => {\n      if (isAiButtonDisabled) {\n        sidePanel.close();\n      }\n    }, [isAiButtonDisabled, sidePanel]);\n\n    if (data.fetchSettingsError) {\n      displayWarning([\n        'Error while retrieving the plugin settings!',\n        'Some features might not work as expected (e.g. flamegraph export options). Please try to reload the page, sorry for the inconvenience.',\n      ]);\n    }\n\n    const panelTitle = useMemo(\n      () => (\n        <>\n          {data.title}\n          {data.isLoading && <Spinner inline className={styles.spinner} />}\n        </>\n      ),\n      [data.isLoading, data.title, styles.spinner]\n    );\n\n    return (\n      <div className={styles.flex}>\n        <Panel\n          dataTestId=\"diff-flame-graph-panel\"\n          className={styles.flamegraphPanel}\n          title={panelTitle}\n          isLoading={data.isLoading}\n          headerActions={\n            <AIButton\n              disabled={isAiButtonDisabled || sidePanel.isOpen('ai')}\n              onClick={() => sidePanel.open('ai')}\n              interactionName=\"g_pyroscope_app_explain_flamegraph_clicked\"\n            >\n              Explain Flame Graph\n            </AIButton>\n          }\n        >\n          {data.hasMissingSelections && (\n            <MissingSelectionsBanner\n              onClickAutoSelect={model.onClickAutoSelect}\n              onClickChoosePreset={model.onClickChoosePreset}\n              onOpenLearnHow={model.onOpenLearnHow}\n            />\n          )}\n\n          {data.fetchProfileError && (\n            <InlineBanner severity=\"error\" title=\"Error while loading profile data!\" error={data.fetchProfileError} />\n          )}\n\n          {data.noProfileDataAvailable && (\n            <InlineBanner\n              severity=\"warning\"\n              title=\"No profile data available\"\n              message=\"Please verify that you've selected adequate filters and time ranges.\"\n            />\n          )}\n\n          {data.shouldDisplayFlamegraph && (\n            <FlameGraph\n              diff={true}\n              profile={data.profile}\n              enableFlameGraphDotComExport={data.settings?.enableFlameGraphDotComExport}\n              collapsedFlamegraphs={data.settings?.collapsedFlamegraphs}\n            />\n          )}\n        </Panel>\n\n        {sidePanel.isOpen('ai') && (\n          <data.ai.panel.Component\n            model={data.ai.panel}\n            isDiff\n            fetchParams={data.ai.fetchParams}\n            onClose={sidePanel.close}\n          />\n        )}\n      </div>\n    );\n  };\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  flex: css`\n    display: flex;\n  `,\n  flamegraphPanel: css`\n    min-width: 0;\n    flex-grow: 1;\n  `,\n  sidePanel: css`\n    flex: 1 0 50%;\n    margin-left: 8px;\n    max-width: calc(50% - 4px);\n  `,\n  spinner: css`\n    margin-left: ${theme.spacing(1)};\n  `,\n  aiButton: css`\n    margin-top: ${theme.spacing(1)};\n  `,\n});\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Badge, Icon, useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nexport const FEEDBACK_FORM_URL = 'https://grafana.qualtrics.com/jfe/form/SV_6Gav4IUU6jcYfd4';\n\n// borrowed from https://github.com/grafana/explore-logs/blob/main/src/Components/IndexScene/GiveFeedbackButton.tsx\nexport const GiveFeedbackButton = () => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.wrapper}>\n      <a\n        href={FEEDBACK_FORM_URL}\n        className={styles.feedback}\n        title=\"Share your thoughts about Profiles in Grafana.\"\n        target=\"_blank\"\n        rel=\"noreferrer noopener\"\n      >\n        <Icon name=\"comment-alt-message\" /> Give feedback\n      </a>\n      <a\n        href={FEEDBACK_FORM_URL}\n        className={styles.feedback}\n        title=\"Share your thoughts about Profiles in Grafana.\"\n        target=\"_blank\"\n        rel=\"noreferrer noopener\"\n      >\n        <Badge text={'Preview'} color={'blue'} icon={'rocket'} />\n      </a>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    wrapper: css({\n      display: 'flex',\n      gap: theme.spacing(1),\n      justifyContent: 'flex-end',\n      paddingTop: '4px',\n    }),\n    feedback: css({\n      alignSelf: 'center',\n      color: theme.colors.text.secondary,\n      fontSize: theme.typography.bodySmall.fontSize,\n      '&:hover': {\n        color: theme.colors.text.link,\n      },\n    }),\n  };\n};\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport {\n  SceneComponentProps,\n  sceneGraph,\n  SceneObjectBase,\n  SceneObjectState,\n  VariableDependencyConfig,\n} from '@grafana/scenes';\nimport { Button, Modal, Select, useStyles2 } from '@grafana/ui';\nimport { reportInteraction } from '@shared/domain/reportInteraction';\nimport React from 'react';\n\nimport { FEEDBACK_FORM_URL } from '../../../GiveFeedbackButton';\nimport { EventDiffAutoSelect } from '../../domain/events/EventDiffAutoSelect';\nimport { CompareTarget } from '../../domain/types';\nimport { SceneComparePanel } from '../SceneComparePanel/SceneComparePanel';\n\ninterface ScenePresetsPickerState extends SceneObjectState {\n  name: string;\n  label: string;\n  isModalOpen: boolean;\n  isSelectOpen: boolean;\n  value: string | null;\n}\n\nexport type Preset = {\n  from: string;\n  to: string;\n  diffFrom: string;\n  diffTo: string;\n  label: string;\n};\n\nexport class ScenePresetsPicker extends SceneObjectBase<ScenePresetsPickerState> {\n  protected _variableDependency = new VariableDependencyConfig(this, {\n    variableNames: ['dataSource', 'serviceName'],\n    onReferencedVariableValueChanged: () => {\n      this.reset();\n    },\n  });\n\n  static PRESETS = [\n    {\n      label: 'Built-in presets',\n      value: 'built-in',\n      options: [\n        {\n          value: 'last hour (30m-window)',\n          label: 'Last hour (30m-window)',\n          baseline: {\n            from: 'now-1h',\n            to: 'now',\n            diffFrom: 'now-1h',\n            diffTo: 'now-30m',\n            label: 'last hour',\n          },\n          comparison: {\n            from: 'now-1h',\n            to: 'now',\n            diffFrom: 'now-30m',\n            diffTo: 'now',\n            label: 'last hour',\n          },\n        },\n        {\n          value: 'last hour (1h-window)',\n          label: 'Last hour (1h-window)',\n          baseline: {\n            from: 'now-1h',\n            to: 'now',\n            diffFrom: 'now-1h',\n            diffTo: 'now',\n            label: 'last hour',\n          },\n          comparison: {\n            from: 'now-1h',\n            to: 'now',\n            diffFrom: 'now-1h',\n            diffTo: 'now',\n            label: 'last hour',\n          },\n        },\n        {\n          value: '6h ago vs now',\n          label: '6h ago vs now (30m-window)',\n          baseline: {\n            from: 'now-375m',\n            to: 'now-315m',\n            diffFrom: 'now-375m',\n            diffTo: 'now-345m',\n            label: '6h ago',\n          },\n          comparison: {\n            from: 'now-1h',\n            to: 'now',\n            diffFrom: 'now-30m',\n            diffTo: 'now',\n            label: 'last hour',\n          },\n        },\n        {\n          value: '24h ago vs now',\n          label: '24h ago vs now (30m-window)',\n          baseline: {\n            from: 'now-1455m',\n            to: 'now-1395m',\n            diffFrom: 'now-1455m',\n            diffTo: 'now-1425m',\n            label: '24h ago',\n          },\n          comparison: {\n            from: 'now-1h',\n            to: 'now',\n            diffFrom: 'now-30m',\n            diffTo: 'now',\n            label: 'last hour',\n          },\n        },\n        {\n          value: 'auto-select-25',\n          label: 'Auto-select (25% range)',\n        },\n        {\n          value: 'auto-select-whole',\n          label: 'Auto-select (whole range)',\n        },\n      ],\n    },\n    {\n      label: 'My presets',\n      value: 'custom',\n      options: [\n        {\n          label: 'Dummy preset saved earlier',\n          value: 'dummy',\n        },\n      ],\n    },\n  ];\n\n  constructor() {\n    super({\n      name: 'compare-presets',\n      label: 'Comparison presets',\n      value: null,\n      isModalOpen: false,\n      isSelectOpen: false,\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  onActivate() {\n    [CompareTarget.BASELINE, CompareTarget.COMPARISON].forEach((compareTarget) => {\n      this._subs.add(\n        sceneGraph\n          .findByKeyAndType(this, `${compareTarget}-panel`, SceneComparePanel)\n          .state.$timeRange.subscribeToState((newState, prevState) => {\n            if (newState.from !== prevState.from || newState.to !== prevState.to) {\n              this.setState({ value: null });\n            }\n          })\n      );\n    });\n  }\n\n  onChangePreset = (option: SelectableValue<string>) => {\n    reportInteraction('g_pyroscope_app_diff_preset_selected', { value: option.value as string });\n\n    this.closeSelect();\n\n    if (option.value === 'dummy') {\n      this.setState({ value: null, isModalOpen: true });\n      return;\n    }\n\n    if (option.value?.startsWith('auto-select-')) {\n      this.setState({ value: null });\n\n      this.publishEvent(new EventDiffAutoSelect({ wholeRange: option.value === 'auto-select-whole' }), true);\n      return;\n    }\n\n    [CompareTarget.BASELINE, CompareTarget.COMPARISON].forEach((compareTarget) => {\n      const panel = sceneGraph.findByKeyAndType(this, `${compareTarget}-panel`, SceneComparePanel);\n\n      panel.toggleTimeRangeSync(false);\n      panel.applyPreset(option[compareTarget]);\n    });\n\n    this.setState({ value: option.value });\n  };\n\n  onClickSave = () => {\n    reportInteraction('g_pyroscope_app_diff_preset_save_clicked');\n\n    this.setState({ isModalOpen: true });\n  };\n\n  closeModal = () => {\n    this.setState({ isModalOpen: false });\n  };\n\n  openSelect() {\n    this.setState({ isSelectOpen: true });\n  }\n\n  closeSelect() {\n    this.setState({ isSelectOpen: false });\n  }\n\n  onOpenSelect = () => {\n    setTimeout(() => this.openSelect(), 0);\n  };\n\n  onCloseSelect = () => {\n    this.closeSelect();\n  };\n\n  reset() {\n    this.setState({ value: null, isSelectOpen: false, isModalOpen: false });\n  }\n\n  static Component({ model }: SceneComponentProps<ScenePresetsPicker & { onChange: any }>) {\n    const styles = useStyles2(getStyles); // eslint-disable-line react-hooks/rules-of-hooks\n    const { value, isSelectOpen, isModalOpen } = model.useState();\n\n    return (\n      <>\n        <div className={styles.presetsContainer}>\n          <Select\n            className={styles.select}\n            placeholder=\"Choose a preset\"\n            value={value}\n            options={ScenePresetsPicker.PRESETS}\n            onChange={model.onChangePreset}\n            isOpen={isSelectOpen}\n            onOpenMenu={model.onOpenSelect}\n            onCloseMenu={model.onCloseSelect}\n          />\n\n          <Button\n            icon=\"save\"\n            variant=\"secondary\"\n            tooltip=\"Save the current time ranges and filters as a custom preset\"\n            onClick={model.onClickSave}\n          />\n        </div>\n        <Modal\n          title=\"Custom user presets\"\n          isOpen={isModalOpen}\n          closeOnEscape={true}\n          closeOnBackdropClick={true}\n          onDismiss={model.closeModal}\n        >\n          <p>\n            This feature, which would allow you to save the current time ranges and filters, is currently not\n            implemented.\n          </p>\n          <p>\n            Please let us know if you would be interested to use it by{' '}\n            <a href={FEEDBACK_FORM_URL} target=\"_blank\" rel=\"noreferrer noopener\" className={styles.link}>\n              leaving us your feedback.\n            </a>\n          </p>\n          <p>Thank you!</p>\n          <Modal.ButtonRow>\n            <Button variant=\"secondary\" fill=\"outline\" onClick={model.closeModal}>\n              Cancel\n            </Button>\n            <Button onClick={model.closeModal} disabled>\n              Save\n            </Button>\n          </Modal.ButtonRow>\n        </Modal>\n      </>\n    );\n  }\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  presetsContainer: css`\n    display: flex;\n  `,\n  select: css`\n    min-width: ${theme.spacing(24)};\n    text-align: left;\n  `,\n  link: css`\n    color: ${theme.colors.text.link};\n  `,\n});\n","import { sceneGraph, SceneObject, SceneObjectState, VizPanel } from '@grafana/scenes';\nimport { logger } from '@shared/infrastructure/tracking/logger';\nimport { cloneDeep, merge } from 'lodash';\n\nimport { EventTimeseriesDataReceived } from '../../../../domain/events/EventTimeseriesDataReceived';\n\nexport function syncYAxis() {\n  return (vizPanel: SceneObject<SceneObjectState>) => {\n    const maxima = new Map<string, number>();\n\n    const eventSub = vizPanel.subscribeToEvent(EventTimeseriesDataReceived, (event) => {\n      const s = event.payload.series?.[0];\n      const refId = s?.refId;\n\n      if (!refId) {\n        logger.warn('Missing refId! Cannot sync y-axis on the timeseries.', event.payload.series);\n        return;\n      }\n\n      maxima.set(s.refId as string, Math.max(...s.fields[1].values));\n\n      updateTimeseriesAxis(vizPanel, Math.max(...maxima.values()));\n    });\n\n    return () => {\n      eventSub.unsubscribe();\n    };\n  };\n}\n\nfunction updateTimeseriesAxis(vizPanel: SceneObject, max: number) {\n  // findAllObjects searches down the full scene graph\n  const timeseries = sceneGraph.findAllObjects(\n    vizPanel,\n    (o) => o instanceof VizPanel && o.state.pluginId === 'timeseries'\n  ) as VizPanel[];\n\n  for (const t of timeseries) {\n    t.clearFieldConfigCache(); // required\n\n    t.setState({\n      fieldConfig: merge(cloneDeep(t.state.fieldConfig), { defaults: { max } }),\n    });\n  }\n}\n","import { css } from '@emotion/css';\nimport { AdHocVariableFilter, DashboardCursorSync, GrafanaTheme2, TimeRange } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport {\n  behaviors,\n  SceneComponentProps,\n  sceneGraph,\n  SceneObjectBase,\n  SceneObjectState,\n  SceneTimeRangeState,\n} from '@grafana/scenes';\nimport { useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { ProfileMetricVariable } from '../../domain/variables/ProfileMetricVariable';\nimport { ServiceNameVariable } from '../../domain/variables/ServiceNameVariable/ServiceNameVariable';\nimport { EventEnableSyncTimeRanges } from './components/SceneComparePanel/domain/events/EventEnableSyncTimeRanges';\nimport { EventSyncRefresh } from './components/SceneComparePanel/domain/events/EventSyncRefresh';\nimport { EventSyncTimeRanges } from './components/SceneComparePanel/domain/events/EventSyncTimeRanges';\nimport { SceneComparePanel } from './components/SceneComparePanel/SceneComparePanel';\nimport { SceneDiffFlameGraph } from './components/SceneDiffFlameGraph/SceneDiffFlameGraph';\nimport { ScenePresetsPicker } from './components/ScenePresetsPicker/ScenePresetsPicker';\nimport { syncYAxis } from './domain/behaviours/syncYAxis';\nimport { EventDiffAutoSelect } from './domain/events/EventDiffAutoSelect';\nimport { EventDiffChoosePreset } from './domain/events/EventDiffChoosePreset';\nimport { CompareTarget } from './domain/types';\n\ninterface SceneExploreDiffFlameGraphState extends SceneObjectState {\n  baselinePanel: SceneComparePanel;\n  comparisonPanel: SceneComparePanel;\n  body: SceneDiffFlameGraph;\n  presetsPicker: ScenePresetsPicker;\n}\n\nexport class SceneExploreDiffFlameGraph extends SceneObjectBase<SceneExploreDiffFlameGraphState> {\n  constructor({\n    useAncestorTimeRange,\n    clearDiffRange,\n    baselineFilters,\n    comparisonFilters,\n  }: {\n    useAncestorTimeRange?: boolean;\n    clearDiffRange?: boolean;\n    baselineFilters?: AdHocVariableFilter[];\n    comparisonFilters?: AdHocVariableFilter[];\n  }) {\n    super({\n      key: 'explore-diff-flame-graph',\n      baselinePanel: new SceneComparePanel({\n        target: CompareTarget.BASELINE,\n        useAncestorTimeRange: Boolean(useAncestorTimeRange),\n        clearDiffRange: Boolean(clearDiffRange),\n        filters: baselineFilters || [],\n      }),\n      comparisonPanel: new SceneComparePanel({\n        target: CompareTarget.COMPARISON,\n        useAncestorTimeRange: Boolean(useAncestorTimeRange),\n        clearDiffRange: Boolean(clearDiffRange),\n        filters: comparisonFilters || [],\n      }),\n      $behaviors: [\n        new behaviors.CursorSync({\n          key: 'metricCrosshairSync',\n          sync: DashboardCursorSync.Crosshair,\n        }),\n        syncYAxis(),\n      ],\n      body: new SceneDiffFlameGraph(),\n      presetsPicker: new ScenePresetsPicker(),\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  onActivate() {\n    // hack to force UrlSyncManager to handle a new location\n    // this will sync the state from the URL by calling updateFromUrl() on all the time ranges (`SceneTimeRange` and our custom `SceneTimeRangeWithAnnotations`) that are defined on `SceneComparePanel`\n    // if not, landing on this view will result in empty URL search parameters (to/from and diffTo/diffFrom) which will make shareable links useless\n    locationService.partial({}, true); // replace to avoid creating history items\n\n    const profileMetricVariable = sceneGraph.findByKeyAndType(this, 'profileMetricId', ProfileMetricVariable);\n\n    profileMetricVariable.setState({ query: ProfileMetricVariable.QUERY_SERVICE_NAME_DEPENDENT });\n    profileMetricVariable.update(true);\n\n    this.subscribeToEvents();\n\n    return () => {\n      profileMetricVariable.setState({ query: ProfileMetricVariable.QUERY_DEFAULT });\n      profileMetricVariable.update(true);\n    };\n  }\n\n  subscribeToEvents() {\n    this._subs.add(\n      this.subscribeToEvent(EventDiffAutoSelect, (event) => {\n        const selectWholeRange = event.payload.wholeRange;\n        const { baselinePanel, comparisonPanel } = this.state;\n\n        baselinePanel.toggleTimeRangeSync(false);\n        comparisonPanel.toggleTimeRangeSync(false);\n\n        baselinePanel.autoSelectDiffRange(selectWholeRange);\n        comparisonPanel.autoSelectDiffRange(selectWholeRange);\n      })\n    );\n\n    this._subs.add(\n      this.subscribeToEvent(EventDiffChoosePreset, () => {\n        this.state.presetsPicker.openSelect();\n      })\n    );\n\n    this._subs.add(\n      this.subscribeToEvent(EventEnableSyncTimeRanges, (event) => {\n        const { source, enable, timeRange, annotationTimeRange } = event.payload;\n        const { baselinePanel, comparisonPanel } = this.state;\n        const targetPanel = source === CompareTarget.BASELINE ? comparisonPanel : baselinePanel;\n\n        if (enable) {\n          this.syncTimeRanges(targetPanel, timeRange, annotationTimeRange);\n        }\n\n        comparisonPanel.toggleTimeRangeSync(enable);\n        baselinePanel.toggleTimeRangeSync(enable);\n      })\n    );\n\n    this._subs.add(\n      this.subscribeToEvent(EventSyncTimeRanges, (event) => {\n        const { source, timeRange, annotationTimeRange } = event.payload;\n        const { baselinePanel, comparisonPanel } = this.state;\n        const targetPanel = source === CompareTarget.BASELINE ? comparisonPanel : baselinePanel;\n\n        this.syncTimeRanges(targetPanel, timeRange, annotationTimeRange);\n      })\n    );\n\n    this._subs.add(\n      this.subscribeToEvent(EventSyncRefresh, (event) => {\n        const { source } = event.payload;\n        const { baselinePanel, comparisonPanel } = this.state;\n        const targetPanel = source === CompareTarget.BASELINE ? comparisonPanel : baselinePanel;\n\n        targetPanel.refreshTimeseries();\n      })\n    );\n  }\n\n  syncTimeRanges(targetPanel: SceneComparePanel, timeRange?: SceneTimeRangeState, annotationTimeRange?: TimeRange) {\n    if (timeRange) {\n      targetPanel.setTimeRange(timeRange);\n    }\n\n    if (annotationTimeRange) {\n      targetPanel.setDiffRange({\n        from: annotationTimeRange.from.toISOString(),\n        to: annotationTimeRange.to.toISOString(),\n      });\n    }\n  }\n\n  // see SceneProfilesExplorer\n  getVariablesAndGridControls() {\n    return {\n      variables: [\n        sceneGraph.findByKeyAndType(this, 'serviceName', ServiceNameVariable),\n        sceneGraph.findByKeyAndType(this, 'profileMetricId', ProfileMetricVariable),\n        this.state.presetsPicker,\n      ],\n      gridControls: [],\n    };\n  }\n\n  useDiffTimeRanges = () => {\n    const { baselinePanel, comparisonPanel } = this.state;\n\n    const { annotationTimeRange: baselineTimeRange } = baselinePanel.useDiffTimeRange();\n    const { annotationTimeRange: comparisonTimeRange } = comparisonPanel.useDiffTimeRange();\n\n    return {\n      baselineTimeRange,\n      comparisonTimeRange,\n    };\n  };\n\n  static Component({ model }: SceneComponentProps<SceneExploreDiffFlameGraph>) {\n    const styles = useStyles2(getStyles); // eslint-disable-line react-hooks/rules-of-hooks\n\n    const { baselinePanel, comparisonPanel, body } = model.useState();\n\n    return (\n      <div className={styles.container}>\n        <div className={styles.columns}>\n          <baselinePanel.Component model={baselinePanel} />\n          <comparisonPanel.Component model={comparisonPanel} />\n        </div>\n\n        <body.Component model={body} />\n      </div>\n    );\n  }\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n  `,\n  columns: css`\n    display: flex;\n    flex-direction: row;\n    gap: ${theme.spacing(1)};\n    margin-bottom: ${theme.spacing(1)};\n\n    & > div {\n      flex: 1 1 0;\n    }\n  `,\n});\n","import { DataSourceProxyClient } from '../../../../../infrastructure/series/http/DataSourceProxyClient';\n\ntype GithubLoginResponse = {\n  cookie: string;\n};\n\nexport class VcsClient extends DataSourceProxyClient {\n  async githubLogin(authorizationCode: string): Promise<GithubLoginResponse> {\n    const response = await this.fetch('/vcs.v1.VCSService/GithubLogin', {\n      method: 'POST',\n      body: JSON.stringify({\n        authorizationCode,\n      }),\n    });\n\n    const json = await response.json();\n\n    return json;\n  }\n\n  // TODO: return json + rename?\n  async githubApp(): Promise<string> {\n    const response = await this.fetch('/vcs.v1.VCSService/GithubApp', {\n      method: 'POST',\n      body: JSON.stringify({}),\n    });\n\n    const json = await response.json();\n\n    return json.clientID;\n  }\n}\n","import { logger } from '@shared/infrastructure/tracking/logger';\n\n/** The maximum Unix ms timestamp that can be stored in a JS Date object. */\nconst MAX_UNIX_TS_MS = 8640000000000000;\n\n/**\n * This is a value class representing a GitSession cookie value in the browser.\n * It provides APIs to decode a GitSession cookie value and to check if the the\n * underlying user token is expired.\n */\nexport class GitSessionCookie {\n  private readonly oauthTokenMetadata: string;\n  private readonly expiry: Date;\n\n  constructor(metadata: string, expiry: number) {\n    this.oauthTokenMetadata = metadata;\n    this.expiry = new Date(expiry);\n  }\n\n  /**\n   * Checks if the session cookie is expired. If the optional `biasMs` is\n   * provided, then the expiry is biased to expire sooner by `biasMs`\n   * milliseconds.\n   *\n   * @param biasMs Offset in milliseconds\n   * @returns True if the session cookie is expired.\n   */\n  isUserTokenExpired(biasMs = 0): boolean {\n    return Date.now() >= this.expiry.getTime() - biasMs;\n  }\n\n  /**\n   * Decodes the base64 encoded value portion of a session cookie.\n   *\n   * @param value The value portion of a session cookie\n   * @returns A valid `GitSessionCookie` if the string can be decoded, otherwise\n   * undefined.\n   */\n  static decode(value: string | undefined): GitSessionCookie | undefined {\n    if (value === undefined || value === '') {\n      return undefined;\n    }\n\n    let decoded;\n    try {\n      decoded = atob(value);\n    } catch (error) {\n      logger.error(error as Error, { info: 'Failed to base64 decode GitSession value' });\n      return undefined;\n    }\n\n    const { payload, isLegacy } = GitSessionCookie.tryDecode(decoded);\n    if (isLegacy) {\n      // This is a legacy cookie value, which does not expose a plaintext\n      // expiry. The expiry is set to a maximum date value and we rely on a 401\n      // response from the server to indicate expiration.\n      return new GitSessionCookie(value, MAX_UNIX_TS_MS);\n    }\n\n    return new GitSessionCookie(payload.metadata, Number(payload.expiry));\n  }\n\n  /**\n   * Attempts to decode the plaintext value portion of a session cookie.\n   *\n   * @param input Plaintext representation of a session cookie value\n   * @returns The payload of the session cookie if it's not a legacy cookie. If\n   * it is a legacy cookie, isLegacy is set to true.\n   */\n  private static tryDecode(input: string): { payload: any; isLegacy: boolean } {\n    try {\n      const payload = JSON.parse(input);\n      return { payload, isLegacy: false };\n    } catch {\n      return { payload: undefined, isLegacy: true };\n    }\n  }\n}\n","import { GitSessionCookie } from './GitSessionCookie';\n\nconst LEGACY_GITHUB_SESSION_COOKIE_NAME = 'GitSession';\nconst GITHUB_SESSION_COOKIE_NAME = 'pyroscope_git_session';\n\nexport interface GitSessionCookieManager {\n  getCookie(): GitSessionCookie | undefined;\n  setCookie(cookie: string): void;\n  deleteCookie(): void;\n}\n\ntype Cookie = {\n  key: string;\n  value: string;\n};\n\nclass InternalGitSessionCookieManager implements GitSessionCookieManager {\n  private rawCookie: Cookie | undefined;\n  private sessionCookie: GitSessionCookie | undefined;\n\n  getCookie(): GitSessionCookie | undefined {\n    // To make sure we're using a cookie that accurately reflects the browser\n    // state, let's be paranoid and make sure our cached cookie is accurate.\n    this.syncCookieWithBrowser();\n    return this.sessionCookie;\n  }\n\n  setCookie(cookie: string): void {\n    if (!cookie.startsWith(`${GITHUB_SESSION_COOKIE_NAME}=`)) {\n      cookie = `${GITHUB_SESSION_COOKIE_NAME}=${cookie}`;\n    }\n\n    const rawCookie = InternalGitSessionCookieManager.getCookieFromJar(cookie, GITHUB_SESSION_COOKIE_NAME);\n    if (rawCookie === undefined) {\n      // If we can't parse the key-value pair out of [cookie], let's return now\n      // to avoid corrupting the state of the manager or browser cookie.\n      return;\n    }\n\n    this.deleteLegacyCookie();\n    this.rawCookie = rawCookie;\n    this.sessionCookie = GitSessionCookie.decode(rawCookie.value);\n    document.cookie = `${cookie}; path=/`;\n  }\n\n  deleteCookie(): void {\n    document.cookie = `${GITHUB_SESSION_COOKIE_NAME}=; Path=/; expires=Thu, 01 Jan 1970 00:00:00 UTC;`;\n    this.deleteLegacyCookie();\n    this.rawCookie = undefined;\n    this.sessionCookie = undefined;\n  }\n\n  private deleteLegacyCookie(): void {\n    document.cookie = `${LEGACY_GITHUB_SESSION_COOKIE_NAME}=; Path=/; expires=Thu, 01 Jan 1970 00:00:00 UTC;`;\n  }\n\n  private syncCookieWithBrowser(): void {\n    const cookie = InternalGitSessionCookieManager.getCookieFromJar(document.cookie, GITHUB_SESSION_COOKIE_NAME);\n    if (cookie?.key === this.rawCookie?.key && cookie?.value === this.rawCookie?.value) {\n      return;\n    }\n\n    cookie !== undefined ? this.setCookie(`${cookie.key}=${cookie.value}`) : this.deleteCookie();\n  }\n\n  private static getCookieFromJar(jar: string, name: string): Cookie | undefined {\n    return jar\n      .split(';')\n      .map((ck) => {\n        // Just doing split('=') results in the trailing padding to be dropped.\n        // While `btoa` seems to handle this case without problem, being\n        // pedantic with padding isn't a bad thing. Doing this song and dance\n        // allows us to keep the trailing padding.\n        const [key, ...rest] = ck.trim().split('=');\n        const value = rest.join('=');\n        return { key: key.trim(), value: value?.trim() };\n      })\n      .find(({ key }) => key === name);\n  }\n}\n\nexport const gitSessionCookieManager: GitSessionCookieManager = new InternalGitSessionCookieManager();\n","function buildGitHubAuthURL(clientID: string, nonce: string): string {\n  const url = new URL('/login/oauth/authorize', 'https://github.com');\n\n  url.searchParams.set('client_id', clientID);\n  url.searchParams.set('scope', 'repo');\n  url.searchParams.set(\n    'state',\n    btoa(\n      JSON.stringify({\n        redirect_uri: window.location.origin,\n        nonce,\n      })\n    )\n  );\n\n  return url.toString();\n}\n\nconst POPUP_WIDTH = 800;\nconst POPUP_HEIGHT = 950;\n\nexport function openLoginPopup(clientId: string, nonce: string): Window | null {\n  const oauthURL = buildGitHubAuthURL(clientId, nonce);\n\n  const { top } = window;\n  const x = (top?.outerWidth ?? 0) / 2 + (top?.screenX ?? 0) - POPUP_WIDTH / 2;\n  const y = (top?.outerHeight ?? 0) / 2 + (top?.screenY ?? 0) - POPUP_HEIGHT / 2;\n\n  return window.open(\n    oauthURL,\n    'GitHub Login',\n    `toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, copyhistory=no, width=${POPUP_WIDTH}, height=${POPUP_HEIGHT}, top=${y}, left=${x}`\n  );\n}\n","import { displayError } from '@shared/domain/displayStatus';\nimport { logger } from '@shared/infrastructure/tracking/logger';\nimport React from 'react';\n\nimport { VcsClient } from '../../../infrastructure/VcsClient';\nimport { PrivateVcsClient } from '../../GitHubContextProvider/infrastructure/PrivateVcsClient';\nimport { nonce } from '../GitHubContextProvider';\nimport { GitSessionCookie } from '../infrastructure/GitSessionCookie';\nimport { gitSessionCookieManager } from '../infrastructure/GitSessionCookieManager';\nimport { openLoginPopup } from './openLoginPopup';\n\nexport async function githubLogin(\n  vcsClient: VcsClient,\n  privateVcsClient: PrivateVcsClient,\n  sessionCookie: GitSessionCookie | undefined,\n  externalWindow: Window | null | undefined,\n  setExternalWindow: React.Dispatch<React.SetStateAction<Window | null | undefined>>\n): Promise<void> {\n  if (externalWindow) {\n    externalWindow.close();\n  }\n\n  if (sessionCookie?.isUserTokenExpired()) {\n    // A session already exists, but it's expired. Refresh the session.\n    try {\n      await privateVcsClient.refresh();\n      return;\n    } catch (error) {\n      // This error isn't fatal and we can recover from it by restarting the\n      // oauth login flow.\n      logger.error(error as Error, { info: 'Failed to refresh GitHub user token' });\n\n      // Failed to refresh the token. Delete the old token and enter the\n      // follow login flow to get a completely new token.\n      gitSessionCookieManager.deleteCookie();\n    }\n  }\n\n  // No session cookie exists, begin the complete login flow.\n  try {\n    const clientId = await vcsClient.githubApp();\n    setExternalWindow(openLoginPopup(clientId, nonce));\n  } catch (error) {\n    displayError(error as Error, ['Failed to start login flow.', (error as Error).message]);\n  }\n}\n","import { VcsClient } from '../../../infrastructure/VcsClient';\n\nexport async function authFromUrl(\n  vcsClient: VcsClient,\n  urlSearchParams: URLSearchParams,\n  nonce: string\n): Promise<string> {\n  const code = urlSearchParams.get('code');\n  if (!code) {\n    return '';\n  }\n\n  const stateValue = urlSearchParams.get('state');\n  if (!stateValue) {\n    throw new Error('Invalid state parameter!');\n  }\n\n  let state;\n\n  try {\n    state = JSON.parse(atob(stateValue));\n  } catch (error) {\n    throw new Error('Invalid state parameter!');\n  }\n\n  if (state.nonce !== nonce) {\n    throw new Error('Invalid nonce parameter!');\n  }\n\n  const res = await vcsClient.githubLogin(code);\n  return res.cookie;\n}\n","import { displayError } from '@shared/domain/displayStatus';\nimport { useEffect } from 'react';\n\nimport { VcsClient } from '../../../infrastructure/VcsClient';\nimport { authFromUrl } from './authFromUrl';\n\ntype PollGithubPopupParams = {\n  vcsClient: VcsClient;\n  externalWindow: Window | null | undefined;\n  setExternalWindow: (window: Window | null) => void;\n  setSessionCookie: (sessionCookie: string) => void;\n  nonce: string;\n};\n\nfunction tryGetWindowSearchParams(window: Window): URLSearchParams | null {\n  try {\n    return new URL(window.location.href).searchParams;\n  } catch {\n    return null;\n  }\n}\n\nexport function usePollGitHubPopup({\n  vcsClient,\n  externalWindow,\n  setExternalWindow,\n  setSessionCookie,\n  nonce,\n}: PollGithubPopupParams) {\n  // eslint-disable-next-line sonarjs/cognitive-complexity\n  useEffect(() => {\n    const checkPopup = async () => {\n      if (!externalWindow || externalWindow.closed) {\n        setExternalWindow(null);\n        return;\n      }\n\n      try {\n        const searchParams = tryGetWindowSearchParams(externalWindow);\n\n        if (searchParams !== null) {\n          const sessionCookie = await authFromUrl(vcsClient, searchParams, nonce);\n\n          if (sessionCookie) {\n            setSessionCookie(sessionCookie);\n            externalWindow.close();\n            setExternalWindow(null);\n            return;\n          }\n        }\n      } catch (error) {\n        displayError(error as Error, ['Error while login in with GitHub!', (error as Error).message]);\n        externalWindow.close();\n        setExternalWindow(null);\n        return;\n      }\n\n      // keep checking for the popup to close\n      window.setTimeout(checkPopup, 700);\n    };\n\n    if (externalWindow) {\n      checkPopup();\n    }\n\n    return () => {\n      if (externalWindow) {\n        externalWindow.close();\n        setExternalWindow(null);\n      }\n    };\n  }, [externalWindow, setExternalWindow, setSessionCookie, nonce, vcsClient]);\n}\n","import { createContext } from 'react';\n\nexport type TGitHubContext = {\n  isLoggedIn: boolean;\n  isSessionExpired: boolean;\n  isLoginInProgress: boolean;\n  login: () => Promise<void>;\n};\n\nexport const DEFAULT_GITHUB_CONTEXT: TGitHubContext = {\n  isLoginInProgress: false,\n  isLoggedIn: false,\n  isSessionExpired: false,\n  login: async () => {},\n};\n\nexport const GitHubContext = createContext(DEFAULT_GITHUB_CONTEXT);\n","import { logger } from '@shared/infrastructure/tracking/logger';\n\nimport { DataSourceProxyClient } from '../../../../../../../infrastructure/series/http/DataSourceProxyClient';\nimport { GitSessionCookieManager, gitSessionCookieManager } from './GitSessionCookieManager';\n\ntype GetFileResponse = {\n  content: string;\n  URL: string;\n};\n\ntype Commit = {\n  repositoryUrl: string;\n  gitRef: string;\n};\n\ntype GetCommitResponse = {\n  author: {\n    avatarURL: string;\n    login: string;\n  };\n  date?: Date;\n  message: string;\n  sha: string;\n  URL: string;\n};\n\nexport const PLACEHOLDER_COMMIT_DATA = Object.freeze({\n  sha: '<unknown>',\n  date: undefined,\n  author: {\n    login: 'unknown author',\n    avatarURL: '',\n  },\n  message: '',\n  URL: '',\n});\n\n/**\n * Exposes VCSService endpoints which are protected by token authentication. It\n * implements middleware to try auto-refresh expired tokens. While an\n * auto-refresh is in progress, subsequent requests are queued. Once the token\n * is refreshed, the queued requests will be dispatched using the new token.\n *\n * WARNING: Only one instance of this class should be instantiated because it\n * needs to keep a singleton reference to the `GitSession` cookie. This class\n * will refresh the `GitSession` cookie whenever it expires and multiple\n * instances will cause unexpected errors and race conditions.\n */\nexport class PrivateVcsClient extends DataSourceProxyClient {\n  private sessionManager: GitSessionCookieManager;\n\n  private pendingQueue: Array<(err: Error | undefined) => void>;\n  private isRefreshing: boolean;\n\n  /** Time interval where the session should be considered expired. */\n  private static readonly BIAS_MS = 5 * 60 * 1000; // 5 minutes\n\n  constructor(options: { dataSourceUid: string }) {\n    super(options);\n\n    this.sessionManager = gitSessionCookieManager;\n    this.isRefreshing = false;\n    this.pendingQueue = [];\n  }\n\n  /**\n   * Fetches a file from GitHub.\n   *\n   * @param repositoryUrl A repository url\n   * @param gitRef A ref of the file version\n   * @param localPath A file path relative to the repository root\n   * @returns Base64 encoded file contents.\n   */\n  async getFile(repositoryUrl: string, gitRef: string, localPath: string, rootPath: string): Promise<GetFileResponse> {\n    const response = await this.postWithRefresh(\n      '/vcs.v1.VCSService/GetFile',\n      JSON.stringify({\n        repositoryURL: repositoryUrl,\n        ref: gitRef,\n        localPath,\n        rootPath,\n      })\n    );\n\n    return response.json();\n  }\n\n  /**\n   * Fetches a series of commit metadata (author, date, etc) for a list of\n   * commit refs.\n   *\n   * @param commits A list of commits\n   * @returns GitHub commit metadata for the commits\n   */\n  async getCommits(commits: Commit[]): Promise<GetCommitResponse[]> {\n    return await Promise.all(\n      commits.map(({ repositoryUrl, gitRef }) => {\n        if (!repositoryUrl || !gitRef) {\n          return PLACEHOLDER_COMMIT_DATA;\n        }\n\n        return this.getCommit(repositoryUrl, gitRef).catch((error) => {\n          logger.error(error, {\n            info: `Error while fetching commit from repo \"${repositoryUrl}\" (${gitRef})!'`,\n          });\n\n          return PLACEHOLDER_COMMIT_DATA;\n        });\n      })\n    );\n  }\n\n  async refresh(): Promise<void> {\n    return this.refreshSession();\n  }\n\n  /**\n   * Gets commit metadata (author, date, etc) for a single commit ref.\n   *\n   * @param repositoryUrl A repository url\n   * @param gitRef A commit ref\n   * @returns Metadata for a single GitHub commit.\n   */\n  private async getCommit(repositoryUrl: string, gitRef: string): Promise<GetCommitResponse> {\n    const response = await this.postWithRefresh(\n      '/vcs.v1.VCSService/GetCommit',\n      JSON.stringify({\n        repositoryURL: repositoryUrl,\n        ref: gitRef,\n      })\n    );\n\n    const json = await response.json();\n    json.date &&= new Date(json.date);\n    return json;\n  }\n\n  /**\n   * Makes an HTTP POST request. If the session cookie is expired, this method\n   * will auto-refresh the session cookie. During this time, all subsequent\n   * requests will be queued until the refresh is complete.\n   *\n   * @param path An API route path\n   * @param body Request body contents\n   * @returns A promise for the HTTP POST request.\n   */\n  private async postWithRefresh(path: string, body: string): Promise<Response> {\n    // Check if the session is refreshing.\n    if (this.isRefreshing) {\n      return this.queueRequest(path, body);\n    }\n\n    // Check if session is expired.\n    if (this.sessionManager.getCookie()?.isUserTokenExpired(PrivateVcsClient.BIAS_MS)) {\n      this.isRefreshing = true;\n\n      // Refresh the session.\n      try {\n        await this.refreshSession();\n      } catch (e) {\n        this.sessionManager.deleteCookie();\n        this.flushQueue(e as Error);\n      }\n\n      // Resolve the request that triggered the refresh.\n      this.flushQueue();\n      this.isRefreshing = false;\n    }\n\n    return this.post(path, body);\n  }\n\n  /**\n   * Makes an HTTP POST request. This method assumes a valid session cookie.\n   *\n   * @param path An API route path\n   * @param body Request body contents\n   * @returns A response of the resulting HTTP POST request.\n   */\n  private async post(path: string, body: string): Promise<Response> {\n    return this.fetch(path, {\n      method: 'POST',\n      body: body,\n    });\n  }\n\n  /**\n   * Exchanges the current session cookie for a new one, then saves the cookie\n   * in the session manager.\n   */\n  private async refreshSession(): Promise<void> {\n    const response = await this.fetch('/vcs.v1.VCSService/GithubRefresh', {\n      method: 'POST',\n      body: JSON.stringify({}),\n    });\n\n    const body = await response.json();\n    this.sessionManager.setCookie(body.cookie);\n  }\n\n  /**\n   * Queues an HTTP request to the provided path with the provided body. The\n   * request will be executed when the queue gets flushed.\n   *\n   * @param path An API route path\n   * @param body Request body contents\n   * @returns A response of the resulting HTTP POST request.\n   */\n  private async queueRequest(path: string, body: string): Promise<Response> {\n    return new Promise((resolve, reject) => {\n      this.pendingQueue.push((err) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        resolve(this.post(path, body));\n      });\n    });\n  }\n\n  /**\n   * Flushes a queue of requests in the order in which they were received. If\n   * an error occurred while the requests were queued, it is passed to each\n   * request callback.\n   *\n   * This function also resets the internal queue.\n   *\n   * @param err An optional error\n   */\n  private flushQueue(err: Error | undefined = undefined) {\n    this.pendingQueue.forEach((callback) => callback(err));\n    this.pendingQueue = [];\n  }\n}\n","import { displayError } from '@shared/domain/displayStatus';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { DataSourceProxyClientBuilder } from 'src/pages/ProfilesExplorerView/infrastructure/series/http/DataSourceProxyClientBuilder';\n\nimport { VcsClient } from '../../infrastructure/VcsClient';\nimport { generateNonce } from './domain/generateNonce';\nimport { githubLogin } from './domain/githubLogin';\nimport { useGithubSessionCookie } from './domain/useGithubSessionCookie';\nimport { usePollGitHubPopup } from './domain/usePollGitHubPopup';\nimport { DEFAULT_GITHUB_CONTEXT, GitHubContext } from './GitHubContext';\nimport { PrivateVcsClient } from './infrastructure/PrivateVcsClient';\n\ntype GitHubContextProviderProps = {\n  dataSourceUid: string;\n  children: React.ReactNode;\n};\n\nexport const nonce = generateNonce();\n\nexport function GitHubContextProvider({ dataSourceUid, children }: GitHubContextProviderProps) {\n  const vcsClient = DataSourceProxyClientBuilder.build(dataSourceUid, VcsClient);\n  const privateVcsClient = DataSourceProxyClientBuilder.build(dataSourceUid, PrivateVcsClient);\n\n  const [isLoginInProgress, setIsLoginInProgress] = useState(DEFAULT_GITHUB_CONTEXT.isLoginInProgress);\n  const [sessionCookie, setSessionCookie] = useGithubSessionCookie();\n  const [externalWindow, setExternalWindow] = useState<Window | null>();\n\n  // hack to prevent failures impossible to fix for the user (unless they know they have to delete the cookie)\n  // when logged in and changing data source\n  // TODO: provide a better way\n  useEffect(() => {\n    setSessionCookie('');\n  }, [dataSourceUid]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  usePollGitHubPopup({ vcsClient, externalWindow, setExternalWindow, setSessionCookie, nonce });\n\n  // Check if login window is open and toggle the login state accordingly. For\n  // example, if the login window IS open and the login state is not\n  // \"in progress\", then update the state to be \"in progress\".\n  const newIsLoginInProgress = externalWindow ? !externalWindow.closed : false;\n  if (newIsLoginInProgress !== isLoginInProgress) {\n    setIsLoginInProgress(newIsLoginInProgress);\n  }\n\n  const login = useCallback(async () => {\n    try {\n      await githubLogin(vcsClient, privateVcsClient, sessionCookie, externalWindow, setExternalWindow);\n    } catch (error) {\n      displayError(error as Error, ['Failed to login to GitHub', (error as Error).message]);\n    }\n  }, [vcsClient, privateVcsClient, sessionCookie, externalWindow]);\n\n  return (\n    <GitHubContext.Provider\n      value={{\n        isLoginInProgress,\n        isLoggedIn: Boolean(sessionCookie && !sessionCookie.isUserTokenExpired()),\n        isSessionExpired: Boolean(sessionCookie?.isUserTokenExpired()),\n        login,\n      }}\n    >\n      {children}\n    </GitHubContext.Provider>\n  );\n}\n","export function generateNonce(): string {\n  // https://stackoverflow.com/questions/76825670/how-to-generate-and-use-random-value-for-nonce-in-inline-script-in-javascript\n  return btoa(String.fromCharCode(...crypto.getRandomValues(new Uint8Array(32))));\n}\n","import { useState } from 'react';\n\nimport { gitSessionCookieManager } from '../infrastructure/GitSessionCookieManager';\n\nexport function useGithubSessionCookie() {\n  const [cookie, setCookie] = useState(gitSessionCookieManager.getCookie());\n\n  const setNextCookie = (nextValue: string) => {\n    if (!nextValue) {\n      gitSessionCookieManager.deleteCookie();\n      setCookie(undefined);\n    } else {\n      gitSessionCookieManager.setCookie(nextValue);\n      setCookie(gitSessionCookieManager.getCookie());\n    }\n  };\n\n  return [cookie, setNextCookie] as const;\n}\n","import { SceneQueryRunner } from '@grafana/scenes';\n\nimport { PYROSCOPE_DATA_SOURCE } from '../pyroscope-data-sources';\nimport { TimeSeriesQueryRunnerParams } from '../timeseries/TimeSeriesQueryRunnerParams';\nimport { withPreventInvalidQuery } from '../withPreventInvalidQuery';\n\ntype FlameGraphQueryRunnerParams = TimeSeriesQueryRunnerParams & {\n  maxNodes?: number;\n};\n\nexport function buildFlameGraphQueryRunner({ filters, maxNodes }: FlameGraphQueryRunnerParams) {\n  const completeFilters = filters ? [...filters] : [];\n  completeFilters.unshift({ key: 'service_name', operator: '=', value: '$serviceName' });\n\n  const selector = completeFilters.map(({ key, operator, value }) => `${key}${operator}\"${value}\"`).join(',');\n\n  const queryRunner = new SceneQueryRunner({\n    datasource: PYROSCOPE_DATA_SOURCE,\n    queries: [\n      {\n        refId: 'profile',\n        queryType: 'profile',\n        profileTypeId: '$profileMetricId',\n        labelSelector: `{${selector},$filters}`,\n        maxNodes,\n      },\n    ],\n  });\n\n  return withPreventInvalidQuery(queryRunner);\n}\n","import { Field, Message } from 'protobufjs/light';\n\nexport class PprofRequest extends Message<PprofRequest> {\n    constructor(\n        profile_typeID: string,\n        label_selector: string,\n        start: number,\n        end: number,\n        max_nodes: number\n    ) {\n        super();\n        this.profile_typeID = profile_typeID;\n        this.label_selector = label_selector;\n        this.start = start;\n        this.end = end;\n        this.max_nodes = max_nodes;\n    }\n\n    @Field.d(1, 'string')\n    profile_typeID: string;\n\n    @Field.d(2, 'string')\n    label_selector: string;\n\n    @Field.d(3, 'int64')\n    start: number;\n\n    @Field.d(4, 'int64')\n    end: number;\n\n    @Field.d(5, 'int64')\n    max_nodes: number;\n}\n","import { TimeRange } from '@grafana/data';\nimport { parseQuery } from '@shared/domain/url-params/parseQuery';\nimport { PprofProfile } from '@shared/types/PprofProfile';\n\nimport { DataSourceProxyClient } from '../../../infrastructure/series/http/DataSourceProxyClient';\nimport { PprofRequest } from './PprofRequest';\n\ntype SelectMergeProfileParams = {\n  query: string;\n  timeRange: TimeRange;\n  maxNodes: number;\n};\n\ntype SelectMergeProfileJsonParams = {\n  profileMetricId: string;\n  labelsSelector: string;\n  start: number;\n  end: number;\n  stackTrace: string[];\n  maxNodes: number;\n};\n\nexport class PprofApiClient extends DataSourceProxyClient {\n  static buildPprofRequest(query: string, timeRange: TimeRange, maxNodes: number): Uint8Array {\n    const { profileMetricId, labelsSelector } = parseQuery(query);\n\n    const start = timeRange.from.unix() * 1000;\n    const end = timeRange.to.unix() * 1000;\n\n    const message = new PprofRequest(profileMetricId, labelsSelector, start, end, maxNodes);\n\n    return PprofRequest.encode(message).finish();\n  }\n\n  async selectMergeProfile({ query, timeRange, maxNodes }: SelectMergeProfileParams): Promise<Blob> {\n    const response = await this.fetch('/querier.v1.QuerierService/SelectMergeProfile', {\n      method: 'POST',\n      headers: { 'content-type': 'application/proto' },\n      body: new Blob([PprofApiClient.buildPprofRequest(query, timeRange, maxNodes)]),\n    });\n\n    return response.blob();\n  }\n\n  async selectMergeProfileJson({\n    profileMetricId,\n    labelsSelector,\n    start,\n    end,\n    stackTrace,\n    maxNodes,\n  }: SelectMergeProfileJsonParams): Promise<PprofProfile> {\n    const response = await this.fetch('/querier.v1.QuerierService/SelectMergeProfile', {\n      method: 'POST',\n      body: JSON.stringify({\n        profile_typeID: profileMetricId,\n        label_selector: labelsSelector,\n        start: start * 1000,\n        end: end * 1000,\n        stackTraceSelector: {\n          call_site: stackTrace.map((name) => ({ name })),\n        },\n        maxNodes,\n      }),\n    });\n\n    return response.json();\n  }\n}\n","import { TimeRange } from '@grafana/data';\nimport { parseQuery } from '@shared/domain/url-params/parseQuery';\n\nexport function getExportFilename(query: string, timeRange: TimeRange) {\n  const { serviceId, profileMetricId } = parseQuery(query);\n  const dateString = `${timeRange.from.format('YYYY-MM-DD_HHmm')}-to-${timeRange.to.format('YYYY-MM-DD_HHmm')}`;\n  return `${serviceId.replace(/\\//g, '-')}_${profileMetricId}_${dateString}`;\n}\n","import { HttpClient } from '@shared/infrastructure/http/HttpClient';\nimport { FlamebearerProfile } from '@shared/types/FlamebearerProfile';\n\ntype UploadResponse = {\n  key: string;\n  url: string;\n  subProfiles: any[]; // TODO: define them, what are they?\n};\n\nclass FlamegraphDotComApiClient extends HttpClient {\n  constructor() {\n    super('https://flamegraph.com/api', {\n      'content-type': 'application/json',\n    });\n  }\n\n  async upload(name: string, profile: FlamebearerProfile): Promise<UploadResponse> {\n    const response = await this.fetch('/upload/v1', {\n      method: 'POST',\n      body: JSON.stringify({\n        name,\n        profile: btoa(JSON.stringify(profile)),\n        fileTypeData: {\n          units: profile.metadata.units,\n          spyName: profile.metadata.spyName,\n        },\n        type: 'json',\n      }),\n    });\n\n    const json = await response.json();\n\n    return json;\n  }\n}\n\nexport const flamegraphDotComApiClient = new FlamegraphDotComApiClient();\n","import { TimeRange } from '@grafana/data';\nimport { SceneComponentProps, sceneGraph, SceneObjectBase, SceneObjectState } from '@grafana/scenes';\nimport { Button, Dropdown, Menu } from '@grafana/ui';\nimport { displayError } from '@shared/domain/displayStatus';\nimport { reportInteraction } from '@shared/domain/reportInteraction';\nimport { useMaxNodesFromUrl } from '@shared/domain/url-params/useMaxNodesFromUrl';\nimport { DEFAULT_SETTINGS } from '@shared/infrastructure/settings/PluginSettings';\nimport { useFetchPluginSettings } from '@shared/infrastructure/settings/useFetchPluginSettings';\nimport { DomainHookReturnValue } from '@shared/types/DomainHookReturnValue';\nimport { FlamebearerProfile } from '@shared/types/FlamebearerProfile';\nimport 'compression-streams-polyfill';\nimport saveAs from 'file-saver';\nimport React from 'react';\n\nimport { ProfilesDataSourceVariable } from '../../../../domain/variables/ProfilesDataSourceVariable';\nimport { ProfileApiClient } from '../../../../infrastructure/profiles/ProfileApiClient';\nimport { DataSourceProxyClientBuilder } from '../../../../infrastructure/series/http/DataSourceProxyClientBuilder';\nimport { PprofApiClient } from '../../infrastructure/PprofApiClient';\nimport { getExportFilename } from './domain/getExportFilename';\nimport { flamegraphDotComApiClient } from './infrastructure/flamegraphDotComApiClient';\n\ninterface SceneExportMenuState extends SceneObjectState {}\n\ntype ExtraProps = {\n  query: string;\n  timeRange: TimeRange;\n};\n\nexport class SceneExportMenu extends SceneObjectBase<SceneExportMenuState> {\n  constructor() {\n    super({ key: 'export-flame-graph-menu' });\n  }\n\n  async fetchFlamebearerProfile({\n    dataSourceUid,\n    query,\n    timeRange,\n    maxNodes,\n  }: ExtraProps & { dataSourceUid: string; maxNodes: number | null }): Promise<FlamebearerProfile | null> {\n    const profileApiClient = DataSourceProxyClientBuilder.build(dataSourceUid, ProfileApiClient);\n\n    let profile;\n\n    try {\n      profile = await profileApiClient.get({\n        query,\n        timeRange,\n        format: 'json',\n        maxNodes: maxNodes || DEFAULT_SETTINGS.maxNodes,\n      });\n    } catch (error) {\n      displayError(error as Error, ['Error while loading flamebearer profile data!', (error as Error).message]);\n      return null;\n    }\n\n    return profile as FlamebearerProfile;\n  }\n\n  async fetchPprofProfile({\n    dataSourceUid,\n    query,\n    timeRange,\n    maxNodes,\n  }: ExtraProps & { dataSourceUid: string; maxNodes: number | null }): Promise<Blob | null> {\n    const pprofApiClient = DataSourceProxyClientBuilder.build(dataSourceUid, PprofApiClient);\n\n    let profile;\n\n    try {\n      const blob = await pprofApiClient.selectMergeProfile({\n        query,\n        timeRange,\n        maxNodes: maxNodes || DEFAULT_SETTINGS.maxNodes,\n      });\n      profile = await new Response(blob.stream().pipeThrough(new CompressionStream('gzip'))).blob();\n    } catch (error) {\n      displayError(error as Error, ['Failed to export to pprof!', (error as Error).message]);\n      return null;\n    }\n\n    return profile;\n  }\n\n  useSceneExportMenu = ({ query, timeRange }: ExtraProps): DomainHookReturnValue => {\n    const dataSourceUid = sceneGraph.findByKeyAndType(this, 'dataSource', ProfilesDataSourceVariable).useState()\n      .value as string;\n\n    const [maxNodes] = useMaxNodesFromUrl();\n    const { settings } = useFetchPluginSettings();\n\n    const downloadPng = () => {\n      reportInteraction('g_pyroscope_app_export_profile', { format: 'png' });\n\n      const filename = `${getExportFilename(query, timeRange)}.png`;\n\n      (document.querySelector('canvas[data-testid=\"flameGraph\"]') as HTMLCanvasElement).toBlob((blob) => {\n        if (!blob) {\n          const error = new Error('Error while creating the image, no blob.');\n          displayError(error, ['Failed to export to png!', error.message]);\n          return;\n        }\n\n        saveAs(blob, filename);\n      }, 'image/png');\n    };\n\n    const downloadJson = async () => {\n      reportInteraction('g_pyroscope_app_export_profile', { format: 'json' });\n\n      const profile = await this.fetchFlamebearerProfile({ dataSourceUid, query, timeRange, maxNodes });\n      if (!profile) {\n        return;\n      }\n\n      const filename = `${getExportFilename(query, timeRange)}.json`;\n      const data = `data:text/json;charset=utf-8,${encodeURIComponent(JSON.stringify(profile))}`;\n\n      saveAs(data, filename);\n    };\n\n    const downloadPprof = async () => {\n      reportInteraction('g_pyroscope_app_export_profile', { format: 'pprof' });\n\n      const profile = await this.fetchPprofProfile({ dataSourceUid, query, timeRange, maxNodes });\n      if (!profile) {\n        return;\n      }\n\n      const filename = `${getExportFilename(query, timeRange)}.pb.gz`;\n\n      saveAs(profile, filename);\n    };\n\n    const uploadToFlamegraphDotCom = async () => {\n      reportInteraction('g_pyroscope_app_export_profile', { format: 'flamegraph.com' });\n\n      const profile = await this.fetchFlamebearerProfile({ dataSourceUid, query, timeRange, maxNodes });\n      if (!profile) {\n        return;\n      }\n\n      try {\n        const response = await flamegraphDotComApiClient.upload(getExportFilename(query, timeRange), profile);\n\n        if (!response.url) {\n          throw new Error('Empty URL received.');\n        }\n\n        const dlLink = document.createElement('a');\n        dlLink.target = '_blank';\n        dlLink.href = response.url;\n        document.body.appendChild(dlLink);\n        dlLink.click();\n        document.body.removeChild(dlLink);\n      } catch (error) {\n        displayError(error as Error, ['Failed to export to flamegraph.com!', (error as Error).message]);\n        return;\n      }\n    };\n\n    return {\n      data: {\n        shouldDisplayFlamegraphDotCom: Boolean(settings?.enableFlameGraphDotComExport),\n      },\n      actions: {\n        downloadPng,\n        downloadJson,\n        downloadPprof,\n        uploadToFlamegraphDotCom,\n      },\n    };\n  };\n\n  static Component = ({ model, query, timeRange }: SceneComponentProps<SceneExportMenu> & ExtraProps) => {\n    const { actions } = model.useSceneExportMenu({ query, timeRange });\n\n    return (\n      <Dropdown\n        overlay={\n          <Menu>\n            <Menu.Item label=\"png\" onClick={actions.downloadPng} />\n            <Menu.Item label=\"json\" onClick={actions.downloadJson} />\n            <Menu.Item label=\"pprof\" onClick={actions.downloadPprof} />\n          </Menu>\n        }\n      >\n        <Button\n          icon=\"download-alt\"\n          size=\"sm\"\n          variant=\"secondary\"\n          fill=\"outline\"\n          aria-label=\"Export profile data\"\n          tooltip=\"Export profile data\"\n        />\n      </Dropdown>\n    );\n  };\n}\n","import { useContext } from 'react';\n\nimport { GitHubContext, TGitHubContext } from './GitHubContext';\n\nexport function useGitHubContext(): TGitHubContext {\n  return useContext(GitHubContext);\n}\n","import { IconName } from '@grafana/data';\nimport { Props as FlameGraphProps } from '@grafana/flamegraph';\nimport { reportInteraction } from '@shared/domain/reportInteraction';\nimport { useFetchPluginSettings } from '@shared/infrastructure/settings/useFetchPluginSettings';\nimport { DomainHookReturnValue } from '@shared/types/DomainHookReturnValue';\nimport { useCallback, useState } from 'react';\n\nimport { useGitHubContext } from '../components/GitHubContextProvider/useGitHubContext';\nimport { buildStackTrace } from './buildStackTrace';\n\nexport function useGitHubIntegration(sidePanel: any): DomainHookReturnValue {\n  const { login, isSessionExpired } = useGitHubContext();\n  const { settings } = useFetchPluginSettings();\n\n  const isFunctionDetailsEnabled = settings?.enableFunctionDetails;\n\n  const [stacktrace, setStacktrace] = useState<string[]>([]);\n\n  const getExtraFlameGraphMenuItems: FlameGraphProps['getExtraContextMenuButtons'] = useCallback(\n    ({ item }: any, data: Record<string, any>) => {\n      // clicking on the top-level \"total\" node doesn't add \"Function details\" as an extra contextual menu item\n      if (!isFunctionDetailsEnabled || item.level === 0) {\n        return [];\n      }\n\n      return [\n        {\n          label: 'Function details',\n          icon: 'info-circle' as IconName,\n          onClick: () => {\n            reportInteraction('g_pyroscope_app_function_details_clicked');\n\n            setStacktrace(buildStackTrace(item, data));\n\n            sidePanel.open('function-details');\n\n            // login can only happen as a consequence of a user action\n            // this is why we check if the session is expired here and not whenever we make a request to the API\n            if (isSessionExpired) {\n              login();\n            }\n          },\n        },\n      ];\n    },\n    [isFunctionDetailsEnabled, isSessionExpired, login, sidePanel]\n  );\n\n  return {\n    data: {\n      stacktrace,\n    },\n    actions: {\n      getExtraFlameGraphMenuItems,\n    },\n  };\n}\n","import { createTheme, getDisplayProcessor } from '@grafana/data';\n\nimport { StackTrace } from './types/StackTrace';\n\nexport function buildStackTrace(levelItem: any, data: Record<string, any>): StackTrace {\n  let stacktrace: string[] = [];\n\n  const labels = data.fields.find(({ name }: { name: string }) => name === 'label');\n  if (!labels) {\n    return stacktrace;\n  }\n\n  const dp = getDisplayProcessor({ field: labels, theme: createTheme() });\n  let node = levelItem;\n\n  while (node && node.level > 0) {\n    for (const idx of node.itemIndexes) {\n      stacktrace.unshift(dp(labels.values[idx]).text);\n    }\n\n    node = node.parents?.[0];\n  }\n\n  return stacktrace;\n}\n","/* https://platform.openai.com/docs/models/overview */\nimport { FunctionDetails, LineProfile } from '../../../domain/types/FunctionDetails';\n\nexport const model = 'gpt-4-1106-preview';\n\n/* https://platform.openai.com/docs/guides/prompt-engineering/tactics */\n\nexport type SuggestionPromptInputs = {\n  functionDetails: FunctionDetails;\n  lines: LineProfile[];\n};\n\nexport const buildSuggestionPrompts = ({\n  functionDetails,\n  lines,\n}: // dotProfile,\nSuggestionPromptInputs) => {\n  const userPrompt = `\nYou are a code optimization expert. I will give you code, each line annotated with amount of time spent on a particular line (it's in the beginning of each line), and a function name.\n\nI want you to write back a new improved code for this function and explain why you made changes.\n\nMake sure to take annotations into strong consideration. If a suggested performance improvement isn't backed up by information from the annotations, do not include it.\n\nDo not mention the actual numbers from the annotations, users can already see how much time was spent on each line. Do not list various lines and their time spent. When you mention functions or lines, do not mention the time spent on them.\n\nIf you can't find any meaningful performance optimizations, say so. Ask for context if you think other context might help make decisions. If you think the problem is with user input and not the actual code itself, say so.\n\nWhen you output code in markdown, please don't specify language after 3 backticks (e.g instead of saying \"\\`\\`\\`go\" say \"\\`\\`\\`\"), and always add a new line after 3 backticks.\n\nFunction name is \\`${functionDetails.name}\\`. Do not mention the function name, users can already see it.\n\nWhen posting a response, follow the outline below:\n* give a brief explanation of things that could be improve\n* print new code if it's possible\n* explain each change in more details\n\n\nAnnotated code is below:\n\\`\\`\\`\n${codeInfoToAnnotatedCode(functionDetails, lines)}\n\\`\\`\\`\n`;\n\n  return {\n    system: ``,\n    user: userPrompt,\n  };\n};\n\nfunction codeInfoToAnnotatedCode(functionDetails: FunctionDetails, lines: LineProfile[]): string {\n  let code = lines\n    .map((line) => {\n      return `(${line.cum} ${functionDetails.unit}) ${line.line}`;\n    })\n    .join('\\n');\n\n  return code;\n}\n","import { DomainHookReturnValue } from '@shared/types/DomainHookReturnValue';\n\nimport { SuggestionPromptInputs } from './buildLlmSuggestionPrompts';\nimport { useOpenAiSuggestions } from './useOpenAiSuggestions';\n\nexport function useAiSuggestionsPanel(suggestionPromptInputs: SuggestionPromptInputs): DomainHookReturnValue {\n  const { reply, error: llmError } = useOpenAiSuggestions(suggestionPromptInputs);\n\n  return {\n    data: {\n      isLoading: !llmError && !reply.text.trim(),\n      llmError,\n      reply,\n      shouldDisplayReply: Boolean(reply?.hasStarted || reply?.hasFinished),\n      shouldDisplayFollowUpForm: !llmError && Boolean(reply?.hasFinished),\n    },\n    actions: {\n      submitFollowupQuestion(question: string) {\n        reply.askFollowupQuestion(question);\n      },\n    },\n  };\n}\n","import { openai } from '@grafana/llm';\nimport { useCallback, useEffect, useState } from 'react';\n\nimport { buildSuggestionPrompts, model, SuggestionPromptInputs } from './buildLlmSuggestionPrompts';\n\ntype Messages = openai.Message[];\n\n// TODO(@petethepig): this is largely same function as useOpenAiChatCompletions, maybe we should merge them somehow\nexport function useOpenAiSuggestions(suggestionPromptInputs: SuggestionPromptInputs) {\n  const [reply, setReply] = useState('');\n  const [replyHasStarted, setReplyHasStarted] = useState(false);\n  const [replyHasFinished, setReplyHasFinished] = useState(false);\n  const [messages, setMessages] = useState<Messages>([]);\n  const [error, setError] = useState<Error | null>(null);\n\n  const sendMessages = useCallback((messagesToSend: Messages) => {\n    setMessages(messagesToSend);\n\n    setError(null);\n\n    setReply('');\n    setReplyHasStarted(true);\n    setReplyHasFinished(false);\n\n    const stream = openai\n      .streamChatCompletions({\n        model,\n        messages: messagesToSend,\n      })\n      .pipe(\n        // Accumulate the stream content into a stream of strings, where each\n        // element contains the accumulated message so far.\n        openai.accumulateContent()\n      );\n\n    stream.subscribe({\n      next: setReply,\n      error(e) {\n        setError(e);\n        setReplyHasStarted(false);\n        setReplyHasFinished(true);\n      },\n      complete() {\n        setReplyHasStarted(false);\n        setReplyHasFinished(true);\n      },\n    });\n  }, []);\n\n  const askFollowupQuestion = useCallback(\n    (question: string): void => {\n      const messagesToAdd: Messages = [\n        {\n          role: 'assistant',\n          content: reply,\n        },\n        {\n          role: 'user',\n          content: question,\n        },\n      ];\n\n      try {\n        sendMessages([...messages, ...messagesToAdd]);\n      } catch (error) {\n        setError(error as Error);\n      }\n    },\n    [messages, reply, sendMessages]\n  );\n\n  useEffect(() => {\n    if (messages.length > 0) {\n      return;\n    }\n\n    const prompts = buildSuggestionPrompts(suggestionPromptInputs);\n\n    try {\n      sendMessages([\n        {\n          role: 'system',\n          content: prompts.system,\n        },\n        {\n          role: 'system',\n          content: prompts.user,\n        },\n      ]);\n    } catch (error) {\n      setError(error as Error);\n    }\n  }, [messages.length, suggestionPromptInputs, sendMessages]);\n\n  return {\n    reply: {\n      text: reply,\n      hasStarted: replyHasStarted,\n      hasFinished: replyHasFinished,\n      messages: messages,\n      askFollowupQuestion,\n    },\n    error,\n  };\n}\n","import { css } from '@emotion/css';\nimport { Spinner, useStyles2 } from '@grafana/ui';\nimport { InlineBanner } from '@shared/ui/InlineBanner';\nimport React from 'react';\n\nimport { AiReply } from '../../../../../../components/SceneAiPanel/components/AiReply';\nimport { FollowUpForm } from '../../../../../../components/SceneAiPanel/components/FollowUpForm';\nimport { SuggestionPromptInputs } from './domain/buildLlmSuggestionPrompts';\nimport { useAiSuggestionsPanel } from './domain/useAiSuggestionsPanel';\n\nconst getStyles = () => ({\n  title: css`\n    margin: -4px 0 4px 0;\n  `,\n  content: css``,\n});\n\ntype AiSuggestionsPanelProps = {\n  suggestionPromptInputs: SuggestionPromptInputs;\n};\n\nexport function AiSuggestionsPanel({ suggestionPromptInputs }: AiSuggestionsPanelProps) {\n  const styles = useStyles2(getStyles);\n  const { data, actions } = useAiSuggestionsPanel(suggestionPromptInputs);\n\n  return (\n    <>\n      <h6 className={styles.title}>Code Optimization Suggestions</h6>\n      <div className={styles.content}>\n        {data.isLoading && (\n          <>\n            <Spinner inline />\n            &nbsp;Analyzing...\n          </>\n        )}\n\n        {data.fetchError && (\n          <InlineBanner\n            severity=\"error\"\n            title=\"Error while fetching profiles!\"\n            message=\"Sorry for any inconvenience, please try again later.\"\n          />\n        )}\n\n        {data.llmError && (\n          <InlineBanner\n            severity=\"error\"\n            title=\"Failed to generate content using OpenAI!\"\n            error={data.llmError}\n            message=\"Sorry for any inconvenience, please try again later or if the problem persists, contact your organization admin.\"\n          />\n        )}\n\n        {data.shouldDisplayReply && <AiReply reply={data.reply} />}\n\n        {data.shouldDisplayFollowUpForm && <FollowUpForm onSubmit={actions.submitFollowupQuestion} />}\n      </div>\n    </>\n  );\n}\n","/**\n * Converts raw.githubusercontent.com URLS to github.com URLs.\n *\n * E.g. https://raw.githubusercontent.com/golang/go/master/src/runtime/netpoll_kqueue.go\n * needs to be to transformed to: https://github.com/{org}/{repo}/blob/{filepath}\n */\nexport function buildGithubUrlForFunction(url: string, startLine: unknown): string {\n  let newUrl = url;\n\n  const matches = url.match(/raw\\.githubusercontent\\.com\\/([^/]+)\\/([^/]+)\\/(.+)/);\n  if (matches) {\n    const [, org, repo, rest] = matches;\n    newUrl = `https://github.com/${org}/${repo}/blob/${rest}`;\n  }\n\n  if (startLine !== undefined && !url.includes('#')) {\n    // link to the specific line this function exists at\n    newUrl += `#L${startLine}`;\n  }\n\n  return newUrl;\n}\n","import { CallSiteProps, LineProfile } from '../../../domain/types/FunctionDetails';\n\nconst VERTICAL_LINES_PADDING = 5;\n\ntype CallSitesMap = Map<number, CallSiteProps>;\n\nexport function buildPlaceholderLineProfiles(callSitesMap: CallSitesMap) {\n  if (!callSitesMap.size) {\n    return [];\n  }\n\n  const callSites = Array.from(callSitesMap.values()).sort((a, b) => a.line - b.line);\n\n  const firstLineIndex = Math.max(0, callSites[0].line - VERTICAL_LINES_PADDING - 1);\n  const lastLineIndex = callSites[callSites.length - 1].line + VERTICAL_LINES_PADDING + 1;\n\n  const lines = [];\n\n  for (let lineNumber = firstLineIndex + 1; lineNumber < lastLineIndex; lineNumber++) {\n    const callSite = callSitesMap.get(lineNumber);\n\n    lines.push({\n      line: undefined,\n      number: lineNumber,\n      cum: callSite?.cum ?? 0,\n      flat: callSite?.flat ?? 0,\n    });\n  }\n\n  return lines;\n}\n\nexport function buildLineProfiles(fileContent: string, callSitesMap: CallSitesMap): LineProfile[] {\n  if (!callSitesMap.size) {\n    return [];\n  }\n\n  const callSites = Array.from(callSitesMap.values()).sort((a, b) => a.line - b.line);\n  const allLines = fileContent.split('\\n');\n\n  const firstLineIndex = Math.max(0, callSites[0].line - VERTICAL_LINES_PADDING - 1);\n  const lastLineIndex = Math.min(allLines.length, callSites[callSites.length - 1].line + VERTICAL_LINES_PADDING);\n\n  return allLines.slice(firstLineIndex, lastLineIndex).map((line, index) => {\n    const lineNumber = index + firstLineIndex + 1;\n    const callSite = callSitesMap.get(lineNumber);\n\n    return {\n      line,\n      number: lineNumber,\n      cum: callSite?.cum ?? 0,\n      flat: callSite?.flat ?? 0,\n    };\n  });\n}\n","import { DomainHookReturnValue } from '@shared/types/DomainHookReturnValue';\nimport { useMemo, useState } from 'react';\n\nimport { FunctionDetails, LineProfile } from '../../../domain/types/FunctionDetails';\nimport { useGitHubContext } from '../../GitHubContextProvider/useGitHubContext';\nimport { useFetchVCSFile } from '../infrastructure/useFetchVCSFile';\nimport { buildGithubUrlForFunction } from './buildGithubUrlForFunction';\nimport { buildLineProfiles, buildPlaceholderLineProfiles } from './buildLineProfiles';\n\n/**\n * View model for Code component\n */\nexport type CodeLine = LineProfile & { line: string };\n\ntype CodeContainerDomainValue = DomainHookReturnValue & { data: { lines: CodeLine[] } };\n\nexport function useCodeContainer(dataSourceUid: string, functionDetails: FunctionDetails): CodeContainerDomainValue {\n  const { isLoggedIn } = useGitHubContext();\n  const { version } = functionDetails;\n\n  const [openAiSuggestions, setOpenAiSuggestions] = useState<boolean>(false);\n\n  const {\n    fileInfo,\n    error: fetchError,\n    isFetching,\n  } = useFetchVCSFile({\n    enabled: isLoggedIn,\n    dataSourceUid,\n    localPath: functionDetails.fileName,\n    repository: version?.repository ?? '',\n    gitRef: version?.git_ref ?? '',\n    rootPath: version?.root_path ?? '',\n  });\n\n  // might be a bit costly so we memoize it\n  const lines = useMemo(\n    () =>\n      fileInfo?.content\n        ? buildLineProfiles(fileInfo.content, functionDetails.callSites)\n        : buildPlaceholderLineProfiles(functionDetails.callSites),\n    [fileInfo?.content, functionDetails.callSites]\n  );\n\n  return {\n    data: {\n      fetchError,\n      openAiSuggestions,\n      isLoadingCode: isFetching,\n      unit: functionDetails.unit,\n      githubUrl: fileInfo?.URL ? buildGithubUrlForFunction(fileInfo.URL, functionDetails.startLine) : undefined,\n      lines: lines.map((line) => ({ ...line, line: line.line ?? '???' })),\n      noCodeAvailable: Boolean(fetchError) || !lines.some((line) => line.line),\n    },\n    actions: {\n      setOpenAiSuggestions,\n    },\n  };\n}\n","import { useQuery } from '@tanstack/react-query';\n\nimport { DataSourceProxyClientBuilder } from '../../../../../../../infrastructure/series/http/DataSourceProxyClientBuilder';\nimport { PrivateVcsClient } from '../../GitHubContextProvider/infrastructure/PrivateVcsClient';\n\ntype FetchParams = {\n  enabled: boolean;\n  dataSourceUid: string;\n  repository: string;\n  gitRef: string;\n  localPath: string;\n  rootPath: string;\n};\n\ntype FetchResponse = {\n  isFetching: boolean;\n  error: Error | null;\n  fileInfo?: {\n    content: string;\n    URL: string;\n  };\n};\n\nexport function useFetchVCSFile({\n  enabled,\n  dataSourceUid,\n  repository,\n  gitRef,\n  localPath,\n  rootPath,\n}: FetchParams): FetchResponse {\n  const privateVcsClient = DataSourceProxyClientBuilder.build(dataSourceUid, PrivateVcsClient);\n  const { isFetching, error, data } = useQuery({\n    enabled: Boolean(enabled && localPath),\n    queryKey: ['vcs-file', repository, gitRef, localPath, rootPath],\n    queryFn: () =>\n      privateVcsClient\n        .getFile(repository, gitRef, localPath, rootPath)\n        .then((code) => ({\n          content: code.content,\n          URL: code.URL,\n        }))\n        .then((json) => ({ URL: json.URL, content: atob(json.content) })),\n  });\n\n  return {\n    isFetching,\n    error: privateVcsClient.isAbortError(error) ? null : error,\n    fileInfo: data,\n  };\n}\n","import { getValueFormat, ValueFormatter } from '@grafana/data';\n\ntype FormatUnit = 'nanoseconds' | 'microseconds' | 'milliseconds' | 'seconds' | 'count' | string;\n\nexport function buildUnitFormatter(unit: FormatUnit): ValueFormatter {\n  switch (unit) {\n    case 'nanoseconds':\n      return getValueFormat('ns');\n    case 'microseconds':\n      return getValueFormat('µs');\n    case 'milliseconds':\n      return getValueFormat('ms');\n    case 'seconds':\n      return getValueFormat('s');\n    case 'count':\n      return getValueFormat('short');\n    default:\n      return getValueFormat(unit);\n  }\n}\n","import { css, cx } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { LinkButton, Spinner, useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { AIButton } from '../../../../../../../components/SceneAiPanel/components/AiButton/AIButton';\nimport { buildUnitFormatter } from '../../../domain/buildUnitFormatter';\nimport { CodeLine } from '../domain/useCodeContainer';\n\ntype CodeProps = {\n  lines: CodeLine[];\n  unit: string;\n  githubUrl?: string;\n  isLoadingCode: boolean;\n  noCodeAvailable: boolean;\n  onOptimizeCodeClick: () => void;\n};\n\nexport const Code = ({ lines, unit, githubUrl, isLoadingCode, noCodeAvailable, onOptimizeCodeClick }: CodeProps) => {\n  const styles = useStyles2(getStyles);\n\n  const fmt = buildUnitFormatter(unit);\n  const formatValue = (n: number): string => {\n    if (n <= 0) {\n      return '.';\n    }\n\n    const formatted = fmt(n);\n    if (!formatted.suffix) {\n      return formatted.text;\n    }\n    return formatted.text + formatted.suffix;\n  };\n\n  // TODO: memoize\n  // Trim common indent prefixes from each line, if possible. This prevents us\n  // from rendering deeply indented code where the user would have to\n  // immediately scroll right to read the code.\n  trimIndentPrefix(lines);\n\n  // TODO: move to useCodeContainer()?\n  const [sumSelf, sumTotal] = lines.reduce(\n    ([accSelf, accTotal], { flat, cum }) => [accSelf + flat, accTotal + cum],\n    [0, 0]\n  );\n\n  return (\n    <div data-testid=\"function-details-code-container\">\n      <div className={styles.container}>\n        <div className={styles.header}>\n          <div className={styles.breakdownLabel}>\n            <h6>Breakdown per line</h6>\n            <span>\n              {isLoadingCode && <Spinner inline />}\n              {!isLoadingCode && noCodeAvailable && '(file information unavailable)'}\n            </span>\n          </div>\n\n          <div className={styles.buttons}>\n            <LinkButton\n              disabled={Boolean(isLoadingCode || !githubUrl)}\n              href={githubUrl}\n              target=\"_blank\"\n              icon=\"github\"\n              fill=\"text\"\n            >\n              View on GitHub\n            </LinkButton>\n\n            <AIButton\n              onClick={onOptimizeCodeClick}\n              disabled={isLoadingCode || noCodeAvailable}\n              interactionName=\"g_pyroscope_app_optimize_code_clicked\"\n            >\n              Optimize Code\n            </AIButton>\n          </div>\n        </div>\n      </div>\n\n      <pre className={styles.codeBlock} data-testid=\"function-details-code\">\n        <div className={cx(styles.highlighted, styles.codeBlockHeader)}>\n          {formatLine('Total:', formatValue(sumSelf), formatValue(sumTotal), ' (self, total)')}\n        </div>\n        {lines.map(({ line, number, cum: total, flat: self }) => (\n          <div key={line + number + total + self} className={self + total > 0 ? styles.highlighted : ''}>\n            {\n              // The space after `number` is relevant. It aligns the line\n              // number with the `Total:` header to mimic the pprof tool.\n              formatLine(`${number} `, formatValue(self), formatValue(total), line)\n            }\n          </div>\n        ))}\n      </pre>\n    </div>\n  );\n};\n\nconst formatLine = (lineNumber: string, self: string, total: string, rest?: string): string => {\n  // The length of each column is important. In order for tabs to render to\n  // their full width, the length of all the column widths must be one less than\n  // a multiple of 8.\n  const cols = lineNumber.padStart(7, ' ') + self.padStart(12, ' ') + total.padStart(12, ' ');\n\n  if (!rest) {\n    return cols;\n  }\n  return `${cols} ${rest}`;\n};\n\nconst trimIndentPrefix = (lines: CodeLine[]) => {\n  if (lines.length === 0) {\n    return;\n  }\n\n  let commonPrefix = getIndentPrefix(lines[0].line);\n  for (let i = 1; i < lines.length; i++) {\n    const { line } = lines[i];\n    if (line.trim() === '') {\n      // Don't count blank lines or lines with only whitespace.\n      continue;\n    }\n\n    const prefix = getIndentPrefix(line);\n    commonPrefix = longestCommonPrefix(commonPrefix, prefix);\n  }\n\n  if (!commonPrefix) {\n    // No common prefixes were found.\n    return;\n  }\n\n  // Trim the common prefix.\n  for (let i = 0; i < lines.length; i++) {\n    lines[i].line = lines[i].line.substring(commonPrefix.length);\n  }\n};\n\nconst getIndentPrefix = (text: string): string => {\n  const matches = text.match(/^[ \\t]*/);\n  return matches?.[0] ?? '';\n};\n\nconst longestCommonPrefix = (a: string, b: string): string => {\n  let prefixLen = 0;\n  for (let i = 0; i < Math.min(a.length, b.length); i++) {\n    if (a[i] !== b[i]) {\n      break;\n    }\n\n    prefixLen++;\n  }\n  return a.substring(0, prefixLen);\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    display: flex;\n    flex-direction: row;\n    align-items: flex-start;\n    width: 100%;\n  `,\n  header: css`\n    display: flex;\n    justify-content: space-between;\n    align-items: end;\n    width: 100%;\n  `,\n  breakdownLabel: css`\n    & > h6 {\n      display: inline-block;\n      margin-top: ${theme.spacing(1)};\n    }\n\n    & > span {\n      margin-left: ${theme.spacing(1)};\n      font-size: ${theme.typography.bodySmall.fontSize};\n    }\n\n    & > svg {\n      margin-left: ${theme.spacing(1)};\n    }\n  `,\n  buttons: css`\n    display: flex;\n    flex-wrap: no-wrap;\n  `,\n  codeBlock: css`\n    position: relative;\n    min-height: 240px;\n    font-size: 12px;\n    overflow-x: auto;\n    white-space: pre;\n    color: ${theme.colors.text.secondary};\n  `,\n  highlighted: css`\n    color: ${theme.colors.text.maxContrast};\n  `,\n  codeBlockHeader: css`\n    margin-bottom: 8px;\n  `,\n});\n","import { displayError } from '@shared/domain/displayStatus';\nimport { HttpClientError } from '@shared/infrastructure/http/HttpClientError';\nimport React from 'react';\n\nimport { FunctionDetails } from '../../domain/types/FunctionDetails';\nimport { AiSuggestionsPanel } from '../AiSuggestionsPanel/AiSuggestionsPanel';\nimport { useCodeContainer } from './domain/useCodeContainer';\nimport { Code } from './ui/Code';\n\ntype CodeContainerProps = {\n  dataSourceUid: string;\n  functionDetails: FunctionDetails;\n};\n\nexport function CodeContainer({ dataSourceUid, functionDetails }: CodeContainerProps) {\n  const { data, actions } = useCodeContainer(dataSourceUid, functionDetails);\n\n  if (data.fetchError && (data.fetchError as HttpClientError)?.response?.status !== 404) {\n    displayError(data.fetchError, ['Failed to fetch file information!', (data.fetchError as Error).message]);\n  }\n\n  return (\n    <>\n      <Code\n        lines={data.lines}\n        unit={data.unit}\n        githubUrl={data.githubUrl}\n        isLoadingCode={data.isLoadingCode}\n        noCodeAvailable={data.noCodeAvailable}\n        onOptimizeCodeClick={() => {\n          actions.setOpenAiSuggestions(true);\n          document.getElementById('ai-suggestions-panel')?.scrollIntoView({\n            behavior: 'smooth',\n          });\n        }}\n      />\n      <h6 id=\"ai-suggestions-panel\" style={{ height: 0, marginBottom: 0 }}></h6>\n      {data.openAiSuggestions ? (\n        <AiSuggestionsPanel\n          suggestionPromptInputs={{\n            functionDetails: functionDetails,\n            lines: data.lines,\n          }}\n        />\n      ) : null}\n    </>\n  );\n}\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, Icon, Spinner, useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { useGitHubContext } from './GitHubContextProvider/useGitHubContext';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  ellipsis: css`\n    color: ${theme.colors.primary.text};\n    text-overflow: ellipsis;\n    overflow: hidden;\n    direction: rtl;\n    white-space: nowrap;\n  `,\n});\n\ntype GitHubRepositoryProps = {\n  enableIntegration: boolean;\n  repository: {\n    name: string;\n    commitUrl: string;\n    commitName: string;\n  };\n};\n\nexport const GitHubRepository = ({ enableIntegration, repository }: GitHubRepositoryProps) => {\n  const styles = useStyles2(getStyles);\n  const { isLoginInProgress, isLoggedIn, login } = useGitHubContext();\n\n  if (!enableIntegration) {\n    return <>-</>;\n  }\n\n  // enableIntegration=true\n  if (isLoginInProgress) {\n    return (\n      <>\n        <Spinner />\n        <span>Connecting to GitHub...</span>\n      </>\n    );\n  }\n\n  // enableIntegration=true, isLoginInProgress=false\n  if (!isLoggedIn) {\n    return (\n      <Button\n        icon=\"github\"\n        variant=\"primary\"\n        onClick={login}\n        tooltip=\"Once connected, the GitHub code will be accessible only from this browser session.\"\n        tooltipPlacement=\"top\"\n      >\n        Connect to {repository.name}\n      </Button>\n    );\n  }\n\n  // enableIntegration=true, isLoginInProgress=false, isLoggedIn=true\n  return (\n    <>\n      <Icon name=\"github\" size=\"lg\" />\n      <a className={styles.ellipsis} href={repository.commitUrl} target=\"_blank\" rel=\"noreferrer\" title=\"View commit\">\n        <Icon name=\"external-link-alt\" />\n        &nbsp;\n        {repository.commitName}\n      </a>\n    </>\n  );\n};\n","import { Commit, FunctionDetails } from './types/FunctionDetails';\n\nexport type CommitWithSamples = Commit & {\n  samples: {\n    unit: string;\n    current: number;\n    total: number;\n  };\n};\n\nexport function getCommitsWithSamples(functionsDetails: FunctionDetails[], totalSamples: number): CommitWithSamples[] {\n  const commits = functionsDetails.map((details) => ({\n    ...details.commit,\n    samples: {\n      unit: details.unit ?? 'count',\n      current: Array.from(details.callSites.values()).reduce((acc, { cum }) => acc + cum, 0),\n      total: totalSamples,\n    },\n  }));\n\n  return commits;\n}\n","export const GITHUB_URL = 'https://github.com/';\n\nexport const isGitHubRepository = (repositoryUrl: string): boolean => repositoryUrl.startsWith(GITHUB_URL);\n","import { GITHUB_URL } from './isGitHubRepository';\nimport { FunctionVersion } from './types/FunctionDetails';\n\nexport function getRepositoryDetails(isGitHub: boolean, functionVersion?: FunctionVersion) {\n  if (!functionVersion?.repository) {\n    return null;\n  }\n\n  const url = functionVersion.repository;\n  const name = url.replace(GITHUB_URL, '');\n  const gitRef = functionVersion.git_ref;\n\n  return {\n    isGitHub,\n    url,\n    name,\n    commitUrl: gitRef ? `${url}/commit/${gitRef}` : url,\n    commitName: gitRef ? `${name}@${gitRef.substring(0, 7)}` : name,\n  };\n}\n","import { Function, Line, Location, Mapping, PprofProfile, Sample } from '@shared/types/PprofProfile';\n\nimport { PLACEHOLDER_COMMIT_DATA } from '../components/GitHubContextProvider/infrastructure/PrivateVcsClient';\nimport { CallSiteProps, FunctionDetails } from './types/FunctionDetails';\n\nconst buildDetails = (profile: PprofProfile, func: Function, mapping?: Mapping) => {\n  let version;\n\n  try {\n    version = mapping ? JSON.parse(profile.stringTable[Number(mapping.buildId)]) : undefined;\n  } catch {}\n\n  return {\n    name: profile.stringTable[Number(func.name)],\n    version,\n    startLine: !Number.isNaN(Number(func.startLine)) ? Number(func.startLine) : undefined,\n    fileName: profile.stringTable[Number(func.filename)],\n    callSites: new Map<number, CallSiteProps>(),\n    unit: profile.stringTable[Number(profile.sampleType[0].unit)],\n    commit: PLACEHOLDER_COMMIT_DATA,\n  };\n};\n\n// sums up the value for a particular callsite\nfunction addCallSiteValue(details: FunctionDetails, line: Line, value: number, index: number): FunctionDetails {\n  const lineNumber = Number(line.line);\n  const callSite = details.callSites.get(lineNumber) || {\n    line: Number(line.line),\n    flat: 0,\n    cum: 0,\n  };\n\n  // if the function we're interested in is at the leaf node (index=0), we have its flat value...\n  const flat = index === 0 ? value : 0; // value of the location itself\n\n  // ...if not, that's its cum value\n  // locations above the leaf node don't contribute to the sample value (their self is 0)\n  // this is what the API returns\n  const cum = value; // value of the location plus all its descendants\n\n  callSite.flat += flat;\n  callSite.cum += cum;\n\n  details.callSites.set(lineNumber, callSite);\n\n  return details;\n}\n\n// This reimplements functionality simliar to the upstream project:\n// https://github.com/google/pprof/blob/997b0b79cac0f8c2f2566c506212de67a6edc5ff/internal/report/source.go#L318\nfunction convertSample(\n  fnName: string,\n  profile: PprofProfile,\n  locations: Map<string, Location>,\n  functions: Map<string, Function>,\n  mappings: Map<string, Mapping>,\n  sample: Sample,\n  versions: Map<string, FunctionDetails>\n) {\n  const locationIdSet = new Set();\n\n  sample.locationId.forEach((locationId, index) => {\n    const location = locations.get(locationId);\n    if (!location) {\n      return;\n    }\n\n    location.line.forEach((line) => {\n      const func = functions.get(line.functionId);\n      if (!func) {\n        return;\n      }\n\n      if (profile.stringTable[Number(func.name)] !== fnName) {\n        return;\n      }\n\n      // https://github.com/google/pprof/blob/main/doc/README.md#details\n      if (locationIdSet.has(locationId)) {\n        return;\n      }\n\n      locationIdSet.add(locationId);\n\n      const details = versions.get(location.mappingId) || buildDetails(profile, func, mappings.get(location.mappingId));\n\n      versions.set(location.mappingId, addCallSiteValue(details, line, Number(sample.value[0]), index));\n    });\n  });\n}\n\nexport function convertPprofToFunctionDetails(fnName: string, profile: PprofProfile): FunctionDetails[] {\n  const versions = new Map<string, FunctionDetails>();\n\n  const locations = new Map(profile.location?.map((l) => [l.id, l]));\n  const functions = new Map(profile.function?.map((f) => [f.id, f]));\n  const mappings = new Map(profile.mapping?.map((m) => [m.id, m]));\n\n  profile.sample\n    // Sometimes a sample may not have a stack trace associated with it. This\n    // may be a bug in the Pyroscope API or it may be an idiosyncrasy of the pprof format.\n    // While it may cause some counting errors, let's skip these for now.\n    ?.filter((sample) => sample.locationId !== undefined)\n    .forEach((sample) => convertSample(fnName, profile, locations, functions, mappings, sample, versions));\n\n  return Array.from(versions.values());\n}\n","import { DataSourceProxyClientBuilder } from '../../../../../infrastructure/series/http/DataSourceProxyClientBuilder';\nimport { PrivateVcsClient } from '../components/GitHubContextProvider/infrastructure/PrivateVcsClient';\nimport { FunctionDetails } from '../domain/types/FunctionDetails';\n\nexport async function fetchCommitsInfo(\n  dataSourceUid: string,\n  functionsDetails: FunctionDetails[]\n): Promise<FunctionDetails[]> {\n  const privateVcsClient = DataSourceProxyClientBuilder.build(dataSourceUid, PrivateVcsClient);\n\n  const commits = functionsDetails.map((details) => ({\n    repositoryUrl: details?.version?.repository || '',\n    gitRef: details?.version?.git_ref || 'HEAD',\n    rootPath: details?.version?.root_path || '',\n  }));\n\n  // TODO: extract to its own hook and simplify useSceneFunctionDetailsPanel()?\n  const commitsInfo = await privateVcsClient.getCommits(commits);\n\n  commitsInfo.forEach((commit, i) => {\n    functionsDetails[i].commit = commit;\n  });\n\n  return functionsDetails;\n}\n","import { FunctionDetails } from '../../domain/types/FunctionDetails';\n\nexport const getTotalSum = (fd: FunctionDetails): number =>\n  Array.from(fd.callSites.values()).reduce((acc, { cum }) => acc + cum, 0);\n","import { FunctionDetails } from '../../domain/types/FunctionDetails';\nimport { getTotalSum } from './getTotalSum';\n\nexport const sortByTotal = (a: FunctionDetails, b: FunctionDetails) => getTotalSum(b) - getTotalSum(a);\n","import { TimeRange } from '@grafana/data';\nimport { parseQuery } from '@shared/domain/url-params/parseQuery';\nimport { useQuery } from '@tanstack/react-query';\nimport { useMemo } from 'react';\n\nimport { DataSourceProxyClientBuilder } from '../../../../../infrastructure/series/http/DataSourceProxyClientBuilder';\nimport { PprofApiClient } from '../../../infrastructure/PprofApiClient';\nimport { PLACEHOLDER_COMMIT_DATA } from '../components/GitHubContextProvider/infrastructure/PrivateVcsClient';\nimport { useGitHubContext } from '../components/GitHubContextProvider/useGitHubContext';\nimport { convertPprofToFunctionDetails } from '../domain/convertPprofToFunctionDetails';\nimport { FunctionDetails } from '../domain/types/FunctionDetails';\nimport { fetchCommitsInfo } from './fetchCommitsInfo';\nimport { sortByTotal } from './helpers/sortByTotal';\n\ntype FetchParams = {\n  dataSourceUid: string;\n  query: string;\n  timeRange: TimeRange;\n  stackTrace: string[];\n};\n\ntype FetchResponse = {\n  isFetching: boolean;\n  error: Error | null;\n  functionsDetails: FunctionDetails[];\n};\n\n// We don't expect more than 500 nodes after the selected node.\n// This will avoid downloading too much data by removing leaf nodes.\n// TODO: This could be a setting in the UI.\nconst MAX_NODES = 500;\n\n// eslint-disable-next-line sonarjs/cognitive-complexity\nexport function useFetchFunctionsDetails({ dataSourceUid, query, timeRange, stackTrace }: FetchParams): FetchResponse {\n  const { profileMetricId, labelsSelector } = parseQuery(query);\n  const [start, end] = [timeRange.from.unix(), timeRange.to.unix()];\n  const { isLoggedIn: isGitHubLogged } = useGitHubContext();\n\n  const pprofApiClient = DataSourceProxyClientBuilder.build(dataSourceUid, PprofApiClient);\n\n  const {\n    isFetching,\n    error: queryError,\n    data,\n  } = useQuery({\n    enabled: Boolean(profileMetricId && labelsSelector && stackTrace.length > 0 && start > 0 && end > 0),\n    // eslint-disable-next-line @tanstack/query/exhaustive-deps\n    queryKey: ['function-details', profileMetricId, labelsSelector, start, end, stackTrace, isGitHubLogged],\n    queryFn: async () => {\n      const pprof = await pprofApiClient.selectMergeProfileJson({\n        profileMetricId,\n        labelsSelector,\n        start,\n        end,\n        stackTrace,\n        maxNodes: MAX_NODES,\n      });\n\n      const functionsDetails = convertPprofToFunctionDetails(stackTrace[stackTrace.length - 1], pprof).sort(\n        sortByTotal\n      );\n\n      return isGitHubLogged ? fetchCommitsInfo(dataSourceUid, functionsDetails) : functionsDetails;\n    },\n  });\n\n  const functionsDetails = useMemo(\n    () =>\n      data?.length\n        ? data\n        : [\n            {\n              name: stackTrace.at(-1) as string,\n              startLine: undefined,\n              fileName: '',\n              callSites: new Map(),\n              unit: '',\n              commit: PLACEHOLDER_COMMIT_DATA,\n            },\n          ],\n    [data, stackTrace]\n  );\n\n  return {\n    isFetching,\n    error: pprofApiClient.isAbortError(queryError) ? null : queryError,\n    functionsDetails,\n  };\n}\n","// Array reprsenting one minute, hour, day, week, month, etc in seconds\nconst CUTOFFS = [60, 3600, 86400, 86400 * 7, 86400 * 30, 86400 * 365, Infinity];\n\n// Array equivalent to the above but in the string representation of the units\nconst UNITS: Intl.RelativeTimeFormatUnit[] = ['second', 'minute', 'hour', 'day', 'week', 'month', 'year'];\n\n// Intl.RelativeTimeFormat do its magic\nconst RTF = new Intl.RelativeTimeFormat('en-US', { numeric: 'auto' });\n\n/**\n * Convert a date to a relative time string, such as \"a minute ago\", \"in 2 hours\", \"yesterday\", \"3 months ago\", etc.\n *\n * Adapted from https://www.builder.io/blog/relative-time\n */\nexport function getRelativeTimeString(date: Date): string {\n  const timeMs = date.getTime();\n\n  // Get the amount of seconds between the given date and now\n  const deltaSeconds = Math.round((timeMs - Date.now()) / 1000);\n\n  // Grab the ideal cutoff unit\n  const unitIndex = CUTOFFS.findIndex((cutoff) => cutoff > Math.abs(deltaSeconds));\n\n  // Get the divisor to divide from the seconds. E.g. if our unit is \"day\" our divisor\n  // is one day in seconds, so we can divide our seconds by this to get the # of days\n  const divisor = unitIndex ? CUTOFFS[unitIndex - 1] : 1;\n\n  // Intl.RelativeTimeFormat do its magic\n  return RTF.format(Math.floor(deltaSeconds / divisor), UNITS[unitIndex]);\n}\n","import { getRelativeTimeString } from './getRelativeTimeString';\n\nconst DTF = new Intl.DateTimeFormat('en-US', {\n  year: 'numeric',\n  month: 'long',\n  day: '2-digit',\n});\n\nexport function formatCommitDate(commitDate?: Date) {\n  return commitDate ? `${DTF.format(commitDate)} (${getRelativeTimeString(commitDate)})` : '?';\n}\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { buildUnitFormatter } from '../domain/buildUnitFormatter';\nimport { formatCommitDate } from '../domain/formatCommitDate';\nimport { CommitWithSamples } from '../domain/getCommitsWithSamples';\nimport { getCommitShortMessage, getCommitShortSha } from './CommitSelect';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n  `,\n  firstLine: css`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    gap: 1em;\n  `,\n  sha: css`\n    font-family: monospace;\n  `,\n  sample: css`\n    font-size: 12px;\n  `,\n  secondLine: css`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    font-size: 12px;\n    color: ${theme.colors.text.secondary};\n  `,\n  avatar: css`\n    display: inline-block;\n    margin-right: 4px;\n    border-radius: 50%;\n    background: grey;\n    width: 16px;\n    height: 16px;\n  `,\n  message: css`\n    font-size: 12px;\n    color: ${theme.colors.text.secondary};\n  `,\n});\n\ntype CommitOptionProps = {\n  commit: CommitWithSamples;\n};\n\nexport function CommitOption({ commit }: CommitOptionProps) {\n  const styles = useStyles2(getStyles);\n\n  const { author, samples } = commit;\n\n  const commitAuthor = author.login;\n  const commitAuthorAvatarUrl = author.avatarURL;\n\n  const total = buildUnitFormatter(samples.unit)(samples.current);\n  const samplePercent = Math.round((samples.current / samples.total) * 100);\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.firstLine}>\n        <span className={styles.sha}>{getCommitShortSha(commit.sha)}</span>\n        <span className={styles.sample}>\n          {total.text}\n          {total.suffix} ({samplePercent}%)\n        </span>\n      </div>\n\n      <div className={styles.secondLine}>\n        {commitAuthorAvatarUrl && <img className={styles.avatar} src={commitAuthorAvatarUrl} alt={commitAuthor} />}\n        <span>\n          {commitAuthor} on {formatCommitDate(commit.date)}\n        </span>\n      </div>\n\n      <span className={styles.message}>{getCommitShortMessage(commit.message)}</span>\n    </div>\n  );\n}\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { Commit } from '../domain/types/FunctionDetails';\nimport { getCommitShortMessage, getCommitShortSha } from './CommitSelect';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n    align-items: center;\n    gap: 1em;\n  `,\n  sha: css`\n    font-family: monospace;\n  `,\n  message: css`\n    color: ${theme.colors.text.secondary};\n  `,\n});\n\ntype CommitOptionSelectedProps = {\n  commit: Commit;\n};\n\nexport function CommitOptionSelected({ commit }: CommitOptionSelectedProps) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.container}>\n      <span className={styles.sha}>{getCommitShortSha(commit.sha)}</span>\n      <div className={styles.message}>\n        <span>{getCommitShortMessage(commit.message)}</span>\n      </div>\n    </div>\n  );\n}\n","import { SelectableValue } from '@grafana/data';\nimport { FormatOptionLabelMeta, Select } from '@grafana/ui';\nimport React from 'react';\n\nimport { PLACEHOLDER_COMMIT_DATA } from '../components/GitHubContextProvider/infrastructure/PrivateVcsClient';\nimport { CommitWithSamples } from '../domain/getCommitsWithSamples';\nimport { CommitOption } from './CommitOption';\nimport { CommitOptionSelected } from './CommitOptionSelected';\n\ntype CommitSelectProps = {\n  commits: CommitWithSamples[];\n  selectedCommit: CommitWithSamples;\n  onChange: (commit: CommitWithSamples) => void;\n};\n\nexport function CommitSelect({ commits, selectedCommit, onChange }: CommitSelectProps) {\n  return (\n    <Select\n      options={commits.map((commit) => ({\n        label: commit.sha,\n        value: commit,\n      }))}\n      value={{\n        label: selectedCommit.sha,\n        value: selectedCommit,\n      }}\n      hideSelectedOptions\n      isSearchable={false}\n      noOptionsMessage=\"No commits found\"\n      formatOptionLabel={formatOption}\n      onChange={(item) => {\n        if (item.value) {\n          onChange(item.value);\n        }\n      }}\n    />\n  );\n}\n\nfunction formatOption(\n  item: SelectableValue<CommitWithSamples>,\n  formatOptionMeta: FormatOptionLabelMeta<CommitWithSamples>\n) {\n  const { value: commit } = item;\n\n  if (!commit) {\n    return null;\n  }\n\n  const isSelected = formatOptionMeta.selectValue[0]?.value === commit;\n\n  return isSelected ? <CommitOptionSelected commit={commit} /> : <CommitOption commit={commit} />;\n}\n\nexport const getCommitShortSha = (sha: string): string => {\n  return sha === PLACEHOLDER_COMMIT_DATA.sha ? sha : sha.substring(0, 7);\n};\n\nexport const getCommitShortMessage = (message: string): string => {\n  return message.split('\\n')[0];\n};\n","import { Alert, Icon, TextLink } from '@grafana/ui';\nimport React from 'react';\n\ntype GitHubIntegrationBannerProps = {\n  onDismiss: () => void;\n};\n\nexport const GitHubIntegrationBanner = ({ onDismiss }: GitHubIntegrationBannerProps) => {\n  return (\n    <Alert severity=\"info\" title=\"Integrate with Github\" buttonContent=\"Dismiss\" onRemove={onDismiss}>\n      <p>\n        This language supports integration with <Icon name=\"github\" /> GitHub.\n      </p>\n      <p>\n        To activate this feature, you will need to add two new labels when sending profiles{' '}\n        <code>service_repository</code> and <code>service_ref</code>.{' '}\n      </p>\n      <p>\n        They should respectively be set to the full repository GitHub URL and the current{' '}\n        <TextLink href=\"https://docs.github.com/en/rest/git/refs?apiVersion=2022-11-28#about-git-references\" external>\n          git ref\n        </TextLink>{' '}\n        of the running service.\n      </p>\n      <Icon name=\"document-info\" />{' '}\n      <TextLink\n        href=\"https://grafana.com/docs/grafana-cloud/monitor-applications/profiles/pyroscope-github-integration/\"\n        external\n      >\n        Learn more\n      </TextLink>\n    </Alert>\n  );\n};\n","import { Spinner } from '@grafana/ui';\nimport React, { memo } from 'react';\n\ntype InlineSpinnerProps = {\n  isLoading: boolean;\n  children: React.ReactNode;\n};\n\nfunction InlineSpinnerComponent({ isLoading, children }: InlineSpinnerProps) {\n  return isLoading ? <Spinner inline /> : <>{children}</>;\n}\n\nexport const InlineSpinner = memo(InlineSpinnerComponent);\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2, TimeRange } from '@grafana/data';\nimport { SceneComponentProps, sceneGraph, SceneObjectBase, SceneObjectState } from '@grafana/scenes';\nimport { IconButton, InlineLabel, TextLink, Tooltip, useStyles2 } from '@grafana/ui';\nimport { displaySuccess } from '@shared/domain/displayStatus';\nimport { userStorage } from '@shared/infrastructure/userStorage';\nimport { DomainHookReturnValue } from '@shared/types/DomainHookReturnValue';\nimport { InlineBanner } from '@shared/ui/InlineBanner';\nimport { Panel } from '@shared/ui/Panel/Panel';\nimport React, { useMemo, useState } from 'react';\n\nimport { useBuildPyroscopeQuery } from '../../../../domain/useBuildPyroscopeQuery';\nimport { ProfilesDataSourceVariable } from '../../../../domain/variables/ProfilesDataSourceVariable';\nimport { CodeContainer } from './components/CodeContainer/CodeContainer';\nimport { GitHubRepository } from './components/GitHubRepository';\nimport { formatFileName } from './domain/formatFileName';\nimport { CommitWithSamples, getCommitsWithSamples } from './domain/getCommitsWithSamples';\nimport { getRepositoryDetails } from './domain/getRepositoryDetails';\nimport { isGitHubRepository } from './domain/isGitHubRepository';\nimport { FunctionDetails } from './domain/types/FunctionDetails';\nimport { StackTrace } from './domain/types/StackTrace';\nimport { useFetchFunctionsDetails } from './infrastructure/useFetchFunctionsDetails';\nimport { CommitSelect } from './ui/CommitSelect';\nimport { GitHubIntegrationBanner } from './ui/GitHubIntegrationBanner';\nimport { InlineSpinner } from './ui/InlineSpinner';\n\ninterface SceneFunctionDetailsPanelState extends SceneObjectState {}\n\nexport class SceneFunctionDetailsPanel extends SceneObjectBase<SceneFunctionDetailsPanelState> {\n  static LABEL_WIDTH = 16;\n\n  constructor() {\n    super({ key: 'function-details-panel' });\n  }\n\n  // eslint-disable-next-line sonarjs/cognitive-complexity\n  useSceneFunctionDetailsPanel = (stackTrace: StackTrace, timeRange: TimeRange): DomainHookReturnValue => {\n    const dataSourceUid = sceneGraph.findByKeyAndType(this, 'dataSource', ProfilesDataSourceVariable).useState()\n      .value as string;\n    const query = useBuildPyroscopeQuery(this, 'filters');\n\n    const {\n      functionsDetails,\n      error: fetchFunctionDetailsError,\n      isFetching,\n    } = useFetchFunctionsDetails({ dataSourceUid, query, timeRange, stackTrace });\n\n    const [prevFunctionsDetails, setPrevFunctionsDetails] = useState<FunctionDetails[]>();\n    const [currentFunctionDetails, setCurrentFunctionDetails] = useState<FunctionDetails>(functionsDetails[0]);\n    const [isGitHubBannerDismissed, setIsGitHubBannerDismissed] = useState(\n      userStorage.has(userStorage.KEYS.GITHUB_INTEGRATION)\n    );\n\n    if (functionsDetails && prevFunctionsDetails !== functionsDetails) {\n      setPrevFunctionsDetails(functionsDetails);\n\n      if (currentFunctionDetails !== functionsDetails[0]) {\n        setCurrentFunctionDetails(functionsDetails[0]);\n      }\n    }\n\n    const isGitHubRepo = isGitHubRepository(currentFunctionDetails?.version?.repository || '');\n    const isGitHubSupported = currentFunctionDetails?.fileName?.endsWith('.go');\n    const shouldDisplayGitHubBanner = !isGitHubBannerDismissed && !isGitHubRepo && isGitHubSupported;\n\n    // TODO: massage in useFetchFunctionsDetails?\n    const totalSamples = useMemo(\n      () =>\n        functionsDetails\n          .map((details) => Array.from(details.callSites.values()).reduce((acc, { cum }) => acc + cum, 0))\n          .reduce((acc, total) => acc + total, 0),\n      [functionsDetails]\n    );\n    const commits = getCommitsWithSamples(functionsDetails, totalSamples);\n    const selectedCommit = commits.find(({ sha }) => sha === currentFunctionDetails?.commit?.sha);\n\n    return {\n      data: {\n        isLoading: isFetching,\n        fetchFunctionDetailsError,\n        functionDetails: currentFunctionDetails,\n        // TODO: massage in useFetchFunctionsDetails?\n        repository: getRepositoryDetails(isGitHubRepo, currentFunctionDetails?.version),\n        commits,\n        selectedCommit,\n        isGitHubSupported,\n        shouldDisplayGitHubBanner,\n        dataSourceUid,\n      },\n      actions: {\n        selectCommit(selectedCommit: CommitWithSamples) {\n          const details = functionsDetails.find(({ commit }) => commit.sha === selectedCommit.sha);\n          setCurrentFunctionDetails(details as FunctionDetails);\n        },\n        async copyFilePathToClipboard() {\n          try {\n            if (currentFunctionDetails?.fileName) {\n              await navigator.clipboard.writeText(currentFunctionDetails.fileName);\n              displaySuccess(['File path copied to clipboard!']);\n            }\n          } catch {}\n        },\n        dismissGitHubBanner() {\n          userStorage.set(userStorage.KEYS.GITHUB_INTEGRATION, {});\n          setIsGitHubBannerDismissed(true);\n        },\n      },\n    };\n  };\n\n  static Component = ({\n    model,\n    timeRange,\n    stackTrace,\n    onClose,\n  }: SceneComponentProps<SceneFunctionDetailsPanel> & {\n    timeRange: TimeRange;\n    stackTrace: StackTrace;\n    onClose: () => void;\n  }) => {\n    const styles = useStyles2(getStyles);\n    const { data, actions } = model.useSceneFunctionDetailsPanel(stackTrace, timeRange);\n\n    return (\n      <Panel\n        className={styles.sidePanel}\n        title=\"Function Details\"\n        isLoading={false}\n        headerActions={<IconButton name=\"times-circle\" variant=\"secondary\" aria-label=\"close\" onClick={onClose} />}\n        dataTestId=\"function-details-panel\"\n      >\n        <div className={styles.content}>\n          {data.fetchFunctionDetailsError && (\n            <InlineBanner\n              severity=\"error\"\n              title=\"Error while fetching function details!\"\n              error={data.fetchFunctionDetailsError}\n            />\n          )}\n\n          <div className={styles.container}>\n            <div className={styles.row} data-testid=\"row-function-name\">\n              <InlineLabel width={SceneFunctionDetailsPanel.LABEL_WIDTH}>Function name</InlineLabel>\n              <Tooltip content={data.functionDetails.name} placement=\"top\">\n                <span className={styles.textValue}>{data.functionDetails.name}</span>\n              </Tooltip>\n            </div>\n\n            <div className={styles.row} data-testid=\"row-start-line\">\n              <InlineLabel\n                tooltip=\"The line where this function definition starts\"\n                width={SceneFunctionDetailsPanel.LABEL_WIDTH}\n              >\n                Start line\n              </InlineLabel>\n              <span className={styles.textValue}>\n                <InlineSpinner isLoading={data.isLoading}>\n                  {data.functionDetails.startLine !== undefined ? data.functionDetails.startLine : '-'}\n                </InlineSpinner>\n              </span>\n            </div>\n\n            <div className={styles.row} data-testid=\"row-file-path\">\n              <InlineLabel\n                tooltip=\"File path where that function is defined\"\n                width={SceneFunctionDetailsPanel.LABEL_WIDTH}\n              >\n                File\n              </InlineLabel>\n              <InlineSpinner isLoading={data.isLoading}>\n                {data.functionDetails.fileName ? (\n                  <>\n                    <Tooltip content={data.functionDetails.fileName} placement=\"top\">\n                      {/* adding LRM to prevent ellipsis with RTL to fail when the file name starts with non-alpha chars (e.g. \"$\")  */}\n                      <span className={styles.textValue}>&lrm;{formatFileName(data.functionDetails.fileName)}</span>\n                    </Tooltip>\n                    <IconButton\n                      name=\"clipboard-alt\"\n                      tooltip=\"Copy to clipboard\"\n                      onClick={actions.copyFilePathToClipboard}\n                    />\n                  </>\n                ) : (\n                  '-'\n                )}\n              </InlineSpinner>\n            </div>\n\n            {data.shouldDisplayGitHubBanner && (\n              <div className={styles.row} data-testid=\"row-github-banner\">\n                <GitHubIntegrationBanner onDismiss={actions.dismissGitHubBanner} />\n              </div>\n            )}\n\n            <div className={styles.row} data-testid=\"row-repository\">\n              <InlineLabel\n                tooltip=\"The repository configured for the selected service\"\n                width={SceneFunctionDetailsPanel.LABEL_WIDTH}\n              >\n                Repository\n              </InlineLabel>\n              <InlineSpinner isLoading={data.isLoading}>\n                {data.repository ? (\n                  data.repository.isGitHub ? (\n                    <GitHubRepository enableIntegration={data.isGitHubSupported} repository={data.repository} />\n                  ) : (\n                    <TextLink href={data.repository} external>\n                      {data.repository}\n                    </TextLink>\n                  )\n                ) : (\n                  '-'\n                )}\n              </InlineSpinner>\n            </div>\n\n            <div className={styles.row} data-testid=\"row-commit\">\n              <InlineLabel\n                width={SceneFunctionDetailsPanel.LABEL_WIDTH}\n                tooltip=\"The version of the application (commit) where the function is defined. Use the dropdown menu to target a specific commit.\"\n              >\n                Commit\n              </InlineLabel>\n              <InlineSpinner isLoading={data.isLoading}>\n                <CommitSelect\n                  commits={data.commits}\n                  selectedCommit={data.selectedCommit}\n                  onChange={actions.selectCommit}\n                />\n              </InlineSpinner>\n            </div>\n          </div>\n\n          <CodeContainer dataSourceUid={data.dataSourceUid} functionDetails={data.functionDetails} />\n        </div>\n      </Panel>\n    );\n  };\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  sidePanel: css`\n    flex: 1 0 50%;\n    margin-left: 8px;\n    max-width: calc(50% - 4px);\n  `,\n  title: css`\n    margin: -4px 0 4px 0;\n  `,\n  content: css`\n    padding: ${theme.spacing(1)};\n  `,\n  container: css`\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n  `,\n  row: css`\n    width: 100%;\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    padding-bottom: 10px;\n    > * {\n      margin-right: 10px !important;\n    }\n  `,\n  textValue: css`\n    // hack to have the ellipsis appear at the start of the string\n    direction: rtl;\n    text-overflow: ellipsis;\n    overflow: hidden;\n    white-space: nowrap;\n  `,\n});\n","// when using direction=rtl, the first / is ending up at the end of the string\n// so we add a / at the end of the string to make it look better\nexport const formatFileName = (fileName: string): string =>\n  fileName?.[0] === '/' ? fileName.substring(1) + '/' : fileName;\n","import { css } from '@emotion/css';\nimport { createTheme, GrafanaTheme2, LoadingState, TimeRange } from '@grafana/data';\nimport { FlameGraph } from '@grafana/flamegraph';\nimport { SceneComponentProps, SceneObjectBase, SceneObjectState, SceneQueryRunner } from '@grafana/scenes';\nimport { Spinner, useStyles2, useTheme2 } from '@grafana/ui';\nimport { displayWarning } from '@shared/domain/displayStatus';\nimport { useMaxNodesFromUrl } from '@shared/domain/url-params/useMaxNodesFromUrl';\nimport { useToggleSidePanel } from '@shared/domain/useToggleSidePanel';\nimport { getProfileMetric, ProfileMetricId } from '@shared/infrastructure/profile-metrics/getProfileMetric';\nimport { useFetchPluginSettings } from '@shared/infrastructure/settings/useFetchPluginSettings';\nimport { DomainHookReturnValue } from '@shared/types/DomainHookReturnValue';\nimport { InlineBanner } from '@shared/ui/InlineBanner';\nimport { Panel } from '@shared/ui/Panel/Panel';\nimport { PyroscopeLogo } from '@shared/ui/PyroscopeLogo';\nimport React, { useEffect, useMemo } from 'react';\nimport { Unsubscribable } from 'rxjs';\n\nimport { useBuildPyroscopeQuery } from '../../domain/useBuildPyroscopeQuery';\nimport { getSceneVariableValue } from '../../helpers/getSceneVariableValue';\nimport { buildFlameGraphQueryRunner } from '../../infrastructure/flame-graph/buildFlameGraphQueryRunner';\nimport { PYROSCOPE_DATA_SOURCE } from '../../infrastructure/pyroscope-data-sources';\nimport { AIButton } from '../SceneAiPanel/components/AiButton/AIButton';\nimport { SceneAiPanel } from '../SceneAiPanel/SceneAiPanel';\nimport { SceneExportMenu } from './components/SceneExportMenu/SceneExportMenu';\nimport { useGitHubIntegration } from './components/SceneFunctionDetailsPanel/domain/useGitHubIntegration';\nimport { SceneFunctionDetailsPanel } from './components/SceneFunctionDetailsPanel/SceneFunctionDetailsPanel';\n\ninterface SceneFlameGraphState extends SceneObjectState {\n  $data: SceneQueryRunner;\n  lastTimeRange?: TimeRange;\n  exportMenu: SceneExportMenu;\n  aiPanel: SceneAiPanel;\n  functionDetailsPanel: SceneFunctionDetailsPanel;\n}\n\n// I've tried to use a SplitLayout for the body without any success (left: flame graph, right: explain flame graph content)\n// without success: the flame graph dimensions are set in runtime and do not change when the user resizes the layout\nexport class SceneFlameGraph extends SceneObjectBase<SceneFlameGraphState> {\n  constructor() {\n    super({\n      key: 'flame-graph',\n      $data: new SceneQueryRunner({\n        datasource: PYROSCOPE_DATA_SOURCE,\n        queries: [],\n      }),\n      lastTimeRange: undefined,\n      exportMenu: new SceneExportMenu(),\n      aiPanel: new SceneAiPanel(),\n      functionDetailsPanel: new SceneFunctionDetailsPanel(),\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  onActivate() {\n    let dataSubscription: Unsubscribable | undefined;\n\n    const stateSubscription = this.subscribeToState((newState, prevState) => {\n      if (newState.$data === prevState.$data) {\n        return;\n      }\n\n      if (dataSubscription) {\n        dataSubscription.unsubscribe();\n      }\n\n      dataSubscription = newState.$data?.subscribeToState((newDataState) => {\n        if (newDataState.data?.state === LoadingState.Done) {\n          this.setState({ lastTimeRange: newDataState.data.timeRange });\n        }\n      });\n    });\n\n    return () => {\n      stateSubscription.unsubscribe();\n      dataSubscription?.unsubscribe();\n    };\n  }\n\n  buildTitle() {\n    const serviceName = getSceneVariableValue(this, 'serviceName');\n    const profileMetricId = getSceneVariableValue(this, 'profileMetricId');\n    const profileMetricType = getProfileMetric(profileMetricId as ProfileMetricId).type;\n\n    return (\n      <>\n        <PyroscopeLogo size=\"small\" />\n        Flame graph for {serviceName} ({profileMetricType})\n      </>\n    );\n  }\n\n  useSceneFlameGraph = (): DomainHookReturnValue => {\n    const { isLight } = useTheme2();\n    const getTheme = useMemo(() => () => createTheme({ colors: { mode: isLight ? 'light' : 'dark' } }), [isLight]);\n\n    const [maxNodes] = useMaxNodesFromUrl();\n    const { settings, error: isFetchingSettingsError } = useFetchPluginSettings();\n    const { $data, lastTimeRange, exportMenu, aiPanel, functionDetailsPanel } = this.useState();\n\n    if (isFetchingSettingsError) {\n      displayWarning([\n        'Error while retrieving the plugin settings!',\n        'Some features might not work as expected (e.g. collapsed flame graphs). Please try to reload the page, sorry for the inconvenience.',\n      ]);\n    }\n\n    useEffect(() => {\n      if (maxNodes) {\n        this.setState({\n          $data: buildFlameGraphQueryRunner({ maxNodes }),\n        });\n      }\n    }, [maxNodes]);\n\n    const $dataState = $data.useState();\n    const loadingState = $dataState?.data?.state;\n\n    const fetchProfileError =\n      loadingState === LoadingState.Error\n        ? ($dataState?.data?.errors?.[0] as Error) || new Error('Unknown error!')\n        : null;\n\n    const isFetchingProfileData = loadingState === LoadingState.Loading;\n    const profileData = $dataState?.data?.series?.[0];\n    const hasProfileData = Number(profileData?.length) > 1;\n\n    const query = useBuildPyroscopeQuery(this, 'filters');\n\n    return {\n      data: {\n        title: this.buildTitle(),\n        isLoading: isFetchingProfileData,\n        isFetchingProfileData,\n        hasProfileData,\n        profileData,\n        fetchProfileError,\n        settings,\n        export: {\n          menu: exportMenu,\n          query,\n          timeRange: lastTimeRange,\n        },\n        ai: {\n          panel: aiPanel,\n          fetchParams: [{ query, timeRange: lastTimeRange }],\n        },\n        gitHub: {\n          panel: functionDetailsPanel,\n          timeRange: lastTimeRange,\n        },\n      },\n      actions: {\n        getTheme,\n      },\n    };\n  };\n\n  static Component = ({ model }: SceneComponentProps<SceneFlameGraph>) => {\n    const styles = useStyles2(getStyles);\n\n    const { data, actions } = model.useSceneFlameGraph();\n    const sidePanel = useToggleSidePanel();\n    const gitHubIntegration = useGitHubIntegration(sidePanel);\n\n    const isAiButtonDisabled = data.isLoading || !data.hasProfileData;\n\n    useEffect(() => {\n      if (isAiButtonDisabled) {\n        sidePanel.close();\n      }\n    }, [isAiButtonDisabled, sidePanel]);\n\n    const panelTitle = useMemo(\n      () => (\n        <>\n          {data.title}\n          {data.isLoading && <Spinner inline className={styles.spinner} />}\n        </>\n      ),\n      [data.isLoading, data.title, styles.spinner]\n    );\n\n    return (\n      <div className={styles.flex}>\n        <Panel\n          dataTestId=\"flame-graph-panel\"\n          className={styles.flamegraphPanel}\n          title={panelTitle}\n          isLoading={data.isLoading}\n          headerActions={\n            <AIButton\n              disabled={isAiButtonDisabled || sidePanel.isOpen('ai')}\n              onClick={() => sidePanel.open('ai')}\n              interactionName=\"g_pyroscope_app_explain_flamegraph_clicked\"\n            >\n              Explain Flame Graph\n            </AIButton>\n          }\n        >\n          {data.fetchProfileError && (\n            <InlineBanner severity=\"error\" title=\"Error while loading profile data!\" error={data.fetchProfileError} />\n          )}\n\n          {!data.fetchProfileError && (\n            <FlameGraph\n              data={data.profileData as any}\n              disableCollapsing={!data.settings?.collapsedFlamegraphs}\n              getTheme={actions.getTheme as any}\n              getExtraContextMenuButtons={gitHubIntegration.actions.getExtraFlameGraphMenuItems}\n              extraHeaderElements={\n                <data.export.menu.Component\n                  model={data.export.menu}\n                  query={data.export.query}\n                  timeRange={data.export.timeRange}\n                />\n              }\n              keepFocusOnDataChange\n            />\n          )}\n        </Panel>\n\n        {sidePanel.isOpen('ai') && (\n          <data.ai.panel.Component model={data.ai.panel} fetchParams={data.ai.fetchParams} onClose={sidePanel.close} />\n        )}\n\n        {sidePanel.isOpen('function-details') && (\n          <data.gitHub.panel.Component\n            model={data.gitHub.panel}\n            timeRange={data.gitHub.timeRange}\n            stackTrace={gitHubIntegration.data.stacktrace}\n            onClose={sidePanel.close}\n          />\n        )}\n      </div>\n    );\n  };\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  flex: css`\n    display: flex;\n  `,\n  flamegraphPanel: css`\n    min-width: 0;\n    flex-grow: 1;\n  `,\n  spinner: css`\n    margin-left: ${theme.spacing(1)};\n  `,\n});\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { SceneComponentProps, sceneGraph, SceneObjectBase, SceneObjectState } from '@grafana/scenes';\nimport { useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { FavAction } from '../../domain/actions/FavAction';\nimport { SelectAction } from '../../domain/actions/SelectAction';\nimport { FiltersVariable } from '../../domain/variables/FiltersVariable/FiltersVariable';\nimport { ProfileMetricVariable } from '../../domain/variables/ProfileMetricVariable';\nimport { ServiceNameVariable } from '../../domain/variables/ServiceNameVariable/ServiceNameVariable';\nimport { GridItemData } from '../SceneByVariableRepeaterGrid/types/GridItemData';\nimport { SceneMainServiceTimeseries } from '../SceneMainServiceTimeseries';\nimport { SceneFlameGraph } from './SceneFlameGraph';\n\ninterface SceneExploreServiceFlameGraphState extends SceneObjectState {\n  mainTimeseries: SceneMainServiceTimeseries;\n  body: SceneFlameGraph;\n}\n\nexport class SceneExploreServiceFlameGraph extends SceneObjectBase<SceneExploreServiceFlameGraphState> {\n  constructor({ item }: { item?: GridItemData }) {\n    super({\n      key: 'explore-service-flame-graph',\n      mainTimeseries: new SceneMainServiceTimeseries({\n        item,\n        headerActions: (item) => [new SelectAction({ type: 'view-labels', item }), new FavAction({ item })],\n      }),\n      body: new SceneFlameGraph(),\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this, item));\n  }\n\n  onActivate(item?: GridItemData) {\n    if (item) {\n      this.initVariables(item);\n    }\n\n    const profileMetricVariable = sceneGraph.findByKeyAndType(this, 'profileMetricId', ProfileMetricVariable);\n\n    profileMetricVariable.setState({ query: ProfileMetricVariable.QUERY_SERVICE_NAME_DEPENDENT });\n    profileMetricVariable.update(true);\n\n    return () => {\n      profileMetricVariable.setState({ query: ProfileMetricVariable.QUERY_DEFAULT });\n      profileMetricVariable.update(true);\n    };\n  }\n\n  initVariables(item: GridItemData) {\n    const { serviceName, profileMetricId, filters } = item.queryRunnerParams;\n\n    if (serviceName) {\n      const serviceNameVariable = sceneGraph.findByKeyAndType(this, 'serviceName', ServiceNameVariable);\n      serviceNameVariable.changeValueTo(serviceName);\n    }\n\n    if (profileMetricId) {\n      const profileMetricVariable = sceneGraph.findByKeyAndType(this, 'profileMetricId', ProfileMetricVariable);\n      profileMetricVariable.changeValueTo(profileMetricId);\n    }\n\n    if (filters) {\n      const filtersVariable = sceneGraph.findByKeyAndType(this, 'filters', FiltersVariable);\n      filtersVariable.setState({ filters });\n    }\n  }\n\n  // see SceneProfilesExplorer\n  getVariablesAndGridControls() {\n    return {\n      variables: [\n        sceneGraph.findByKeyAndType(this, 'serviceName', ServiceNameVariable),\n        sceneGraph.findByKeyAndType(this, 'profileMetricId', ProfileMetricVariable),\n        sceneGraph.findByKeyAndType(this, 'filters', FiltersVariable),\n      ],\n      gridControls: [],\n    };\n  }\n\n  static Component({ model }: SceneComponentProps<SceneExploreServiceFlameGraph>) {\n    const styles = useStyles2(getStyles); // eslint-disable-line react-hooks/rules-of-hooks\n    const { mainTimeseries, body } = model.useState();\n\n    // we use CSS here and Scenes Flex layout because we encountered a problem where the Flamegraph would not respect each panel width,\n    // resulting in a cropped flame graph when opening the side panel\n    return (\n      <div className={styles.flex}>\n        <div className={styles.mainTimeseries}>\n          <mainTimeseries.Component model={mainTimeseries} />\n        </div>\n        <body.Component model={body} />\n      </div>\n    );\n  }\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  flex: css`\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    gap: ${theme.spacing(1)};\n  `,\n  mainTimeseries: css`\n    height: ${SceneMainServiceTimeseries.MIN_HEIGHT}px;\n  `,\n});\n","import { SceneObject, SceneVariable } from '@grafana/scenes';\nimport { displaySuccess } from '@shared/domain/displayStatus';\nimport { reportInteraction } from '@shared/domain/reportInteraction';\nimport { logger } from '@shared/infrastructure/tracking/logger';\nimport { useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { PLUGIN_BASE_URL, ROUTES } from 'src/constants';\n\nimport { ProfilesDataSourceVariable } from '../../../../domain/variables/ProfilesDataSourceVariable';\nimport { ExplorationType } from '../../SceneProfilesExplorer';\nimport { HeaderProps } from '../Header';\nimport { builsShareableUrl } from './builsShareableUrl';\n\nasync function onClickShareLink() {\n  reportInteraction('g_pyroscope_app_share_link_clicked');\n\n  try {\n    await navigator.clipboard.writeText(builsShareableUrl().toString());\n\n    displaySuccess(['Link copied to clipboard!']);\n  } catch (error) {\n    logger.error(error as Error, { info: 'Error while creating the shareable link!' });\n  }\n}\n\nexport function useHeader({ explorationType, controls, body, $variables, onChangeExplorationType }: HeaderProps) {\n  const [timePickerControl, refreshPickerControl] =\n    explorationType === ExplorationType.DIFF_FLAME_GRAPH ? [] : (controls as [SceneObject, SceneObject]);\n\n  const dataSourceVariable = $variables.state.variables[0] as ProfilesDataSourceVariable;\n\n  const bodySceneObject = body?.state.primary as any;\n\n  if (typeof bodySceneObject.getVariablesAndGridControls !== 'function') {\n    throw new Error(\n      `Error while rendering \"${bodySceneObject.constructor.name}\": the \"getVariablesAndGridControls\" method is missing! Please implement it.`\n    );\n  }\n\n  const { variables: sceneVariables, gridControls } = bodySceneObject.getVariablesAndGridControls() as {\n    variables: SceneVariable[];\n    gridControls: SceneObject[];\n  };\n\n  const dataSourceUid = dataSourceVariable.useState().value as string;\n\n  const navigate = useNavigate();\n\n  return {\n    data: {\n      explorationType,\n      dataSourceVariable,\n      timePickerControl,\n      refreshPickerControl,\n      sceneVariables,\n      gridControls,\n      body,\n      dataSourceUid,\n    },\n    actions: {\n      onChangeExplorationType,\n      onClickShareLink,\n      onClickAdHoc: useCallback(() => {\n        reportInteraction('g_pyroscope_app_upload_ad_hoc_clicked');\n\n        navigate(`${PLUGIN_BASE_URL}${ROUTES.ADHOC}`, { state: { referrer: window.location.href } });\n      }, [navigate]),\n      onClickUserSettings: useCallback(() => {\n        reportInteraction('g_pyroscope_app_user_settings_clicked');\n\n        navigate(`${PLUGIN_BASE_URL}${ROUTES.SETTINGS}`, { state: { referrer: window.location.href } });\n      }, [navigate]),\n    },\n  };\n}\n","import { dateMath } from '@grafana/data';\n\nimport { getDefaultTimeRange } from '../../../..//domain/buildTimeRange';\n\nexport function builsShareableUrl(): URL {\n  const shareableUrl = new URL(window.location.toString());\n  const { searchParams } = shareableUrl;\n\n  if (!searchParams.get('from')) {\n    searchParams.set('from', getDefaultTimeRange().from);\n  }\n  if (!searchParams.get('to')) {\n    searchParams.set('to', getDefaultTimeRange().to);\n  }\n\n  ['from', 'to', 'from-2', 'to-2', 'from-3', 'to-3', 'diffFrom', 'diffTo', 'diffFrom-2', 'diffTo-2'].forEach((name) => {\n    const value = searchParams.get(name);\n    if (value) {\n      searchParams.set(name, String(dateMath.parse(value)!.valueOf()));\n    }\n  });\n\n  return shareableUrl;\n}\n","import { css, cx } from '@emotion/css';\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { Button, useStyles2 } from '@grafana/ui';\nimport { noOp } from '@shared/domain/noOp';\nimport React, { Fragment } from 'react';\n\ntype ExplorationTypeSelectorProps = {\n  options: Array<SelectableValue<string>>;\n  value: string;\n  onChange: (newValue: string) => void;\n};\n\nexport function ExplorationTypeSelector({ options, value, onChange }: ExplorationTypeSelectorProps) {\n  const styles = useStyles2(getStyles);\n\n  const activeIndex = options.findIndex((o) => o.value === value);\n\n  const getButtonVariant = (currentIndex: number) => {\n    if (activeIndex === options.length - 1) {\n      // \"Favorites\" is the last option, so in this case we don't want all the previous buttons to be active\n      return currentIndex === activeIndex ? 'primary' : 'secondary';\n    }\n\n    return currentIndex <= activeIndex ? 'primary' : 'secondary';\n  };\n\n  return (\n    <div className={styles.explorationTypeContainer} data-testid=\"exploration-types\">\n      <div className={styles.label}>Exploration</div>\n\n      <div className={styles.breadcrumb}>\n        {options.map((option, i) => {\n          const isActive = value === option.value;\n          const variant = getButtonVariant(i);\n          const isPrimary = variant === 'primary';\n          const extraClasses = [isActive && 'active', isPrimary && 'primary'];\n\n          return (\n            <Fragment key={option.value}>\n              <Button\n                className={cx(styles.button, ...extraClasses)}\n                variant={variant}\n                size=\"sm\"\n                aria-label={option.label}\n                icon={option.icon as any}\n                onClick={isActive ? noOp : () => onChange(option.value as string)}\n                tooltip={option.description}\n                tooltipPlacement=\"top\"\n                data-testid={isActive ? 'is-active' : undefined}\n              >\n                {option.label}\n              </Button>\n\n              {/* add a connection only for buttons before \"Diff flame graph\" and \"Favorites\" */}\n              {i < options.length - 3 && (\n                <div\n                  className={\n                    activeIndex !== options.length - 1 && i <= activeIndex - 1\n                      ? cx(styles.arrow, 'arrow', ...extraClasses)\n                      : styles.arrow\n                  }\n                />\n              )}\n            </Fragment>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  explorationTypeContainer: css`\n    display: flex;\n    align-items: center;\n  `,\n  label: css`\n    display: flex;\n    gap: 2px;\n    align-items: center;\n    font-size: 14px;\n    margin-right: ${theme.spacing(1)};\n\n    ${theme.breakpoints.down('xxl')} {\n      display: none;\n    }\n  `,\n  breadcrumb: css`\n    display: flex;\n    align-items: center;\n    height: 32px;\n    line-height: 32px;\n\n    .active {\n      background-color: ${theme.colors.primary.main};\n    }\n\n    .arrow.primary {\n      background-color: ${theme.colors.primary.main};\n    }\n\n    & button.primary:not(.active),\n    & .arrow.primary:not(.active) {\n      opacity: 0.7;\n    }\n\n    & button.primary:not(.active):hover {\n      opacity: 1;\n      background-color: ${theme.colors.primary.main};\n    }\n  `,\n  button: css`\n    height: 27px;\n    line-height: 27px;\n    border-radius: 15px;\n\n    &:hover {\n      border-color: ${theme.colors.primary.main};\n    }\n\n    &.active:hover {\n      cursor: default;\n      background-color: ${theme.colors.primary.main};\n    }\n\n    &:nth-last-child(2) {\n      margin-left: ${theme.spacing(1)};\n    }\n\n    &:nth-last-child(1) {\n      margin-left: ${theme.spacing(2)};\n    }\n  `,\n  arrow: css`\n    background-color: ${theme.colors.text.disabled};\n    width: 10px;\n    height: 2px;\n  `,\n});\n","import { css, cx } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useChromeHeaderHeight } from '@grafana/runtime';\nimport { Field, Icon, IconButton, useStyles2 } from '@grafana/ui';\nimport { PluginInfo } from '@shared/ui/PluginInfo';\nimport React from 'react';\n\nimport { GiveFeedbackButton } from '../../GiveFeedbackButton';\nimport { SceneProfilesExplorer, SceneProfilesExplorerState } from '../SceneProfilesExplorer';\nimport { useHeader } from './domain/useHeader';\nimport { ExplorationTypeSelector } from './ui/ExplorationTypeSelector';\n\nexport type HeaderProps = {\n  explorationType: SceneProfilesExplorerState['explorationType'];\n  controls: SceneProfilesExplorerState['controls'];\n  body: SceneProfilesExplorerState['body'];\n  $variables: SceneProfilesExplorerState['$variables'];\n  onChangeExplorationType: (explorationType: string) => void;\n};\n\nexport function Header(props: HeaderProps) {\n  const chromeHeaderHeight = useChromeHeaderHeight?.();\n  const styles = useStyles2(getStyles, chromeHeaderHeight ?? 0);\n\n  const { data, actions } = useHeader(props);\n\n  const { explorationType, dataSourceVariable, timePickerControl, refreshPickerControl, sceneVariables, gridControls } =\n    data;\n\n  return (\n    <div className={styles.header} data-testid=\"allControls\">\n      <GiveFeedbackButton />\n\n      <div className={styles.appControls} data-testid=\"appControls\">\n        <div className={styles.appControlsLeft}>\n          <ExplorationTypeSelector\n            options={SceneProfilesExplorer.EXPLORATION_TYPE_OPTIONS}\n            value={explorationType as string}\n            onChange={actions.onChangeExplorationType}\n          />\n        </div>\n\n        <div className={styles.appControlsRight}>\n          {timePickerControl && (\n            <timePickerControl.Component key={timePickerControl.state.key} model={timePickerControl} />\n          )}\n          {refreshPickerControl && (\n            <refreshPickerControl.Component key={refreshPickerControl.state.key} model={refreshPickerControl} />\n          )}\n\n          <div className={styles.appMiscButtons}>\n            <IconButton name=\"upload\" tooltip=\"Upload ad hoc profiles\" onClick={actions.onClickAdHoc} />\n\n            <IconButton name=\"cog\" tooltip=\"View/edit tenant settings\" onClick={actions.onClickUserSettings} />\n\n            <IconButton\n              name=\"share-alt\"\n              tooltip=\"Copy shareable link to the clipboard\"\n              onClick={actions.onClickShareLink}\n            />\n\n            <PluginInfo />\n          </div>\n        </div>\n      </div>\n\n      <div id={`scene-controls-${explorationType}`} className={styles.sceneControls} data-testid=\"sceneControls\">\n        <Field\n          label={dataSourceVariable.state.label}\n          className={cx(styles.sceneVariable, dataSourceVariable.state.name)}\n          data-testid={dataSourceVariable.state.name}\n        >\n          <dataSourceVariable.Component model={dataSourceVariable} />\n        </Field>\n\n        {sceneVariables.map((variable) => (\n          <Field\n            key={variable.state.name}\n            label={\n              variable.state.label === 'Filters' ? (\n                <div className={styles.sceneVariableLabel}>\n                  <Icon name=\"filter\" className={styles.icon} />\n                  {variable.state.label}\n                </div>\n              ) : (\n                variable.state.label\n              )\n            }\n            className={cx(styles.sceneVariable, variable.state.name)}\n            data-testid={variable.state.name}\n          >\n            <variable.Component model={variable} />\n          </Field>\n        ))}\n\n        {gridControls.map((control) => (\n          <Field key={control.state.key} id={control.state.key} className={styles.gridControl} label=\"\">\n            <control.Component model={control} />\n          </Field>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2, chromeHeaderHeight: number) => ({\n  header: css`\n    background-color: ${theme.colors.background.canvas};\n    position: sticky;\n    top: ${chromeHeaderHeight}px;\n    z-index: 1;\n    padding-bottom: ${theme.spacing(2)};\n  `,\n  appControls: css`\n    display: flex;\n    padding: ${theme.spacing(1)} 0;\n    justify-content: space-between;\n    gap: ${theme.spacing(2)};\n  `,\n  appControlsLeft: css`\n    display: flex;\n    gap: ${theme.spacing(1)};\n  `,\n  appControlsRight: css`\n    display: flex;\n    gap: ${theme.spacing(1)};\n  `,\n  appMiscButtons: css`\n    display: flex;\n    align-items: center;\n    gap: 4px;\n    border: 1px solid ${theme.colors.border.weak};\n    background-color: ${theme.colors.background.secondary};\n    height: 32px;\n    padding: 0 ${theme.spacing(1)};\n\n    & svg {\n      width: 18px;\n      height: 18px;\n    }\n  `,\n  sceneControls: css`\n    display: flex;\n    flex-wrap: wrap;\n    gap: ${theme.spacing(1)};\n    padding: 0;\n    margin-top: 20px;\n  `,\n  sceneVariable: css`\n    display: flex;\n    margin-bottom: 0;\n\n    & #dataSource {\n      width: ${theme.spacing(32)};\n    }\n\n    &.filters {\n      flex-grow: 1;\n    }\n\n    &.compare-presets {\n      margin-left: auto;\n      text-align: right;\n    }\n  `,\n  sceneVariableLabel: css`\n    font-size: 12px;\n    font-weight: 500;\n    line-height: 15px;\n    height: 15px;\n    margin-bottom: 4px;\n    color: ${theme.colors.text.primary};\n    max-width: 480px;\n  `,\n  icon: css`\n    display: inline-block;\n    margin-right: 4px;\n  `,\n  gridControl: css`\n    margin-bottom: 0;\n\n    &#quick-filter {\n      flex: 1;\n      min-width: 112px;\n    }\n  `,\n});\n","import { css } from '@emotion/css';\nimport {\n  EmbeddedSceneState,\n  getUrlSyncManager,\n  SceneComponentProps,\n  sceneGraph,\n  SceneObject,\n  SceneObjectBase,\n  SceneObjectUrlSyncConfig,\n  SceneObjectUrlValues,\n  SceneRefreshPicker,\n  SceneTimePicker,\n  SceneTimeRange,\n  sceneUtils,\n  SceneVariableSet,\n  SplitLayout,\n} from '@grafana/scenes';\nimport { useStyles2 } from '@grafana/ui';\nimport { displayError } from '@shared/domain/displayStatus';\nimport { prepareHistoryEntry } from '@shared/domain/prepareHistoryEntry';\nimport { reportInteraction } from '@shared/domain/reportInteraction';\nimport { DomainHookReturnValue } from '@shared/types/DomainHookReturnValue';\nimport React from 'react';\n\nimport { SceneExploreAllServices } from '../../components/SceneExploreAllServices/SceneExploreAllServices';\nimport { SceneExploreFavorites } from '../../components/SceneExploreFavorites/SceneExploreFavorites';\nimport { SceneExploreServiceLabels } from '../../components/SceneExploreServiceLabels/SceneExploreServiceLabels';\nimport { SceneExploreServiceProfileTypes } from '../../components/SceneExploreServiceProfileTypes/SceneExploreServiceProfileTypes';\nimport { getDefaultTimeRange } from '../../domain/buildTimeRange';\nimport { EventViewDiffFlameGraph } from '../../domain/events/EventViewDiffFlameGraph';\nimport { EventViewServiceFlameGraph } from '../../domain/events/EventViewServiceFlameGraph';\nimport { EventViewServiceLabels } from '../../domain/events/EventViewServiceLabels';\nimport { EventViewServiceProfiles } from '../../domain/events/EventViewServiceProfiles';\nimport { FiltersVariable } from '../../domain/variables/FiltersVariable/FiltersVariable';\nimport { GroupByVariable } from '../../domain/variables/GroupByVariable/GroupByVariable';\nimport { ProfileMetricVariable } from '../../domain/variables/ProfileMetricVariable';\nimport { ProfilesDataSourceVariable } from '../../domain/variables/ProfilesDataSourceVariable';\nimport { ServiceNameVariable } from '../../domain/variables/ServiceNameVariable/ServiceNameVariable';\nimport { FavoritesDataSource } from '../../infrastructure/favorites/FavoritesDataSource';\nimport { LabelsDataSource } from '../../infrastructure/labels/LabelsDataSource';\nimport { SeriesDataSource } from '../../infrastructure/series/SeriesDataSource';\nimport { SceneLayoutSwitcher } from '../SceneByVariableRepeaterGrid/components/SceneLayoutSwitcher';\nimport { SceneNoDataSwitcher } from '../SceneByVariableRepeaterGrid/components/SceneNoDataSwitcher';\nimport { ScenePanelTypeSwitcher } from '../SceneByVariableRepeaterGrid/components/ScenePanelTypeSwitcher';\nimport { SceneQuickFilter } from '../SceneByVariableRepeaterGrid/components/SceneQuickFilter';\nimport { GridItemData } from '../SceneByVariableRepeaterGrid/types/GridItemData';\nimport { SceneExploreDiffFlameGraph } from '../SceneExploreDiffFlameGraph/SceneExploreDiffFlameGraph';\nimport { GitHubContextProvider } from '../SceneExploreServiceFlameGraph/components/SceneFunctionDetailsPanel/components/GitHubContextProvider/GitHubContextProvider';\nimport { SceneExploreServiceFlameGraph } from '../SceneExploreServiceFlameGraph/SceneExploreServiceFlameGraph';\nimport { Header } from './components/Header';\n\nexport interface SceneProfilesExplorerState extends Partial<EmbeddedSceneState> {\n  $timeRange: SceneTimeRange;\n  $variables: SceneVariableSet;\n  gridControls: Array<SceneObject & { key?: string }>;\n  explorationType?: ExplorationType;\n  body?: SplitLayout;\n}\n\nexport enum ExplorationType {\n  ALL_SERVICES = 'all',\n  PROFILE_TYPES = 'profiles',\n  LABELS = 'labels',\n  FLAME_GRAPH = 'flame-graph',\n  DIFF_FLAME_GRAPH = 'diff-flame-graph',\n  FAVORITES = 'favorites',\n}\n\nexport class SceneProfilesExplorer extends SceneObjectBase<SceneProfilesExplorerState> {\n  static EXPLORATION_TYPE_OPTIONS = [\n    {\n      value: ExplorationType.ALL_SERVICES,\n      label: 'All services',\n      description: 'Overview of all services, for any given profile type',\n    },\n    {\n      value: ExplorationType.PROFILE_TYPES,\n      label: 'Profile types',\n      description: 'Overview of all the profile types for a single service',\n    },\n    {\n      value: ExplorationType.LABELS,\n      label: 'Labels',\n      description: 'Single service label exploration and filtering',\n    },\n    {\n      value: ExplorationType.FLAME_GRAPH,\n      label: 'Flame graph',\n      description: 'Single service flame graph',\n    },\n    {\n      value: ExplorationType.DIFF_FLAME_GRAPH,\n      label: 'Diff flame graph',\n      description: 'Compare the differences between two flame graphs',\n    },\n    {\n      value: ExplorationType.FAVORITES,\n      label: 'Favorites',\n      description: 'Overview of favorited visualizations',\n      icon: 'favorite',\n    },\n  ];\n\n  static DEFAULT_EXPLORATION_TYPE = SceneProfilesExplorer.EXPLORATION_TYPE_OPTIONS[0].value;\n\n  protected _urlSync = new SceneObjectUrlSyncConfig(this, { keys: ['explorationType'] });\n\n  constructor() {\n    super({\n      key: 'profiles-explorer',\n      explorationType: undefined,\n      body: undefined,\n      $timeRange: new SceneTimeRange(getDefaultTimeRange()),\n      $variables: new SceneVariableSet({\n        // in order to sync with the URL and...\n        // ...because of a limitation of the Scenes library, we have to create them now, once, and not every time we set a new exploration type\n        // also, we prevent re-creating all variables when switching exploration type, which would lead to unecessary work and layout shifts in the UI\n        // (because values would be empty before loading, then populated after fetched)\n        // see setExplorationType() for dynamic updates\n        variables: [\n          new ProfilesDataSourceVariable(),\n          new ServiceNameVariable(),\n          new ProfileMetricVariable(),\n          new FiltersVariable({ key: 'filters' }),\n          new FiltersVariable({ key: 'filtersBaseline' }),\n          new FiltersVariable({ key: 'filtersComparison' }),\n          new GroupByVariable(),\n        ],\n      }),\n      controls: [new SceneTimePicker({ isOnCanvas: true }), new SceneRefreshPicker({ isOnCanvas: true })],\n      // these scenes also sync with the URL so...\n      // ...because of a limitation of the Scenes library, we have to create them now, once, and not every time we set a new exploration type\n      gridControls: [\n        new SceneQuickFilter({ placeholder: '' }),\n        new ScenePanelTypeSwitcher(),\n        new SceneLayoutSwitcher(),\n        new SceneNoDataSwitcher(),\n      ],\n    });\n\n    getUrlSyncManager().initSync(this);\n\n    this.registerRuntimeDataSources();\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  onActivate() {\n    const varSub = this.subscribeToVariableChanges();\n    const eventsSub = this.subscribeToEvents();\n\n    if (!this.state.explorationType) {\n      this.setExplorationType({\n        type: SceneProfilesExplorer.DEFAULT_EXPLORATION_TYPE,\n      });\n    }\n\n    return () => {\n      eventsSub.unsubscribe();\n      varSub.unsubscribe();\n    };\n  }\n\n  getUrlState() {\n    return {\n      explorationType: this.state.explorationType,\n    };\n  }\n\n  updateFromUrl(values: SceneObjectUrlValues) {\n    if (typeof values.explorationType === 'string' && values.explorationType !== this.state.explorationType) {\n      const type = values.explorationType as ExplorationType;\n      this.setExplorationType({\n        type: Object.values(ExplorationType).includes(type) ? type : SceneProfilesExplorer.DEFAULT_EXPLORATION_TYPE,\n      });\n    }\n  }\n\n  registerRuntimeDataSources() {\n    // wrapped in a try-catch to prevent error when registered twice, which can easily happen if we go back & forth to the Profiles Explorer page\n    try {\n      sceneUtils.registerRuntimeDataSource({ dataSource: new SeriesDataSource() });\n      sceneUtils.registerRuntimeDataSource({ dataSource: new FavoritesDataSource() });\n      sceneUtils.registerRuntimeDataSource({ dataSource: new LabelsDataSource() });\n    } catch (error) {\n      const { message } = error as Error;\n\n      if (!/A runtime data source with uid (.+) has already been registered/.test(message)) {\n        displayError(error as Error, [\n          'Fail to register all the runtime data sources!',\n          'The application cannot work as expected, please try reloading the page or if the problem persists, contact your organization admin.',\n        ]);\n      }\n    }\n  }\n\n  subscribeToVariableChanges() {\n    const dataSourceSub = sceneGraph\n      .findByKeyAndType(this, 'dataSource', ProfilesDataSourceVariable)\n      .subscribeToState((newState, prevState) => {\n        if (newState.value && newState.value !== prevState.value) {\n          FiltersVariable.resetAll(this);\n        }\n      });\n\n    const serviceNameSub = sceneGraph\n      .findByKeyAndType(this, 'serviceName', ServiceNameVariable)\n      .subscribeToState((newState, prevState) => {\n        if (newState.value && newState.value !== prevState.value) {\n          FiltersVariable.resetAll(this);\n        }\n      });\n\n    return {\n      unsubscribe() {\n        serviceNameSub.unsubscribe();\n        dataSourceSub.unsubscribe();\n      },\n    };\n  }\n\n  subscribeToEvents() {\n    const profilesSub = this.subscribeToEvent(EventViewServiceProfiles, (event) => {\n      this.setExplorationType({\n        type: ExplorationType.PROFILE_TYPES,\n        comesFromUserAction: true,\n        item: event.payload.item,\n      });\n    });\n\n    const labelsSub = this.subscribeToEvent(EventViewServiceLabels, (event) => {\n      this.setExplorationType({\n        type: ExplorationType.LABELS,\n        comesFromUserAction: true,\n        item: event.payload.item,\n      });\n    });\n\n    const flameGraphSub = this.subscribeToEvent(EventViewServiceFlameGraph, (event) => {\n      this.setExplorationType({\n        type: ExplorationType.FLAME_GRAPH,\n        comesFromUserAction: true,\n        item: event.payload.item,\n      });\n    });\n\n    const diffFlameGraphSub = this.subscribeToEvent(EventViewDiffFlameGraph, (event) => {\n      const { useAncestorTimeRange, clearDiffRange, baselineFilters, comparisonFilters } = event.payload;\n\n      this.setExplorationType({\n        type: ExplorationType.DIFF_FLAME_GRAPH,\n        comesFromUserAction: true,\n        bodySceneOptions: {\n          useAncestorTimeRange,\n          clearDiffRange,\n          baselineFilters,\n          comparisonFilters,\n        },\n      });\n    });\n\n    return {\n      unsubscribe() {\n        diffFlameGraphSub.unsubscribe();\n        flameGraphSub.unsubscribe();\n        labelsSub.unsubscribe();\n        profilesSub.unsubscribe();\n      },\n    };\n  }\n\n  setExplorationType({\n    type,\n    comesFromUserAction,\n    item,\n    bodySceneOptions,\n  }: {\n    type: ExplorationType;\n    comesFromUserAction?: boolean;\n    item?: GridItemData;\n    bodySceneOptions?: Record<string, any>;\n  }) {\n    if (comesFromUserAction) {\n      prepareHistoryEntry();\n      this.resetVariables(type);\n    }\n\n    this.setState({\n      explorationType: type,\n      body: this.buildBodyScene(type, item, bodySceneOptions),\n    });\n  }\n\n  resetVariables(nextExplorationType: string) {\n    sceneGraph.findByKeyAndType(this, 'quick-filter', SceneQuickFilter).reset();\n    sceneGraph.findByKeyAndType(this, 'groupBy', GroupByVariable).changeValueTo(GroupByVariable.DEFAULT_VALUE);\n    sceneGraph.findByKeyAndType(this, 'panel-type-switcher', ScenePanelTypeSwitcher).reset();\n\n    // preserve existing filters only when switching to \"Labels\", \"Flame graph\" or \"Diff flame graph\"\n    // if not, they will be added to the queries without any notice on the UI\n    if (\n      ![ExplorationType.LABELS, ExplorationType.FLAME_GRAPH, ExplorationType.DIFF_FLAME_GRAPH].includes(\n        nextExplorationType as ExplorationType\n      )\n    ) {\n      sceneGraph.findByKeyAndType(this, 'filters', FiltersVariable).reset();\n    }\n  }\n\n  buildBodyScene(explorationType: ExplorationType, item?: GridItemData, bodySceneOptions?: Record<string, any>) {\n    let primary;\n\n    switch (explorationType) {\n      case ExplorationType.PROFILE_TYPES:\n        primary = new SceneExploreServiceProfileTypes({ item });\n        break;\n\n      case ExplorationType.LABELS:\n        primary = new SceneExploreServiceLabels({ item });\n        break;\n\n      case ExplorationType.FLAME_GRAPH:\n        primary = new SceneExploreServiceFlameGraph({ item });\n        break;\n\n      case ExplorationType.DIFF_FLAME_GRAPH:\n        primary = new SceneExploreDiffFlameGraph(bodySceneOptions || {});\n        break;\n\n      case ExplorationType.FAVORITES:\n        primary = new SceneExploreFavorites();\n        break;\n\n      case ExplorationType.ALL_SERVICES:\n      default:\n        primary = new SceneExploreAllServices();\n    }\n\n    return new SplitLayout({\n      direction: 'column',\n      primary,\n    });\n  }\n\n  onChangeExplorationType = (explorationType: string) => {\n    reportInteraction('g_pyroscope_app_exploration_type_clicked', { explorationType });\n\n    this.setExplorationType({\n      type: explorationType as ExplorationType,\n      comesFromUserAction: true,\n    });\n  };\n\n  useProfilesExplorer = (): DomainHookReturnValue => {\n    const { explorationType, controls, body, $variables } = this.useState();\n\n    const dataSourceVariable = $variables.state.variables[0] as ProfilesDataSourceVariable;\n    const dataSourceUid = dataSourceVariable.useState().value as string;\n\n    return {\n      data: {\n        explorationType,\n        controls,\n        body,\n        $variables,\n        dataSourceUid,\n      },\n      actions: {\n        onChangeExplorationType: this.onChangeExplorationType,\n      },\n    };\n  };\n\n  static Component({ model }: SceneComponentProps<SceneProfilesExplorer>) {\n    const styles = useStyles2(getStyles); // eslint-disable-line react-hooks/rules-of-hooks\n\n    const { data, actions } = model.useProfilesExplorer();\n    const { explorationType, controls, body, $variables, dataSourceUid } = data;\n\n    return (\n      <GitHubContextProvider dataSourceUid={dataSourceUid}>\n        <Header\n          explorationType={explorationType}\n          controls={controls}\n          body={body}\n          $variables={$variables}\n          onChangeExplorationType={actions.onChangeExplorationType}\n        />\n\n        <div className={styles.body} data-testid=\"sceneBody\">\n          {body && <body.Component model={body} />}\n        </div>\n      </GitHubContextProvider>\n    );\n  }\n}\n\nconst getStyles = () => ({\n  body: css`\n    position: relative;\n    z-index: 0;\n    background: transparent;\n  `,\n});\n","import { useReportPageInitialized } from '@shared/infrastructure/tracking/useReportPageInitialized';\nimport React, { useMemo } from 'react';\n\nimport { SceneProfilesExplorer } from './components/SceneProfilesExplorer/SceneProfilesExplorer';\n\nexport default function ProfilesExplorerView() {\n  const sceneProfilesExplorer = useMemo(() => new SceneProfilesExplorer(), []);\n  useReportPageInitialized('explore');\n\n  return <sceneProfilesExplorer.Component model={sceneProfilesExplorer} />;\n}\n","export enum CompareTarget {\n  BASELINE = 'baseline',\n  COMPARISON = 'comparison',\n}\n","import { HttpClient } from '@shared/infrastructure/http/HttpClient';\nimport { FlamebearerProfile } from '@shared/types/FlamebearerProfile';\n\ntype UploadResponse = {\n  key: string;\n  url: string;\n  subProfiles: any[]; // TODO: define them, what are they?\n};\n\nclass FlamegraphDotComApiClient extends HttpClient {\n  constructor() {\n    super('https://flamegraph.com/api', {\n      'content-type': 'application/json',\n    });\n  }\n\n  async upload(name: string, profile: FlamebearerProfile): Promise<UploadResponse> {\n    const response = await this.fetch('/upload/v1', {\n      method: 'POST',\n      body: JSON.stringify({\n        name,\n        profile: btoa(JSON.stringify(profile)),\n        fileTypeData: {\n          units: profile.metadata.units,\n          spyName: profile.metadata.spyName,\n        },\n        type: 'json',\n      }),\n    });\n\n    const json = await response.json();\n\n    return json;\n  }\n}\n\nexport const flamegraphDotComApiClient = new FlamegraphDotComApiClient();\n","import { dateTimeParse, TimeRange } from '@grafana/data';\n\nimport { CompareTarget } from '../../../../../pages/ProfilesExplorerView/components/SceneExploreDiffFlameGraph/domain/types';\n\ntype DateParts = {\n  year: string;\n  month: string;\n  day: string;\n  hour: string;\n  minute: string;\n  second: string;\n};\n\nconst DATETIME_FORMATTER = new Intl.DateTimeFormat('fr-CA', {\n  year: 'numeric',\n  month: '2-digit',\n  day: '2-digit',\n  hour12: false,\n  hour: '2-digit',\n  minute: '2-digit',\n  second: '2-digit',\n});\n\nfunction format(date: Date): string {\n  const parts = DATETIME_FORMATTER.formatToParts(date).reduce((acc, { type, value }) => {\n    acc[type as keyof DateParts] = value;\n    return acc;\n  }, {} as DateParts);\n\n  return `${parts.year}-${parts.month}-${parts.day}_${parts.hour}${parts.minute}`;\n}\n\nfunction dateForExportFilename(timeRange: TimeRange) {\n  const from = new Date(Math.round(timeRange.from.unix() * 1000));\n  const to = new Date(Math.round(timeRange.to.unix() * 1000));\n\n  return `${format(from)}-to-${format(to)}`;\n}\n\nfunction getTimeRange(target: CompareTarget) {\n  const [fromKey, toKey] = target === CompareTarget.BASELINE ? ['diffFrom', 'diffTo'] : ['diffFrom-2', 'diffTo-2'];\n\n  const searchParams = new URLSearchParams(window.location.search);\n  const from = searchParams.get(fromKey) as string;\n  const to = searchParams.get(toKey) as string;\n\n  return {\n    raw: { from, to },\n    from: dateTimeParse(from),\n    to: dateTimeParse(to),\n  };\n}\n\nexport function getExportFilename(appName?: string) {\n  const timeRanges = [\n    'baseline',\n    dateForExportFilename(getTimeRange(CompareTarget.BASELINE)),\n    'comparison',\n    dateForExportFilename(getTimeRange(CompareTarget.COMPARISON)),\n  ];\n\n  return appName ? [appName, ...timeRanges].join('_') : ['flamegraph', ...timeRanges].join('_');\n}\n","import { displayError } from '@shared/domain/displayStatus';\nimport { reportInteraction } from '@shared/domain/reportInteraction';\nimport 'compression-streams-polyfill';\nimport saveAs from 'file-saver';\n\nimport { ExportDataProps } from '../ExportData';\nimport { flamegraphDotComApiClient } from '../infrastructure/flamegraphDotComApiClient';\nimport { getExportFilename } from './getExportFilename';\n\n/* Note: no pprof export, as the underlying API only accepts a single query (see PprofApiClient) */\nexport function useExportMenu({ profile, enableFlameGraphDotComExport }: ExportDataProps) {\n  const downloadPng = () => {\n    reportInteraction('g_pyroscope_app_export_profile', { format: 'png' });\n\n    const customExportName = getExportFilename(profile.metadata.appName);\n    const filename = `${customExportName}.png`;\n\n    // TODO use ref, this won't work for comparison side by side (??!)\n    const canvasElement = document.querySelector('canvas[data-testid=\"flameGraph\"]') as HTMLCanvasElement;\n\n    canvasElement.toBlob((blob) => {\n      if (!blob) {\n        const error = new Error('No Blob, the image cannot be created.');\n        displayError(error, ['Failed to export to png!', error.message]);\n        return;\n      }\n\n      saveAs(blob, filename);\n    }, 'image/png');\n  };\n\n  const downloadJson = () => {\n    reportInteraction('g_pyroscope_app_export_profile', { format: 'json' });\n\n    const customExportName = getExportFilename(profile.metadata.appName);\n    const filename = `${customExportName}.json`;\n    const dataStr = `data:text/json;charset=utf-8,${encodeURIComponent(JSON.stringify(profile))}`;\n\n    try {\n      saveAs(dataStr, filename);\n    } catch (error) {\n      displayError(error as Error, ['Failed to export to JSON!', (error as Error).message]);\n      return;\n    }\n  };\n\n  const uploadToFlamegraphDotCom = async () => {\n    reportInteraction('g_pyroscope_app_export_profile', { format: 'flamegraph.com' });\n\n    const customExportName = getExportFilename(profile.metadata.appName);\n\n    let response;\n\n    try {\n      response = await flamegraphDotComApiClient.upload(customExportName, profile);\n    } catch (error) {\n      displayError(error as Error, ['Failed to export to flamegraph.com!', (error as Error).message]);\n      return;\n    }\n\n    const dlLink = document.createElement('a');\n    dlLink.target = '_blank';\n    dlLink.href = response.url;\n    document.body.appendChild(dlLink);\n    dlLink.click();\n    document.body.removeChild(dlLink);\n  };\n\n  return {\n    data: {\n      shouldDisplayFlamegraphDotCom: Boolean(enableFlameGraphDotComExport),\n    },\n    actions: {\n      downloadPng,\n      downloadJson,\n      uploadToFlamegraphDotCom,\n    },\n  };\n}\n","import { Menu } from '@grafana/ui';\nimport React from 'react';\n\nimport { useExportMenu } from './domain/useExportMenu';\nimport { ExportDataProps } from './ExportData';\n\nexport function ExportMenu(props: ExportDataProps) {\n  const { actions } = useExportMenu(props);\n\n  return (\n    <Menu>\n      <Menu.Item label=\"png\" onClick={actions.downloadPng} />\n      <Menu.Item label=\"json\" onClick={actions.downloadJson} />\n    </Menu>\n  );\n}\n","import { Button, Dropdown } from '@grafana/ui';\nimport { FlamebearerProfile } from '@shared/types/FlamebearerProfile';\nimport React, { memo } from 'react';\n\nimport { ExportMenu } from './ExportMenu';\n\nexport type ExportDataProps = {\n  profile: FlamebearerProfile;\n  enableFlameGraphDotComExport?: boolean;\n};\n\nfunction ExportDataComponent(props: ExportDataProps) {\n  const { profile, enableFlameGraphDotComExport } = props;\n\n  return (\n    <Dropdown overlay={<ExportMenu profile={profile} enableFlameGraphDotComExport={enableFlameGraphDotComExport} />}>\n      <Button\n        icon=\"download-alt\"\n        size=\"sm\"\n        variant=\"secondary\"\n        fill=\"outline\"\n        aria-label=\"Export profile data\"\n        tooltip=\"Export profile data\"\n      />\n    </Dropdown>\n  );\n}\n\nexport const ExportData = memo(ExportDataComponent);\n","import { createDataFrame, DataFrameDTO, FieldType } from '@grafana/data';\n\n// eslint-disable-next-line sonarjs/cognitive-complexity\nfunction getNodes(level: number[], names: string[], diff: boolean) {\n  const nodes = [];\n  const itemOffset = diff ? 7 : 4;\n\n  for (let i = 0; i < level.length; i += itemOffset) {\n    nodes.push({\n      level: 0,\n      label: diff ? names[level[i + 6]] : names[level[i + 3]],\n      offset: level[i],\n      val: level[i + 1],\n      self: level[i + 2],\n      selfRight: diff ? level[i + 5] : 0,\n      valRight: diff ? level[i + 4] : 0,\n      valTotal: diff ? level[i + 1] + level[i + 4] : level[i + 1],\n      offsetRight: diff ? level[i + 3] : 0,\n      offsetTotal: diff ? level[i] + level[i + 3] : level[i],\n      children: [],\n    });\n  }\n\n  return nodes;\n}\n\n// eslint-disable-next-line sonarjs/cognitive-complexity\nexport function flamebearerToDataFrameDTO(levels: number[][], names: string[], unit: string, diff: boolean) {\n  if (!levels.length) {\n    return;\n  }\n\n  const nodeLevels: any[][] = [];\n\n  for (let i = 0; i < levels.length; i++) {\n    nodeLevels[i] = [];\n\n    for (const node of getNodes(levels[i], names, diff)) {\n      node.level = i;\n      nodeLevels[i].push(node);\n\n      if (i > 0) {\n        const prevNodesInLevel = nodeLevels[i].slice(0, -1);\n        const currentNodeStart =\n          prevNodesInLevel.reduce((acc, n) => n.offsetTotal + n.valTotal + acc, 0) + node.offsetTotal;\n\n        const prevLevel = nodeLevels[i - 1];\n        let prevLevelOffset = 0;\n\n        for (const prevLevelNode of prevLevel) {\n          const parentNodeStart = prevLevelOffset + prevLevelNode.offsetTotal;\n          const parentNodeEnd = parentNodeStart + prevLevelNode.valTotal;\n\n          if (parentNodeStart <= currentNodeStart && parentNodeEnd > currentNodeStart) {\n            prevLevelNode.children.push(node);\n            break;\n          } else {\n            prevLevelOffset += prevLevelNode.offsetTotal + prevLevelNode.valTotal;\n          }\n        }\n      }\n    }\n  }\n\n  const root = nodeLevels[0][0];\n  const stack = [root];\n\n  const labelValues = [];\n  const levelValues = [];\n  const selfValues = [];\n  const valueValues = [];\n  const selfRightValues = [];\n  const valueRightValues = [];\n\n  while (stack.length) {\n    const node = stack.shift();\n    labelValues.push(node.label);\n    levelValues.push(node.level);\n    selfValues.push(node.self);\n    valueValues.push(node.val);\n    selfRightValues.push(node.selfRight);\n    valueRightValues.push(node.valRight);\n    stack.unshift(...node.children);\n  }\n\n  let valueUnit = 'short';\n\n  // See format.ts#getFormatter. We have to use Grafana unit string here though.\n  switch (unit) {\n    case 'samples':\n    case 'trace_samples':\n    case 'lock_nanoseconds':\n    case 'nanoseconds':\n      valueUnit = 'ns';\n      break;\n    case 'bytes':\n      valueUnit = 'bytes';\n      break;\n  }\n\n  const fields = [\n    { name: 'level', values: levelValues },\n    { name: 'label', values: labelValues, type: FieldType.string },\n    { name: 'self', values: selfValues, config: { unit: valueUnit } },\n    { name: 'value', values: valueValues, config: { unit: valueUnit } },\n  ];\n\n  if (diff) {\n    fields.push(\n      ...[\n        {\n          name: 'selfRight',\n          values: selfRightValues,\n          config: { unit: valueUnit },\n        },\n        {\n          name: 'valueRight',\n          values: valueRightValues,\n          config: { unit: valueUnit },\n        },\n      ]\n    );\n  }\n\n  const frame: DataFrameDTO = {\n    name: 'response',\n    meta: { preferredVisualisationType: 'flamegraph' },\n    fields,\n  };\n\n  return createDataFrame(frame);\n}\n","import { createTheme } from '@grafana/data';\nimport { FlameGraph as GrafanaFlameGraph, Props } from '@grafana/flamegraph';\nimport { useTheme2 } from '@grafana/ui';\nimport React, { memo, useMemo } from 'react';\n\nimport type { FlamebearerProfile } from '../../types/FlamebearerProfile';\nimport { ExportData } from './components/ExportData';\nimport { flamebearerToDataFrameDTO } from './domain/flamebearerToDataFrameDTO';\n\ntype FlameGraphProps = {\n  profile: FlamebearerProfile;\n  diff?: boolean;\n  vertical?: boolean;\n  enableFlameGraphDotComExport?: boolean;\n  collapsedFlamegraphs?: boolean;\n  getExtraContextMenuButtons?: Props['getExtraContextMenuButtons'];\n};\n\nfunction FlameGraphComponent({\n  profile,\n  diff,\n  vertical,\n  enableFlameGraphDotComExport,\n  collapsedFlamegraphs,\n  getExtraContextMenuButtons,\n}: FlameGraphProps) {\n  const { isLight } = useTheme2();\n  const getTheme = () => createTheme({ colors: { mode: isLight ? 'light' : 'dark' } });\n\n  const dataFrame = useMemo(\n    () =>\n      flamebearerToDataFrameDTO(\n        profile.flamebearer.levels,\n        profile.flamebearer.names,\n        profile.metadata.units,\n        Boolean(diff)\n      ),\n    [profile, diff]\n  );\n\n  return (\n    <GrafanaFlameGraph\n      data={dataFrame as any}\n      disableCollapsing={!collapsedFlamegraphs}\n      extraHeaderElements={<ExportData profile={profile} enableFlameGraphDotComExport={enableFlameGraphDotComExport} />}\n      vertical={vertical}\n      getTheme={getTheme as any}\n      getExtraContextMenuButtons={getExtraContextMenuButtons}\n      keepFocusOnDataChange\n    />\n  );\n}\n\nexport const FlameGraph = memo(FlameGraphComponent);\n","import { AppEvents } from '@grafana/data';\nimport { getAppEvents } from '@grafana/runtime';\nimport { logger } from '@shared/infrastructure/tracking/logger';\n\nexport function displayError(error: Error, msgs: string[]) {\n  const context = msgs.reduce((acc, msg, i) => ({ ...acc, [`info${i + 1}`]: msg }), { handheldBy: 'displayError' });\n\n  logger.error(error, context);\n\n  getAppEvents().publish({\n    type: AppEvents.alertError.name,\n    payload: msgs,\n  });\n}\n\nexport function displayWarning(msgs: string[]) {\n  logger.warn(msgs);\n\n  getAppEvents().publish({\n    type: AppEvents.alertWarning.name,\n    payload: msgs,\n  });\n}\n\nexport function displaySuccess(msgs: string[]) {\n  getAppEvents().publish({\n    type: AppEvents.alertSuccess.name,\n    payload: msgs,\n  });\n}\n","import { config, reportInteraction as grafanaReportInteraction } from '@grafana/runtime';\nimport { ScaleDistribution } from '@grafana/schema';\nimport { ActionType } from 'xstate';\n\nimport { PYROSCOPE_APP_ID, ROUTES } from '../../constants';\nimport { LayoutType } from '../../pages/ProfilesExplorerView/components/SceneByVariableRepeaterGrid/components/SceneLayoutSwitcher';\nimport { PanelType } from '../../pages/ProfilesExplorerView/components/SceneByVariableRepeaterGrid/components/ScenePanelTypeSwitcher';\nimport { GIT_COMMIT } from '../../version';\n\nexport type PageName = 'explore' | 'settings' | 'ad_hoc';\n\n// hey future dev: don't forget to add any new value to our features tracking dashboard!\nexport type Interactions = {\n  g_pyroscope_app_page_initialized: {\n    page: PageName;\n  };\n\n  g_pyroscope_app_ad_hoc_file_dropped: {\n    fileType: string;\n  };\n  g_pyroscope_app_ad_hoc_file_removed: {};\n  g_pyroscope_app_ad_hoc_profile_metric_selected: {};\n  g_pyroscope_app_ad_hoc_profile: {};\n  g_pyroscope_app_compare_link_clicked: {};\n  g_pyroscope_app_diff_auto_select_clicked: {};\n  g_pyroscope_app_diff_choose_preset_clicked: {};\n  g_pyroscope_app_diff_learn_how_clicked: {};\n  g_pyroscope_app_diff_preset_save_clicked: {};\n  g_pyroscope_app_diff_preset_selected: {\n    value: string;\n  };\n  g_pyroscope_app_exclude_action_clicked: {};\n  g_pyroscope_app_explain_flamegraph_clicked: {};\n  g_pyroscope_app_exploration_type_clicked: {\n    explorationType: string;\n  };\n  g_pyroscope_app_export_profile: {\n    format: 'png' | 'json' | 'pprof' | 'flamegraph.com';\n  };\n  g_pyroscope_app_fav_action_clicked: {\n    favAfterClick: boolean;\n  };\n  g_pyroscope_app_filters_changed: {\n    name: string;\n    count: number;\n    operators: string[];\n  };\n  g_pyroscope_app_function_details_clicked: {};\n  g_pyroscope_app_group_by_label_clicked: {};\n  g_pyroscope_app_hide_no_data_changed: {\n    hideNoData: 'on' | 'off';\n  };\n  g_pyroscope_app_include_action_clicked: {};\n  g_pyroscope_app_layout_changed: {\n    layout: LayoutType;\n  };\n  g_pyroscope_app_open_in_explore_clicked: {};\n  g_pyroscope_app_optimize_code_clicked: {};\n  g_pyroscope_app_panel_type_changed: {\n    panelType: PanelType;\n  };\n  g_pyroscope_app_profile_metric_selected: {};\n  g_pyroscope_app_quick_filter_focused: {};\n  g_pyroscope_app_select_action_clicked: {\n    type: ActionType;\n  };\n  g_pyroscope_app_service_name_selected: {};\n  g_pyroscope_app_share_link_clicked: {};\n  g_pyroscope_app_timeseries_scale_changed: {\n    scale: ScaleDistribution;\n  };\n  g_pyroscope_app_upload_ad_hoc_clicked: {};\n  g_pyroscope_app_user_settings_clicked: {};\n};\n\nconst PROFILES_EXPLORER_PAGE_NAME = ROUTES.EXPLORE.slice(1);\n\nfunction getCurrentPage(): string {\n  const { pathname } = new URL(window.location.toString());\n  return pathname.split('/').pop() || '';\n}\n\nfunction getMetaProperties() {\n  const meta: Record<string, any> = {\n    // same naming as Faro (see src/shared/infrastructure/tracking/faro/faro.ts)\n    appRelease: config.apps[PYROSCOPE_APP_ID].version,\n    appVersion: GIT_COMMIT,\n    page: getCurrentPage(),\n  };\n\n  if (meta.page === PROFILES_EXPLORER_PAGE_NAME) {\n    // same naming as Faro (see src/shared/infrastructure/tracking/faro/faro.ts)\n    meta.view = new URLSearchParams(window.location.search).get('explorationType') || '';\n  }\n\n  return meta;\n}\n\nexport function reportInteraction<E extends keyof Interactions, P extends Interactions[E]>(\n  interactionName: E,\n  props?: P\n) {\n  grafanaReportInteraction(interactionName, {\n    props,\n    meta: getMetaProperties(),\n  });\n}\n","import { displayWarning } from '@shared/domain/displayStatus';\nimport { DEFAULT_SETTINGS } from '@shared/infrastructure/settings/PluginSettings';\nimport { useFetchPluginSettings } from '@shared/infrastructure/settings/useFetchPluginSettings';\nimport { logger } from '@shared/infrastructure/tracking/logger';\n\nimport { useUrlSearchParams } from './useUrlSearchParams';\n\nfunction useSetDefaultMaxNodes(hasMaxNodes: boolean, setMaxNodes: (newMaxNodes: number) => void) {\n  const { isFetching, error, settings } = useFetchPluginSettings({ enabled: !hasMaxNodes });\n\n  if (hasMaxNodes || isFetching) {\n    return;\n  }\n\n  if (error) {\n    displayWarning([\n      'Error while retrieving the plugin settings!',\n      'Some features might not work as expected (e.g. flame graph max nodes). Please try to reload the page, sorry for the inconvenience.',\n    ]);\n    logger.error(error);\n\n    setMaxNodes(DEFAULT_SETTINGS.maxNodes);\n\n    return;\n  }\n\n  setMaxNodes(settings!.maxNodes);\n}\n\nexport function useMaxNodesFromUrl(): [number | null, (newMaxNodes: number) => void] {\n  const { searchParams, pushNewUrl } = useUrlSearchParams();\n  const maxNodes = Number(searchParams.get('maxNodes') ?? '');\n\n  const setMaxNodes = (newMaxNodes: number) => {\n    pushNewUrl({ maxNodes: String(newMaxNodes) });\n  };\n\n  useSetDefaultMaxNodes(maxNodes > 0, setMaxNodes);\n\n  return [maxNodes, setMaxNodes];\n}\n","import { useLocation, useNavigate } from 'react-router-dom';\n\nexport function useUrlSearchParams() {\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  return {\n    searchParams: new URLSearchParams(location.search),\n    pushNewUrl: (newParams: Record<string, string>) => {\n      const newSearchParams = new URLSearchParams(window.location.search);\n\n      for (const [key, value] of Object.entries(newParams)) {\n        newSearchParams.set(key, value);\n      }\n\n      navigate({ search: newSearchParams.toString() }, { replace: true });\n    },\n  };\n}\n","export type PluginSettings = {\n  collapsedFlamegraphs: boolean;\n  maxNodes: number;\n  enableFlameGraphDotComExport: boolean;\n  enableFunctionDetails: boolean;\n};\n\nexport const DEFAULT_SETTINGS: PluginSettings = Object.freeze({\n  collapsedFlamegraphs: false,\n  maxNodes: 16384,\n  enableFlameGraphDotComExport: true,\n  enableFunctionDetails: true,\n});\n","import { ApiClient } from '../http/ApiClient';\nimport { PluginSettings } from './PluginSettings';\n\ntype ApiResponse = {\n  settings: Array<{ name: string; value: string }>;\n};\n\nclass SettingsApiClient extends ApiClient {\n  static PLUGIN_SETTING_NAME = 'pluginSettings';\n\n  async get(): Promise<PluginSettings> {\n    return super\n      .fetch('/settings.v1.SettingsService/Get', { method: 'POST', body: JSON.stringify({}) })\n      .then((response) => response.json())\n      .then((json: ApiResponse) => {\n        const setting = json.settings?.find(({ name }) => name === SettingsApiClient.PLUGIN_SETTING_NAME);\n\n        if (!setting) {\n          return {};\n        }\n\n        return JSON.parse(setting.value);\n      });\n  }\n\n  async set(newSettings: PluginSettings) {\n    return super\n      .fetch('/settings.v1.SettingsService/Set', {\n        method: 'POST',\n        body: JSON.stringify({\n          setting: {\n            name: SettingsApiClient.PLUGIN_SETTING_NAME,\n            value: JSON.stringify(newSettings),\n          },\n        }),\n      })\n      .then((response) => response.json());\n  }\n}\n\nexport const settingsApiClient = new SettingsApiClient();\n","import { useMutation, useQuery } from '@tanstack/react-query';\n\nimport { DEFAULT_SETTINGS, PluginSettings } from './PluginSettings';\nimport { settingsApiClient } from './settingsApiClient';\n\ntype FetchParams = {\n  enabled?: boolean;\n};\n\ntype FetchResponse = {\n  isFetching: boolean;\n  error: Error | null;\n  settings?: PluginSettings;\n  mutate: (newSettings: PluginSettings) => Promise<void>;\n};\n\n/**\n * Fetches the plugin settings and, if none/only some have been stored previously, returns adequate default values for the rest of the application\n */\nexport function useFetchPluginSettings({ enabled }: FetchParams = {}): FetchResponse {\n  const { isFetching, error, data } = useQuery({\n    enabled,\n    queryKey: ['settings'],\n    queryFn: () =>\n      settingsApiClient.get().then(\n        (json) =>\n          // provide defaults if any value comes null or undefined from the API (which can be the case ;))\n          Object.keys(DEFAULT_SETTINGS).reduce((acc, key) => {\n            acc[key] ??= DEFAULT_SETTINGS[key as keyof PluginSettings]; // TS luv :man_shrug:\n            return acc;\n          }, json as Record<string, any>) as PluginSettings // TS luv :man_shrug:\n      ),\n  });\n\n  const { mutateAsync: mutate } = useMutation({\n    mutationFn: (newSettings: PluginSettings) => settingsApiClient.set(newSettings),\n    networkMode: 'always',\n  });\n\n  return {\n    isFetching,\n    error: settingsApiClient.isAbortError(error) ? null : error,\n    settings: data,\n    mutate,\n  };\n}\n","import { PageName, reportInteraction } from '@shared/domain/reportInteraction';\nimport { useEffect, useState } from 'react';\n\nexport function useReportPageInitialized(page: PageName) {\n  const [initialized, setInitialized] = useState(false);\n  useEffect(() => {\n    if (!initialized) {\n      setInitialized(true);\n      reportInteraction('g_pyroscope_app_page_initialized', { page });\n    }\n  }, [page, initialized]);\n}\n"],"names":["prepareHistoryEntry","history","pushState","EventTimeseriesDataReceived","BusEventWithPayload","type","FilterKind","OperatorKind","FilterPartKind","SuggestionKind","DataSourceProxyClient","HttpClient","constructor","options","bootData","dataSourceUid","appSubUrl","config","at","super","String","user","orgId","this","LabelsApiClient","queryToMatchers","query","labelsIndex","indexOf","substring","length","fetchLabels","from","to","_post","matchers","start","end","then","response","json","fetchLabelValues","labelId","name","pathname","body","fetch","method","JSON","stringify","MemoryCacheClient","buildCacheKey","args","key","arg","get","store","set","data","delete","Map","invariant","check","message","Error","AbstractRepository","setApiClient","apiClient","setCacheClient","cacheClient","cancel","reason","abort","ApiClient","LabelsRepository","parseLabelsResponse","Array","isArray","names","Set","filter","isNotMetaLabelOrServiceName","map","label","value","parseLabelValuesResponse","assertParams","Boolean","listLabels","cacheParams","baseUrl","labelsFromCacheP","labels","fetchP","error","listLabelValues","labelValuesFromCacheP","labelValues","test","labelsRepository","areFiltersEqual","newFilters","previousFilters","newFiltersWithoutPartial","partial","previousFiltersWithoutPartial","every","find","attribute","operator","IsEmptyFilter","buildIsEmptyFilter","filtersToQuery","filters","labelsList","in","serviceNameLabel","match","unshift","replace","join","getLastFilter","isMultipleValuesOperator","isPartialFilter","isEditingOperatorMode","currentOperator","newOperator","includes","isSwitchingOperatorMode","filterUnderEdition","parseRawFilters","rawFilters","matches","matchAll","LABELS_REGEX","REGEX_CHARS_REGEX","queryToFilters","rawLabels","id","nanoid","active","split","v","trim","toggleCompleteFilters","updateFiltersAndQuery","context","isQueryUpToDate","inputParams","actions","cancelAllLoad","setFilterAttribute","assign","event","editFilterAttribute","edition","filterId","undefined","setFilterOperator","editFilterOperator","newEdition","previousOperator","part","shift","setFilterValue","editFilterValue","removeFilter","removeLastFilter","lastFilter","slice","concat","setEdition","changeInputParams","activateFilters","getFilterUnderEdition","guards","shouldSuggestAttributes","shouldSuggestOperators","shouldSuggestValues","isEditing","shouldSuggestValuesAfterOperatorEdition","shouldNotSuggestValuesAfterOperatorEdition","hasPartialFilter","shouldEditAttribute","shouldEditOperator","shouldEditValue","operatorsRepository","list","description","isPrivateLabel","startsWith","handleError","info","DOMException","logger","services","publicLabels","privateLabels","forEach","push","fetchOperators","targetFilter","suggestions","disabled","autoSuggestProxy","always","cond","target","MESSAGES","FILTER_ADD","SELECT_LABEL","SELECT_OPERATOR","SELECT_VALUE","SELECT_VALUES","TYPE_VALUE","LOADING","ERROR_LOAD","SUGGESTIONS_NONE","SUGGESTIONS_DISABLED","isRegexOperator","idle","entry","placeholder","allowCustomValue","defaultContext","on","START_INPUT","EDIT_FILTER","REMOVE_FILTER","REMOVE_LAST_FILTER","CHANGE_INPUT_PARAMS","EXECUTE_QUERY","loadLabels","isVisible","isLoading","invoke","src","onDone","items","some","onError","DISCARD_SUGGESTIONS","displayLabels","SELECT_SUGGESTION","loadLabelValues","displayLabelValues","targetOperator","multiple","noOptionsMessage","loadOperators","displayOperators","Object","freeze","initial","predictableActionArguments","states","buildStateMachine","initialContext","stateMachine","createMachine","actor","interpret","localeCompare","Intl","Collator","sensitivity","compare","placeSelectedValuesFirst","values","a","b","aIsSelected","bIsSelected","MultipleEditionSelect","selection","onCloseMenu","styles","useStyles2","getStyles","defaultValue","useMemo","selectionValues","selectionLabels","i","setValues","useState","sortedOptions","sort","onChange","useCallback","newValues","onInternalCloseMenu","MultiSelect","className","editionSelect","loadingMessage","closeMenuOnSelect","hideSelectedOptions","backspaceRemovesValue","autoFocus","isOpen","invalid","css","SingleEditionInput","onFocus","onBlur","inputRef","useRef","setInvalid","useEffect","current","focus","Input","ref","cx","onKeyUp","e","code","SingleEditionSelect","Select","noOp","ChicletAttributeOperator","onClick","onRemove","chiclet","inactiveChiclet","div","aria-label","Tag","chicletAttribute","chicletOperator","tabIndex","chicletRemoveButton","icon","ChicletAttributeOperatorValue","Tooltip","content","chicletValue","PartialChiclet","partialChiclet","colorIndex","title","activeBackgroundColor","inactiveBorderColor","theme","colors","background","primary","text","maxContrast","secondary","ChicletComponent","TypeError","Chiclet","memo","prevProps","nextProps","chicletsList","editChicletContainer","ChicletsListComponent","onClickChiclet","onRemoveChiclet","onChangeSingleSuggestion","onCloseSingleSuggestionsMenu","onCloseMultipleSuggestionsMenu","data-testid","ChicletsList","select","SingleSelect","onKeyDown","setIsOpen","setTimeout","useEnsureIsOpenHack","DisabledSelect","MultipleSelect","onInternalKeyDown","queryBuilder","controls","executeButton","QueryBuilderComponent","props","internalProps","onChangeQuery","send","setInternalProps","subscribe","stop","useStateMachine","useChicletHandlers","onSingleSelectKeyDown","onCloseSingleMenu","onMultipleSelectKeyDown","onCloseMultipleMenu","queryBuilderId","suggestion","previousSuggestionsIsVisible","state","usePrevious","document","querySelector","blur","useSelectHandlers","onClickExecute","autoExecute","onTransition","off","Button","tooltip","QueryBuilder","getProfileMetric","profileMetricId","PROFILE_METRICS","group","unit","PYROSCOPE_DATA_SOURCE","uid","PYROSCOPE_SERIES_DATA_SOURCE","PYROSCOPE_FAVORITES_DATA_SOURCE","PYROSCOPE_LABELS_DATA_SOURCE","ProfileMetricVariable","QueryVariable","onActivate","setState","DEFAULT_VALUE","update","force","loading","lastValueFrom","getValueOptions","buildCascaderOptions","optionsMap","profileMetric","nameSpaceServices","datasource","QUERY_DEFAULT","refresh","VariableRefresh","onTimeRangeChanged","onSelect","newValue","reportInteraction","skipUrlSync","changeValueTo","bind","addActivationHandler","QUERY_SERVICE_NAME_DEPENDENT","Component","model","cascaderOptions","toString","Icon","iconError","size","Cascader","width","separator","displayAllSelectedLevels","initialValue","changeOnSelect","ServiceNameVariable","serviceName","serviceNameFromStorage","userStorage","KEYS","PROFILES_EXPLORER","subscribeToState","newState","prevState","storage","selectNewValue","QUERY_PROFILE_METRIC_DEPENDENT","serviceNames","serviceId","parts","currentPart","currentValues","currentOptions","level","existingOption","o","newOption","buildServiceNameCascaderOptions","useBuildPyroscopeQuery","sceneObject","filterKey","sceneGraph","findByKeyAndType","filterExpression","FiltersVariable","ProfilesDataSourceVariable","DataSourceVariable","dataSource","pluginId","selectDefaultDataSource","convertPyroscopeToVariableFilter","searchForFilter","found","filtersWithoutFound","f","addToFilters","filterToAdd","includeLabelValue","filterForInclude","foundValues","add","excludeLabelValue","filterForExclude","clearLabelValue","filterForClear","filteredValues","isFilterValid","AdHocFiltersVariable","reset","resetAll","dataSourceSub","unsubscribe","expressionBuilder","count","operators","uniq","getSceneVariableValue","variableName","lookupVariable","getValue","getTimeRange","unix","PanelType","ScenePanelTypeSwitcher","SceneObjectBase","getUrlState","panelType","updateFromUrl","stateUpdate","DEFAULT_PANEL_TYPE","_urlSync","SceneObjectUrlSyncConfig","keys","OPTIONS","RadioButtonGroup","fullWidth","getColorByIndex","index","visTheme","theme2","visualization","getColorByName","palette","getSeriesLabelFieldName","metricField","getSeriesStatsValue","series","displayName","meta","stats","s","parseQuery","labelsSelector","m","withPreventInvalidQuery","queryRunner","profileTypeId","labelSelector","queries","refId","buildErrorData","interpolate","errorMsg","LoadingState","errors","timeRange","buildTimeSeriesQueryRunner","groupBy","limit","completeFilters","selector","SceneQueryRunner","queryType","addRefId","source","pipe","d","merge","addStats","totalSeriesCount","maxValue","Number","NEGATIVE_INFINITY","allValuesSum","fields","field","reduce","acc","SceneLabelValuesBarGauge","item","sub","$data","Done","getConfig","publishEvent","max","groupByLabel","queryRunnerParams","reduceOptions","calcs","orientation","VizOrientation","Horizontal","displayMode","BarGaugeDisplayMode","Gradient","valueMode","BarGaugeValueMode","Text","showUnfilled","sizing","BarGaugeSizing","Manual","titleSize","valueSize","namePlacement","BarGaugeNamePlacement","Top","minVizHeight","maxVizHeight","legend","showLegend","fieldConfig","defaults","min","thresholds","mode","ThresholdsMode","Percentage","steps","overrides","getOverrides","startColorIndex","matcher","FieldMatcherID","byFrameRefID","properties","fixedColor","headerActions","PanelBuilders","bargauge","setTitle","setData","SceneDataTransformer","transformations","setHeaderActions","build","formatSingleSeriesDisplayName","metricFieldUnit","allValuesSumFormatted","getValueFormat","maxValueFormatted","suffix","SceneLabelValuesHistogram","legendPlacement","TooltipDisplayMode","Single","SortOrder","None","LegendDisplayMode","List","placement","custom","lineWidth","histogram","SceneLabelValuesTable","cardinality","unitValue","filterable","cellOptions","span","container","table","DataTransformerID","reducers","labelsToFields","filterFieldsByName","exclude","renameByRegex","regex","renamePattern","sortBy","desc","computeRoundedTimeRange","Math","floor","valueOf","pLimit","LabelsDataSource","RuntimeDataSource","FieldType","other","getParams","scopedVars","range","__sceneObject","labelName","metricFindQuery","_","isActive","warn","variable","labelsWithValuesAndCount","Promise","all","sortedLabels","testDatasource","status","MAX_TIMESERIES_LABEL_VALUES","getProfileMetricLabel","SCALE_TYPES","scaleDistribution","ScaleDistribution","Linear","Log","log","SceneTimeseriesMenu","buildMenuItems","addToInvestigationLink","scaleType","menuItems","subMenu","option","onClickScaleOption","iconClassName","onClickExplore","existingAddToInvestigationItem","scale","getAncestor","SceneLabelValuesTimeseries","changeScale","exploreUrl","rawTimeRange","exploreState","toURLRange","panelsState","subUrl","urlUtil","renderUrl","panes","schemaVersion","getExploreUrl","raw","getInterpolatedQuery","window","open","timeseries","nonInterpolatedQuery","entries","useGetInvestigationPluginLinkContext","parsedQuery","titleParts","origin","url","location","href","logoPath","PyroscopeLogo","useUpdateMenuItems","link","extensionPointId","pluginLinks","usePluginLinks","links","useGetPluginExtensionLink","VizPanelMenu","annotations","displayAllValues","getAllValuesConfig","buildDescription","fillOpacity","gradientMode","GraphGradientMode","Opacity","pointSize","updateItem","partialItem","updatedItem","hasOwnProperty","isEqual","runQueries","axisLabel","clearFieldConfigCache","setMenu","vizPanelBuilder","BARGAUGE","TABLE","HISTOGRAM","TIMESERIES","throttleInterval","mousePosition","setMousePosition","x","y","updateMousePosition","throttle","clientX","clientY","addEventListener","removeEventListener","GrotNotFound","height","show404","useTheme2","useMousePosition","SVG","isDark","dark404","light404","svg","xPos","yPos","innerWidth","innerHeight","heightRatio","widthRatio","rotation","getIntermediateValue","translation","transform","transformOrigin","transition","display","ratio","EmptyState","Box","paddingY","Stack","direction","alignItems","gap","variant","justifyContent","flexDirection","SceneEmptyState","SceneErrorState","Alert","severity","LayoutType","SceneLayoutSwitcher","layout","DEFAULT_LAYOUT","SceneNoDataSwitcher","hideNoData","InlineSwitch","showLabel","checked","SceneQuickFilter","setPlaceholder","setResultsCount","resultsCount","searchText","DEFAULT_SEARCH_TEXT","clearSearchText","DEBOUNCE_DELAY","prefix","IconButton","spacing","FavoritesDataSource","getAllFavorites","favorites","areFavoritesEqual","f1","f2","exists","favorite","addFavorite","removeFavorite","textParts","interpolateQueryRunnerVariables","interpolatedParams","clone","parsedFilters","uniqBy","FavAction","isFav","isStored","buildFavorite","skipVariablesInterpolation","_variableDependency","VariableDependencyConfig","variableNames","onReferencedVariableValueChanged","favAfterClick","favedButton","notFavedbutton","tooltipPlacement","sortFavGridItems","aIsFav","bIsFav","GRID_AUTO_ROWS","SceneByVariableRepeaterGrid","buildGridItemKey","getGridColumnsTemplate","ROWS","variableSub","renderGridItems","refreshSub","subscribeToRefreshClick","quickFilterSub","subscribeToQuickFilterChange","layoutChangeSub","subscribeToLayoutChange","hideNoDataSub","subscribeToHideNoDataChange","filtersSub","subscribeToFiltersChange","originalRefresh","never","onClickRefresh","refreshButton","setAttribute","removeAttribute","quickFilter","debounce","layoutSwitcher","onChangeState","templateColumns","noDataSwitcher","filtersVariable","buildItemsData","mapOptionToItem","variableValues","filterItems","sortItemsFn","shouldRenderItems","newItems","forceRender","renderErrorState","renderEmptyState","gridItems","vizPanel","setupHideNoData","SceneCSSGridItem","autoRows","children","subscribeToEvent","payload","gridItem","gridItemKey","grid","SceneCSSGridLayout","filteredChildren","c","quickFilterScene","regexes","t","r","RegExp","Spinner","isLazy","$behaviors","behaviors","sync","DashboardCursorSync","Crosshair","EventExpandPanel","EventSelectLabel","EventViewServiceFlameGraph","EventViewServiceLabels","EventViewServiceProfiles","Events","ariaLabel","EventConstructor","SelectAction","buildEvent","lookup","selectButton","fill","SceneExploreAllServices","getVariablesAndGridControls","variables","gridControls","$variables","SceneVariableSet","SceneDrawer","subTitle","close","Drawer","subtitle","closeOnMaskClick","onClose","FavoriteVariable","SceneExploreFavorites","expandPanelSub","openExpandedPanelDrawer","drawer","parse","GroupBySelector","mainLabels","onRefresh","labelSelectorRequiredWidth","setLabelSelectorRequiredWidth","availableWidth","setAvailableWidth","useHorizontalLabelSelector","controlsContainer","useResizeObserver","onResize","element","clientWidth","mainOptions","otherOptions","fontSize","typography","textWidth","measureText","Field","selected","isClearable","GroupByVariable","RefreshPicker","noIntervalPicker","isOnCanvas","onIntervalChanged","findCurrentOption","parsedValue","MAX_MAIN_LABELS","groupByOptions","spinner","groupByErrorContainer","getMainLabels","SceneMainServiceTimeseries","supportGroupBy","initVariables","buildTimeseries","subscribeToGroupByStateChanges","timeseriesItem","buildTitle","groupByVariable","_subs","onGroupByChanged","resetTimeseries","resetFilters","MIN_HEIGHT","EventViewDiffFlameGraph","EventSelectForCompare","CompareAction","checkboxRef","showTooltip","setShowTooltip","closest","onMouseEnter","onMouseLeave","show","tooltipAnchor","Checkbox","checkbox","StatsPanel","itemStats","statsDescription","compareActionChecks","onChangeCompareTarget","color","total","inline","CompareTarget","BASELINE","COMPARISON","h1","style","compareActions","canvas","border","weak","strong","SceneStatsPanel","SceneGroupByLabels","getCompare","updateCompareActions","getStatsDescription","baselineItem","comparisonItem","getStats","updateStats","compareTarget","WIDTH_IN_PIXELS","SceneLabelValuePanel","buildPanelKey","statsPanel","timeseriesPanel","timeseriesSub","isSelected","main","buildLabelValuesGridQueryRunner","SceneLabelValuesGrid","subscribeOnceToDataChange","groupBySub","subscribeToGroupByChange","dataSub","Loading","refetchData","labelValue","loadingState","buildVizPanel","marginBottom","EventClearLabelFromFilters","EventExcludeLabelFromFilters","EventIncludeLabelInFilters","FilterButtonsComponent","include","onInclude","onExclude","onClear","isIncludeSelected","isExcludeSelected","getStatus","aria-selected","includeButton","excludeButton","FilterButtons","shape","radius","default","IncludeExcludeAction","CompareControls","onClickCompare","onClickClear","compareIsDisabled","hasSelection","has","arial-label","compareButton","clearButton","clearButtonActive","medium","initVariablesAndControls","renderBody","panelEventsSub","subscribeToPanelEvents","panelTypeChangeSub","selectLabelSub","selectLabel","selectForCompareSub","selectForCompare","includeFilterSub","includeLabelValueInFilters","excludeFilterSub","excludeLabelValueFromFilters","clearFilterSub","clearLabelValueFromFilters","subscribeToPanelTypeChange","switchToLabelNamesGrid","switchToLabelValuesGrid","buildSceneLabelNamesGrid","clearCompare","buildSceneLabelValuesGrid","groupByValue","filterToInclude","filterToExclude","filterToClear","updateStatsPanels","statsPanels","findAllObjects","panel","onClickCompareButton","baselineFilters","comparisonFilters","useAncestorTimeRange","clearDiffRange","onClickClearCompareButton","groupByVariableValue","SceneProfilesExplorer","sceneControls","wrap","control","SceneExploreServiceLabels","profileMetricVariable","timeseriesTitle","SceneFlexLayout","SceneFlexItem","minHeight","SceneExploreServiceProfileTypes","buildTimeRange","dateTimeParse","getDefaultTimeRange","formatSeriesToProfileMetrics","pyroscopeSeries","profileMetricsMap","profileMetrics","formatSeriesToServices","servicesSet","DataSourceProxyClientBuilder","ApiClientClass","cacheKey","cachedInstance","cache","clientInstance","findServiceNameAndProfileMetricId","formatSeriesResponse","labelsSet","serviceProfileMetrics","profileMetricServices","SeriesApiClient","labelNames","seriesRepository","responseFromCacheP","SeriesDataSource","fetchSeries","EventEnableSyncTimeRanges","EventSyncRefresh","EventSyncTimeRanges","SceneTimePickerWithoutSync","SceneTimePicker","hidePicker","timeZone","getTimeZone","timeRangeState","TimeRangePicker","onTimeRangeChange","fiscalYearStartMonth","onMoveBackward","onMoveForward","onZoom","onChangeTimeZone","onTimeZoneChange","onChangeFiscalYearStartMonth","isSynced","INTERVAL_STRING_REGEX","parseUrlParam","utcValue","toUtc","isValid","toISOString","epoch","parseInt","isNaN","RangeAnnotation","MutableDataFrame","addRange","isRegion","time","boolean","string","addField","TimeRangeWithAnnotationsMode","TIMERANGE_NIL","dateTime","SceneTimeRangeWithAnnotations","omit","getAncestorTimeRange","getTimeseries","updateTimeseriesAnnotation","parent","VizPanel","annotationTimeRange","annotationColor","annotationTitle","annotation","timeEnd","setAnnotationTimeRange","updateTimeseries","nullifyAnnotationTimeRange","diffFrom","diffTo","buildAnnotationTimeRange","delay","hasDelay","dateMath","evaluateTimeRange","UNSAFE_nowDelay","EventSwitchTimerangeSelectionMode","TimerangeSelectionMode","SwitchTimeRangeSelectionModeAction","newMode","dl","dt","dd","buildCompareTimeSeriesQueryRunner","BASELINE_COLORS","COLOR","Color","OVERLAY","alpha","COMPARISON_COLORS","SceneComparePanel","$timeRange","setDiffRange","findByKey","buildTimeseriesTitle","eventSub","subscribeToEvents","buildTimeSeriesPanel","formattedValue","getDiffRange","dateTimeFormat","format","systemDateFormats","fullDate","ANNOTATIONS","$annotationTimeRange","switchSub","FLAMEGRAPH","DEFAULT","annotationTimeRangeSub","timeRangeSyncEnabled","timeRangeSub","updateTitle","useDiffTimeRange","applyPreset","setTimeRange","newTimeRange","isSame","$diffTimeRange","newAnnotationTimeRange","autoSelectDiffRange","selectWholeRange","diff","round","subtract","newTitle","toggleTimeRangeSync","refreshTimeseries","SceneTimeRange","timePicker","refreshPicker","SceneRefreshPicker","onClickTimeRangeSync","enable","panelHeader","h6","colorCircle","timeControls","syncButton","shade","useToggleSidePanel","openPanelId","setOpenPanelId","onOpenHandler","setOnOpenHandler","onOpen","handler","panelId","DelayRender","shouldRender","setShouldRender","PanelMenu","menu","offset","dragClassCancel","menuButtonClass","onVisibleChange","onOpenMenu","testId","selectors","components","Panels","Panel","handleVisibility","Dropdown","overlay","ToolbarButton","iconSize","narrow","HoverWidget","dragClass","draggableRef","e2eSelectors","onPointerDown","setPointerCapture","pointerId","onPointerUp","releasePointerCapture","menuOpen","setMenuOpen","React","top","square","draggable","dragIcon","draggableIcon","untitled","menuButton","hidden","visibility","opacity","position","zIndex","right","boxSizing","borderRadius","boxShadow","shadows","z1","cursor","breakpoints","down","fontStyle","padding","TitleItem","forwardRef","rest","linkItem","headerHeight","getFocusStyles","outline","outlineOffset","transitionTimingFunction","transitionDuration","transitionProperty","PanelDescription","interactive","panelDescription","dangerouslySetInnerHTML","__html","whiteSpace","wordWrap","PanelStatus","buttonStyles","GrafanaPanelBox","titleItems","hoverHeader","hoverHeaderOffset","statusMessage","statusMessageOnClick","onCancelQuery","setWidth","childrenContainerRef","offsetWidth","hasHeader","getHeaderHeight","contentStyle","getContentStyle","headerStyles","containerStyles","backgroundColor","testid","headerContent","Streaming","streaming","pointer","rightAligned","rightActions","itemsRenderer","loadingBarContainer","LoadingBar","errorContainerFloating","headerContainer","menuItem","renderer","toRender","toArray","gridSize","borderColor","action","overflow","flexGrow","marginRight","success","textOverflow","fontWeight","hiddenMenu","left","marginLeft","panelWrap","dataTestId","AIButton","interactionName","isEnabled","isFetching","useQuery","queryKey","queryFn","openai","useFetchLlmPluginStatus","aiButton","onClickSearchTerm","searchInputElement","valueSetter","getOwnPropertyDescriptor","prototypeValueSetter","getPrototypeOf","call","setNativeValue","textContent","dispatchEvent","Event","bubbles","MARKDOWN_OPTIONS","component","searchLink","AiReply","reply","messages","role","Markdown","hr","textarea","sendButton","FollowUpForm","onSubmit","question","onChangeInput","onClickSend","setQuestion","questionToSend","useFollowUpForm","TextArea","shiftKey","prompts","system","empty","single","profileType","profiles","anton","buildPrompts","systemPrompt","userPrompt","ProfileApiClient","params","searchParams","URLSearchParams","until","maxNodes","SceneAiPanel","validateFetchParams","isDiff","fetchParams","useSceneAiPanel","validationError","fetchError","profileApiClient","flatMap","useFetchDotProfiles","llmError","retry","setReply","replyHasStarted","setReplyHasStarted","replyHasFinished","setReplyHasFinished","setMessages","setError","subscription","setSubscription","sendMessages","messagesToSend","next","complete","askFollowupQuestion","messagesToAdd","hasStarted","hasFinished","useOpenAiChatCompletions","shouldDisplayReply","shouldDisplayFollowUpForm","submitFollowupQuestion","sidePanel","InlineBanner","p","retryButton","EventDiffAutoSelect","EventDiffChoosePreset","DiffProfileApiClient","leftQuery","leftFrom","leftTimeRange","leftUntil","rightQuery","rightFrom","rightTimeRange","rightUntil","useFetchDiffProfile","enabled","baselineTimeRange","baselineQuery","comparisonTimeRange","comparisonQuery","useMaxNodesFromUrl","diffProfileApiClient","refetch","placeholderData","previousData","profile","version","flamebearer","metadata","isAbortError","MissingSelectionsBanner","onClickAutoSelect","onClickChoosePreset","onOpenLearnHow","isCollapseOpen","setIsCollapseOpen","infoMsg","textButton","Collapse","collapsible","collapse","onToggle","collapseContent","ol","li","img","alt","SceneDiffFlameGraph","profileMetricType","aiPanel","useSceneDiffFlameGraph","useDiffTimeRanges","settings","fetchSettingsError","useFetchPluginSettings","isDiffQueryEnabled","fetchProfileError","noProfileDataAvailable","numTicks","shouldDisplayFlamegraph","hasMissingSelections","ai","wholeRange","isAiButtonDisabled","displayWarning","panelTitle","flex","flamegraphPanel","FlameGraph","enableFlameGraphDotComExport","collapsedFlamegraphs","FEEDBACK_FORM_URL","GiveFeedbackButton","wrapper","feedback","rel","Badge","paddingTop","alignSelf","bodySmall","ScenePresetsPicker","openSelect","isSelectOpen","closeSelect","isModalOpen","presetsContainer","PRESETS","onChangePreset","onOpenSelect","onCloseSelect","onClickSave","Modal","closeOnEscape","closeOnBackdropClick","onDismiss","closeModal","ButtonRow","baseline","comparison","syncYAxis","maxima","cloneDeep","updateTimeseriesAxis","SceneExploreDiffFlameGraph","locationService","baselinePanel","comparisonPanel","presetsPicker","targetPanel","syncTimeRanges","columns","VcsClient","githubLogin","authorizationCode","githubApp","clientID","GitSessionCookie","isUserTokenExpired","biasMs","Date","now","expiry","getTime","decode","decoded","atob","isLegacy","tryDecode","input","oauthTokenMetadata","GITHUB_SESSION_COOKIE_NAME","InternalGitSessionCookieManager","getCookie","syncCookieWithBrowser","sessionCookie","setCookie","cookie","rawCookie","getCookieFromJar","deleteLegacyCookie","deleteCookie","jar","ck","gitSessionCookieManager","POPUP_WIDTH","POPUP_HEIGHT","openLoginPopup","clientId","nonce","oauthURL","URL","btoa","redirect_uri","buildGitHubAuthURL","outerWidth","screenX","outerHeight","screenY","vcsClient","privateVcsClient","externalWindow","setExternalWindow","displayError","authFromUrl","urlSearchParams","stateValue","usePollGitHubPopup","setSessionCookie","checkPopup","closed","tryGetWindowSearchParams","DEFAULT_GITHUB_CONTEXT","isLoginInProgress","isLoggedIn","isSessionExpired","login","GitHubContext","createContext","PLACEHOLDER_COMMIT_DATA","sha","date","author","avatarURL","PrivateVcsClient","repositoryUrl","gitRef","localPath","rootPath","postWithRefresh","repositoryURL","commits","getCommit","catch","refreshSession","path","isRefreshing","queueRequest","sessionManager","BIAS_MS","flushQueue","post","resolve","reject","pendingQueue","err","callback","fromCharCode","crypto","getRandomValues","Uint8Array","GitHubContextProvider","setIsLoginInProgress","nextValue","useGithubSessionCookie","newIsLoginInProgress","Provider","buildFlameGraphQueryRunner","PprofRequest","Message","profile_typeID","label_selector","max_nodes","PprofApiClient","buildPprofRequest","encode","finish","selectMergeProfile","headers","Blob","blob","selectMergeProfileJson","stackTrace","stackTraceSelector","call_site","getExportFilename","dateString","FlamegraphDotComApiClient","upload","fileTypeData","units","spyName","flamegraphDotComApiClient","SceneExportMenu","fetchFlamebearerProfile","DEFAULT_SETTINGS","fetchPprofProfile","pprofApiClient","Response","stream","pipeThrough","CompressionStream","useSceneExportMenu","downloadJson","filename","encodeURIComponent","saveAs","downloadPprof","uploadToFlamegraphDotCom","dlLink","createElement","appendChild","click","removeChild","shouldDisplayFlamegraphDotCom","downloadPng","toBlob","useGitHubContext","useContext","useGitHubIntegration","isFunctionDetailsEnabled","enableFunctionDetails","stacktrace","setStacktrace","getExtraFlameGraphMenuItems","levelItem","dp","getDisplayProcessor","createTheme","node","idx","itemIndexes","parents","buildStackTrace","Menu","Item","buildSuggestionPrompts","functionDetails","lines","line","cum","codeInfoToAnnotatedCode","useAiSuggestionsPanel","suggestionPromptInputs","useOpenAiSuggestions","AiSuggestionsPanel","buildGithubUrlForFunction","startLine","newUrl","org","repo","VERTICAL_LINES_PADDING","useCodeContainer","openAiSuggestions","setOpenAiSuggestions","fileInfo","repository","getFile","useFetchVCSFile","fileName","git_ref","root_path","fileContent","callSitesMap","callSites","allLines","firstLineIndex","lastLineIndex","lineNumber","callSite","number","flat","buildLineProfiles","buildPlaceholderLineProfiles","isLoadingCode","githubUrl","noCodeAvailable","buildUnitFormatter","Code","onOptimizeCodeClick","fmt","formatValue","n","formatted","trimIndentPrefix","sumSelf","sumTotal","accSelf","accTotal","header","breakdownLabel","buttons","LinkButton","pre","codeBlock","highlighted","codeBlockHeader","formatLine","self","cols","padStart","commonPrefix","getIndentPrefix","longestCommonPrefix","prefixLen","CodeContainer","getElementById","scrollIntoView","behavior","ellipsis","GitHubRepository","enableIntegration","commitUrl","commitName","getCommitsWithSamples","functionsDetails","totalSamples","details","commit","samples","GITHUB_URL","getRepositoryDetails","isGitHub","functionVersion","buildDetails","func","mapping","stringTable","buildId","sampleType","convertSample","fnName","locations","functions","mappings","sample","versions","locationIdSet","locationId","functionId","mappingId","addCallSiteValue","fetchCommitsInfo","getCommits","getTotalSum","fd","sortByTotal","useFetchFunctionsDetails","isGitHubLogged","queryError","pprof","l","function","convertPprofToFunctionDetails","CUTOFFS","Infinity","UNITS","RTF","RelativeTimeFormat","numeric","DTF","DateTimeFormat","year","month","day","formatCommitDate","commitDate","timeMs","deltaSeconds","unitIndex","findIndex","cutoff","abs","divisor","getRelativeTimeString","firstLine","secondLine","avatar","CommitOption","commitAuthor","commitAuthorAvatarUrl","samplePercent","getCommitShortSha","getCommitShortMessage","CommitOptionSelected","CommitSelect","selectedCommit","isSearchable","formatOptionLabel","formatOption","formatOptionMeta","selectValue","GitHubIntegrationBanner","buttonContent","TextLink","external","InlineSpinnerComponent","InlineSpinner","SceneFunctionDetailsPanel","useSceneFunctionDetailsPanel","currentFunctionDetails","fetchFunctionDetailsError","prevFunctionsDetails","setPrevFunctionsDetails","setCurrentFunctionDetails","isGitHubBannerDismissed","setIsGitHubBannerDismissed","GITHUB_INTEGRATION","isGitHubRepo","isGitHubSupported","endsWith","shouldDisplayGitHubBanner","selectCommit","copyFilePathToClipboard","navigator","clipboard","writeText","displaySuccess","dismissGitHubBanner","LABEL_WIDTH","row","InlineLabel","textValue","SceneFlameGraph","dataSubscription","stateSubscription","newDataState","lastTimeRange","exportMenu","functionDetailsPanel","useSceneFlameGraph","$dataState","isLight","getTheme","isFetchingSettingsError","isFetchingProfileData","profileData","hasProfileData","export","gitHub","gitHubIntegration","disableCollapsing","getExtraContextMenuButtons","extraHeaderElements","keepFocusOnDataChange","SceneExploreServiceFlameGraph","mainTimeseries","onClickShareLink","shareableUrl","builsShareableUrl","ExplorationTypeSelector","activeIndex","explorationTypeContainer","breadcrumb","currentIndex","extraClasses","Fragment","button","arrow","Header","chromeHeaderHeight","useChromeHeaderHeight","explorationType","onChangeExplorationType","timePickerControl","refreshPickerControl","ExplorationType","DIFF_FLAME_GRAPH","dataSourceVariable","bodySceneObject","sceneVariables","navigate","useNavigate","onClickAdHoc","PLUGIN_BASE_URL","ROUTES","ADHOC","referrer","onClickUserSettings","SETTINGS","useHeader","appControls","appControlsLeft","EXPLORATION_TYPE_OPTIONS","appControlsRight","appMiscButtons","PluginInfo","sceneVariable","sceneVariableLabel","gridControl","varSub","subscribeToVariableChanges","eventsSub","setExplorationType","DEFAULT_EXPLORATION_TYPE","registerRuntimeDataSources","sceneUtils","registerRuntimeDataSource","serviceNameSub","profilesSub","comesFromUserAction","labelsSub","flameGraphSub","diffFlameGraphSub","bodySceneOptions","resetVariables","buildBodyScene","nextExplorationType","SplitLayout","useProfilesExplorer","getUrlSyncManager","initSync","ProfilesExplorerView","sceneProfilesExplorer","useReportPageInitialized","DATETIME_FORMATTER","hour12","hour","minute","second","formatToParts","dateForExportFilename","fromKey","toKey","search","appName","timeRanges","useExportMenu","customExportName","dataStr","ExportMenu","ExportDataComponent","ExportData","getNodes","nodes","itemOffset","val","selfRight","valRight","valTotal","offsetRight","offsetTotal","FlameGraphComponent","vertical","dataFrame","levels","nodeLevels","currentNodeStart","prevLevel","prevLevelOffset","prevLevelNode","parentNodeStart","parentNodeEnd","stack","levelValues","selfValues","valueValues","selfRightValues","valueRightValues","valueUnit","frame","preferredVisualisationType","createDataFrame","flamebearerToDataFrameDTO","GrafanaFlameGraph","msgs","msg","handheldBy","getAppEvents","publish","AppEvents","alertError","alertWarning","alertSuccess","PROFILES_EXPLORER_PAGE_NAME","EXPLORE","getCurrentPage","pop","getMetaProperties","appRelease","apps","PYROSCOPE_APP_ID","appVersion","GIT_COMMIT","page","view","grafanaReportInteraction","pushNewUrl","useLocation","newParams","newSearchParams","useUrlSearchParams","setMaxNodes","newMaxNodes","hasMaxNodes","useSetDefaultMaxNodes","SettingsApiClient","setting","PLUGIN_SETTING_NAME","newSettings","settingsApiClient","mutateAsync","mutate","useMutation","mutationFn","networkMode","initialized","setInitialized"],"sourceRoot":""}